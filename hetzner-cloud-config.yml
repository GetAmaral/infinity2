#cloud-config

# ========================================
# INFINITY PRODUCTION VPS - AUTOMATED SETUP
# ========================================
# Hetzner Cloud - Ubuntu 24.04 LTS
#
# Application: Infinity Learning Management System
# Features: Multi-tenant, Video Streaming (HLS), PDF Generation, i18n
# Tech Stack: Symfony 7.3, PostgreSQL 18, Redis 7, FrankenPHP 1.9
#
# This cloud-config automates:
# - User creation & SSH hardening
# - Docker & Docker Compose installation
# - Firewall & security (UFW, Fail2Ban)
# - System optimization for video processing
# - Backup & monitoring scripts
# - Disk space management
# ========================================

# Set hostname
hostname: infinity-prod
fqdn: infinity-prod.local

# Set timezone (adjust as needed)
timezone: UTC

# ========================================
# USER CREATION
# ========================================
users:
  - name: infinity
    groups: [sudo, docker]
    sudo: ['ALL=(ALL) NOPASSWD:ALL']
    shell: /bin/bash
    ssh_authorized_keys:
      - ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIFHxP2sxsu9vWPOh8AdhFlNEHLTsrmilERY29FzaUlKH infinity-vps-access

# ========================================
# SSH SECURITY HARDENING
# ========================================
ssh_pwauth: false
disable_root: true

# ========================================
# SYSTEM UPDATES
# ========================================
package_update: true
package_upgrade: true

# ========================================
# REQUIRED PACKAGES
# ========================================
packages:
  # Core utilities
  - apt-transport-https
  - ca-certificates
  - curl
  - gnupg
  - lsb-release
  - software-properties-common

  # Development & management tools
  - git
  - wget
  - unzip
  - htop
  - vim
  - nano
  - tree
  - jq

  # Security
  - ufw
  - fail2ban

  # SSL certificates
  - certbot
  - python3-certbot-nginx

  # Monitoring & performance
  - sysstat
  - iotop
  - nethogs

  # System optimization
  - linux-tools-common
  - linux-tools-generic

# ========================================
# CLOUD-INIT EXECUTION COMMANDS
# ========================================
runcmd:
  # ========================================
  # DOCKER INSTALLATION
  # ========================================
  - echo "========================================="
  - echo "Installing Docker & Docker Compose..."
  - echo "========================================="
  - curl -fsSL https://get.docker.com -o /tmp/get-docker.sh
  - sh /tmp/get-docker.sh
  - usermod -aG docker infinity
  - systemctl enable docker
  - systemctl start docker
  - apt-get install -y docker-compose-plugin

  # ========================================
  # SWAP CONFIGURATION (Important for video processing)
  # ========================================
  - echo "========================================="
  - echo "Configuring swap space..."
  - echo "========================================="
  - |
    if [ ! -f /swapfile ]; then
      # Create 4GB swap (adjust based on VPS RAM)
      fallocate -l 4G /swapfile
      chmod 600 /swapfile
      mkswap /swapfile
      swapon /swapfile
      echo '/swapfile none swap sw 0 0' >> /etc/fstab
      # Optimize swap usage (use swap only when needed)
      echo 'vm.swappiness=10' >> /etc/sysctl.conf
      echo 'vm.vfs_cache_pressure=50' >> /etc/sysctl.conf
      sysctl -p
    fi

  # ========================================
  # UFW FIREWALL CONFIGURATION
  # ========================================
  - echo "========================================="
  - echo "Configuring UFW firewall..."
  - echo "========================================="
  - ufw --force default deny incoming
  - ufw --force default allow outgoing
  - ufw --force allow 22/tcp comment 'SSH'
  - ufw --force allow 80/tcp comment 'HTTP'
  - ufw --force allow 443/tcp comment 'HTTPS'
  - ufw --force enable

  # ========================================
  # SSH HARDENING
  # ========================================
  - echo "========================================="
  - echo "Hardening SSH configuration..."
  - echo "========================================="
  - sed -i 's/#PermitRootLogin yes/PermitRootLogin no/' /etc/ssh/sshd_config
  - sed -i 's/#PasswordAuthentication yes/PasswordAuthentication no/' /etc/ssh/sshd_config
  - sed -i 's/#PubkeyAuthentication yes/PubkeyAuthentication yes/' /etc/ssh/sshd_config
  - sed -i 's/#MaxAuthTries 6/MaxAuthTries 3/' /etc/ssh/sshd_config
  - echo "AllowUsers infinity" >> /etc/ssh/sshd_config
  - echo "ClientAliveInterval 300" >> /etc/ssh/sshd_config
  - echo "ClientAliveCountMax 2" >> /etc/ssh/sshd_config
  - systemctl restart ssh

  # ========================================
  # FAIL2BAN CONFIGURATION
  # ========================================
  - echo "========================================="
  - echo "Configuring Fail2Ban..."
  - echo "========================================="
  - systemctl enable fail2ban
  - systemctl start fail2ban

  # ========================================
  # SYSTEM OPTIMIZATION (for video processing)
  # ========================================
  - echo "========================================="
  - echo "Optimizing system for multimedia workloads..."
  - echo "========================================="
  - echo "vm.swappiness=10" >> /etc/sysctl.conf
  - echo "vm.vfs_cache_pressure=50" >> /etc/sysctl.conf
  - echo "net.core.somaxconn=1024" >> /etc/sysctl.conf
  - echo "net.ipv4.tcp_max_syn_backlog=2048" >> /etc/sysctl.conf
  - echo "fs.file-max=2097152" >> /etc/sysctl.conf
  - echo "fs.inotify.max_user_watches=524288" >> /etc/sysctl.conf
  - sysctl -p

  # Increase limits for video processing
  - |
    cat >> /etc/security/limits.conf <<'EOF'
    infinity soft nofile 65536
    infinity hard nofile 65536
    infinity soft nproc 32768
    infinity hard nproc 32768
    EOF

  # ========================================
  # DIRECTORY STRUCTURE
  # ========================================
  - echo "========================================="
  - echo "Creating directory structure..."
  - echo "========================================="
  - mkdir -p /home/infinity/infinity
  - mkdir -p /home/infinity/backups/{database,redis,videos,app}
  - mkdir -p /home/infinity/logs
  - mkdir -p /home/infinity/scripts
  - chown -R infinity:infinity /home/infinity

  # ========================================
  # DOCKER LOG ROTATION
  # ========================================
  - echo "========================================="
  - echo "Configuring Docker log rotation..."
  - echo "========================================="
  - |
    cat > /etc/docker/daemon.json <<'EOF'
    {
      "log-driver": "json-file",
      "log-opts": {
        "max-size": "10m",
        "max-file": "5",
        "compress": "true"
      },
      "storage-driver": "overlay2",
      "userland-proxy": false
    }
    EOF
  - systemctl restart docker

  # ========================================
  # AUTOMATIC SECURITY UPDATES
  # ========================================
  - echo "========================================="
  - echo "Enabling automatic security updates..."
  - echo "========================================="
  - apt-get install -y unattended-upgrades apt-listchanges
  - dpkg-reconfigure -plow unattended-upgrades

  # ========================================
  # LOGROTATE FOR APPLICATION LOGS
  # ========================================
  - |
    cat > /etc/logrotate.d/infinity <<'EOF'
    /home/infinity/logs/*.log {
        daily
        missingok
        rotate 14
        compress
        delaycompress
        notifempty
        create 0640 infinity infinity
        sharedscripts
    }
    EOF

  # ========================================
  # MOTD (Message of the Day)
  # ========================================
  - |
    cat > /etc/motd <<'EOF'

    ╔════════════════════════════════════════════════════════════╗
    ║                                                            ║
    ║           INFINITY PRODUCTION SERVER                       ║
    ║           Learning Management System                       ║
    ║                                                            ║
    ║   Tech Stack: Symfony 7.3 + PostgreSQL 18 + Redis 7       ║
    ║   Features: Multi-tenant, Video Streaming, i18n            ║
    ║                                                            ║
    ╚════════════════════════════════════════════════════════════╝

    📁 Application: /home/infinity/infinity
    📋 Deployment Info: /home/infinity/DEPLOYMENT_INFO.txt
    🔧 Scripts: /home/infinity/scripts/
    💾 Backups: /home/infinity/backups/

    🚀 Quick Commands:
       - View containers: docker ps
       - View logs: cd infinity && docker-compose logs -f app
       - Run backup: /home/infinity/scripts/backup-all.sh
       - Check disk: df -h
       - System stats: htop

    EOF

  # ========================================
  # DEPLOYMENT INFO FILE
  # ========================================
  - |
    cat > /home/infinity/DEPLOYMENT_INFO.txt <<'EOF'
    ╔════════════════════════════════════════════════════════════════════╗
    ║                                                                    ║
    ║              INFINITY PRODUCTION VPS - READY                       ║
    ║                                                                    ║
    ╚════════════════════════════════════════════════════════════════════╝

    🎉 Cloud-Init Setup Complete!

    ═══════════════════════════════════════════════════════════════════
    CONFIGURED COMPONENTS
    ═══════════════════════════════════════════════════════════════════
    ✅ User: infinity (with sudo and Docker permissions)
    ✅ SSH: Hardened (root disabled, key-only auth, MaxAuthTries 3)
    ✅ Firewall: UFW enabled (ports 22, 80, 443)
    ✅ Fail2Ban: Active (SSH brute-force protection)
    ✅ Docker: Installed with Compose plugin
    ✅ Swap: 4GB configured (vm.swappiness=10)
    ✅ System: Optimized for video processing
    ✅ Logs: Rotation configured
    ✅ Security: Automatic updates enabled
    ✅ Backups: Directory structure created

    ═══════════════════════════════════════════════════════════════════
    NEXT STEPS - DEPLOYMENT CHECKLIST
    ═══════════════════════════════════════════════════════════════════

    1️⃣  CONFIGURE DNS
        - Point your-domain.com → VPS_IP
        - Point *.your-domain.com → VPS_IP (wildcard)
        - Wait 15-60 minutes for propagation

    2️⃣  CLONE REPOSITORY
        cd /home/infinity
        git clone YOUR_REPO_URL infinity
        cd infinity

    3️⃣  CONFIGURE ENVIRONMENT
        cp .env.production.template .env.prod
        nano .env.prod

        ⚠️  IMPORTANT: Update these values!
        - POSTGRES_PASSWORD (generate: openssl rand -base64 24)
        - APP_SECRET (generate: openssl rand -hex 32)
        - DEFAULT_URI (your domain)
        - MAILER_DSN (your SMTP)
        - CORS_ALLOW_ORIGIN (your domain pattern)

    4️⃣  OBTAIN SSL CERTIFICATE
        sudo certbot certonly --manual \
          --preferred-challenges dns \
          -d your-domain.com \
          -d *.your-domain.com

        Follow prompts to add DNS TXT record

    5️⃣  UPDATE CONFIGURATIONS
        - nginx/conf/default.conf (update domain and SSL paths)
        - docker-compose.yml (add restart policies, remove exposed ports)

    6️⃣  DEPLOY APPLICATION
        docker-compose --env-file .env.prod up -d database redis
        sleep 30
        docker-compose --env-file .env.prod build --no-cache app
        docker-compose --env-file .env.prod up -d app
        sleep 60
        docker-compose --env-file .env.prod exec app \
          php bin/console doctrine:migrations:migrate --no-interaction
        docker-compose --env-file .env.prod exec app \
          php bin/console cache:clear --env=prod --no-debug
        docker-compose --env-file .env.prod exec app \
          php bin/console cache:warmup --env=prod --no-debug
        docker-compose --env-file .env.prod up -d nginx messenger_worker

    7️⃣  CONFIGURE BACKUPS
        crontab -e
        # Add: 0 2 * * * /home/infinity/scripts/backup-all.sh

    8️⃣  SETUP MONITORING
        - Configure external monitoring (UptimeRobot, Pingdom)
        - Monitor: https://your-domain.com/health

    9️⃣  CREATE ADMIN USER
        See PRODUCTION_DEPLOYMENT.md - Phase 5

    🔟  VERIFY DEPLOYMENT
        curl https://your-domain.com/health
        docker-compose --env-file .env.prod ps

    ═══════════════════════════════════════════════════════════════════
    IMPORTANT DIRECTORIES
    ═══════════════════════════════════════════════════════════════════
    📁 Application:     /home/infinity/infinity
    📁 Backups:         /home/infinity/backups/
    📁 Scripts:         /home/infinity/scripts/
    📁 Logs:            /home/infinity/logs/

    ═══════════════════════════════════════════════════════════════════
    SYSTEM INFORMATION
    ═══════════════════════════════════════════════════════════════════
    🖥️  Hostname:        $(hostname)
    🌐 IP Address:       $(hostname -I | awk '{print $1}')
    💿 Disk Usage:       $(df -h / | awk 'NR==2 {print $3 " / " $2 " (" $5 ")"}')
    🧠 Memory:           $(free -h | awk 'NR==2 {print $3 " / " $2}')
    🔄 Swap:             $(free -h | awk 'NR==3 {print $3 " / " $2}')
    🐳 Docker:           $(docker --version)
    📦 Docker Compose:   $(docker compose version)

    ═══════════════════════════════════════════════════════════════════
    SSH ACCESS
    ═══════════════════════════════════════════════════════════════════
    ssh -i ~/.ssh/infinity_vps infinity@YOUR_VPS_IP

    ═══════════════════════════════════════════════════════════════════
    SECURITY FEATURES
    ═══════════════════════════════════════════════════════════════════
    ✅ Root login disabled
    ✅ Password authentication disabled
    ✅ SSH key-only authentication (Ed25519)
    ✅ Max auth tries: 3
    ✅ Firewall active (UFW)
    ✅ Fail2Ban protecting SSH
    ✅ Automatic security updates enabled
    ✅ Docker daemon secured
    ✅ Swap configured for stability

    ═══════════════════════════════════════════════════════════════════
    DOCUMENTATION
    ═══════════════════════════════════════════════════════════════════
    📖 Full Guide: PRODUCTION_DEPLOYMENT.md
    ✅ Checklist: DEPLOYMENT_CHECKLIST.md
    📋 Reference: CLAUDE.md
    🔧 Scripts: /home/infinity/scripts/

    ═══════════════════════════════════════════════════════════════════
    Generated: $(date)
    ═══════════════════════════════════════════════════════════════════
    EOF
  - chown infinity:infinity /home/infinity/DEPLOYMENT_INFO.txt

  # ========================================
  # FIX OWNERSHIP (after write_files section creates the scripts)
  # ========================================
  - sleep 5
  - chown -R infinity:infinity /home/infinity/scripts /home/infinity/logs /home/infinity/backups
  - chmod +x /home/infinity/scripts/*.sh

# ========================================
# CONFIGURATION FILES
# ========================================
write_files:
  # ═══════════════════════════════════════
  # FAIL2BAN CONFIGURATION
  # ═══════════════════════════════════════
  - path: /etc/fail2ban/jail.local
    content: |
      [DEFAULT]
      bantime = 3600
      findtime = 600
      maxretry = 5
      destemail = root@localhost
      sendername = Fail2Ban

      [sshd]
      enabled = true
      port = 22
      logpath = /var/log/auth.log
      maxretry = 3
      bantime = 7200

      [nginx-http-auth]
      enabled = true
      port = http,https
      logpath = /var/log/nginx/error.log
      maxretry = 5

      [nginx-noscript]
      enabled = true
      port = http,https
      logpath = /var/log/nginx/access.log
      maxretry = 6

      [nginx-badbots]
      enabled = true
      port = http,https
      logpath = /var/log/nginx/access.log
      maxretry = 2
    permissions: '0644'

  # ═══════════════════════════════════════
  # DOCKER HEALTH CHECK SCRIPT
  # ═══════════════════════════════════════
  - path: /home/infinity/scripts/docker-health-check.sh
    content: |
      #!/bin/bash
      # ========================================
      # Docker Services Health Check
      # ========================================
      set -e

      SERVICES="infinity_database infinity_redis infinity_app infinity_nginx infinity_messenger_worker"
      FAILED=0

      echo "========================================="
      echo "Docker Health Check - $(date)"
      echo "========================================="

      for service in $SERVICES; do
          if docker ps --filter "name=$service" --filter "status=running" | grep -q "$service"; then
              echo "✅ $service - RUNNING"
          else
              echo "❌ $service - NOT RUNNING"
              FAILED=1
          fi
      done

      echo "========================================="

      if [ $FAILED -eq 0 ]; then
          echo "✅ All services healthy"
          exit 0
      else
          echo "❌ Some services failed"
          exit 1
      fi
    permissions: '0755'

  # ═══════════════════════════════════════
  # DATABASE BACKUP SCRIPT
  # ═══════════════════════════════════════
  - path: /home/infinity/scripts/backup-database.sh
    content: |
      #!/bin/bash
      # ========================================
      # Automated Database Backup Script
      # ========================================
      set -e

      BACKUP_DIR="/home/infinity/backups/database"
      DATE=$(date +%Y%m%d_%H%M%S)
      KEEP_DAYS=30
      LOG_FILE="/home/infinity/logs/backup-database.log"

      echo "=========================================" | tee -a "$LOG_FILE"
      echo "Database Backup - $(date)" | tee -a "$LOG_FILE"
      echo "=========================================" | tee -a "$LOG_FILE"

      # Create backup directory if not exists
      mkdir -p "$BACKUP_DIR"

      # Create backup
      echo "Creating backup: backup_$DATE.sql.gz" | tee -a "$LOG_FILE"

      cd /home/infinity/infinity
      docker-compose --env-file .env.prod exec -T database \
        pg_dump -U infinity_user infinity_db | gzip > "$BACKUP_DIR/backup_$DATE.sql.gz"

      # Check if backup was created
      if [ -f "$BACKUP_DIR/backup_$DATE.sql.gz" ]; then
          SIZE=$(du -h "$BACKUP_DIR/backup_$DATE.sql.gz" | cut -f1)
          echo "✅ Backup created successfully: $SIZE" | tee -a "$LOG_FILE"
      else
          echo "❌ Backup failed!" | tee -a "$LOG_FILE"
          exit 1
      fi

      # Remove old backups
      echo "Removing backups older than $KEEP_DAYS days..." | tee -a "$LOG_FILE"
      find "$BACKUP_DIR" -type f -name "*.sql.gz" -mtime +$KEEP_DAYS -delete

      echo "=========================================" | tee -a "$LOG_FILE"
      echo "Backup completed successfully" | tee -a "$LOG_FILE"
      echo "=========================================" | tee -a "$LOG_FILE"
    permissions: '0755'

  # ═══════════════════════════════════════
  # VIDEO BACKUP SCRIPT
  # ═══════════════════════════════════════
  - path: /home/infinity/scripts/backup-videos.sh
    content: |
      #!/bin/bash
      # ========================================
      # Video Files Backup Script
      # ========================================
      set -e

      BACKUP_DIR="/home/infinity/backups/videos"
      DATE=$(date +%Y%m%d_%H%M%S)
      VIDEO_DIR="/home/infinity/infinity/app/var/videos"
      LOG_FILE="/home/infinity/logs/backup-videos.log"

      echo "=========================================" | tee -a "$LOG_FILE"
      echo "Video Backup - $(date)" | tee -a "$LOG_FILE"
      echo "=========================================" | tee -a "$LOG_FILE"

      # Create backup directory
      mkdir -p "$BACKUP_DIR"

      # Create tarball of video originals (not HLS segments)
      echo "Backing up video originals..." | tee -a "$LOG_FILE"
      tar -czf "$BACKUP_DIR/videos_$DATE.tar.gz" \
        -C "$VIDEO_DIR" originals/ 2>&1 | tee -a "$LOG_FILE"

      # Check backup size
      if [ -f "$BACKUP_DIR/videos_$DATE.tar.gz" ]; then
          SIZE=$(du -h "$BACKUP_DIR/videos_$DATE.tar.gz" | cut -f1)
          echo "✅ Video backup created: $SIZE" | tee -a "$LOG_FILE"
      else
          echo "❌ Video backup failed!" | tee -a "$LOG_FILE"
          exit 1
      fi

      # Keep only last 7 video backups (videos are large)
      find "$BACKUP_DIR" -type f -name "videos_*.tar.gz" -mtime +7 -delete

      echo "=========================================" | tee -a "$LOG_FILE"
      echo "Video backup completed" | tee -a "$LOG_FILE"
      echo "=========================================" | tee -a "$LOG_FILE"
    permissions: '0755'

  # ═══════════════════════════════════════
  # COMPLETE BACKUP SCRIPT
  # ═══════════════════════════════════════
  - path: /home/infinity/scripts/backup-all.sh
    content: |
      #!/bin/bash
      # ========================================
      # Complete Backup Script
      # ========================================
      set -e

      LOG_FILE="/home/infinity/logs/backup-all.log"

      echo "=========================================" | tee -a "$LOG_FILE"
      echo "Complete Backup - $(date)" | tee -a "$LOG_FILE"
      echo "=========================================" | tee -a "$LOG_FILE"

      # Database backup
      echo "1/2 - Running database backup..." | tee -a "$LOG_FILE"
      /home/infinity/scripts/backup-database.sh

      # Video backup (weekly only)
      DAY=$(date +%u)
      if [ "$DAY" -eq 7 ]; then
          echo "2/2 - Running video backup (Sunday)..." | tee -a "$LOG_FILE"
          /home/infinity/scripts/backup-videos.sh
      else
          echo "2/2 - Skipping video backup (only on Sundays)" | tee -a "$LOG_FILE"
      fi

      echo "=========================================" | tee -a "$LOG_FILE"
      echo "All backups completed" | tee -a "$LOG_FILE"
      echo "=========================================" | tee -a "$LOG_FILE"
    permissions: '0755'

  # ═══════════════════════════════════════
  # DISK SPACE MONITOR
  # ═══════════════════════════════════════
  - path: /home/infinity/scripts/monitor-disk.sh
    content: |
      #!/bin/bash
      # ========================================
      # Disk Space Monitoring Script
      # ========================================

      THRESHOLD=80
      LOG_FILE="/home/infinity/logs/disk-monitor.log"

      USAGE=$(df -h / | awk 'NR==2 {print $5}' | sed 's/%//')

      if [ "$USAGE" -gt "$THRESHOLD" ]; then
          echo "⚠️  WARNING: Disk usage at ${USAGE}% - $(date)" | tee -a "$LOG_FILE"

          # Show largest directories
          echo "Largest directories:" | tee -a "$LOG_FILE"
          du -h /home/infinity/infinity/app/var/videos | sort -rh | head -5 | tee -a "$LOG_FILE"
      else
          echo "✅ Disk usage OK: ${USAGE}% - $(date)" | tee -a "$LOG_FILE"
      fi
    permissions: '0755'

  # ═══════════════════════════════════════
  # CLEANUP OLD HLS SEGMENTS (Optional)
  # ═══════════════════════════════════════
  - path: /home/infinity/scripts/cleanup-hls.sh
    content: |
      #!/bin/bash
      # ========================================
      # Cleanup Old HLS Segments
      # ========================================
      # Use this to regenerate HLS from originals if needed

      HLS_DIR="/home/infinity/infinity/app/var/videos/hls"
      LOG_FILE="/home/infinity/logs/cleanup-hls.log"

      echo "=========================================" | tee -a "$LOG_FILE"
      echo "HLS Cleanup - $(date)" | tee -a "$LOG_FILE"
      echo "=========================================" | tee -a "$LOG_FILE"

      # Count current HLS directories
      COUNT=$(find "$HLS_DIR" -maxdepth 1 -type d | wc -l)
      echo "Current HLS directories: $COUNT" | tee -a "$LOG_FILE"

      # You can add logic here to remove specific old segments
      # For now, just report

      echo "=========================================" | tee -a "$LOG_FILE"
      echo "HLS cleanup completed" | tee -a "$LOG_FILE"
      echo "=========================================" | tee -a "$LOG_FILE"
    permissions: '0755'

# ========================================
# BOOT COMMANDS
# ========================================
bootcmd:
  - echo "Cloud-init boot started - $(date)"

# ========================================
# FINAL MESSAGE
# ========================================
final_message: |
  ╔════════════════════════════════════════════════════════════════════╗
  ║                                                                    ║
  ║             INFINITY PRODUCTION VPS - SETUP COMPLETE               ║
  ║                                                                    ║
  ╚════════════════════════════════════════════════════════════════════╝

  Cloud-init finished at $TIMESTAMP
  Duration: $UPTIME seconds

  🎉 Server is ready for application deployment!

  📋 Next steps:
     1. SSH into server: ssh -i ~/.ssh/infinity_vps infinity@YOUR_VPS_IP
     2. Read deployment info: cat /home/infinity/DEPLOYMENT_INFO.txt
     3. Follow PRODUCTION_DEPLOYMENT.md guide

  🔧 Installed & Configured:
     ✅ Docker & Docker Compose
     ✅ UFW Firewall (ports 22, 80, 443)
     ✅ Fail2Ban (SSH protection)
     ✅ 4GB Swap (optimized for video processing)
     ✅ System tuning (multimedia workloads)
     ✅ Backup scripts (database, videos)
     ✅ Monitoring scripts (disk, health)
     ✅ Log rotation
     ✅ Automatic security updates

  ╚════════════════════════════════════════════════════════════════════╝

# ========================================
# OPTIONAL: AUTO-REBOOT AFTER SETUP
# ========================================
# Uncomment to reboot after cloud-init completes
# power_state:
#   mode: reboot
#   message: "Rebooting after cloud-init setup"
#   timeout: 30
#   condition: true
