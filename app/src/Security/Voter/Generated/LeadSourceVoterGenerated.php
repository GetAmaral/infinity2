<?php

declare(strict_types=1);

namespace App\Security\Voter\Generated;

use App\Entity\LeadSource;
use App\Entity\User;
use Symfony\Component\Security\Core\Authentication\Token\TokenInterface;
use Symfony\Component\Security\Core\Authorization\Voter\Voter;
use Symfony\Component\Security\Core\Role\RoleHierarchyInterface;

/**
 * LeadSource Voter (Generated Base Class)
 *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom authorization logic to LeadSourceVoter.php instead.
 *
 * @generated by Genmax Code Generator
 */
abstract class LeadSourceVoterGenerated extends Voter
{
    public function __construct(
        protected readonly RoleHierarchyInterface $roleHierarchy
    ) {}

    // Permission constants
    public const VIEW = 'LEAD_SOURCE_VIEW';
    public const EDIT = 'LEAD_SOURCE_EDIT';
    public const DELETE = 'LEAD_SOURCE_DELETE';

    /**
     * Check if user has a specific role (respects role hierarchy)
     */
    protected function hasRole(User $user, string $role): bool
    {
        $userRoles = $this->roleHierarchy->getReachableRoleNames($user->getRoles());
        return in_array($role, $userRoles, true);
    }

    protected function supports(string $attribute, mixed $subject): bool
    {
        // Check if this is a supported permission
        if (!in_array($attribute, [
            self::VIEW,
            self::EDIT,
            self::DELETE,
        ], true)) {
            return false;
        }

        // For class-based permissions (LIST, CREATE), subject can be null
        if (in_array($attribute, [
        ], true)) {
            return true;
        }

        // For instance-based permissions, subject must be a LeadSource
        return $subject instanceof LeadSource;
    }

    protected function voteOnAttribute(string $attribute, mixed $subject, TokenInterface $token): bool
    {
        $user = $token->getUser();

        // User must be logged in
        if (!$user instanceof User) {
            return false;
        }

        /** @var LeadSource|null $leadSource */
        $leadSource = $subject;

        return match ($attribute) {
            self::VIEW => $this->canVIEW($leadSource, $user),
            self::EDIT => $this->canEDIT($leadSource, $user),
            self::DELETE => $this->canDELETE($leadSource, $user),
            default => false,
        };
    }

    /**
     * Check if user can view LeadSource(s)     */
    protected function canVIEW(?LeadSource $leadSource, User $user): bool
    {
        if (!$leadSource) {
            return false;
        }

        // ADMIN and SUPER_ADMIN can do anything
        if ($this->hasRole($user, 'ROLE_ADMIN')
            || $this->hasRole($user, 'ROLE_SUPER_ADMIN')) {
            return true;
        }

        // Must be in same organization
        $sameOrganization = $user->getOrganization()
            && $leadSource->getOrganization()
            && $user->getOrganization()->getId()->equals($leadSource->getOrganization()->getId());

        if (!$sameOrganization) {
            return false;
        }

        // All authenticated users in same organization can view
        return true;
    }

    /**
     * Check if user can edit LeadSource(s)     */
    protected function canEDIT(?LeadSource $leadSource, User $user): bool
    {
        if (!$leadSource) {
            return false;
        }

        // ADMIN and SUPER_ADMIN can do anything
        if ($this->hasRole($user, 'ROLE_ADMIN')
            || $this->hasRole($user, 'ROLE_SUPER_ADMIN')) {
            return true;
        }

        // Must be in same organization
        $sameOrganization = $user->getOrganization()
            && $leadSource->getOrganization()
            && $user->getOrganization()->getId()->equals($leadSource->getOrganization()->getId());

        if (!$sameOrganization) {
            return false;
        }

        // ORGANIZATION_ADMIN can edit within their organization
        if ($this->hasRole($user, 'ROLE_ORGANIZATION_ADMIN')) {
            return true;
        }

        // Regular users can edit (customize as needed)
        return true;
    }

    /**
     * Check if user can delete LeadSource(s)     */
    protected function canDELETE(?LeadSource $leadSource, User $user): bool
    {
        if (!$leadSource) {
            return false;
        }

        // ADMIN and SUPER_ADMIN can do anything
        if ($this->hasRole($user, 'ROLE_ADMIN')
            || $this->hasRole($user, 'ROLE_SUPER_ADMIN')) {
            return true;
        }

        // Must be in same organization
        $sameOrganization = $user->getOrganization()
            && $leadSource->getOrganization()
            && $user->getOrganization()->getId()->equals($leadSource->getOrganization()->getId());

        if (!$sameOrganization) {
            return false;
        }

        // Only ORGANIZATION_ADMIN can delete
        return $this->hasRole($user, 'ROLE_ORGANIZATION_ADMIN');
    }

}
