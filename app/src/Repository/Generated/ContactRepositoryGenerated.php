<?php

declare(strict_types=1);

namespace App\Repository\Generated;

use App\Entity\Contact;
use App\Repository\Base\BaseRepository;

/**
 * ContactRepository (Generated Base Class)
 *
 * Customer contacts with full profile and interaction history
 *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom query methods to ContactRepository.php instead.
 *
 * Provides:
 * - Full-text search with UNACCENT (inherited from BaseRepository)
 * - Multi-column filtering and sorting
 * - Pagination with metadata
 * - Date range and boolean filters
 * - Relationship field filtering
 *
 * @extends BaseRepository<Contact>
 * @generated by Genmax Code Generator
 */
abstract class ContactRepositoryGenerated extends BaseRepository
{
    /**
     * Get entity name for search configuration
     */
    protected function getEntityName(): string
    {
        return 'contact';
    }

    /**
     * Get searchable fields for full-text search
     * These fields will be searched using UNACCENT and LIKE
     *
     * @return array<string>
     */
    protected function getSearchableFields(): array
    {
        return [            'firstName',            'name',            'lastName',            'address',            'billingAddress',            'title',            'department',            'leadSource',            'document',            'email',            'geo',            'neighborhood',            'nickname',            'notes',            'origin',            'phone',            'postalCode',            'profilePictureUrl',        ];
    }

    /**
     * Define sortable fields mapping
     * Maps API field names to entity properties
     *
     * @return array<string, string>
     */
    protected function getSortableFields(): array
    {
        return [            'firstName' => 'firstName',            'name' => 'name',            'lastName' => 'lastName',            'accountManager' => 'accountManager',            'accountTeam' => 'accountTeam',            'address' => 'address',            'billingAddress' => 'billingAddress',            'billingCity' => 'billingCity',            'birthDate' => 'birthDate',            'campaigns' => 'campaigns',            'city' => 'city',            'company' => 'company',            'deals' => 'deals',            'department' => 'department',            'leadSource' => 'leadSource',            'lastContactDate' => 'lastContactDate',            'document' => 'document',            'email' => 'email',            'eventAttendances' => 'eventAttendances',            'firstTalkDate' => 'firstTalkDate',            'gender' => 'gender',            'geo' => 'geo',            'lastTalkDate' => 'lastTalkDate',            'neighborhood' => 'neighborhood',            'nickname' => 'nickname',            'notes' => 'notes',            'origin' => 'origin',            'phone' => 'phone',            'postalCode' => 'postalCode',            'primaryDeals' => 'primaryDeals',            'profilePictureUrl' => 'profilePictureUrl',            'ranking' => 'ranking',            'score' => 'score',            'socialMedias' => 'socialMedias',            'status' => 'status',            'talks' => 'talks',            'tasks' => 'tasks',            'createdAt' => 'createdAt',            'updatedAt' => 'updatedAt',        ];
    }

    /**
     * Define filterable fields (excludes computed/aggregate fields)
     *
     * @return array<string, string>
     */
    protected function getFilterableFields(): array
    {
        return [            'firstName' => 'firstName',            'lastName' => 'lastName',            'department' => 'department',            'leadSource' => 'leadSource',            'score' => 'score',            'createdAt' => 'createdAt',            'updatedAt' => 'updatedAt',        ];
    }

    /**
     * Define relationship filter mappings
     * Allows filtering by related entity fields
     *
     * Example: 'ownerName' filters by owner.name
     *
     * @return array<string, array{relation: string, field: string}>
     */
    protected function getRelationshipFilterFields(): array
    {
        return [        ];
    }

    /**
     * Define boolean fields for equality filtering
     *
     * @return array<string>
     */
    protected function getBooleanFilterFields(): array
    {
        return [            'emailOptOut',            'doNotCall',        ];
    }

    /**
     * Define date/datetime fields for range filtering
     * Supports format: "from:to" (e.g., "2024-01-01:2024-12-31")
     *
     * @return array<string>
     */
    protected function getDateFilterFields(): array
    {
        return [            'birthDate',            'lastContactDate',            'firstTalkDate',            'lastTalkDate',            'createdAt',            'updatedAt',        ];
    }

    /**
     * Transform Contact entity to array for API response
     * Override this method to customize API output format
     *
     * @param object $entity
     * @return array<string, mixed>
     */
    protected function entityToArray(object $entity): array
    {
        assert($entity instanceof Contact);

        return [
            'organization' => $entity->getOrganization()?->getId()?->toString() ?? '',
            'organizationName' => $entity->getOrganization()?->getName() ?? '',
            'firstName' => $entity->getFirstName(),
            'name' => $entity->getName(),
            'lastName' => $entity->getLastName(),
            'accountManager' => $entity->getAccountManager()?->getId()?->toString() ?? '',
            'accountManagerName' => $entity->getAccountManager()?->getName() ?? '',
            'website' => $entity->getWebsite(),
            'accountTeamCount' => $entity->getAccountTeam()->count(),
            'address' => $entity->getAddress(),
            'billingAddress' => $entity->getBillingAddress(),
            'billingCity' => $entity->getBillingCity()?->getId()?->toString() ?? '',
            'billingCityName' => $entity->getBillingCity()?->getName() ?? '',
            'birthDate' => $entity->getBirthDate()?->format('c'),
            'campaignsCount' => $entity->getCampaigns()->count(),
            'city' => $entity->getCity()?->getId()?->toString() ?? '',
            'cityName' => $entity->getCity()?->getName() ?? '',
            'company' => $entity->getCompany()?->getId()?->toString() ?? '',
            'companyName' => $entity->getCompany()?->getName() ?? '',
            'dealsCount' => $entity->getDeals()->count(),
            'mobilePhone' => $entity->getMobilePhone(),
            'linkedinUrl' => $entity->getLinkedinUrl(),
            'title' => $entity->getTitle(),
            'department' => $entity->getDepartment(),
            'leadSource' => $entity->getLeadSource(),
            'preferredContactMethod' => $entity->getPreferredContactMethod(),
            'lastContactDate' => $entity->getLastContactDate()?->format('c'),
            'document' => $entity->getDocument(),
            'email' => $entity->getEmail(),
            'eventAttendancesCount' => $entity->getEventAttendances()->count(),
            'firstTalkDate' => $entity->getFirstTalkDate()?->format('c'),
            'geo' => $entity->getGeo(),
            'lastTalkDate' => $entity->getLastTalkDate()?->format('c'),
            'neighborhood' => $entity->getNeighborhood(),
            'nickname' => $entity->getNickname(),
            'notes' => $entity->getNotes(),
            'origin' => $entity->getOrigin(),
            'phone' => $entity->getPhone(),
            'postalCode' => $entity->getPostalCode(),
            'primaryDealsCount' => $entity->getPrimaryDeals()->count(),
            'profilePictureUrl' => $entity->getProfilePictureUrl(),
            'socialMediasCount' => $entity->getSocialMedias()->count(),
            'talksCount' => $entity->getTalks()->count(),
            'tasksCount' => $entity->getTasks()->count(),
            'createdAt' => $entity->getCreatedAt()->format('c'),
            'updatedAt' => $entity->getUpdatedAt()->format('c'),
        ];
    }
}
