<?php

declare(strict_types=1);

namespace App\Repository\Generated;

use App\Entity\Event;
use App\Repository\Base\BaseRepository;

/**
 * EventRepository (Generated Base Class)
 *
 * Calendar events, meetings, and appointments
 *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom query methods to EventRepository.php instead.
 *
 * Provides:
 * - Full-text search with UNACCENT (inherited from BaseRepository)
 * - Multi-column filtering and sorting
 * - Pagination with metadata
 * - Date range and boolean filters
 * - Relationship field filtering
 *
 * @extends BaseRepository<Event>
 * @generated by Genmax Code Generator
 */
abstract class EventRepositoryGenerated extends BaseRepository
{
    /**
     * Get entity name for search configuration
     */
    protected function getEntityName(): string
    {
        return 'event';
    }

    /**
     * Get searchable fields for full-text search
     * These fields will be searched using UNACCENT and LIKE
     *
     * @return array<string>
     */
    protected function getSearchableFields(): array
    {
        return [            'name',            'description',            'location',            'meetingUrl',        ];
    }

    /**
     * Define sortable fields mapping
     * Maps API field names to entity properties
     *
     * @return array<string, string>
     */
    protected function getSortableFields(): array
    {
        return [            'name' => 'name',            'startTime' => 'startTime',            'description' => 'description',            'endTime' => 'endTime',            'allDay' => 'allDay',            'location' => 'location',            'meetingUrl' => 'meetingUrl',            'calendar' => 'calendar',            'organizer' => 'organizer',            'attendees' => 'attendees',            'categories' => 'categories',            'attachments' => 'attachments',            'reminders' => 'reminders',            'resourceBookings' => 'resourceBookings',            'parentEvent' => 'parentEvent',            'childrenEvents' => 'childrenEvents',            'originalStartTime' => 'originalStartTime',            'sequence' => 'sequence',            'conferenceData' => 'conferenceData',            'extendedProperties' => 'extendedProperties',            'source' => 'source',            'createdAt' => 'createdAt',            'updatedAt' => 'updatedAt',        ];
    }

    /**
     * Define filterable fields (excludes computed/aggregate fields)
     *
     * @return array<string, string>
     */
    protected function getFilterableFields(): array
    {
        return [            'createdAt' => 'createdAt',            'updatedAt' => 'updatedAt',        ];
    }

    /**
     * Define relationship filter mappings
     * Allows filtering by related entity fields
     *
     * Example: 'ownerName' filters by owner.name
     *
     * @return array<string, array{relation: string, field: string}>
     */
    protected function getRelationshipFilterFields(): array
    {
        return [        ];
    }

    /**
     * Define boolean fields for equality filtering
     *
     * @return array<string>
     */
    protected function getBooleanFilterFields(): array
    {
        return [            'allDay',            'onlineMeeting',            'recurring',            'cancelled',            'draft',            'responseRequested',            'allowNewTimeProposals',            'hideAttendees',            'guestsCanModify',            'guestsCanInviteOthers',            'guestsCanSeeOtherGuests',            'locked',        ];
    }

    /**
     * Define date/datetime fields for range filtering
     * Supports format: "from:to" (e.g., "2024-01-01:2024-12-31")
     *
     * @return array<string>
     */
    protected function getDateFilterFields(): array
    {
        return [            'startTime',            'endTime',            'originalStartTime',            'createdAt',            'updatedAt',        ];
    }

    /**
     * Transform Event entity to array for API response
     * Override this method to customize API output format
     *
     * @param object $entity
     * @return array<string, mixed>
     */
    protected function entityToArray(object $entity): array
    {
        assert($entity instanceof Event);

        return [
            'organization' => $entity->getOrganization()?->getId()?->toString() ?? '',
            'organizationName' => $entity->getOrganization()?->getName() ?? '',
            'name' => $entity->getName(),
            'startTime' => $entity->getStartTime()?->format('c'),
            'description' => $entity->getDescription(),
            'endTime' => $entity->getEndTime()?->format('c'),
            'location' => $entity->getLocation(),
            'meetingUrl' => $entity->getMeetingUrl(),
            'calendar' => $entity->getCalendar()?->getId()?->toString() ?? '',
            'calendarName' => $entity->getCalendar()?->getName() ?? '',
            'organizer' => $entity->getOrganizer()?->getId()?->toString() ?? '',
            'organizerName' => $entity->getOrganizer()?->getName() ?? '',
            'attendeesCount' => $entity->getAttendees()->count(),
            'categoriesCount' => $entity->getCategories()->count(),
            'attachmentsCount' => $entity->getAttachments()->count(),
            'remindersCount' => $entity->getReminders()->count(),
            'resourceBookingsCount' => $entity->getResourceBookings()->count(),
            'parentEvent' => $entity->getParentEvent()?->getId()?->toString() ?? '',
            'parentEventName' => $entity->getParentEvent()?->getName() ?? '',
            'childrenEventsCount' => $entity->getChildrenEvents()->count(),
            'originalStartTime' => $entity->getOriginalStartTime()?->format('c'),
            'workingHoursCount' => $entity->getWorkingHours()->count(),
            'subject' => $entity->getSubject(),
            'notificationsCount' => $entity->getNotifications()->count(),
            'meetingDatasCount' => $entity->getMeetingDatas()->count(),
            'holidaysCount' => $entity->getHolidays()->count(),
            'status' => $entity->getStatus(),
            'showAs' => $entity->getShowAs(),
            'eventType' => $entity->getEventType(),
            'importance' => $entity->getImportance(),
            'sensitivity' => $entity->getSensitivity(),
            'timezone' => $entity->getTimezone(),
            'startTimezone' => $entity->getStartTimezone(),
            'endTimezone' => $entity->getEndTimezone(),
            'locationDisplayName' => $entity->getLocationDisplayName(),
            'locationUrl' => $entity->getLocationUrl(),
            'onlineMeetingProvider' => $entity->getOnlineMeetingProvider(),
            'meetingId' => $entity->getMeetingId(),
            'meetingPassword' => $entity->getMeetingPassword(),
            'recurrenceRule' => $entity->getRecurrenceRule(),
            'responseStatus' => $entity->getResponseStatus(),
            'transparency' => $entity->getTransparency(),
            'externalCalendarId' => $entity->getExternalCalendarId(),
            'externalCalendarProvider' => $entity->getExternalCalendarProvider(),
            'icalUid' => $entity->getIcalUid(),
            'webLink' => $entity->getWebLink(),
            'htmlLink' => $entity->getHtmlLink(),
            'colorId' => $entity->getColorId(),
            'assignedTo' => $entity->getAssignedTo()?->getId()?->toString() ?? '',
            'assignedToName' => $entity->getAssignedTo()?->getName() ?? '',
            'contact' => $entity->getContact()?->getId()?->toString() ?? '',
            'contactName' => $entity->getContact()?->getName() ?? '',
            'company' => $entity->getCompany()?->getId()?->toString() ?? '',
            'companyName' => $entity->getCompany()?->getName() ?? '',
            'deal' => $entity->getDeal()?->getId()?->toString() ?? '',
            'dealName' => $entity->getDeal()?->getName() ?? '',
            'createdAt' => $entity->getCreatedAt()->format('c'),
            'updatedAt' => $entity->getUpdatedAt()->format('c'),
        ];
    }
}
