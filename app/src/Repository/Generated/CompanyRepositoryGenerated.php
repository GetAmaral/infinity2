<?php

declare(strict_types=1);

namespace App\Repository\Generated;

use App\Entity\Company;
use App\Repository\Base\BaseRepository;

/**
 * CompanyRepository (Generated Base Class)
 *
 * Business accounts and company profiles
 *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom query methods to CompanyRepository.php instead.
 *
 * Provides:
 * - Full-text search with UNACCENT (inherited from BaseRepository)
 * - Multi-column filtering and sorting
 * - Pagination with metadata
 * - Date range and boolean filters
 * - Relationship field filtering
 *
 * @extends BaseRepository<Company>
 * @generated by Genmax Code Generator
 */
abstract class CompanyRepositoryGenerated extends BaseRepository
{
    /**
     * Get entity name for search configuration
     */
    protected function getEntityName(): string
    {
        return 'company';
    }

    /**
     * Get searchable fields for full-text search
     * These fields will be searched using UNACCENT and LIKE
     *
     * @return array<string>
     */
    protected function getSearchableFields(): array
    {
        return [            'name',            'description',            'industry',            'website',            'billingAddress',            'legalName',            'shippingAddress',            'shippingPostalCode',            'companyType',            'accountSource',            'rating',            'paymentTerms',            'fiscalYearEnd',            'sicCode',            'naicsCode',            'ownership',            'tickerSymbol',            'linkedInUrl',            'country',            'shippingCountry',            'fax',            'coordinates',            'email',            'mobilePhone',            'notes',            'phone',            'postalCode',            'primaryContactName',            'taxId',            'stateProvince',            'tags',            'companyDomain',        ];
    }

    /**
     * Define sortable fields mapping
     * Maps API field names to entity properties
     *
     * @return array<string, string>
     */
    protected function getSortableFields(): array
    {
        return [            'name' => 'name',            'industry' => 'industry',            'accountManager' => 'accountManager',            'website' => 'website',            'billingAddress' => 'billingAddress',            'legalName' => 'legalName',            'shippingAddress' => 'shippingAddress',            'shippingCity' => 'shippingCity',            'campaigns' => 'campaigns',            'shippingPostalCode' => 'shippingPostalCode',            'annualRevenue' => 'annualRevenue',            'currency' => 'currency',            'companyType' => 'companyType',            'parentCompany' => 'parentCompany',            'accountSource' => 'accountSource',            'rating' => 'rating',            'customerSince' => 'customerSince',            'paymentTerms' => 'paymentTerms',            'creditLimit' => 'creditLimit',            'fiscalYearEnd' => 'fiscalYearEnd',            'city' => 'city',            'sicCode' => 'sicCode',            'naicsCode' => 'naicsCode',            'ownership' => 'ownership',            'tickerSymbol' => 'tickerSymbol',            'doNotContact' => 'doNotContact',            'gdprConsent' => 'gdprConsent',            'country' => 'country',            'shippingCountry' => 'shippingCountry',            'companySize' => 'companySize',            'contacts' => 'contacts',            'coordinates' => 'coordinates',            'deals' => 'deals',            'email' => 'email',            'manufacturedBrands' => 'manufacturedBrands',            'manufacturedProducts' => 'manufacturedProducts',            'mobilePhone' => 'mobilePhone',            'phone' => 'phone',            'postalCode' => 'postalCode',            'primaryContactName' => 'primaryContactName',            'socialMedias' => 'socialMedias',            'status' => 'status',            'suppliedBrands' => 'suppliedBrands',            'suppliedProducts' => 'suppliedProducts',            'taxId' => 'taxId',            'nextActivityDate' => 'nextActivityDate',            'lastActivityDate' => 'lastActivityDate',            'stateProvince' => 'stateProvince',            'lifecycleStage' => 'lifecycleStage',            'companyDomain' => 'companyDomain',            'leadStatus' => 'leadStatus',            'numberOfAssociatedDeals' => 'numberOfAssociatedDeals',            'numberOfAssociatedContacts' => 'numberOfAssociatedContacts',            'public' => 'public',            'createdAt' => 'createdAt',            'updatedAt' => 'updatedAt',        ];
    }

    /**
     * Define filterable fields (excludes computed/aggregate fields)
     *
     * @return array<string, string>
     */
    protected function getFilterableFields(): array
    {
        return [            'industry' => 'industry',            'website' => 'website',            'billingAddress' => 'billingAddress',            'shippingAddress' => 'shippingAddress',            'shippingPostalCode' => 'shippingPostalCode',            'annualRevenue' => 'annualRevenue',            'currency' => 'currency',            'companyType' => 'companyType',            'accountSource' => 'accountSource',            'rating' => 'rating',            'customerSince' => 'customerSince',            'paymentTerms' => 'paymentTerms',            'creditLimit' => 'creditLimit',            'fiscalYearEnd' => 'fiscalYearEnd',            'sicCode' => 'sicCode',            'naicsCode' => 'naicsCode',            'ownership' => 'ownership',            'tickerSymbol' => 'tickerSymbol',            'doNotContact' => 'doNotContact',            'gdprConsent' => 'gdprConsent',            'country' => 'country',            'shippingCountry' => 'shippingCountry',            'companySize' => 'companySize',            'postalCode' => 'postalCode',            'status' => 'status',            'taxId' => 'taxId',            'nextActivityDate' => 'nextActivityDate',            'lastActivityDate' => 'lastActivityDate',            'timeZone' => 'timeZone',            'stateProvince' => 'stateProvince',            'lifecycleStage' => 'lifecycleStage',            'companyDomain' => 'companyDomain',            'leadStatus' => 'leadStatus',            'numberOfAssociatedDeals' => 'numberOfAssociatedDeals',            'numberOfAssociatedContacts' => 'numberOfAssociatedContacts',            'public' => 'public',            'shippingStateProvince' => 'shippingStateProvince',            'createdAt' => 'createdAt',            'updatedAt' => 'updatedAt',        ];
    }

    /**
     * Define relationship filter mappings
     * Allows filtering by related entity fields
     *
     * Example: 'ownerName' filters by owner.name
     *
     * @return array<string, array{relation: string, field: string}>
     */
    protected function getRelationshipFilterFields(): array
    {
        return [            'accountManagerName' => ['relation' => 'accountManager', 'field' => 'name'],            'shippingCityName' => ['relation' => 'shippingCity', 'field' => 'name'],            'parentCompanyName' => ['relation' => 'parentCompany', 'field' => 'name'],            'cityName' => ['relation' => 'city', 'field' => 'name'],        ];
    }

    /**
     * Define boolean fields for equality filtering
     *
     * @return array<string>
     */
    protected function getBooleanFilterFields(): array
    {
        return [            'doNotContact',            'gdprConsent',            'public',        ];
    }

    /**
     * Define date/datetime fields for range filtering
     * Supports format: "from:to" (e.g., "2024-01-01:2024-12-31")
     *
     * @return array<string>
     */
    protected function getDateFilterFields(): array
    {
        return [            'customerSince',            'nextActivityDate',            'lastActivityDate',            'createdAt',            'updatedAt',        ];
    }

    /**
     * Transform Company entity to array for API response
     * Override this method to customize API output format
     *
     * @param object $entity
     * @return array<string, mixed>
     */
    protected function entityToArray(object $entity): array
    {
        assert($entity instanceof Company);

        return [
            'organization' => $entity->getOrganization()?->getId()?->toString() ?? '',
            'organizationName' => $entity->getOrganization()?->getName() ?? '',
            'name' => $entity->getName(),
            'description' => $entity->getDescription(),
            'industry' => $entity->getIndustry(),
            'accountManager' => $entity->getAccountManager()?->getId()?->toString() ?? '',
            'accountManagerName' => $entity->getAccountManager()?->getName() ?? '',
            'website' => $entity->getWebsite(),
            'billingAddress' => $entity->getBillingAddress(),
            'legalName' => $entity->getLegalName(),
            'shippingAddress' => $entity->getShippingAddress(),
            'shippingCity' => $entity->getShippingCity()?->getId()?->toString() ?? '',
            'shippingCityName' => $entity->getShippingCity()?->getName() ?? '',
            'campaignsCount' => $entity->getCampaigns()->count(),
            'shippingPostalCode' => $entity->getShippingPostalCode(),
            'currency' => $entity->getCurrency(),
            'companyType' => $entity->getCompanyType(),
            'parentCompany' => $entity->getParentCompany()?->getId()?->toString() ?? '',
            'parentCompanyName' => $entity->getParentCompany()?->getName() ?? '',
            'accountSource' => $entity->getAccountSource(),
            'rating' => $entity->getRating(),
            'customerSince' => $entity->getCustomerSince()?->format('c'),
            'paymentTerms' => $entity->getPaymentTerms(),
            'fiscalYearEnd' => $entity->getFiscalYearEnd(),
            'city' => $entity->getCity()?->getId()?->toString() ?? '',
            'cityName' => $entity->getCity()?->getName() ?? '',
            'sicCode' => $entity->getSicCode(),
            'naicsCode' => $entity->getNaicsCode(),
            'ownership' => $entity->getOwnership(),
            'tickerSymbol' => $entity->getTickerSymbol(),
            'linkedInUrl' => $entity->getLinkedInUrl(),
            'country' => $entity->getCountry(),
            'shippingCountry' => $entity->getShippingCountry(),
            'fax' => $entity->getFax(),
            'contactsCount' => $entity->getContacts()->count(),
            'coordinates' => $entity->getCoordinates(),
            'dealsCount' => $entity->getDeals()->count(),
            'email' => $entity->getEmail(),
            'talksCount' => $entity->getTalks()->count(),
            'manufacturedBrandsCount' => $entity->getManufacturedBrands()->count(),
            'manufacturedProductsCount' => $entity->getManufacturedProducts()->count(),
            'mobilePhone' => $entity->getMobilePhone(),
            'notes' => $entity->getNotes(),
            'phone' => $entity->getPhone(),
            'postalCode' => $entity->getPostalCode(),
            'primaryContactName' => $entity->getPrimaryContactName(),
            'socialMediasCount' => $entity->getSocialMedias()->count(),
            'suppliedBrandsCount' => $entity->getSuppliedBrands()->count(),
            'suppliedProductsCount' => $entity->getSuppliedProducts()->count(),
            'taxId' => $entity->getTaxId(),
            'nextActivityDate' => $entity->getNextActivityDate()?->format('c'),
            'lastActivityDate' => $entity->getLastActivityDate()?->format('c'),
            'timeZone' => $entity->getTimeZone(),
            'stateProvince' => $entity->getStateProvince(),
            'tags' => $entity->getTags(),
            'lifecycleStage' => $entity->getLifecycleStage(),
            'companyDomain' => $entity->getCompanyDomain(),
            'leadStatus' => $entity->getLeadStatus(),
            'shippingStateProvince' => $entity->getShippingStateProvince(),
            'createdAt' => $entity->getCreatedAt()->format('c'),
            'updatedAt' => $entity->getUpdatedAt()->format('c'),
        ];
    }
}
