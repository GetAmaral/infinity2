<?php

declare(strict_types=1);

namespace App\Repository\Generated;

use App\Entity\Country;
use App\Repository\Base\BaseRepository;

/**
 * CountryRepository (Generated Base Class)
 *
 * Countries reference data for international operations
 *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom query methods to CountryRepository.php instead.
 *
 * Provides:
 * - Full-text search with UNACCENT (inherited from BaseRepository)
 * - Multi-column filtering and sorting
 * - Pagination with metadata
 * - Date range and boolean filters
 * - Relationship field filtering
 *
 * @extends BaseRepository<Country>
 * @generated by Genmax Code Generator
 */
abstract class CountryRepositoryGenerated extends BaseRepository
{
    /**
     * Get entity name for search configuration
     */
    protected function getEntityName(): string
    {
        return 'country';
    }

    /**
     * Get searchable fields for full-text search
     * These fields will be searched using UNACCENT and LIKE
     *
     * @return array<string>
     */
    protected function getSearchableFields(): array
    {
        return [            'name',        ];
    }

    /**
     * Define sortable fields mapping
     * Maps API field names to entity properties
     *
     * @return array<string, string>
     */
    protected function getSortableFields(): array
    {
        return [            'name' => 'name',            'createdAt' => 'createdAt',            'updatedAt' => 'updatedAt',        ];
    }

    /**
     * Define filterable fields (excludes computed/aggregate fields)
     *
     * @return array<string, string>
     */
    protected function getFilterableFields(): array
    {
        return [            'createdAt' => 'createdAt',            'updatedAt' => 'updatedAt',        ];
    }

    /**
     * Define relationship filter mappings
     * Allows filtering by related entity fields
     *
     * Example: 'ownerName' filters by owner.name
     *
     * @return array<string, array{relation: string, field: string}>
     */
    protected function getRelationshipFilterFields(): array
    {
        return [        ];
    }

    /**
     * Define boolean fields for equality filtering
     *
     * @return array<string>
     */
    protected function getBooleanFilterFields(): array
    {
        return [            'euMember',            'active',            'availableForShipping',            'availableForBilling',            'schengenMember',            'oecdMember',            'dataResidencyRequired',            'postalCodeRequired',            'taxIdRequired',        ];
    }

    /**
     * Define date/datetime fields for range filtering
     * Supports format: "from:to" (e.g., "2024-01-01:2024-12-31")
     *
     * @return array<string>
     */
    protected function getDateFilterFields(): array
    {
        return [            'createdAt',            'updatedAt',        ];
    }

    /**
     * Transform Country entity to array for API response
     * Override this method to customize API output format
     *
     * @param object $entity
     * @return array<string, mixed>
     */
    protected function entityToArray(object $entity): array
    {
        assert($entity instanceof Country);

        return [
            'iso2' => $entity->getIso2(),
            'name' => $entity->getName(),
            'iso3' => $entity->getIso3(),
            'numericCode' => $entity->getNumericCode(),
            'currencyCode' => $entity->getCurrencyCode(),
            'phoneCode' => $entity->getPhoneCode(),
            'continent' => $entity->getContinent(),
            'capital' => $entity->getCapital(),
            'currencySymbol' => $entity->getCurrencySymbol(),
            'region' => $entity->getRegion(),
            'nativeName' => $entity->getNativeName(),
            'officialName' => $entity->getOfficialName(),
            'subregion' => $entity->getSubregion(),
            'tld' => $entity->getTld(),
            'nationalityName' => $entity->getNationalityName(),
            'postalCodeFormat' => $entity->getPostalCodeFormat(),
            'addressFormat' => $entity->getAddressFormat(),
            'flagEmoji' => $entity->getFlagEmoji(),
            'flagSvgUrl' => $entity->getFlagSvgUrl(),
            'holidayTemplatesCount' => $entity->getHolidayTemplates()->count(),
            'createdAt' => $entity->getCreatedAt()->format('c'),
            'updatedAt' => $entity->getUpdatedAt()->format('c'),
        ];
    }
}
