<?php

declare(strict_types=1);

namespace App\Repository\Generated;

use App\Entity\User;
use App\Repository\Base\BaseRepository;

/**
 * UserRepository (Generated Base Class)
 *
 * System users and authentication
 *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom query methods to UserRepository.php instead.
 *
 * Provides:
 * - Full-text search with UNACCENT (inherited from BaseRepository)
 * - Multi-column filtering and sorting
 * - Pagination with metadata
 * - Date range and boolean filters
 * - Relationship field filtering
 *
 * @extends BaseRepository<User>
 * @generated by Genmax Code Generator
 */
abstract class UserRepositoryGenerated extends BaseRepository
{
    /**
     * Get entity name for search configuration
     */
    protected function getEntityName(): string
    {
        return 'user';
    }

    /**
     * Get searchable fields for full-text search
     * These fields will be searched using UNACCENT and LIKE
     *
     * @return array<string>
     */
    protected function getSearchableFields(): array
    {
        return [            'name',            'avatarUrl',            'celPhone',            'email',            'password',            'position',            'profilePictureUrl',        ];
    }

    /**
     * Define sortable fields mapping
     * Maps API field names to entity properties
     *
     * @return array<string, string>
     */
    protected function getSortableFields(): array
    {
        return [            'name' => 'name',            'agents' => 'agents',            'active' => 'active',            'avatarUrl' => 'avatarUrl',            'birthDate' => 'birthDate',            'calendars' => 'calendars',            'campaigns' => 'campaigns',            'celPhone' => 'celPhone',            'contacts' => 'contacts',            'deals' => 'deals',            'email' => 'email',            'emailVerifiedAt' => 'emailVerifiedAt',            'eventAttendances' => 'eventAttendances',            'failedLoginAttempts' => 'failedLoginAttempts',            'gender' => 'gender',            'lastPasswordChange' => 'lastPasswordChange',            'managedCampaigns' => 'managedCampaigns',            'managedCompanies' => 'managedCompanies',            'managedContacts' => 'managedContacts',            'managedDeals' => 'managedDeals',            'organizedEvents' => 'organizedEvents',            'ownedCourses' => 'ownedCourses',            'password' => 'password',            'position' => 'position',            'profilePictureUrl' => 'profilePictureUrl',            'profiles' => 'profiles',            'socialMedias' => 'socialMedias',            'studentCourses' => 'studentCourses',            'talks' => 'talks',            'tasks' => 'tasks',            'createdAt' => 'createdAt',            'updatedAt' => 'updatedAt',        ];
    }

    /**
     * Define filterable fields (excludes computed/aggregate fields)
     *
     * @return array<string, string>
     */
    protected function getFilterableFields(): array
    {
        return [            'createdAt' => 'createdAt',            'updatedAt' => 'updatedAt',        ];
    }

    /**
     * Define relationship filter mappings
     * Allows filtering by related entity fields
     *
     * Example: 'ownerName' filters by owner.name
     *
     * @return array<string, array{relation: string, field: string}>
     */
    protected function getRelationshipFilterFields(): array
    {
        return [        ];
    }

    /**
     * Define boolean fields for equality filtering
     *
     * @return array<string>
     */
    protected function getBooleanFilterFields(): array
    {
        return [            'active',            'verified',            'termsSigned',            'twoFactorEnabled',            'mustChangePassword',            'passkeyEnabled',            'emailNotificationsEnabled',            'smsNotificationsEnabled',            'calendarSyncEnabled',            'agent',            'visible',            'locked',        ];
    }

    /**
     * Define date/datetime fields for range filtering
     * Supports format: "from:to" (e.g., "2024-01-01:2024-12-31")
     *
     * @return array<string>
     */
    protected function getDateFilterFields(): array
    {
        return [            'emailVerifiedAt',            'termsSignedAt',            'apiTokenExpiresAt',            'lastLoginAt',            'lockedUntil',            'lastPasswordChange',            'passwordResetExpiry',            'lastPasswordChangeAt',            'passwordExpiresAt',            'deletedAt',            'lastActivityAt',            'lockedAt',            'createdAt',            'updatedAt',        ];
    }

    /**
     * Transform User entity to array for API response
     * Override this method to customize API output format
     *
     * @param object $entity
     * @return array<string, mixed>
     */
    protected function entityToArray(object $entity): array
    {
        assert($entity instanceof User);

        return [
            'organization' => $entity->getOrganization()?->getId()?->toString() ?? '',
            'organizationName' => $entity->getOrganization()?->getName() ?? '',
            'name' => $entity->getName(),
            'agentsCount' => $entity->getAgents()->count(),
            'avatarUrl' => $entity->getAvatarUrl(),
            'calendarsCount' => $entity->getCalendars()->count(),
            'campaignsCount' => $entity->getCampaigns()->count(),
            'celPhone' => $entity->getCelPhone(),
            'contactsCount' => $entity->getContacts()->count(),
            'dealsCount' => $entity->getDeals()->count(),
            'email' => $entity->getEmail(),
            'ownedDealsCount' => $entity->getOwnedDeals()->count(),
            'calendarExternalLinksCount' => $entity->getCalendarExternalLinks()->count(),
            'grantedRolesCount' => $entity->getGrantedRoles()->count(),
            'resourceBookingsCount' => $entity->getResourceBookings()->count(),
            'emailVerifiedAt' => $entity->getEmailVerifiedAt()?->format('c'),
            'eventAttendancesCount' => $entity->getEventAttendances()->count(),
            'termsSignedAt' => $entity->getTermsSignedAt()?->format('c'),
            'verificationToken' => $entity->getVerificationToken(),
            'apiToken' => $entity->getApiToken(),
            'apiTokenExpiresAt' => $entity->getApiTokenExpiresAt()?->format('c'),
            'openAiApiKey' => $entity->getOpenAiApiKey(),
            'lastLoginAt' => $entity->getLastLoginAt()?->format('c'),
            'lockedUntil' => $entity->getLockedUntil()?->format('c'),
            'lastPasswordChange' => $entity->getLastPasswordChange()?->format('c'),
            'twoFactorSecret' => $entity->getTwoFactorSecret(),
            'passwordResetToken' => $entity->getPasswordResetToken(),
            'passwordResetExpiry' => $entity->getPasswordResetExpiry()?->format('c'),
            'sessionToken' => $entity->getSessionToken(),
            'lastPasswordChangeAt' => $entity->getLastPasswordChangeAt()?->format('c'),
            'passwordExpiresAt' => $entity->getPasswordExpiresAt()?->format('c'),
            'managedCampaignsCount' => $entity->getManagedCampaigns()->count(),
            'ownedCampaignsCount' => $entity->getOwnedCampaigns()->count(),
            'managedCompaniesCount' => $entity->getManagedCompanies()->count(),
            'managedContactsCount' => $entity->getManagedContacts()->count(),
            'username' => $entity->getUsername(),
            'managedDealsCount' => $entity->getManagedDeals()->count(),
            'phone' => $entity->getPhone(),
            'mobilePhone' => $entity->getMobilePhone(),
            'jobTitle' => $entity->getJobTitle(),
            'department' => $entity->getDepartment(),
            'timezone' => $entity->getTimezone(),
            'locale' => $entity->getLocale(),
            'preferredLanguage' => $entity->getPreferredLanguage(),
            'emailSignature' => $entity->getEmailSignature(),
            'defaultCurrency' => $entity->getDefaultCurrency(),
            'dateFormat' => $entity->getDateFormat(),
            'organizedEventsCount' => $entity->getOrganizedEvents()->count(),
            'manager' => $entity->getManager()?->getId()?->toString() ?? '',
            'managerName' => $entity->getManager()?->getName() ?? '',
            'salesTeam' => $entity->getSalesTeam(),
            'agentType' => $entity->getAgentType(),
            'deletedAt' => $entity->getDeletedAt()?->format('c'),
            'ownedCoursesCount' => $entity->getOwnedCourses()->count(),
            'avatar' => $entity->getAvatar(),
            'password' => $entity->getPassword(),
            'title' => $entity->getTitle(),
            'firstName' => $entity->getFirstName(),
            'lastName' => $entity->getLastName(),
            'middleName' => $entity->getMiddleName(),
            'suffix' => $entity->getSuffix(),
            'nickname' => $entity->getNickname(),
            'position' => $entity->getPosition(),
            'secondaryEmail' => $entity->getSecondaryEmail(),
            'workPhone' => $entity->getWorkPhone(),
            'homePhone' => $entity->getHomePhone(),
            'phoneExtension' => $entity->getPhoneExtension(),
            'fax' => $entity->getFax(),
            'website' => $entity->getWebsite(),
            'linkedinUrl' => $entity->getLinkedinUrl(),
            'twitterHandle' => $entity->getTwitterHandle(),
            'address' => $entity->getAddress(),
            'profilePictureUrl' => $entity->getProfilePictureUrl(),
            'city' => $entity->getCity(),
            'state' => $entity->getState(),
            'postalCode' => $entity->getPostalCode(),
            'country' => $entity->getCountry(),
            'region' => $entity->getRegion(),
            'officeLocation' => $entity->getOfficeLocation(),
            'profilesCount' => $entity->getProfiles()->count(),
            'employeeId' => $entity->getEmployeeId(),
            'employmentStatus' => $entity->getEmploymentStatus(),
            'costCenter' => $entity->getCostCenter(),
            'division' => $entity->getDivision(),
            'businessUnit' => $entity->getBusinessUnit(),
            'salaryFrequency' => $entity->getSalaryFrequency(),
            'socialMediasCount' => $entity->getSocialMedias()->count(),
            'bio' => $entity->getBio(),
            'notes' => $entity->getNotes(),
            'studentCoursesCount' => $entity->getStudentCourses()->count(),
            'lastIpAddress' => $entity->getLastIpAddress(),
            'lastUserAgent' => $entity->getLastUserAgent(),
            'lastActivityAt' => $entity->getLastActivityAt()?->format('c'),
            'status' => $entity->getStatus(),
            'talksCount' => $entity->getTalks()->count(),
            'statusMessage' => $entity->getStatusMessage(),
            'tasksCount' => $entity->getTasks()->count(),
            'lockedReason' => $entity->getLockedReason(),
            'lockedAt' => $entity->getLockedAt()?->format('c'),
            'managedPipelinesCount' => $entity->getManagedPipelines()->count(),
            'createdAt' => $entity->getCreatedAt()->format('c'),
            'updatedAt' => $entity->getUpdatedAt()->format('c'),
        ];
    }
}
