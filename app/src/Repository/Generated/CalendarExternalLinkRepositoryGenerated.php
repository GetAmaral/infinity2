<?php

declare(strict_types=1);

namespace App\Repository\Generated;

use App\Entity\CalendarExternalLink;
use App\Repository\Base\BaseRepository;

/**
 * CalendarExternalLinkRepository (Generated Base Class)
 *
 * Manages OAuth-based external calendar integrations (Google Calendar, Microsoft Outlook, Apple Calendar) with bi-directional sync, webhook support, and token refresh management
 *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom query methods to CalendarExternalLinkRepository.php instead.
 *
 * Provides:
 * - Full-text search with UNACCENT (inherited from BaseRepository)
 * - Multi-column filtering and sorting
 * - Pagination with metadata
 * - Date range and boolean filters
 * - Relationship field filtering
 *
 * @extends BaseRepository<CalendarExternalLink>
 * @generated by Genmax Code Generator
 */
abstract class CalendarExternalLinkRepositoryGenerated extends BaseRepository
{
    /**
     * Get entity name for search configuration
     */
    protected function getEntityName(): string
    {
        return 'calendarexternallink';
    }

    /**
     * Get searchable fields for full-text search
     * These fields will be searched using UNACCENT and LIKE
     *
     * @return array<string>
     */
    protected function getSearchableFields(): array
    {
        return [            'name',        ];
    }

    /**
     * Define sortable fields mapping
     * Maps API field names to entity properties
     *
     * @return array<string, string>
     */
    protected function getSortableFields(): array
    {
        return [            'name' => 'name',            'calendars' => 'calendars',            'url' => 'url',            'lastSyncedAt' => 'lastSyncedAt',            'createdAt' => 'createdAt',            'updatedAt' => 'updatedAt',        ];
    }

    /**
     * Define filterable fields (excludes computed/aggregate fields)
     *
     * @return array<string, string>
     */
    protected function getFilterableFields(): array
    {
        return [            'name' => 'name',            'externalProvider' => 'externalProvider',            'active' => 'active',            'externalId' => 'externalId',            'tokenExpiresAt' => 'tokenExpiresAt',            'lastSyncedAt' => 'lastSyncedAt',            'webhookExpiresAt' => 'webhookExpiresAt',            'syncDirection' => 'syncDirection',            'lastErrorAt' => 'lastErrorAt',            'createdAt' => 'createdAt',            'updatedAt' => 'updatedAt',        ];
    }

    /**
     * Define relationship filter mappings
     * Allows filtering by related entity fields
     *
     * Example: 'ownerName' filters by owner.name
     *
     * @return array<string, array{relation: string, field: string}>
     */
    protected function getRelationshipFilterFields(): array
    {
        return [            'userName' => ['relation' => 'user', 'field' => 'name'],        ];
    }

    /**
     * Define boolean fields for equality filtering
     *
     * @return array<string>
     */
    protected function getBooleanFilterFields(): array
    {
        return [            'active',        ];
    }

    /**
     * Define date/datetime fields for range filtering
     * Supports format: "from:to" (e.g., "2024-01-01:2024-12-31")
     *
     * @return array<string>
     */
    protected function getDateFilterFields(): array
    {
        return [            'tokenExpiresAt',            'lastSyncedAt',            'webhookExpiresAt',            'lastErrorAt',            'createdAt',            'updatedAt',        ];
    }

    /**
     * Transform CalendarExternalLink entity to array for API response
     * Override this method to customize API output format
     *
     * @param object $entity
     * @return array<string, mixed>
     */
    protected function entityToArray(object $entity): array
    {
        assert($entity instanceof CalendarExternalLink);

        return [
            'name' => $entity->getName(),
            'calendarsCount' => $entity->getCalendars()->count(),
            'externalProvider' => $entity->getExternalProvider(),
            'externalId' => $entity->getExternalId(),
            'url' => $entity->getUrl(),
            'accessToken' => $entity->getAccessToken(),
            'refreshToken' => $entity->getRefreshToken(),
            'tokenExpiresAt' => $entity->getTokenExpiresAt()?->format('c'),
            'syncToken' => $entity->getSyncToken(),
            'lastSyncedAt' => $entity->getLastSyncedAt()?->format('c'),
            'webhookUrl' => $entity->getWebhookUrl(),
            'webhookChannelId' => $entity->getWebhookChannelId(),
            'webhookExpiresAt' => $entity->getWebhookExpiresAt()?->format('c'),
            'syncDirection' => $entity->getSyncDirection(),
            'lastErrorMessage' => $entity->getLastErrorMessage(),
            'lastErrorAt' => $entity->getLastErrorAt()?->format('c'),
            'user' => $entity->getUser()?->getId()?->toString() ?? '',
            'userName' => $entity->getUser()?->getName() ?? '',
            'createdAt' => $entity->getCreatedAt()->format('c'),
            'updatedAt' => $entity->getUpdatedAt()->format('c'),
        ];
    }
}
