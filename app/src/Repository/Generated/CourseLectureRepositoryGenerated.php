<?php

declare(strict_types=1);

namespace App\Repository\Generated;

use App\Entity\CourseLecture;
use App\Repository\Base\BaseRepository;

/**
 * CourseLectureRepository (Generated Base Class)
 *
 * Individual lectures and learning content
 *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom query methods to CourseLectureRepository.php instead.
 *
 * Provides:
 * - Full-text search with UNACCENT (inherited from BaseRepository)
 * - Multi-column filtering and sorting
 * - Pagination with metadata
 * - Date range and boolean filters
 * - Relationship field filtering
 *
 * @extends BaseRepository<CourseLecture>
 * @generated by Genmax Code Generator
 */
abstract class CourseLectureRepositoryGenerated extends BaseRepository
{
    /**
     * Get entity name for search configuration
     */
    protected function getEntityName(): string
    {
        return 'courselecture';
    }

    /**
     * Get searchable fields for full-text search
     * These fields will be searched using UNACCENT and LIKE
     *
     * @return array<string>
     */
    protected function getSearchableFields(): array
    {
        return [            'name',            'description',            'videoFileName',            'videoPath',            'processingStatus',            'processingStep',            'processingError',            'courseModule',            'studentLectures',            'studentCoursesOnThisLecture',        ];
    }

    /**
     * Define sortable fields mapping
     * Maps API field names to entity properties
     *
     * @return array<string, string>
     */
    protected function getSortableFields(): array
    {
        return [            'name' => 'name',            'description' => 'description',            'videoFileName' => 'videoFileName',            'videoPath' => 'videoPath',            'processingStatus' => 'processingStatus',            'processingStep' => 'processingStep',            'processingPercentage' => 'processingPercentage',            'processingError' => 'processingError',            'processedAt' => 'processedAt',            'viewOrder' => 'viewOrder',            'lengthSeconds' => 'lengthSeconds',            'courseModule' => 'courseModule',            'studentLectures' => 'studentLectures',            'studentCoursesOnThisLecture' => 'studentCoursesOnThisLecture',            'createdAt' => 'createdAt',            'updatedAt' => 'updatedAt',        ];
    }

    /**
     * Define filterable fields (excludes computed/aggregate fields)
     *
     * @return array<string, string>
     */
    protected function getFilterableFields(): array
    {
        return [            'name' => 'name',            'description' => 'description',            'videoFileName' => 'videoFileName',            'videoPath' => 'videoPath',            'processingStatus' => 'processingStatus',            'processingStep' => 'processingStep',            'processingPercentage' => 'processingPercentage',            'processingError' => 'processingError',            'processedAt' => 'processedAt',            'viewOrder' => 'viewOrder',            'lengthSeconds' => 'lengthSeconds',            'createdAt' => 'createdAt',            'updatedAt' => 'updatedAt',        ];
    }

    /**
     * Define relationship filter mappings
     * Allows filtering by related entity fields
     *
     * Example: 'ownerName' filters by owner.name
     *
     * @return array<string, array{relation: string, field: string}>
     */
    protected function getRelationshipFilterFields(): array
    {
        return [            'courseModuleName' => ['relation' => 'courseModule', 'field' => 'name'],            'studentLecturesName' => ['relation' => 'studentLectures', 'field' => 'name'],            'studentCoursesOnThisLectureName' => ['relation' => 'studentCoursesOnThisLecture', 'field' => 'name'],        ];
    }

    /**
     * Define boolean fields for equality filtering
     *
     * @return array<string>
     */
    protected function getBooleanFilterFields(): array
    {
        return [            'active',            'published',            'free',        ];
    }

    /**
     * Define date/datetime fields for range filtering
     * Supports format: "from:to" (e.g., "2024-01-01:2024-12-31")
     *
     * @return array<string>
     */
    protected function getDateFilterFields(): array
    {
        return [            'processedAt',            'publishedAt',            'createdAt',            'updatedAt',        ];
    }

    /**
     * Transform CourseLecture entity to array for API response
     * Override this method to customize API output format
     *
     * @param object $entity
     * @return array<string, mixed>
     */
    protected function entityToArray(object $entity): array
    {
        assert($entity instanceof CourseLecture);

        return [
            'name' => $entity->getName(),
            'description' => $entity->getDescription(),
            'videoFileName' => $entity->getVideoFileName(),
            'videoPath' => $entity->getVideoPath(),
            'processingStatus' => $entity->getProcessingStatus(),
            'processingStep' => $entity->getProcessingStep(),
            'processingError' => $entity->getProcessingError(),
            'processedAt' => $entity->getProcessedAt()?->format('c'),
            'courseModule' => $entity->getCourseModule(),
            'studentLectures' => $entity->getStudentLectures(),
            'studentCoursesOnThisLecture' => $entity->getStudentCoursesOnThisLecture(),
            'organization' => $entity->getOrganization()?->getId()?->toString() ?? '',
            'organizationName' => $entity->getOrganization()?->getName() ?? '',
            'publishedAt' => $entity->getPublishedAt()?->format('c'),
            'videoUrl' => $entity->getVideoUrl(),
            'videoType' => $entity->getVideoType(),
            'videoResolution' => $entity->getVideoResolution(),
            'transcript' => $entity->getTranscript(),
            'subtitleUrl' => $entity->getSubtitleUrl(),
            'subtitleLanguage' => $entity->getSubtitleLanguage(),
            'prerequisites' => $entity->getPrerequisites(),
            'averageWatchPercentage' => $entity->getAverageWatchPercentage(),
            'rating' => $entity->getRating(),
            'difficultyLevel' => $entity->getDifficultyLevel(),
            'createdAt' => $entity->getCreatedAt()->format('c'),
            'updatedAt' => $entity->getUpdatedAt()->format('c'),
        ];
    }
}
