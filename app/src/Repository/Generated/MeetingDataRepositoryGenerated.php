<?php

declare(strict_types=1);

namespace App\Repository\Generated;

use App\Entity\MeetingData;
use App\Repository\Base\BaseRepository;

/**
 * MeetingDataRepository (Generated Base Class)
 *
 * Meeting data including links, notes, recordings, agenda, minutes, and attendee tracking for comprehensive meeting management
 *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom query methods to MeetingDataRepository.php instead.
 *
 * Provides:
 * - Full-text search with UNACCENT (inherited from BaseRepository)
 * - Multi-column filtering and sorting
 * - Pagination with metadata
 * - Date range and boolean filters
 * - Relationship field filtering
 *
 * @extends BaseRepository<MeetingData>
 * @generated by Genmax Code Generator
 */
abstract class MeetingDataRepositoryGenerated extends BaseRepository
{
    /**
     * Get entity name for search configuration
     */
    protected function getEntityName(): string
    {
        return 'meetingdata';
    }

    /**
     * Get searchable fields for full-text search
     * These fields will be searched using UNACCENT and LIKE
     *
     * @return array<string>
     */
    protected function getSearchableFields(): array
    {
        return [            'title',            'location',            'notes',            'minutes',            'meetingId',            'transcript',            'organizer',            'platform',        ];
    }

    /**
     * Define sortable fields mapping
     * Maps API field names to entity properties
     *
     * @return array<string, string>
     */
    protected function getSortableFields(): array
    {
        return [            'event' => 'event',            'title' => 'title',            'meetingType' => 'meetingType',            'status' => 'status',            'startTime' => 'startTime',            'endTime' => 'endTime',            'duration' => 'duration',            'meetingId' => 'meetingId',            'platform' => 'platform',            'recordUrl' => 'recordUrl',            'secret' => 'secret',            'url' => 'url',            'createdAt' => 'createdAt',            'updatedAt' => 'updatedAt',        ];
    }

    /**
     * Define filterable fields (excludes computed/aggregate fields)
     *
     * @return array<string, string>
     */
    protected function getFilterableFields(): array
    {
        return [            'title' => 'title',            'meetingType' => 'meetingType',            'status' => 'status',            'startTime' => 'startTime',            'endTime' => 'endTime',            'duration' => 'duration',            'recordingAvailable' => 'recordingAvailable',            'nextMeetingDate' => 'nextMeetingDate',            'tags' => 'tags',            'platform' => 'platform',            'confidential' => 'confidential',            'recurring' => 'recurring',            'createdAt' => 'createdAt',            'updatedAt' => 'updatedAt',        ];
    }

    /**
     * Define relationship filter mappings
     * Allows filtering by related entity fields
     *
     * Example: 'ownerName' filters by owner.name
     *
     * @return array<string, array{relation: string, field: string}>
     */
    protected function getRelationshipFilterFields(): array
    {
        return [        ];
    }

    /**
     * Define boolean fields for equality filtering
     *
     * @return array<string>
     */
    protected function getBooleanFilterFields(): array
    {
        return [            'recordingAvailable',            'confidential',            'recurring',        ];
    }

    /**
     * Define date/datetime fields for range filtering
     * Supports format: "from:to" (e.g., "2024-01-01:2024-12-31")
     *
     * @return array<string>
     */
    protected function getDateFilterFields(): array
    {
        return [            'startTime',            'endTime',            'nextMeetingDate',            'createdAt',            'updatedAt',        ];
    }

    /**
     * Transform MeetingData entity to array for API response
     * Override this method to customize API output format
     *
     * @param object $entity
     * @return array<string, mixed>
     */
    protected function entityToArray(object $entity): array
    {
        assert($entity instanceof MeetingData);

        return [
            'organization' => $entity->getOrganization()?->getId()?->toString() ?? '',
            'organizationName' => $entity->getOrganization()?->getName() ?? '',
            'event' => $entity->getEvent()?->getId()?->toString() ?? '',
            'eventName' => $entity->getEvent()?->getName() ?? '',
            'title' => $entity->getTitle(),
            'meetingType' => $entity->getMeetingType(),
            'status' => $entity->getStatus(),
            'startTime' => $entity->getStartTime()?->format('c'),
            'endTime' => $entity->getEndTime()?->format('c'),
            'location' => $entity->getLocation(),
            'notes' => $entity->getNotes(),
            'minutes' => $entity->getMinutes(),
            'meetingId' => $entity->getMeetingId(),
            'transcript' => $entity->getTranscript(),
            'nextMeetingDate' => $entity->getNextMeetingDate()?->format('c'),
            'organizer' => $entity->getOrganizer(),
            'platform' => $entity->getPlatform(),
            'recordUrl' => $entity->getRecordUrl(),
            'secret' => $entity->getSecret(),
            'url' => $entity->getUrl(),
            'createdAt' => $entity->getCreatedAt()->format('c'),
            'updatedAt' => $entity->getUpdatedAt()->format('c'),
        ];
    }
}
