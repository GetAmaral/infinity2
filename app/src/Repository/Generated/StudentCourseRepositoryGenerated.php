<?php

declare(strict_types=1);

namespace App\Repository\Generated;

use App\Entity\StudentCourse;
use App\Repository\Base\BaseRepository;

/**
 * StudentCourseRepository (Generated Base Class)
 *
 * Student course enrollments and participation
 *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom query methods to StudentCourseRepository.php instead.
 *
 * Provides:
 * - Full-text search with UNACCENT (inherited from BaseRepository)
 * - Multi-column filtering and sorting
 * - Pagination with metadata
 * - Date range and boolean filters
 * - Relationship field filtering
 *
 * @extends BaseRepository<StudentCourse>
 * @generated by Genmax Code Generator
 */
abstract class StudentCourseRepositoryGenerated extends BaseRepository
{
    /**
     * Get entity name for search configuration
     */
    protected function getEntityName(): string
    {
        return 'studentcourse';
    }

    /**
     * Get searchable fields for full-text search
     * These fields will be searched using UNACCENT and LIKE
     *
     * @return array<string>
     */
    protected function getSearchableFields(): array
    {
        return [            'student',            'course',            'currentLecture',            'studentLectures',        ];
    }

    /**
     * Define sortable fields mapping
     * Maps API field names to entity properties
     *
     * @return array<string, string>
     */
    protected function getSortableFields(): array
    {
        return [            'enrolledAt' => 'enrolledAt',            'startDate' => 'startDate',            'lastDate' => 'lastDate',            'progressSeconds' => 'progressSeconds',            'progressPercentage' => 'progressPercentage',            'completedAt' => 'completedAt',            'student' => 'student',            'course' => 'course',            'currentLecture' => 'currentLecture',            'studentLectures' => 'studentLectures',            'active' => 'active',            'createdAt' => 'createdAt',            'updatedAt' => 'updatedAt',        ];
    }

    /**
     * Define filterable fields (excludes computed/aggregate fields)
     *
     * @return array<string, string>
     */
    protected function getFilterableFields(): array
    {
        return [            'enrolledAt' => 'enrolledAt',            'startDate' => 'startDate',            'lastDate' => 'lastDate',            'progressSeconds' => 'progressSeconds',            'progressPercentage' => 'progressPercentage',            'completedAt' => 'completedAt',            'active' => 'active',            'createdAt' => 'createdAt',            'updatedAt' => 'updatedAt',        ];
    }

    /**
     * Define relationship filter mappings
     * Allows filtering by related entity fields
     *
     * Example: 'ownerName' filters by owner.name
     *
     * @return array<string, array{relation: string, field: string}>
     */
    protected function getRelationshipFilterFields(): array
    {
        return [            'studentName' => ['relation' => 'student', 'field' => 'name'],            'courseName' => ['relation' => 'course', 'field' => 'name'],            'currentLectureName' => ['relation' => 'currentLecture', 'field' => 'name'],            'studentLecturesName' => ['relation' => 'studentLectures', 'field' => 'name'],        ];
    }

    /**
     * Define boolean fields for equality filtering
     *
     * @return array<string>
     */
    protected function getBooleanFilterFields(): array
    {
        return [            'active',        ];
    }

    /**
     * Define date/datetime fields for range filtering
     * Supports format: "from:to" (e.g., "2024-01-01:2024-12-31")
     *
     * @return array<string>
     */
    protected function getDateFilterFields(): array
    {
        return [            'enrolledAt',            'startDate',            'lastDate',            'completedAt',            'createdAt',            'updatedAt',        ];
    }

    /**
     * Transform StudentCourse entity to array for API response
     * Override this method to customize API output format
     *
     * @param object $entity
     * @return array<string, mixed>
     */
    protected function entityToArray(object $entity): array
    {
        assert($entity instanceof StudentCourse);

        return [
            'organization' => $entity->getOrganization()?->getId()?->toString() ?? '',
            'organizationName' => $entity->getOrganization()?->getName() ?? '',
            'enrolledAt' => $entity->getEnrolledAt()?->format('c'),
            'startDate' => $entity->getStartDate()?->format('c'),
            'lastDate' => $entity->getLastDate()?->format('c'),
            'progressSeconds' => $entity->getProgressSeconds(),
            'completedAt' => $entity->getCompletedAt()?->format('c'),
            'student' => $entity->getStudent(),
            'course' => $entity->getCourse(),
            'currentLecture' => $entity->getCurrentLecture(),
            'studentLectures' => $entity->getStudentLectures(),
            'createdAt' => $entity->getCreatedAt()->format('c'),
            'updatedAt' => $entity->getUpdatedAt()->format('c'),
        ];
    }
}
