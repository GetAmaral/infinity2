<?php

declare(strict_types=1);

namespace App\Repository\Generated;

use App\Entity\Holiday;
use App\Repository\Base\BaseRepository;

/**
 * HolidayRepository (Generated Base Class)
 *
 * Company and regional holidays
 *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom query methods to HolidayRepository.php instead.
 *
 * Provides:
 * - Full-text search with UNACCENT (inherited from BaseRepository)
 * - Multi-column filtering and sorting
 * - Pagination with metadata
 * - Date range and boolean filters
 * - Relationship field filtering
 *
 * @extends BaseRepository<Holiday>
 * @generated by Genmax Code Generator
 */
abstract class HolidayRepositoryGenerated extends BaseRepository
{
    /**
     * Get entity name for search configuration
     */
    protected function getEntityName(): string
    {
        return 'holiday';
    }

    /**
     * Get searchable fields for full-text search
     * These fields will be searched using UNACCENT and LIKE
     *
     * @return array<string>
     */
    protected function getSearchableFields(): array
    {
        return [            'name',            'description',            'country',            'region',            'holidayType',            'notes',        ];
    }

    /**
     * Define sortable fields mapping
     * Maps API field names to entity properties
     *
     * @return array<string, string>
     */
    protected function getSortableFields(): array
    {
        return [            'name' => 'name',            'description' => 'description',            'recurring' => 'recurring',            'blocksScheduling' => 'blocksScheduling',            'observed' => 'observed',            'active' => 'active',            'country' => 'country',            'calendar' => 'calendar',            'region' => 'region',            'year' => 'year',            'event' => 'event',            'holidayType' => 'holidayType',            'originalDate' => 'originalDate',            'affectsSLA' => 'affectsSLA',            'sentAt' => 'sentAt',            'createdAt' => 'createdAt',            'updatedAt' => 'updatedAt',        ];
    }

    /**
     * Define filterable fields (excludes computed/aggregate fields)
     *
     * @return array<string, string>
     */
    protected function getFilterableFields(): array
    {
        return [            'name' => 'name',            'recurring' => 'recurring',            'observed' => 'observed',            'active' => 'active',            'country' => 'country',            'region' => 'region',            'year' => 'year',            'holidayType' => 'holidayType',            'originalDate' => 'originalDate',            'affectsSLA' => 'affectsSLA',            'sentAt' => 'sentAt',            'workingDay' => 'workingDay',            'createdAt' => 'createdAt',            'updatedAt' => 'updatedAt',        ];
    }

    /**
     * Define relationship filter mappings
     * Allows filtering by related entity fields
     *
     * Example: 'ownerName' filters by owner.name
     *
     * @return array<string, array{relation: string, field: string}>
     */
    protected function getRelationshipFilterFields(): array
    {
        return [        ];
    }

    /**
     * Define boolean fields for equality filtering
     *
     * @return array<string>
     */
    protected function getBooleanFilterFields(): array
    {
        return [            'recurring',            'blocksScheduling',            'observed',            'active',            'affectsSLA',            'workingDay',        ];
    }

    /**
     * Define date/datetime fields for range filtering
     * Supports format: "from:to" (e.g., "2024-01-01:2024-12-31")
     *
     * @return array<string>
     */
    protected function getDateFilterFields(): array
    {
        return [            'originalDate',            'sentAt',            'createdAt',            'updatedAt',        ];
    }

    /**
     * Transform Holiday entity to array for API response
     * Override this method to customize API output format
     *
     * @param object $entity
     * @return array<string, mixed>
     */
    protected function entityToArray(object $entity): array
    {
        assert($entity instanceof Holiday);

        return [
            'organization' => $entity->getOrganization()?->getId()?->toString() ?? '',
            'organizationName' => $entity->getOrganization()?->getName() ?? '',
            'name' => $entity->getName(),
            'description' => $entity->getDescription(),
            'country' => $entity->getCountry(),
            'calendar' => $entity->getCalendar()?->getId()?->toString() ?? '',
            'calendarName' => $entity->getCalendar()?->getName() ?? '',
            'region' => $entity->getRegion(),
            'event' => $entity->getEvent()?->getId()?->toString() ?? '',
            'eventName' => $entity->getEvent()?->getName() ?? '',
            'holidayType' => $entity->getHolidayType(),
            'originalDate' => $entity->getOriginalDate()?->format('c'),
            'sentAt' => $entity->getSentAt()?->format('c'),
            'notes' => $entity->getNotes(),
            'createdAt' => $entity->getCreatedAt()->format('c'),
            'updatedAt' => $entity->getUpdatedAt()->format('c'),
        ];
    }
}
