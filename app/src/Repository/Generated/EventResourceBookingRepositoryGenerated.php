<?php

declare(strict_types=1);

namespace App\Repository\Generated;

use App\Entity\EventResourceBooking;
use App\Repository\Base\BaseRepository;

/**
 * EventResourceBookingRepository (Generated Base Class)
 *
 * Resource booking reservations
 *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom query methods to EventResourceBookingRepository.php instead.
 *
 * Provides:
 * - Full-text search with UNACCENT (inherited from BaseRepository)
 * - Multi-column filtering and sorting
 * - Pagination with metadata
 * - Date range and boolean filters
 * - Relationship field filtering
 *
 * @extends BaseRepository<EventResourceBooking>
 * @generated by Genmax Code Generator
 */
abstract class EventResourceBookingRepositoryGenerated extends BaseRepository
{
    /**
     * Get entity name for search configuration
     */
    protected function getEntityName(): string
    {
        return 'eventresourcebooking';
    }

    /**
     * Get searchable fields for full-text search
     * These fields will be searched using UNACCENT and LIKE
     *
     * @return array<string>
     */
    protected function getSearchableFields(): array
    {
        return [            'cancellationReason',            'notes',        ];
    }

    /**
     * Define sortable fields mapping
     * Maps API field names to entity properties
     *
     * @return array<string, string>
     */
    protected function getSortableFields(): array
    {
        return [            'startTime' => 'startTime',            'bookedBy' => 'bookedBy',            'endTime' => 'endTime',            'confirmed' => 'confirmed',            'cancelled' => 'cancelled',            'paid' => 'paid',            'depositAmount' => 'depositAmount',            'totalAmount' => 'totalAmount',            'confirmedAt' => 'confirmedAt',            'cancelledAt' => 'cancelledAt',            'event' => 'event',            'reminderSent' => 'reminderSent',            'notes' => 'notes',            'quantity' => 'quantity',            'resource' => 'resource',            'status' => 'status',            'createdAt' => 'createdAt',            'updatedAt' => 'updatedAt',        ];
    }

    /**
     * Define filterable fields (excludes computed/aggregate fields)
     *
     * @return array<string, string>
     */
    protected function getFilterableFields(): array
    {
        return [            'startTime' => 'startTime',            'endTime' => 'endTime',            'confirmed' => 'confirmed',            'cancelled' => 'cancelled',            'paid' => 'paid',            'depositAmount' => 'depositAmount',            'totalAmount' => 'totalAmount',            'confirmedAt' => 'confirmedAt',            'cancelledAt' => 'cancelledAt',            'reminderSent' => 'reminderSent',            'createdAt' => 'createdAt',            'updatedAt' => 'updatedAt',        ];
    }

    /**
     * Define relationship filter mappings
     * Allows filtering by related entity fields
     *
     * Example: 'ownerName' filters by owner.name
     *
     * @return array<string, array{relation: string, field: string}>
     */
    protected function getRelationshipFilterFields(): array
    {
        return [        ];
    }

    /**
     * Define boolean fields for equality filtering
     *
     * @return array<string>
     */
    protected function getBooleanFilterFields(): array
    {
        return [            'confirmed',            'cancelled',            'paid',            'reminderSent',        ];
    }

    /**
     * Define date/datetime fields for range filtering
     * Supports format: "from:to" (e.g., "2024-01-01:2024-12-31")
     *
     * @return array<string>
     */
    protected function getDateFilterFields(): array
    {
        return [            'startTime',            'endTime',            'confirmedAt',            'cancelledAt',            'createdAt',            'updatedAt',        ];
    }

    /**
     * Transform EventResourceBooking entity to array for API response
     * Override this method to customize API output format
     *
     * @param object $entity
     * @return array<string, mixed>
     */
    protected function entityToArray(object $entity): array
    {
        assert($entity instanceof EventResourceBooking);

        return [
            'organization' => $entity->getOrganization()?->getId()?->toString() ?? '',
            'organizationName' => $entity->getOrganization()?->getName() ?? '',
            'startTime' => $entity->getStartTime()?->format('c'),
            'bookedBy' => $entity->getBookedBy()?->getId()?->toString() ?? '',
            'bookedByName' => $entity->getBookedBy()?->getName() ?? '',
            'endTime' => $entity->getEndTime()?->format('c'),
            'confirmedAt' => $entity->getConfirmedAt()?->format('c'),
            'cancelledAt' => $entity->getCancelledAt()?->format('c'),
            'cancellationReason' => $entity->getCancellationReason(),
            'event' => $entity->getEvent()?->getId()?->toString() ?? '',
            'eventName' => $entity->getEvent()?->getName() ?? '',
            'notes' => $entity->getNotes(),
            'resource' => $entity->getResource()?->getId()?->toString() ?? '',
            'resourceName' => $entity->getResource()?->getName() ?? '',
            'status' => $entity->getStatus(),
            'createdAt' => $entity->getCreatedAt()->format('c'),
            'updatedAt' => $entity->getUpdatedAt()->format('c'),
        ];
    }
}
