<?php

declare(strict_types=1);

namespace App\Repository\Generated;

use App\Entity\BillingFrequency;
use App\Repository\Base\BaseRepository;

/**
 * BillingFrequencyRepository (Generated Base Class)
 *
 * Defines billing frequency options for subscriptions (Daily, Weekly, Biweekly, Monthly, Quarterly, Semi-Annual, Annual, Biennial). Controls recurring billing intervals with support for custom cycles and discount management.
 *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom query methods to BillingFrequencyRepository.php instead.
 *
 * Provides:
 * - Full-text search with UNACCENT (inherited from BaseRepository)
 * - Multi-column filtering and sorting
 * - Pagination with metadata
 * - Date range and boolean filters
 * - Relationship field filtering
 *
 * @extends BaseRepository<BillingFrequency>
 * @generated by Genmax Code Generator
 */
abstract class BillingFrequencyRepositoryGenerated extends BaseRepository
{
    /**
     * Get entity name for search configuration
     */
    protected function getEntityName(): string
    {
        return 'billingfrequency';
    }

    /**
     * Get searchable fields for full-text search
     * These fields will be searched using UNACCENT and LIKE
     *
     * @return array<string>
     */
    protected function getSearchableFields(): array
    {
        return [            'name',            'value',            'description',            'displayName',        ];
    }

    /**
     * Define sortable fields mapping
     * Maps API field names to entity properties
     *
     * @return array<string, string>
     */
    protected function getSortableFields(): array
    {
        return [            'name' => 'name',            'value' => 'value',            'displayName' => 'displayName',            'intervalType' => 'intervalType',            'intervalCount' => 'intervalCount',            'daysInCycle' => 'daysInCycle',            'discountPercentage' => 'discountPercentage',            'default' => 'default',            'sortOrder' => 'sortOrder',            'active' => 'active',            'products' => 'products',            'createdAt' => 'createdAt',            'updatedAt' => 'updatedAt',        ];
    }

    /**
     * Define filterable fields (excludes computed/aggregate fields)
     *
     * @return array<string, string>
     */
    protected function getFilterableFields(): array
    {
        return [            'value' => 'value',            'intervalType' => 'intervalType',            'intervalCount' => 'intervalCount',            'daysInCycle' => 'daysInCycle',            'discountPercentage' => 'discountPercentage',            'default' => 'default',            'sortOrder' => 'sortOrder',            'active' => 'active',            'createdAt' => 'createdAt',            'updatedAt' => 'updatedAt',        ];
    }

    /**
     * Define relationship filter mappings
     * Allows filtering by related entity fields
     *
     * Example: 'ownerName' filters by owner.name
     *
     * @return array<string, array{relation: string, field: string}>
     */
    protected function getRelationshipFilterFields(): array
    {
        return [        ];
    }

    /**
     * Define boolean fields for equality filtering
     *
     * @return array<string>
     */
    protected function getBooleanFilterFields(): array
    {
        return [            'default',            'active',        ];
    }

    /**
     * Define date/datetime fields for range filtering
     * Supports format: "from:to" (e.g., "2024-01-01:2024-12-31")
     *
     * @return array<string>
     */
    protected function getDateFilterFields(): array
    {
        return [            'createdAt',            'updatedAt',        ];
    }

    /**
     * Transform BillingFrequency entity to array for API response
     * Override this method to customize API output format
     *
     * @param object $entity
     * @return array<string, mixed>
     */
    protected function entityToArray(object $entity): array
    {
        assert($entity instanceof BillingFrequency);

        return [
            'organization' => $entity->getOrganization()?->getId()?->toString() ?? '',
            'organizationName' => $entity->getOrganization()?->getName() ?? '',
            'name' => $entity->getName(),
            'value' => $entity->getValue(),
            'description' => $entity->getDescription(),
            'displayName' => $entity->getDisplayName(),
            'intervalType' => $entity->getIntervalType(),
            'productsCount' => $entity->getProducts()->count(),
            'createdAt' => $entity->getCreatedAt()->format('c'),
            'updatedAt' => $entity->getUpdatedAt()->format('c'),
        ];
    }
}
