<?php

declare(strict_types=1);

namespace App\Repository\Generated;

use App\Entity\ProductBatch;
use App\Repository\Base\BaseRepository;

/**
 * ProductBatchRepository (Generated Base Class)
 *
 * Tracks product batches with manufacturing dates, expiry dates, lot numbers, and inventory quantities for complete supply chain traceability
 *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom query methods to ProductBatchRepository.php instead.
 *
 * Provides:
 * - Full-text search with UNACCENT (inherited from BaseRepository)
 * - Multi-column filtering and sorting
 * - Pagination with metadata
 * - Date range and boolean filters
 * - Relationship field filtering
 *
 * @extends BaseRepository<ProductBatch>
 * @generated by Genmax Code Generator
 */
abstract class ProductBatchRepositoryGenerated extends BaseRepository
{
    /**
     * Get entity name for search configuration
     */
    protected function getEntityName(): string
    {
        return 'productbatch';
    }

    /**
     * Get searchable fields for full-text search
     * These fields will be searched using UNACCENT and LIKE
     *
     * @return array<string>
     */
    protected function getSearchableFields(): array
    {
        return [            'batchNumber',            'name',            'lotNumber',            'serialNumber',            'supplier',            'notes',            'currency',        ];
    }

    /**
     * Define sortable fields mapping
     * Maps API field names to entity properties
     *
     * @return array<string, string>
     */
    protected function getSortableFields(): array
    {
        return [            'batchNumber' => 'batchNumber',            'name' => 'name',            'manufacturingDate' => 'manufacturingDate',            'lotNumber' => 'lotNumber',            'serialNumber' => 'serialNumber',            'expired' => 'expired',            'supplier' => 'supplier',            'qualityStatus' => 'qualityStatus',            'availableQuantity' => 'availableQuantity',            'active' => 'active',            'commissionAmount' => 'commissionAmount',            'commissionRate' => 'commissionRate',            'costPrice' => 'costPrice',            'currency' => 'currency',            'discountAmount' => 'discountAmount',            'discountPercentage' => 'discountPercentage',            'exchangeRate' => 'exchangeRate',            'expirationDate' => 'expirationDate',            'listPrice' => 'listPrice',            'marginPercentage' => 'marginPercentage',            'maximumDiscount' => 'maximumDiscount',            'minimumPrice' => 'minimumPrice',            'product' => 'product',            'reservedQuantity' => 'reservedQuantity',            'stockQuantity' => 'stockQuantity',            'createdAt' => 'createdAt',            'updatedAt' => 'updatedAt',        ];
    }

    /**
     * Define filterable fields (excludes computed/aggregate fields)
     *
     * @return array<string, string>
     */
    protected function getFilterableFields(): array
    {
        return [            'batchNumber' => 'batchNumber',            'manufacturingDate' => 'manufacturingDate',            'lotNumber' => 'lotNumber',            'serialNumber' => 'serialNumber',            'expired' => 'expired',            'supplier' => 'supplier',            'qualityStatus' => 'qualityStatus',            'active' => 'active',            'createdAt' => 'createdAt',            'updatedAt' => 'updatedAt',        ];
    }

    /**
     * Define relationship filter mappings
     * Allows filtering by related entity fields
     *
     * Example: 'ownerName' filters by owner.name
     *
     * @return array<string, array{relation: string, field: string}>
     */
    protected function getRelationshipFilterFields(): array
    {
        return [        ];
    }

    /**
     * Define boolean fields for equality filtering
     *
     * @return array<string>
     */
    protected function getBooleanFilterFields(): array
    {
        return [            'expired',            'active',        ];
    }

    /**
     * Define date/datetime fields for range filtering
     * Supports format: "from:to" (e.g., "2024-01-01:2024-12-31")
     *
     * @return array<string>
     */
    protected function getDateFilterFields(): array
    {
        return [            'manufacturingDate',            'expirationDate',            'createdAt',            'updatedAt',        ];
    }

    /**
     * Transform ProductBatch entity to array for API response
     * Override this method to customize API output format
     *
     * @param object $entity
     * @return array<string, mixed>
     */
    protected function entityToArray(object $entity): array
    {
        assert($entity instanceof ProductBatch);

        return [
            'organization' => $entity->getOrganization()?->getId()?->toString() ?? '',
            'organizationName' => $entity->getOrganization()?->getName() ?? '',
            'batchNumber' => $entity->getBatchNumber(),
            'name' => $entity->getName(),
            'manufacturingDate' => $entity->getManufacturingDate()?->format('c'),
            'lotNumber' => $entity->getLotNumber(),
            'serialNumber' => $entity->getSerialNumber(),
            'supplier' => $entity->getSupplier(),
            'qualityStatus' => $entity->getQualityStatus(),
            'notes' => $entity->getNotes(),
            'currency' => $entity->getCurrency(),
            'exchangeRate' => $entity->getExchangeRate(),
            'expirationDate' => $entity->getExpirationDate()?->format('c'),
            'product' => $entity->getProduct()?->getId()?->toString() ?? '',
            'productName' => $entity->getProduct()?->getName() ?? '',
            'createdAt' => $entity->getCreatedAt()->format('c'),
            'updatedAt' => $entity->getUpdatedAt()->format('c'),
        ];
    }
}
