<?php

declare(strict_types=1);

namespace App\Repository\Generated;

use App\Entity\Competitor;
use App\Repository\Base\BaseRepository;

/**
 * CompetitorRepository (Generated Base Class)
 *
 * Competitor tracking for sales and market analysis
 *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom query methods to CompetitorRepository.php instead.
 *
 * Provides:
 * - Full-text search with UNACCENT (inherited from BaseRepository)
 * - Multi-column filtering and sorting
 * - Pagination with metadata
 * - Date range and boolean filters
 * - Relationship field filtering
 *
 * @extends BaseRepository<Competitor>
 * @generated by Genmax Code Generator
 */
abstract class CompetitorRepositoryGenerated extends BaseRepository
{
    /**
     * Get entity name for search configuration
     */
    protected function getEntityName(): string
    {
        return 'competitor';
    }

    /**
     * Get searchable fields for full-text search
     * These fields will be searched using UNACCENT and LIKE
     *
     * @return array<string>
     */
    protected function getSearchableFields(): array
    {
        return [            'name',            'description',            'industry',            'targetMarket',            'website',            'marketPosition',            'strengths',            'products',            'weaknesses',            'pricingModel',            'headquarters',            'opportunities',            'threats',            'notes',            'keyDifferentiators',        ];
    }

    /**
     * Define sortable fields mapping
     * Maps API field names to entity properties
     *
     * @return array<string, string>
     */
    protected function getSortableFields(): array
    {
        return [            'name' => 'name',            'description' => 'description',            'industry' => 'industry',            'deals' => 'deals',            'foundedYear' => 'foundedYear',            'website' => 'website',            'active' => 'active',            'marketPosition' => 'marketPosition',            'strengths' => 'strengths',            'weaknesses' => 'weaknesses',            'revenue' => 'revenue',            'employeeCount' => 'employeeCount',            'winRate' => 'winRate',            'lossRate' => 'lossRate',            'headquarters' => 'headquarters',            'lastAnalyzedAt' => 'lastAnalyzedAt',            'createdAt' => 'createdAt',            'updatedAt' => 'updatedAt',        ];
    }

    /**
     * Define filterable fields (excludes computed/aggregate fields)
     *
     * @return array<string, string>
     */
    protected function getFilterableFields(): array
    {
        return [            'industry' => 'industry',            'foundedYear' => 'foundedYear',            'website' => 'website',            'active' => 'active',            'marketPosition' => 'marketPosition',            'revenue' => 'revenue',            'employeeCount' => 'employeeCount',            'winRate' => 'winRate',            'lossRate' => 'lossRate',            'headquarters' => 'headquarters',            'lastAnalyzedAt' => 'lastAnalyzedAt',            'createdAt' => 'createdAt',            'updatedAt' => 'updatedAt',        ];
    }

    /**
     * Define relationship filter mappings
     * Allows filtering by related entity fields
     *
     * Example: 'ownerName' filters by owner.name
     *
     * @return array<string, array{relation: string, field: string}>
     */
    protected function getRelationshipFilterFields(): array
    {
        return [        ];
    }

    /**
     * Define boolean fields for equality filtering
     *
     * @return array<string>
     */
    protected function getBooleanFilterFields(): array
    {
        return [            'active',        ];
    }

    /**
     * Define date/datetime fields for range filtering
     * Supports format: "from:to" (e.g., "2024-01-01:2024-12-31")
     *
     * @return array<string>
     */
    protected function getDateFilterFields(): array
    {
        return [            'lastAnalyzedAt',            'createdAt',            'updatedAt',        ];
    }

    /**
     * Transform Competitor entity to array for API response
     * Override this method to customize API output format
     *
     * @param object $entity
     * @return array<string, mixed>
     */
    protected function entityToArray(object $entity): array
    {
        assert($entity instanceof Competitor);

        return [
            'organization' => $entity->getOrganization()?->getId()?->toString() ?? '',
            'organizationName' => $entity->getOrganization()?->getName() ?? '',
            'name' => $entity->getName(),
            'description' => $entity->getDescription(),
            'industry' => $entity->getIndustry(),
            'targetMarket' => $entity->getTargetMarket(),
            'dealsCount' => $entity->getDeals()->count(),
            'website' => $entity->getWebsite(),
            'marketPosition' => $entity->getMarketPosition(),
            'strengths' => $entity->getStrengths(),
            'products' => $entity->getProducts(),
            'weaknesses' => $entity->getWeaknesses(),
            'revenue' => $entity->getRevenue(),
            'pricingModel' => $entity->getPricingModel(),
            'headquarters' => $entity->getHeadquarters(),
            'opportunities' => $entity->getOpportunities(),
            'threats' => $entity->getThreats(),
            'notes' => $entity->getNotes(),
            'lastAnalyzedAt' => $entity->getLastAnalyzedAt()?->format('c'),
            'keyDifferentiators' => $entity->getKeyDifferentiators(),
            'createdAt' => $entity->getCreatedAt()->format('c'),
            'updatedAt' => $entity->getUpdatedAt()->format('c'),
        ];
    }
}
