<?php

declare(strict_types=1);

namespace App\Repository\Generated;

use App\Entity\Talk;
use App\Repository\Base\BaseRepository;

/**
 * TalkRepository (Generated Base Class)
 *
 * Communication threads with customers and prospects
 *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom query methods to TalkRepository.php instead.
 *
 * Provides:
 * - Full-text search with UNACCENT (inherited from BaseRepository)
 * - Multi-column filtering and sorting
 * - Pagination with metadata
 * - Date range and boolean filters
 * - Relationship field filtering
 *
 * @extends BaseRepository<Talk>
 * @generated by Genmax Code Generator
 */
abstract class TalkRepositoryGenerated extends BaseRepository
{
    /**
     * Get entity name for search configuration
     */
    protected function getEntityName(): string
    {
        return 'talk';
    }

    /**
     * Get searchable fields for full-text search
     * These fields will be searched using UNACCENT and LIKE
     *
     * @return array<string>
     */
    protected function getSearchableFields(): array
    {
        return [            'subject',            'summary',        ];
    }

    /**
     * Define sortable fields mapping
     * Maps API field names to entity properties
     *
     * @return array<string, string>
     */
    protected function getSortableFields(): array
    {
        return [            'subject' => 'subject',            'summary' => 'summary',            'company' => 'company',            'deal' => 'deal',            'talkType' => 'talkType',            'channel' => 'channel',            'status' => 'status',            'priority' => 'priority',            'outcome' => 'outcome',            'sentiment' => 'sentiment',            'dateStart' => 'dateStart',            'dateLastMessage' => 'dateLastMessage',            'closedAt' => 'closedAt',            'durationSeconds' => 'durationSeconds',            'recordingUrl' => 'recordingUrl',            'users' => 'users',            'owner' => 'owner',            'assignedTo' => 'assignedTo',            'agents' => 'agents',            'campaigns' => 'campaigns',            'messages' => 'messages',            'messageCount' => 'messageCount',            'archived' => 'archived',            'internal' => 'internal',            'createdAt' => 'createdAt',            'updatedAt' => 'updatedAt',        ];
    }

    /**
     * Define filterable fields (excludes computed/aggregate fields)
     *
     * @return array<string, string>
     */
    protected function getFilterableFields(): array
    {
        return [            'sentiment' => 'sentiment',            'closedAt' => 'closedAt',            'messageCount' => 'messageCount',            'internal' => 'internal',            'tags' => 'tags',            'createdAt' => 'createdAt',            'updatedAt' => 'updatedAt',        ];
    }

    /**
     * Define relationship filter mappings
     * Allows filtering by related entity fields
     *
     * Example: 'ownerName' filters by owner.name
     *
     * @return array<string, array{relation: string, field: string}>
     */
    protected function getRelationshipFilterFields(): array
    {
        return [            'companyName' => ['relation' => 'company', 'field' => 'name'],            'ownerName' => ['relation' => 'owner', 'field' => 'name'],            'assignedToName' => ['relation' => 'assignedTo', 'field' => 'name'],        ];
    }

    /**
     * Define boolean fields for equality filtering
     *
     * @return array<string>
     */
    protected function getBooleanFilterFields(): array
    {
        return [            'archived',            'internal',        ];
    }

    /**
     * Define date/datetime fields for range filtering
     * Supports format: "from:to" (e.g., "2024-01-01:2024-12-31")
     *
     * @return array<string>
     */
    protected function getDateFilterFields(): array
    {
        return [            'dateStart',            'dateLastMessage',            'closedAt',            'createdAt',            'updatedAt',        ];
    }

    /**
     * Transform Talk entity to array for API response
     * Override this method to customize API output format
     *
     * @param object $entity
     * @return array<string, mixed>
     */
    protected function entityToArray(object $entity): array
    {
        assert($entity instanceof Talk);

        return [
            'organization' => $entity->getOrganization()?->getId()?->toString() ?? '',
            'organizationName' => $entity->getOrganization()?->getName() ?? '',
            'subject' => $entity->getSubject(),
            'summary' => $entity->getSummary(),
            'company' => $entity->getCompany()?->getId()?->toString() ?? '',
            'companyName' => $entity->getCompany()?->getName() ?? '',
            'contact' => $entity->getContact()?->getId()?->toString() ?? '',
            'contactName' => $entity->getContact()?->getName() ?? '',
            'deal' => $entity->getDeal()?->getId()?->toString() ?? '',
            'dealName' => $entity->getDeal()?->getName() ?? '',
            'talkType' => $entity->getTalkType()?->getId()?->toString() ?? '',
            'talkTypeName' => $entity->getTalkType()?->getName() ?? '',
            'sentiment' => $entity->getSentiment(),
            'dateStart' => $entity->getDateStart()?->format('c'),
            'dateLastMessage' => $entity->getDateLastMessage()?->format('c'),
            'closedAt' => $entity->getClosedAt()?->format('c'),
            'recordingUrl' => $entity->getRecordingUrl(),
            'usersCount' => $entity->getUsers()->count(),
            'owner' => $entity->getOwner()?->getId()?->toString() ?? '',
            'ownerName' => $entity->getOwner()?->getName() ?? '',
            'assignedTo' => $entity->getAssignedTo()?->getId()?->toString() ?? '',
            'assignedToName' => $entity->getAssignedTo()?->getName() ?? '',
            'agentsCount' => $entity->getAgents()->count(),
            'campaignsCount' => $entity->getCampaigns()->count(),
            'messagesCount' => $entity->getMessages()->count(),
            'createdAt' => $entity->getCreatedAt()->format('c'),
            'updatedAt' => $entity->getUpdatedAt()->format('c'),
        ];
    }
}
