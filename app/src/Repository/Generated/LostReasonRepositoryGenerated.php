<?php

declare(strict_types=1);

namespace App\Repository\Generated;

use App\Entity\LostReason;
use App\Repository\Base\BaseRepository;

/**
 * LostReasonRepository (Generated Base Class)
 *
 * Tracks and categorizes reasons for lost deals with advanced analytics capabilities. Supports win-loss analysis, competitor tracking, and actionable insights to improve win rates. Implements CRM best practices for structured data collection and longitudinal analysis.
 *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom query methods to LostReasonRepository.php instead.
 *
 * Provides:
 * - Full-text search with UNACCENT (inherited from BaseRepository)
 * - Multi-column filtering and sorting
 * - Pagination with metadata
 * - Date range and boolean filters
 * - Relationship field filtering
 *
 * @extends BaseRepository<LostReason>
 * @generated by Genmax Code Generator
 */
abstract class LostReasonRepositoryGenerated extends BaseRepository
{
    /**
     * Get entity name for search configuration
     */
    protected function getEntityName(): string
    {
        return 'lostreason';
    }

    /**
     * Get searchable fields for full-text search
     * These fields will be searched using UNACCENT and LIKE
     *
     * @return array<string>
     */
    protected function getSearchableFields(): array
    {
        return [            'name',            'description',            'category',            'impact',            'competitorName',        ];
    }

    /**
     * Define sortable fields mapping
     * Maps API field names to entity properties
     *
     * @return array<string, string>
     */
    protected function getSortableFields(): array
    {
        return [            'name' => 'name',            'description' => 'description',            'category' => 'category',            'deals' => 'deals',            'active' => 'active',            'sortOrder' => 'sortOrder',            'impact' => 'impact',            'winBackPotential' => 'winBackPotential',            'competitorName' => 'competitorName',            'createdAt' => 'createdAt',            'updatedAt' => 'updatedAt',        ];
    }

    /**
     * Define filterable fields (excludes computed/aggregate fields)
     *
     * @return array<string, string>
     */
    protected function getFilterableFields(): array
    {
        return [            'category' => 'category',            'active' => 'active',            'default' => 'default',            'sortOrder' => 'sortOrder',            'requiresNotes' => 'requiresNotes',            'critical' => 'critical',            'impact' => 'impact',            'winBackPotential' => 'winBackPotential',            'actionable' => 'actionable',            'internal' => 'internal',            'createdAt' => 'createdAt',            'updatedAt' => 'updatedAt',        ];
    }

    /**
     * Define relationship filter mappings
     * Allows filtering by related entity fields
     *
     * Example: 'ownerName' filters by owner.name
     *
     * @return array<string, array{relation: string, field: string}>
     */
    protected function getRelationshipFilterFields(): array
    {
        return [        ];
    }

    /**
     * Define boolean fields for equality filtering
     *
     * @return array<string>
     */
    protected function getBooleanFilterFields(): array
    {
        return [            'active',            'default',            'requiresNotes',            'critical',            'actionable',            'internal',        ];
    }

    /**
     * Define date/datetime fields for range filtering
     * Supports format: "from:to" (e.g., "2024-01-01:2024-12-31")
     *
     * @return array<string>
     */
    protected function getDateFilterFields(): array
    {
        return [            'createdAt',            'updatedAt',        ];
    }

    /**
     * Transform LostReason entity to array for API response
     * Override this method to customize API output format
     *
     * @param object $entity
     * @return array<string, mixed>
     */
    protected function entityToArray(object $entity): array
    {
        assert($entity instanceof LostReason);

        return [
            'organization' => $entity->getOrganization()?->getId()?->toString() ?? '',
            'organizationName' => $entity->getOrganization()?->getName() ?? '',
            'name' => $entity->getName(),
            'description' => $entity->getDescription(),
            'category' => $entity->getCategory(),
            'dealsCount' => $entity->getDeals()->count(),
            'color' => $entity->getColor(),
            'impact' => $entity->getImpact(),
            'winBackPotential' => $entity->getWinBackPotential(),
            'competitorName' => $entity->getCompetitorName(),
            'automationRule' => $entity->getAutomationRule(),
            'createdAt' => $entity->getCreatedAt()->format('c'),
            'updatedAt' => $entity->getUpdatedAt()->format('c'),
        ];
    }
}
