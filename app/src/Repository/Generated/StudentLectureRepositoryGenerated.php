<?php

declare(strict_types=1);

namespace App\Repository\Generated;

use App\Entity\StudentLecture;
use App\Repository\Base\BaseRepository;

/**
 * StudentLectureRepository (Generated Base Class)
 *
 * Student lecture progress and completion tracking
 *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom query methods to StudentLectureRepository.php instead.
 *
 * Provides:
 * - Full-text search with UNACCENT (inherited from BaseRepository)
 * - Multi-column filtering and sorting
 * - Pagination with metadata
 * - Date range and boolean filters
 * - Relationship field filtering
 *
 * @extends BaseRepository<StudentLecture>
 * @generated by Genmax Code Generator
 */
abstract class StudentLectureRepositoryGenerated extends BaseRepository
{
    /**
     * Get entity name for search configuration
     */
    protected function getEntityName(): string
    {
        return 'studentlecture';
    }

    /**
     * Get searchable fields for full-text search
     * These fields will be searched using UNACCENT and LIKE
     *
     * @return array<string>
     */
    protected function getSearchableFields(): array
    {
        return [            'student',            'lecture',            'studentCourse',        ];
    }

    /**
     * Define sortable fields mapping
     * Maps API field names to entity properties
     *
     * @return array<string, string>
     */
    protected function getSortableFields(): array
    {
        return [            'student' => 'student',            'lecture' => 'lecture',            'studentCourse' => 'studentCourse',            'watchedSeconds' => 'watchedSeconds',            'lastPositionSeconds' => 'lastPositionSeconds',            'completionPercentage' => 'completionPercentage',            'completed' => 'completed',            'lastWatchedAt' => 'lastWatchedAt',            'completedAt' => 'completedAt',            'createdAt' => 'createdAt',            'updatedAt' => 'updatedAt',        ];
    }

    /**
     * Define filterable fields (excludes computed/aggregate fields)
     *
     * @return array<string, string>
     */
    protected function getFilterableFields(): array
    {
        return [            'watchedSeconds' => 'watchedSeconds',            'lastPositionSeconds' => 'lastPositionSeconds',            'completionPercentage' => 'completionPercentage',            'completed' => 'completed',            'lastWatchedAt' => 'lastWatchedAt',            'completedAt' => 'completedAt',            'createdAt' => 'createdAt',            'updatedAt' => 'updatedAt',        ];
    }

    /**
     * Define relationship filter mappings
     * Allows filtering by related entity fields
     *
     * Example: 'ownerName' filters by owner.name
     *
     * @return array<string, array{relation: string, field: string}>
     */
    protected function getRelationshipFilterFields(): array
    {
        return [            'studentName' => ['relation' => 'student', 'field' => 'name'],            'lectureName' => ['relation' => 'lecture', 'field' => 'name'],            'studentCourseName' => ['relation' => 'studentCourse', 'field' => 'name'],        ];
    }

    /**
     * Define boolean fields for equality filtering
     *
     * @return array<string>
     */
    protected function getBooleanFilterFields(): array
    {
        return [            'completed',        ];
    }

    /**
     * Define date/datetime fields for range filtering
     * Supports format: "from:to" (e.g., "2024-01-01:2024-12-31")
     *
     * @return array<string>
     */
    protected function getDateFilterFields(): array
    {
        return [            'lastWatchedAt',            'completedAt',            'createdAt',            'updatedAt',        ];
    }

    /**
     * Transform StudentLecture entity to array for API response
     * Override this method to customize API output format
     *
     * @param object $entity
     * @return array<string, mixed>
     */
    protected function entityToArray(object $entity): array
    {
        assert($entity instanceof StudentLecture);

        return [
            'student' => $entity->getStudent(),
            'lecture' => $entity->getLecture(),
            'studentCourse' => $entity->getStudentCourse(),
            'lastWatchedAt' => $entity->getLastWatchedAt()?->format('c'),
            'completedAt' => $entity->getCompletedAt()?->format('c'),
            'createdAt' => $entity->getCreatedAt()->format('c'),
            'updatedAt' => $entity->getUpdatedAt()->format('c'),
        ];
    }
}
