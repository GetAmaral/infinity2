<?php

declare(strict_types=1);

namespace App\Repository\Generated;

use App\Entity\TalkMessage;
use App\Repository\Base\BaseRepository;

/**
 * TalkMessageRepository (Generated Base Class)
 *
 * Individual messages within communication threads
 *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom query methods to TalkMessageRepository.php instead.
 *
 * Provides:
 * - Full-text search with UNACCENT (inherited from BaseRepository)
 * - Multi-column filtering and sorting
 * - Pagination with metadata
 * - Date range and boolean filters
 * - Relationship field filtering
 *
 * @extends BaseRepository<TalkMessage>
 * @generated by Genmax Code Generator
 */
abstract class TalkMessageRepositoryGenerated extends BaseRepository
{
    /**
     * Get entity name for search configuration
     */
    protected function getEntityName(): string
    {
        return 'talkmessage';
    }

    /**
     * Get searchable fields for full-text search
     * These fields will be searched using UNACCENT and LIKE
     *
     * @return array<string>
     */
    protected function getSearchableFields(): array
    {
        return [            'body',            'direction',            'channel',            'subject',        ];
    }

    /**
     * Define sortable fields mapping
     * Maps API field names to entity properties
     *
     * @return array<string, string>
     */
    protected function getSortableFields(): array
    {
        return [            'talk' => 'talk',            'fromContact' => 'fromContact',            'fromUser' => 'fromUser',            'fromAgent' => 'fromAgent',            'sentAt' => 'sentAt',            'body' => 'body',            'messageType' => 'messageType',            'attachments' => 'attachments',            'read' => 'read',            'readAt' => 'readAt',            'sentiment' => 'sentiment',            'parentMessage' => 'parentMessage',            'edited' => 'edited',            'notification' => 'notification',            'direction' => 'direction',            'deliveredAt' => 'deliveredAt',            'internal' => 'internal',            'system' => 'system',            'editedAt' => 'editedAt',            'channel' => 'channel',            'subject' => 'subject',            'createdAt' => 'createdAt',            'updatedAt' => 'updatedAt',        ];
    }

    /**
     * Define filterable fields (excludes computed/aggregate fields)
     *
     * @return array<string, string>
     */
    protected function getFilterableFields(): array
    {
        return [            'direction' => 'direction',            'deliveredAt' => 'deliveredAt',            'internal' => 'internal',            'system' => 'system',            'channel' => 'channel',            'subject' => 'subject',            'createdAt' => 'createdAt',            'updatedAt' => 'updatedAt',        ];
    }

    /**
     * Define relationship filter mappings
     * Allows filtering by related entity fields
     *
     * Example: 'ownerName' filters by owner.name
     *
     * @return array<string, array{relation: string, field: string}>
     */
    protected function getRelationshipFilterFields(): array
    {
        return [        ];
    }

    /**
     * Define boolean fields for equality filtering
     *
     * @return array<string>
     */
    protected function getBooleanFilterFields(): array
    {
        return [            'read',            'edited',            'internal',            'system',        ];
    }

    /**
     * Define date/datetime fields for range filtering
     * Supports format: "from:to" (e.g., "2024-01-01:2024-12-31")
     *
     * @return array<string>
     */
    protected function getDateFilterFields(): array
    {
        return [            'sentAt',            'readAt',            'deliveredAt',            'editedAt',            'createdAt',            'updatedAt',        ];
    }

    /**
     * Transform TalkMessage entity to array for API response
     * Override this method to customize API output format
     *
     * @param object $entity
     * @return array<string, mixed>
     */
    protected function entityToArray(object $entity): array
    {
        assert($entity instanceof TalkMessage);

        return [
            'organization' => $entity->getOrganization()?->getId()?->toString() ?? '',
            'organizationName' => $entity->getOrganization()?->getName() ?? '',
            'talk' => $entity->getTalk()?->getId()?->toString() ?? '',
            'talkName' => $entity->getTalk()?->getName() ?? '',
            'fromContact' => $entity->getFromContact()?->getId()?->toString() ?? '',
            'fromContactName' => $entity->getFromContact()?->getName() ?? '',
            'fromUser' => $entity->getFromUser()?->getId()?->toString() ?? '',
            'fromUserName' => $entity->getFromUser()?->getName() ?? '',
            'fromAgent' => $entity->getFromAgent()?->getId()?->toString() ?? '',
            'fromAgentName' => $entity->getFromAgent()?->getName() ?? '',
            'sentAt' => $entity->getSentAt()?->format('c'),
            'body' => $entity->getBody(),
            'messageType' => $entity->getMessageType(),
            'attachmentsCount' => $entity->getAttachments()->count(),
            'readAt' => $entity->getReadAt()?->format('c'),
            'sentiment' => $entity->getSentiment(),
            'parentMessage' => $entity->getParentMessage()?->getId()?->toString() ?? '',
            'parentMessageName' => $entity->getParentMessage()?->getName() ?? '',
            'notification' => $entity->getNotification()?->getId()?->toString() ?? '',
            'notificationName' => $entity->getNotification()?->getName() ?? '',
            'direction' => $entity->getDirection(),
            'deliveredAt' => $entity->getDeliveredAt()?->format('c'),
            'editedAt' => $entity->getEditedAt()?->format('c'),
            'channel' => $entity->getChannel(),
            'subject' => $entity->getSubject(),
            'createdAt' => $entity->getCreatedAt()->format('c'),
            'updatedAt' => $entity->getUpdatedAt()->format('c'),
        ];
    }
}
