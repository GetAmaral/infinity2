<?php

declare(strict_types=1);

namespace App\Repository\Generated;

use App\Entity\Organization;
use App\Repository\Base\BaseRepository;

/**
 * OrganizationRepository (Generated Base Class)
 *
 * Multi-tenant organization entity that isolates data by organization
 *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom query methods to OrganizationRepository.php instead.
 *
 * Provides:
 * - Full-text search with UNACCENT (inherited from BaseRepository)
 * - Multi-column filtering and sorting
 * - Pagination with metadata
 * - Date range and boolean filters
 * - Relationship field filtering
 *
 * @extends BaseRepository<Organization>
 * @generated by Genmax Code Generator
 */
abstract class OrganizationRepositoryGenerated extends BaseRepository
{
    /**
     * Get entity name for search configuration
     */
    protected function getEntityName(): string
    {
        return 'organization';
    }

    /**
     * Get searchable fields for full-text search
     * These fields will be searched using UNACCENT and LIKE
     *
     * @return array<string>
     */
    protected function getSearchableFields(): array
    {
        return [            'name',            'description',            'logoUrl',            'industry',            'address',            'website',            'businessPhone',            'celPhone',            'contactName',            'currency',            'geo',            'postalCode',            'slug',            'timeZone',        ];
    }

    /**
     * Define sortable fields mapping
     * Maps API field names to entity properties
     *
     * @return array<string, string>
     */
    protected function getSortableFields(): array
    {
        return [            'name' => 'name',            'description' => 'description',            'logoUrl' => 'logoUrl',            'industry' => 'industry',            'address' => 'address',            'website' => 'website',            'agents' => 'agents',            'products' => 'products',            'billingFrequencies' => 'billingFrequencies',            'branding' => 'branding',            'brands' => 'brands',            'businessPhone' => 'businessPhone',            'businessSettings' => 'businessSettings',            'calendars' => 'calendars',            'campaigns' => 'campaigns',            'celPhone' => 'celPhone',            'city' => 'city',            'companies' => 'companies',            'companySize' => 'companySize',            'competitors' => 'competitors',            'contactName' => 'contactName',            'contacts' => 'contacts',            'courses' => 'courses',            'currency' => 'currency',            'dealStages' => 'dealStages',            'deals' => 'deals',            'eventCategories' => 'eventCategories',            'eventResourceBookings' => 'eventResourceBookings',            'eventResourceTypes' => 'eventResourceTypes',            'eventResources' => 'eventResources',            'events' => 'events',            'featureFlags' => 'featureFlags',            'flags' => 'flags',            'geo' => 'geo',            'holidays' => 'holidays',            'integrationConfig' => 'integrationConfig',            'leadSources' => 'leadSources',            'modules' => 'modules',            'navConfig' => 'navConfig',            'notificationTypes' => 'notificationTypes',            'pipelineStages' => 'pipelineStages',            'pipelines' => 'pipelines',            'postalCode' => 'postalCode',            'productBatches' => 'productBatches',            'productCategories' => 'productCategories',            'productLines' => 'productLines',            'profiles' => 'profiles',            'securityConfig' => 'securityConfig',            'slug' => 'slug',            'socialMedias' => 'socialMedias',            'status' => 'status',            'tags' => 'tags',            'talkMessages' => 'talkMessages',            'talkTypes' => 'talkTypes',            'talks' => 'talks',            'taskTypes' => 'taskTypes',            'tasks' => 'tasks',            'taxCategories' => 'taxCategories',            'timeZone' => 'timeZone',            'uiPreferences' => 'uiPreferences',            'users' => 'users',            'workingHours' => 'workingHours',            'createdAt' => 'createdAt',            'updatedAt' => 'updatedAt',        ];
    }

    /**
     * Define filterable fields (excludes computed/aggregate fields)
     *
     * @return array<string, string>
     */
    protected function getFilterableFields(): array
    {
        return [            'createdAt' => 'createdAt',            'updatedAt' => 'updatedAt',        ];
    }

    /**
     * Define relationship filter mappings
     * Allows filtering by related entity fields
     *
     * Example: 'ownerName' filters by owner.name
     *
     * @return array<string, array{relation: string, field: string}>
     */
    protected function getRelationshipFilterFields(): array
    {
        return [        ];
    }

    /**
     * Define boolean fields for equality filtering
     *
     * @return array<string>
     */
    protected function getBooleanFilterFields(): array
    {
        return [            'active',        ];
    }

    /**
     * Define date/datetime fields for range filtering
     * Supports format: "from:to" (e.g., "2024-01-01:2024-12-31")
     *
     * @return array<string>
     */
    protected function getDateFilterFields(): array
    {
        return [            'createdAt',            'updatedAt',        ];
    }

    /**
     * Transform Organization entity to array for API response
     * Override this method to customize API output format
     *
     * @param object $entity
     * @return array<string, mixed>
     */
    protected function entityToArray(object $entity): array
    {
        assert($entity instanceof Organization);

        return [
            'logoPath' => $entity->getLogoPath(),
            'name' => $entity->getName(),
            'logoPathDark' => $entity->getLogoPathDark(),
            'description' => $entity->getDescription(),
            'studentCoursesCount' => $entity->getStudentCourses()->count(),
            'logoUrl' => $entity->getLogoUrl(),
            'industry' => $entity->getIndustry(),
            'address' => $entity->getAddress(),
            'website' => $entity->getWebsite(),
            'agentsCount' => $entity->getAgents()->count(),
            'productsCount' => $entity->getProducts()->count(),
            'billingFrequenciesCount' => $entity->getBillingFrequencies()->count(),
            'brandsCount' => $entity->getBrands()->count(),
            'businessPhone' => $entity->getBusinessPhone(),
            'calendarsCount' => $entity->getCalendars()->count(),
            'campaignsCount' => $entity->getCampaigns()->count(),
            'pipelineStageTemplatesCount' => $entity->getPipelineStageTemplates()->count(),
            'taskTemplatesCount' => $entity->getTaskTemplates()->count(),
            'remindersCount' => $entity->getReminders()->count(),
            'celPhone' => $entity->getCelPhone(),
            'pipelineTemplatesCount' => $entity->getPipelineTemplates()->count(),
            'winReasonsCount' => $entity->getWinReasons()->count(),
            'treeFlowsCount' => $entity->getTreeFlows()->count(),
            'citiesCount' => $entity->getCities()->count(),
            'calendarTypesCount' => $entity->getCalendarTypes()->count(),
            'attachmentsCount' => $entity->getAttachments()->count(),
            'dealCategoriesCount' => $entity->getDealCategories()->count(),
            'dealTypesCount' => $entity->getDealTypes()->count(),
            'eventAttendeesCount' => $entity->getEventAttendees()->count(),
            'lostReasonsCount' => $entity->getLostReasons()->count(),
            'meetingDatasCount' => $entity->getMeetingDatas()->count(),
            'notificationsCount' => $entity->getNotifications()->count(),
            'city' => $entity->getCity()?->getId()?->toString() ?? '',
            'cityName' => $entity->getCity()?->getName() ?? '',
            'companiesCount' => $entity->getCompanies()->count(),
            'competitorsCount' => $entity->getCompetitors()->count(),
            'contactName' => $entity->getContactName(),
            'contactsCount' => $entity->getContacts()->count(),
            'coursesCount' => $entity->getCourses()->count(),
            'currency' => $entity->getCurrency(),
            'dealStagesCount' => $entity->getDealStages()->count(),
            'dealsCount' => $entity->getDeals()->count(),
            'eventCategoriesCount' => $entity->getEventCategories()->count(),
            'eventResourceBookingsCount' => $entity->getEventResourceBookings()->count(),
            'eventResourceTypesCount' => $entity->getEventResourceTypes()->count(),
            'eventResourcesCount' => $entity->getEventResources()->count(),
            'eventsCount' => $entity->getEvents()->count(),
            'flagsCount' => $entity->getFlags()->count(),
            'geo' => $entity->getGeo(),
            'holidaysCount' => $entity->getHolidays()->count(),
            'leadSourcesCount' => $entity->getLeadSources()->count(),
            'modulesCount' => $entity->getModules()->count(),
            'notificationTypesCount' => $entity->getNotificationTypes()->count(),
            'pipelineStagesCount' => $entity->getPipelineStages()->count(),
            'pipelinesCount' => $entity->getPipelines()->count(),
            'postalCode' => $entity->getPostalCode(),
            'productBatchesCount' => $entity->getProductBatches()->count(),
            'productCategoriesCount' => $entity->getProductCategories()->count(),
            'productLinesCount' => $entity->getProductLines()->count(),
            'profilesCount' => $entity->getProfiles()->count(),
            'slug' => $entity->getSlug(),
            'socialMediasCount' => $entity->getSocialMedias()->count(),
            'tagsCount' => $entity->getTags()->count(),
            'talkMessagesCount' => $entity->getTalkMessages()->count(),
            'talkTypesCount' => $entity->getTalkTypes()->count(),
            'talksCount' => $entity->getTalks()->count(),
            'taskTypesCount' => $entity->getTaskTypes()->count(),
            'tasksCount' => $entity->getTasks()->count(),
            'taxCategoriesCount' => $entity->getTaxCategories()->count(),
            'timeZone' => $entity->getTimeZone(),
            'usersCount' => $entity->getUsers()->count(),
            'workingHoursCount' => $entity->getWorkingHours()->count(),
            'createdAt' => $entity->getCreatedAt()->format('c'),
            'updatedAt' => $entity->getUpdatedAt()->format('c'),
        ];
    }
}
