<?php

declare(strict_types=1);

namespace App\Repository\Generated;

use App\Entity\Notification;
use App\Repository\Base\BaseRepository;

/**
 * NotificationRepository (Generated Base Class)
 *
 * System notifications for users
 *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom query methods to NotificationRepository.php instead.
 *
 * Provides:
 * - Full-text search with UNACCENT (inherited from BaseRepository)
 * - Multi-column filtering and sorting
 * - Pagination with metadata
 * - Date range and boolean filters
 * - Relationship field filtering
 *
 * @extends BaseRepository<Notification>
 * @generated by Genmax Code Generator
 */
abstract class NotificationRepositoryGenerated extends BaseRepository
{
    /**
     * Get entity name for search configuration
     */
    protected function getEntityName(): string
    {
        return 'notification';
    }

    /**
     * Get searchable fields for full-text search
     * These fields will be searched using UNACCENT and LIKE
     *
     * @return array<string>
     */
    protected function getSearchableFields(): array
    {
        return [            'title',            'message',        ];
    }

    /**
     * Define sortable fields mapping
     * Maps API field names to entity properties
     *
     * @return array<string, string>
     */
    protected function getSortableFields(): array
    {
        return [            'title' => 'title',            'priority' => 'priority',            'attendee' => 'attendee',            'read' => 'read',            'archived' => 'archived',            'readAt' => 'readAt',            'communicationMethod' => 'communicationMethod',            'event' => 'event',            'message' => 'message',            'notificationStatus' => 'notificationStatus',            'reminder' => 'reminder',            'sentAt' => 'sentAt',            'talkMessage' => 'talkMessage',            'type' => 'type',            'createdAt' => 'createdAt',            'updatedAt' => 'updatedAt',        ];
    }

    /**
     * Define filterable fields (excludes computed/aggregate fields)
     *
     * @return array<string, string>
     */
    protected function getFilterableFields(): array
    {
        return [            'title' => 'title',            'priority' => 'priority',            'read' => 'read',            'archived' => 'archived',            'sentAt' => 'sentAt',            'createdAt' => 'createdAt',            'updatedAt' => 'updatedAt',        ];
    }

    /**
     * Define relationship filter mappings
     * Allows filtering by related entity fields
     *
     * Example: 'ownerName' filters by owner.name
     *
     * @return array<string, array{relation: string, field: string}>
     */
    protected function getRelationshipFilterFields(): array
    {
        return [            'recipientName' => ['relation' => 'recipient', 'field' => 'name'],            'senderName' => ['relation' => 'sender', 'field' => 'name'],            'attendeeName' => ['relation' => 'attendee', 'field' => 'name'],            'communicationMethodName' => ['relation' => 'communicationMethod', 'field' => 'name'],            'eventName' => ['relation' => 'event', 'field' => 'name'],            'reminderName' => ['relation' => 'reminder', 'field' => 'name'],            'talkMessageName' => ['relation' => 'talkMessage', 'field' => 'name'],            'typeName' => ['relation' => 'type', 'field' => 'name'],        ];
    }

    /**
     * Define boolean fields for equality filtering
     *
     * @return array<string>
     */
    protected function getBooleanFilterFields(): array
    {
        return [            'read',            'archived',        ];
    }

    /**
     * Define date/datetime fields for range filtering
     * Supports format: "from:to" (e.g., "2024-01-01:2024-12-31")
     *
     * @return array<string>
     */
    protected function getDateFilterFields(): array
    {
        return [            'readAt',            'sentAt',            'createdAt',            'updatedAt',        ];
    }

    /**
     * Transform Notification entity to array for API response
     * Override this method to customize API output format
     *
     * @param object $entity
     * @return array<string, mixed>
     */
    protected function entityToArray(object $entity): array
    {
        assert($entity instanceof Notification);

        return [
            'organization' => $entity->getOrganization()?->getId()?->toString() ?? '',
            'organizationName' => $entity->getOrganization()?->getName() ?? '',
            'title' => $entity->getTitle(),
            'recipient' => $entity->getRecipient()?->getId()?->toString() ?? '',
            'recipientName' => $entity->getRecipient()?->getName() ?? '',
            'sender' => $entity->getSender()?->getId()?->toString() ?? '',
            'senderName' => $entity->getSender()?->getName() ?? '',
            'priority' => $entity->getPriority(),
            'actionUrl' => $entity->getActionUrl(),
            'attendee' => $entity->getAttendee()?->getId()?->toString() ?? '',
            'attendeeName' => $entity->getAttendee()?->getName() ?? '',
            'readAt' => $entity->getReadAt()?->format('c'),
            'communicationMethod' => $entity->getCommunicationMethod()?->getId()?->toString() ?? '',
            'communicationMethodName' => $entity->getCommunicationMethod()?->getName() ?? '',
            'event' => $entity->getEvent()?->getId()?->toString() ?? '',
            'eventName' => $entity->getEvent()?->getName() ?? '',
            'message' => $entity->getMessage(),
            'reminder' => $entity->getReminder()?->getId()?->toString() ?? '',
            'reminderName' => $entity->getReminder()?->getName() ?? '',
            'sentAt' => $entity->getSentAt()?->format('c'),
            'talkMessage' => $entity->getTalkMessage()?->getId()?->toString() ?? '',
            'talkMessageName' => $entity->getTalkMessage()?->getName() ?? '',
            'type' => $entity->getType()?->getId()?->toString() ?? '',
            'typeName' => $entity->getType()?->getName() ?? '',
            'createdAt' => $entity->getCreatedAt()->format('c'),
            'updatedAt' => $entity->getUpdatedAt()->format('c'),
        ];
    }
}
