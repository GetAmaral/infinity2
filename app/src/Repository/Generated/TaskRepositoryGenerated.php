<?php

declare(strict_types=1);

namespace App\Repository\Generated;

use App\Entity\Task;
use App\Repository\Base\BaseRepository;

/**
 * TaskRepository (Generated Base Class)
 *
 * Tasks and to-dos for productivity management
 *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom query methods to TaskRepository.php instead.
 *
 * Provides:
 * - Full-text search with UNACCENT (inherited from BaseRepository)
 * - Multi-column filtering and sorting
 * - Pagination with metadata
 * - Date range and boolean filters
 * - Relationship field filtering
 *
 * @extends BaseRepository<Task>
 * @generated by Genmax Code Generator
 */
abstract class TaskRepositoryGenerated extends BaseRepository
{
    /**
     * Get entity name for search configuration
     */
    protected function getEntityName(): string
    {
        return 'task';
    }

    /**
     * Get searchable fields for full-text search
     * These fields will be searched using UNACCENT and LIKE
     *
     * @return array<string>
     */
    protected function getSearchableFields(): array
    {
        return [            'name',            'description',            'command',            'location',        ];
    }

    /**
     * Define sortable fields mapping
     * Maps API field names to entity properties
     *
     * @return array<string, string>
     */
    protected function getSortableFields(): array
    {
        return [            'name' => 'name',            'description' => 'description',            'startDate' => 'startDate',            'completionPercentage' => 'completionPercentage',            'category' => 'category',            'archived' => 'archived',            'command' => 'command',            'completedDate' => 'completedDate',            'contact' => 'contact',            'deal' => 'deal',            'durationMinutes' => 'durationMinutes',            'location' => 'location',            'pipelineStage' => 'pipelineStage',            'priority' => 'priority',            'scheduledDate' => 'scheduledDate',            'taskStatus' => 'taskStatus',            'type' => 'type',            'user' => 'user',            'createdAt' => 'createdAt',            'updatedAt' => 'updatedAt',        ];
    }

    /**
     * Define filterable fields (excludes computed/aggregate fields)
     *
     * @return array<string, string>
     */
    protected function getFilterableFields(): array
    {
        return [            'startDate' => 'startDate',            'completionPercentage' => 'completionPercentage',            'category' => 'category',            'createdAt' => 'createdAt',            'updatedAt' => 'updatedAt',        ];
    }

    /**
     * Define relationship filter mappings
     * Allows filtering by related entity fields
     *
     * Example: 'ownerName' filters by owner.name
     *
     * @return array<string, array{relation: string, field: string}>
     */
    protected function getRelationshipFilterFields(): array
    {
        return [        ];
    }

    /**
     * Define boolean fields for equality filtering
     *
     * @return array<string>
     */
    protected function getBooleanFilterFields(): array
    {
        return [            'notificationSent',            'archived',            'completed',            'reminder',            'recurring',            'overdue',        ];
    }

    /**
     * Define date/datetime fields for range filtering
     * Supports format: "from:to" (e.g., "2024-01-01:2024-12-31")
     *
     * @return array<string>
     */
    protected function getDateFilterFields(): array
    {
        return [            'startDate',            'completedDate',            'scheduledDate',            'reminderDate',            'createdAt',            'updatedAt',        ];
    }

    /**
     * Transform Task entity to array for API response
     * Override this method to customize API output format
     *
     * @param object $entity
     * @return array<string, mixed>
     */
    protected function entityToArray(object $entity): array
    {
        assert($entity instanceof Task);

        return [
            'organization' => $entity->getOrganization()?->getId()?->toString() ?? '',
            'organizationName' => $entity->getOrganization()?->getName() ?? '',
            'name' => $entity->getName(),
            'description' => $entity->getDescription(),
            'startDate' => $entity->getStartDate()?->format('c'),
            'category' => $entity->getCategory(),
            'command' => $entity->getCommand(),
            'completedDate' => $entity->getCompletedDate()?->format('c'),
            'contact' => $entity->getContact()?->getId()?->toString() ?? '',
            'contactName' => $entity->getContact()?->getName() ?? '',
            'deal' => $entity->getDeal()?->getId()?->toString() ?? '',
            'dealName' => $entity->getDeal()?->getName() ?? '',
            'location' => $entity->getLocation(),
            'pipelineStage' => $entity->getPipelineStage()?->getId()?->toString() ?? '',
            'pipelineStageName' => $entity->getPipelineStage()?->getName() ?? '',
            'scheduledDate' => $entity->getScheduledDate()?->format('c'),
            'company' => $entity->getCompany()?->getId()?->toString() ?? '',
            'companyName' => $entity->getCompany()?->getName() ?? '',
            'reminderDate' => $entity->getReminderDate()?->format('c'),
            'recurrenceRule' => $entity->getRecurrenceRule(),
            'queue' => $entity->getQueue(),
            'emailSubject' => $entity->getEmailSubject(),
            'taskStatus' => $entity->getTaskStatus(),
            'phoneNumber' => $entity->getPhoneNumber(),
            'meetingUrl' => $entity->getMeetingUrl(),
            'outcome' => $entity->getOutcome(),
            'notes' => $entity->getNotes(),
            'type' => $entity->getType()?->getId()?->toString() ?? '',
            'typeName' => $entity->getType()?->getName() ?? '',
            'user' => $entity->getUser()?->getId()?->toString() ?? '',
            'userName' => $entity->getUser()?->getName() ?? '',
            'createdAt' => $entity->getCreatedAt()->format('c'),
            'updatedAt' => $entity->getUpdatedAt()->format('c'),
        ];
    }
}
