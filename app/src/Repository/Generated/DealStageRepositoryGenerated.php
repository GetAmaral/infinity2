<?php

declare(strict_types=1);

namespace App\Repository\Generated;

use App\Entity\DealStage;
use App\Repository\Base\BaseRepository;

/**
 * DealStageRepository (Generated Base Class)
 *
 * Stages within sales pipelines
 *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom query methods to DealStageRepository.php instead.
 *
 * Provides:
 * - Full-text search with UNACCENT (inherited from BaseRepository)
 * - Multi-column filtering and sorting
 * - Pagination with metadata
 * - Date range and boolean filters
 * - Relationship field filtering
 *
 * @extends BaseRepository<DealStage>
 * @generated by Genmax Code Generator
 */
abstract class DealStageRepositoryGenerated extends BaseRepository
{
    /**
     * Get entity name for search configuration
     */
    protected function getEntityName(): string
    {
        return 'dealstage';
    }

    /**
     * Get searchable fields for full-text search
     * These fields will be searched using UNACCENT and LIKE
     *
     * @return array<string>
     */
    protected function getSearchableFields(): array
    {
        return [            'stageName',            'notes',        ];
    }

    /**
     * Define sortable fields mapping
     * Maps API field names to entity properties
     *
     * @return array<string, string>
     */
    protected function getSortableFields(): array
    {
        return [            'stageName' => 'stageName',            'probability' => 'probability',            'rottenDays' => 'rottenDays',            'rotten' => 'rotten',            'enteredBy' => 'enteredBy',            'exitedBy' => 'exitedBy',            'expectedCloseDate' => 'expectedCloseDate',            'stageValue' => 'stageValue',            'daysInStage' => 'daysInStage',            'weightedValue' => 'weightedValue',            'active' => 'active',            'deal' => 'deal',            'endedAt' => 'endedAt',            'lastUpdatedAt' => 'lastUpdatedAt',            'notes' => 'notes',            'pipelineStage' => 'pipelineStage',            'startedAt' => 'startedAt',            'createdAt' => 'createdAt',            'updatedAt' => 'updatedAt',        ];
    }

    /**
     * Define filterable fields (excludes computed/aggregate fields)
     *
     * @return array<string, string>
     */
    protected function getFilterableFields(): array
    {
        return [            'stageName' => 'stageName',            'probability' => 'probability',            'rottenDays' => 'rottenDays',            'rotten' => 'rotten',            'expectedCloseDate' => 'expectedCloseDate',            'stageValue' => 'stageValue',            'weightedValue' => 'weightedValue',            'active' => 'active',            'createdAt' => 'createdAt',            'updatedAt' => 'updatedAt',        ];
    }

    /**
     * Define relationship filter mappings
     * Allows filtering by related entity fields
     *
     * Example: 'ownerName' filters by owner.name
     *
     * @return array<string, array{relation: string, field: string}>
     */
    protected function getRelationshipFilterFields(): array
    {
        return [        ];
    }

    /**
     * Define boolean fields for equality filtering
     *
     * @return array<string>
     */
    protected function getBooleanFilterFields(): array
    {
        return [            'rotten',            'active',        ];
    }

    /**
     * Define date/datetime fields for range filtering
     * Supports format: "from:to" (e.g., "2024-01-01:2024-12-31")
     *
     * @return array<string>
     */
    protected function getDateFilterFields(): array
    {
        return [            'expectedCloseDate',            'endedAt',            'lastUpdatedAt',            'startedAt',            'createdAt',            'updatedAt',        ];
    }

    /**
     * Transform DealStage entity to array for API response
     * Override this method to customize API output format
     *
     * @param object $entity
     * @return array<string, mixed>
     */
    protected function entityToArray(object $entity): array
    {
        assert($entity instanceof DealStage);

        return [
            'organization' => $entity->getOrganization()?->getId()?->toString() ?? '',
            'organizationName' => $entity->getOrganization()?->getName() ?? '',
            'stageName' => $entity->getStageName(),
            'enteredBy' => $entity->getEnteredBy()?->getId()?->toString() ?? '',
            'enteredByName' => $entity->getEnteredBy()?->getName() ?? '',
            'exitedBy' => $entity->getExitedBy()?->getId()?->toString() ?? '',
            'exitedByName' => $entity->getExitedBy()?->getName() ?? '',
            'expectedCloseDate' => $entity->getExpectedCloseDate()?->format('c'),
            'daysInStage' => $entity->getDaysInStage(),
            'deal' => $entity->getDeal()?->getId()?->toString() ?? '',
            'dealName' => $entity->getDeal()?->getName() ?? '',
            'endedAt' => $entity->getEndedAt()?->format('c'),
            'lastUpdatedAt' => $entity->getLastUpdatedAt()?->format('c'),
            'notes' => $entity->getNotes(),
            'pipelineStage' => $entity->getPipelineStage()?->getId()?->toString() ?? '',
            'pipelineStageName' => $entity->getPipelineStage()?->getName() ?? '',
            'startedAt' => $entity->getStartedAt()?->format('c'),
            'createdAt' => $entity->getCreatedAt()->format('c'),
            'updatedAt' => $entity->getUpdatedAt()->format('c'),
        ];
    }
}
