<?php

declare(strict_types=1);

namespace App\Repository\Generated;

use App\Entity\Campaign;
use App\Repository\Base\BaseRepository;

/**
 * CampaignRepository (Generated Base Class)
 *
 * Marketing campaigns for lead generation and customer engagement
 *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom query methods to CampaignRepository.php instead.
 *
 * Provides:
 * - Full-text search with UNACCENT (inherited from BaseRepository)
 * - Multi-column filtering and sorting
 * - Pagination with metadata
 * - Date range and boolean filters
 * - Relationship field filtering
 *
 * @extends BaseRepository<Campaign>
 * @generated by Genmax Code Generator
 */
abstract class CampaignRepositoryGenerated extends BaseRepository
{
    /**
     * Get entity name for search configuration
     */
    protected function getEntityName(): string
    {
        return 'campaign';
    }

    /**
     * Get searchable fields for full-text search
     * These fields will be searched using UNACCENT and LIKE
     *
     * @return array<string>
     */
    protected function getSearchableFields(): array
    {
        return [            'name',            'description',        ];
    }

    /**
     * Define sortable fields mapping
     * Maps API field names to entity properties
     *
     * @return array<string, string>
     */
    protected function getSortableFields(): array
    {
        return [            'name' => 'name',            'description' => 'description',            'actualBudget' => 'actualBudget',            'actualReturn' => 'actualReturn',            'campaignStatus' => 'campaignStatus',            'companies' => 'companies',            'contacts' => 'contacts',            'deals' => 'deals',            'duration' => 'duration',            'endDate' => 'endDate',            'manager' => 'manager',            'plannedBudget' => 'plannedBudget',            'plannedDuration' => 'plannedDuration',            'plannedEndDate' => 'plannedEndDate',            'plannedReturn' => 'plannedReturn',            'plannedStartDate' => 'plannedStartDate',            'roi' => 'roi',            'socialMedias' => 'socialMedias',            'startDate' => 'startDate',            'talks' => 'talks',            'team' => 'team',            'createdAt' => 'createdAt',            'updatedAt' => 'updatedAt',        ];
    }

    /**
     * Define filterable fields (excludes computed/aggregate fields)
     *
     * @return array<string, string>
     */
    protected function getFilterableFields(): array
    {
        return [            'createdAt' => 'createdAt',            'updatedAt' => 'updatedAt',        ];
    }

    /**
     * Define relationship filter mappings
     * Allows filtering by related entity fields
     *
     * Example: 'ownerName' filters by owner.name
     *
     * @return array<string, array{relation: string, field: string}>
     */
    protected function getRelationshipFilterFields(): array
    {
        return [        ];
    }

    /**
     * Define boolean fields for equality filtering
     *
     * @return array<string>
     */
    protected function getBooleanFilterFields(): array
    {
        return [            'active',            'archived',            'draft',            'template',        ];
    }

    /**
     * Define date/datetime fields for range filtering
     * Supports format: "from:to" (e.g., "2024-01-01:2024-12-31")
     *
     * @return array<string>
     */
    protected function getDateFilterFields(): array
    {
        return [            'endDate',            'plannedEndDate',            'plannedStartDate',            'startDate',            'createdAt',            'updatedAt',        ];
    }

    /**
     * Transform Campaign entity to array for API response
     * Override this method to customize API output format
     *
     * @param object $entity
     * @return array<string, mixed>
     */
    protected function entityToArray(object $entity): array
    {
        assert($entity instanceof Campaign);

        return [
            'organization' => $entity->getOrganization()?->getId()?->toString() ?? '',
            'organizationName' => $entity->getOrganization()?->getName() ?? '',
            'name' => $entity->getName(),
            'description' => $entity->getDescription(),
            'campaignType' => $entity->getCampaignType(),
            'codeName' => $entity->getCodeName(),
            'companiesCount' => $entity->getCompanies()->count(),
            'contactsCount' => $entity->getContacts()->count(),
            'dealsCount' => $entity->getDeals()->count(),
            'emailAddress' => $entity->getEmailAddress(),
            'endDate' => $entity->getEndDate()?->format('c'),
            'manager' => $entity->getManager()?->getId()?->toString() ?? '',
            'managerName' => $entity->getManager()?->getName() ?? '',
            'message' => $entity->getMessage(),
            'childCampaignsCount' => $entity->getChildCampaigns()->count(),
            'objective' => $entity->getObjective(),
            'owner' => $entity->getOwner()?->getId()?->toString() ?? '',
            'ownerName' => $entity->getOwner()?->getName() ?? '',
            'parentCampaign' => $entity->getParentCampaign()?->getId()?->toString() ?? '',
            'parentCampaignName' => $entity->getParentCampaign()?->getName() ?? '',
            'plannedEndDate' => $entity->getPlannedEndDate()?->format('c'),
            'plannedStartDate' => $entity->getPlannedStartDate()?->format('c'),
            'socialMediasCount' => $entity->getSocialMedias()->count(),
            'startDate' => $entity->getStartDate()?->format('c'),
            'status' => $entity->getStatus(),
            'talksCount' => $entity->getTalks()->count(),
            'targetAudience' => $entity->getTargetAudience(),
            'teamCount' => $entity->getTeam()->count(),
            'createdAt' => $entity->getCreatedAt()->format('c'),
            'updatedAt' => $entity->getUpdatedAt()->format('c'),
        ];
    }
}
