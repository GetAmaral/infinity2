<?php

declare(strict_types=1);

namespace App\Repository\Generated;

use App\Entity\Product;
use App\Repository\Base\BaseRepository;

/**
 * ProductRepository (Generated Base Class)
 *
 * Products and services catalog
 *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom query methods to ProductRepository.php instead.
 *
 * Provides:
 * - Full-text search with UNACCENT (inherited from BaseRepository)
 * - Multi-column filtering and sorting
 * - Pagination with metadata
 * - Date range and boolean filters
 * - Relationship field filtering
 *
 * @extends BaseRepository<Product>
 * @generated by Genmax Code Generator
 */
abstract class ProductRepositoryGenerated extends BaseRepository
{
    /**
     * Get entity name for search configuration
     */
    protected function getEntityName(): string
    {
        return 'product';
    }

    /**
     * Get searchable fields for full-text search
     * These fields will be searched using UNACCENT and LIKE
     *
     * @return array<string>
     */
    protected function getSearchableFields(): array
    {
        return [            'name',            'description',            'gtin',            'upc',            'ean',            'mpn',            'currency',            'dimensions',            'lifecycleStage',            'productCode',            'shortDescription',            'subscriptionPeriod',            'unitOfMeasure',        ];
    }

    /**
     * Define sortable fields mapping
     * Maps API field names to entity properties
     *
     * @return array<string, string>
     */
    protected function getSortableFields(): array
    {
        return [            'name' => 'name',            'description' => 'description',            'available' => 'available',            'price' => 'price',            'status' => 'status',            'attachments' => 'attachments',            'active' => 'active',            'availableQuantity' => 'availableQuantity',            'batches' => 'batches',            'billingFrequency' => 'billingFrequency',            'brand' => 'brand',            'cancellationFee' => 'cancellationFee',            'category' => 'category',            'commissionAmount' => 'commissionAmount',            'commissionRate' => 'commissionRate',            'costPrice' => 'costPrice',            'currency' => 'currency',            'customFields' => 'customFields',            'deals' => 'deals',            'dimensions' => 'dimensions',            'discountAmount' => 'discountAmount',            'discountPercentage' => 'discountPercentage',            'endOfLifeDate' => 'endOfLifeDate',            'exchangeRate' => 'exchangeRate',            'features' => 'features',            'launchDate' => 'launchDate',            'lifecycleStage' => 'lifecycleStage',            'listPrice' => 'listPrice',            'manufacturer' => 'manufacturer',            'marginPercentage' => 'marginPercentage',            'maximumDiscount' => 'maximumDiscount',            'minimumPrice' => 'minimumPrice',            'productCode' => 'productCode',            'productLine' => 'productLine',            'productType' => 'productType',            'purchasable' => 'purchasable',            'recurringFee' => 'recurringFee',            'relatedFrom' => 'relatedFrom',            'relatedTo' => 'relatedTo',            'requiresApproval' => 'requiresApproval',            'reservedQuantity' => 'reservedQuantity',            'sellable' => 'sellable',            'setupFee' => 'setupFee',            'shortDescription' => 'shortDescription',            'specifications' => 'specifications',            'stockQuantity' => 'stockQuantity',            'subscription' => 'subscription',            'subscriptionPeriod' => 'subscriptionPeriod',            'substituteFrom' => 'substituteFrom',            'substituteTo' => 'substituteTo',            'supplier' => 'supplier',            'supportPeriod' => 'supportPeriod',            'tags' => 'tags',            'taxCategory' => 'taxCategory',            'unitOfMeasure' => 'unitOfMeasure',            'warrantyPeriod' => 'warrantyPeriod',            'weight' => 'weight',            'createdAt' => 'createdAt',            'updatedAt' => 'updatedAt',        ];
    }

    /**
     * Define filterable fields (excludes computed/aggregate fields)
     *
     * @return array<string, string>
     */
    protected function getFilterableFields(): array
    {
        return [            'createdAt' => 'createdAt',            'updatedAt' => 'updatedAt',        ];
    }

    /**
     * Define relationship filter mappings
     * Allows filtering by related entity fields
     *
     * Example: 'ownerName' filters by owner.name
     *
     * @return array<string, array{relation: string, field: string}>
     */
    protected function getRelationshipFilterFields(): array
    {
        return [        ];
    }

    /**
     * Define boolean fields for equality filtering
     *
     * @return array<string>
     */
    protected function getBooleanFilterFields(): array
    {
        return [            'available',            'active',            'purchasable',            'requiresApproval',            'sellable',            'subscription',        ];
    }

    /**
     * Define date/datetime fields for range filtering
     * Supports format: "from:to" (e.g., "2024-01-01:2024-12-31")
     *
     * @return array<string>
     */
    protected function getDateFilterFields(): array
    {
        return [            'endOfLifeDate',            'launchDate',            'createdAt',            'updatedAt',        ];
    }

    /**
     * Transform Product entity to array for API response
     * Override this method to customize API output format
     *
     * @param object $entity
     * @return array<string, mixed>
     */
    protected function entityToArray(object $entity): array
    {
        assert($entity instanceof Product);

        return [
            'organization' => $entity->getOrganization()?->getId()?->toString() ?? '',
            'organizationName' => $entity->getOrganization()?->getName() ?? '',
            'sku' => $entity->getSku(),
            'name' => $entity->getName(),
            'description' => $entity->getDescription(),
            'gtin' => $entity->getGtin(),
            'upc' => $entity->getUpc(),
            'ean' => $entity->getEan(),
            'mpn' => $entity->getMpn(),
            'barcode' => $entity->getBarcode(),
            'status' => $entity->getStatus(),
            'attachmentsCount' => $entity->getAttachments()->count(),
            'batchesCount' => $entity->getBatches()->count(),
            'billingFrequency' => $entity->getBillingFrequency()?->getId()?->toString() ?? '',
            'billingFrequencyName' => $entity->getBillingFrequency()?->getName() ?? '',
            'brand' => $entity->getBrand()?->getId()?->toString() ?? '',
            'brandName' => $entity->getBrand()?->getName() ?? '',
            'category' => $entity->getCategory()?->getId()?->toString() ?? '',
            'categoryName' => $entity->getCategory()?->getName() ?? '',
            'currency' => $entity->getCurrency(),
            'dealsCount' => $entity->getDeals()->count(),
            'dimensions' => $entity->getDimensions(),
            'endOfLifeDate' => $entity->getEndOfLifeDate()?->format('c'),
            'exchangeRate' => $entity->getExchangeRate(),
            'launchDate' => $entity->getLaunchDate()?->format('c'),
            'lifecycleStage' => $entity->getLifecycleStage(),
            'manufacturerCount' => $entity->getManufacturer()->count(),
            'productCode' => $entity->getProductCode(),
            'productLine' => $entity->getProductLine()?->getId()?->toString() ?? '',
            'productLineName' => $entity->getProductLine()?->getName() ?? '',
            'relatedFromCount' => $entity->getRelatedFrom()->count(),
            'relatedToCount' => $entity->getRelatedTo()->count(),
            'shortDescription' => $entity->getShortDescription(),
            'subscriptionPeriod' => $entity->getSubscriptionPeriod(),
            'substituteFromCount' => $entity->getSubstituteFrom()->count(),
            'substituteToCount' => $entity->getSubstituteTo()->count(),
            'supplierCount' => $entity->getSupplier()->count(),
            'tagsCount' => $entity->getTags()->count(),
            'taxCategory' => $entity->getTaxCategory()?->getId()?->toString() ?? '',
            'taxCategoryName' => $entity->getTaxCategory()?->getName() ?? '',
            'unitOfMeasure' => $entity->getUnitOfMeasure(),
            'weight' => $entity->getWeight(),
            'createdAt' => $entity->getCreatedAt()->format('c'),
            'updatedAt' => $entity->getUpdatedAt()->format('c'),
        ];
    }
}
