<?php

declare(strict_types=1);

namespace App\Repository\Generated;

use App\Entity\Deal;
use App\Repository\Base\BaseRepository;

/**
 * DealRepository (Generated Base Class)
 *
 * Sales opportunities and deals tracking
 *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom query methods to DealRepository.php instead.
 *
 * Provides:
 * - Full-text search with UNACCENT (inherited from BaseRepository)
 * - Multi-column filtering and sorting
 * - Pagination with metadata
 * - Date range and boolean filters
 * - Relationship field filtering
 *
 * @extends BaseRepository<Deal>
 * @generated by Genmax Code Generator
 */
abstract class DealRepositoryGenerated extends BaseRepository
{
    /**
     * Get entity name for search configuration
     */
    protected function getEntityName(): string
    {
        return 'deal';
    }

    /**
     * Get searchable fields for full-text search
     * These fields will be searched using UNACCENT and LIKE
     *
     * @return array<string>
     */
    protected function getSearchableFields(): array
    {
        return [            'name',            'description',            'priority',            'dealNumber',            'currency',            'sourceDetails',            'notes',        ];
    }

    /**
     * Define sortable fields mapping
     * Maps API field names to entity properties
     *
     * @return array<string, string>
     */
    protected function getSortableFields(): array
    {
        return [            'name' => 'name',            'description' => 'description',            'company' => 'company',            'dealStatus' => 'dealStatus',            'currentStage' => 'currentStage',            'pipeline' => 'pipeline',            'dealType' => 'dealType',            'priority' => 'priority',            'category' => 'category',            'dealNumber' => 'dealNumber',            'expectedAmount' => 'expectedAmount',            'weightedAmount' => 'weightedAmount',            'closureAmount' => 'closureAmount',            'initialAmount' => 'initialAmount',            'currency' => 'currency',            'exchangeRate' => 'exchangeRate',            'discountPercentage' => 'discountPercentage',            'discountAmount' => 'discountAmount',            'commissionRate' => 'commissionRate',            'commissionAmount' => 'commissionAmount',            'expectedClosureDate' => 'expectedClosureDate',            'closureDate' => 'closureDate',            'products' => 'products',            'initialDate' => 'initialDate',            'lastActivityDate' => 'lastActivityDate',            'nextFollowUp' => 'nextFollowUp',            'daysInCurrentStage' => 'daysInCurrentStage',            'forecastCategory' => 'forecastCategory',            'manager' => 'manager',            'team' => 'team',            'owner' => 'owner',            'primaryContact' => 'primaryContact',            'contacts' => 'contacts',            'leadSource' => 'leadSource',            'campaign' => 'campaign',            'sourceDetails' => 'sourceDetails',            'notes' => 'notes',            'dealStages' => 'dealStages',            'talks' => 'talks',            'tasks' => 'tasks',            'competitors' => 'competitors',            'tags' => 'tags',            'customFields' => 'customFields',            'lostReason' => 'lostReason',            'winReason' => 'winReason',            'actualClosureDate' => 'actualClosureDate',            'createdAt' => 'createdAt',            'updatedAt' => 'updatedAt',        ];
    }

    /**
     * Define filterable fields (excludes computed/aggregate fields)
     *
     * @return array<string, string>
     */
    protected function getFilterableFields(): array
    {
        return [            'actualClosureDate' => 'actualClosureDate',            'createdAt' => 'createdAt',            'updatedAt' => 'updatedAt',        ];
    }

    /**
     * Define relationship filter mappings
     * Allows filtering by related entity fields
     *
     * Example: 'ownerName' filters by owner.name
     *
     * @return array<string, array{relation: string, field: string}>
     */
    protected function getRelationshipFilterFields(): array
    {
        return [            'pipelineName' => ['relation' => 'pipeline', 'field' => 'name'],            'ownerName' => ['relation' => 'owner', 'field' => 'name'],        ];
    }

    /**
     * Define boolean fields for equality filtering
     *
     * @return array<string>
     */
    protected function getBooleanFilterFields(): array
    {
        return [        ];
    }

    /**
     * Define date/datetime fields for range filtering
     * Supports format: "from:to" (e.g., "2024-01-01:2024-12-31")
     *
     * @return array<string>
     */
    protected function getDateFilterFields(): array
    {
        return [            'expectedClosureDate',            'closureDate',            'initialDate',            'lastActivityDate',            'nextFollowUp',            'actualClosureDate',            'createdAt',            'updatedAt',        ];
    }

    /**
     * Transform Deal entity to array for API response
     * Override this method to customize API output format
     *
     * @param object $entity
     * @return array<string, mixed>
     */
    protected function entityToArray(object $entity): array
    {
        assert($entity instanceof Deal);

        return [
            'organization' => $entity->getOrganization()?->getId()?->toString() ?? '',
            'organizationName' => $entity->getOrganization()?->getName() ?? '',
            'name' => $entity->getName(),
            'description' => $entity->getDescription(),
            'company' => $entity->getCompany()?->getId()?->toString() ?? '',
            'companyName' => $entity->getCompany()?->getName() ?? '',
            'dealStatus' => $entity->getDealStatus(),
            'currentStage' => $entity->getCurrentStage()?->getId()?->toString() ?? '',
            'currentStageName' => $entity->getCurrentStage()?->getName() ?? '',
            'pipeline' => $entity->getPipeline()?->getId()?->toString() ?? '',
            'pipelineName' => $entity->getPipeline()?->getName() ?? '',
            'dealType' => $entity->getDealType()?->getId()?->toString() ?? '',
            'dealTypeName' => $entity->getDealType()?->getName() ?? '',
            'priority' => $entity->getPriority(),
            'category' => $entity->getCategory()?->getId()?->toString() ?? '',
            'categoryName' => $entity->getCategory()?->getName() ?? '',
            'dealNumber' => $entity->getDealNumber(),
            'currency' => $entity->getCurrency(),
            'exchangeRate' => $entity->getExchangeRate(),
            'expectedClosureDate' => $entity->getExpectedClosureDate()?->format('c'),
            'closureDate' => $entity->getClosureDate()?->format('c'),
            'productsCount' => $entity->getProducts()->count(),
            'initialDate' => $entity->getInitialDate()?->format('c'),
            'lastActivityDate' => $entity->getLastActivityDate()?->format('c'),
            'nextFollowUp' => $entity->getNextFollowUp()?->format('c'),
            'daysInCurrentStage' => $entity->getDaysInCurrentStage(),
            'manager' => $entity->getManager()?->getId()?->toString() ?? '',
            'managerName' => $entity->getManager()?->getName() ?? '',
            'teamCount' => $entity->getTeam()->count(),
            'owner' => $entity->getOwner()?->getId()?->toString() ?? '',
            'ownerName' => $entity->getOwner()?->getName() ?? '',
            'primaryContact' => $entity->getPrimaryContact()?->getId()?->toString() ?? '',
            'primaryContactName' => $entity->getPrimaryContact()?->getName() ?? '',
            'contactsCount' => $entity->getContacts()->count(),
            'leadSource' => $entity->getLeadSource()?->getId()?->toString() ?? '',
            'leadSourceName' => $entity->getLeadSource()?->getName() ?? '',
            'campaign' => $entity->getCampaign()?->getId()?->toString() ?? '',
            'campaignName' => $entity->getCampaign()?->getName() ?? '',
            'sourceDetails' => $entity->getSourceDetails(),
            'notes' => $entity->getNotes(),
            'dealStagesCount' => $entity->getDealStages()->count(),
            'talksCount' => $entity->getTalks()->count(),
            'tasksCount' => $entity->getTasks()->count(),
            'competitorsCount' => $entity->getCompetitors()->count(),
            'tagsCount' => $entity->getTags()->count(),
            'lostReason' => $entity->getLostReason()?->getId()?->toString() ?? '',
            'lostReasonName' => $entity->getLostReason()?->getName() ?? '',
            'winReason' => $entity->getWinReason()?->getId()?->toString() ?? '',
            'winReasonName' => $entity->getWinReason()?->getName() ?? '',
            'actualClosureDate' => $entity->getActualClosureDate()?->format('c'),
            'createdAt' => $entity->getCreatedAt()->format('c'),
            'updatedAt' => $entity->getUpdatedAt()->format('c'),
        ];
    }
}
