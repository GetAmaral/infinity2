<?php

declare(strict_types=1);

namespace App\Form\Generated;

use App\Entity\Event;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
use Symfony\Component\Form\Extension\Core\Type\DateTimeType;
use Symfony\Component\Form\Extension\Core\Type\CheckboxType;
use Symfony\Component\Form\Extension\Core\Type\IntegerType;
use Symfony\Component\Form\Extension\Core\Type\DateType;

/**
 * Event Form Type (Generated Base Class)
 *
 * This class is ALWAYS regenerated from CSV. DO NOT edit this file.
 * Add custom form logic to EventType.php instead.
 *
 * @generated by Luminai Code Generator
 */
abstract class EventTypeGenerated extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder->add('name', TextType::class, [
            'label' => 'Name',
            'required' => true,
        ]);
        $builder->add('description', TextareaType::class, [
            'label' => 'Description',
            'required' => false,
        ]);
        $builder->add('location', TextType::class, [
            'label' => 'Location',
            'required' => false,
        ]);
        $builder->add('geo', TextType::class, [
            'label' => 'Geo',
            'required' => false,
        ]);
        $builder->add('startTime', DateTimeType::class, [
            'label' => 'StartTime',
            'required' => false,
        ]);
        $builder->add('endTime', DateTimeType::class, [
            'label' => 'EndTime',
            'required' => false,
        ]);
        $builder->add('allDay', CheckboxType::class, [
            'label' => 'AllDay',
            'required' => false,
        ]);
        $builder->add('eventStatus', IntegerType::class, [
            'label' => 'EventStatus',
            'required' => false,
        ]);
        $builder->add('visibility', CheckboxType::class, [
            'label' => 'Visibility',
            'required' => false,
        ]);
        $builder->add('priority', IntegerType::class, [
            'label' => 'Priority',
            'required' => false,
        ]);
        $builder->add('recurrenceInterval', TextType::class, [
            'label' => 'RecurrenceInterval',
            'required' => false,
        ]);
        $builder->add('recurrenceFrequency', IntegerType::class, [
            'label' => 'RecurrenceFrequency',
            'required' => false,
        ]);
        $builder->add('recurrenceEndDate', DateType::class, [
            'label' => 'RecurrenceEndDate',
            'required' => false,
        ]);
        $builder->add('recurrenceCount', IntegerType::class, [
            'label' => 'RecurrenceCount',
            'required' => false,
        ]);
        $builder->add('originalStartTime', DateTimeType::class, [
            'label' => 'OriginalStartTime',
            'required' => false,
        ]);
        $builder->add('sequence', IntegerType::class, [
            'label' => 'Sequence',
            'required' => false,
        ]);
        $builder->add('hangoutLink', TextType::class, [
            'label' => 'HangoutLink',
            'required' => false,
        ]);
        $builder->add('conferenceData', TextareaType::class, [
            'label' => 'ConferenceData',
            'required' => false,
        ]);
        $builder->add('extendedProperties', TextareaType::class, [
            'label' => 'ExtendedProperties',
            'required' => false,
        ]);
        $builder->add('source', TextareaType::class, [
            'label' => 'Source',
            'required' => false,
        ]);
        $builder->add('notes', TextareaType::class, [
            'label' => 'Notes',
            'required' => false,
        ]);
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            'data_class' => Event::class,
        ]);
    }
}
