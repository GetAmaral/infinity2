<?php

declare(strict_types=1);

namespace App\Form\Generated;

use App\Entity\Event;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\Extension\Core\Type\DateTimeType;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
use Symfony\Component\Form\Extension\Core\Type\CheckboxType;
use Symfony\Bridge\Doctrine\Form\Type\EntityType;
use Symfony\Component\Form\Extension\Core\Type\IntegerType;
use Symfony\Component\Form\Extension\Core\Type\EnumType;
use Symfony\Contracts\Translation\TranslatorInterface;

/**
 * Generated Base Form for Event
 *
 * ⚠️ WARNING: This file is ALWAYS regenerated by Genmax
 * DO NOT EDIT THIS FILE - Edit EventType instead
 *
 * @generated by Genmax
 * @codeCoverageIgnore
 */
abstract class EventTypeGenerated extends AbstractType
{
    public function __construct(
        protected readonly TranslatorInterface $translator
    ) {}

    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder->add('name', TextType::class, [
            'label' => 'Event Title/Subject',
            'required' => true,
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter event title/subject',
            ],
        ]);

        $builder->add('startTime', DateTimeType::class, [
            'label' => 'Event Start Date/Time',
            'required' => true,
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('description', TextareaType::class, [
            'label' => 'Event Details/Body',
            'required' => false,
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter event details/body',
            ],
        ]);

        $builder->add('endTime', DateTimeType::class, [
            'label' => 'Event End Date/Time',
            'required' => true,
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('allDay', CheckboxType::class, [
            'label' => 'All-day Event Flag',
            'required' => true,
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('location', TextType::class, [
            'label' => 'Physical Location String',
            'required' => false,
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter physical location string',
            ],
        ]);

        $builder->add('meetingUrl', TextType::class, [
            'label' => 'Meeting URL (Zoom, Teams, etc.)',
            'required' => false,
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter meeting url (zoom, teams, etc.)',
            ],
        ]);

        $builder->add('calendar', EntityType::class, [
            'label' => 'Parent Calendar',
            'required' => false,
            'class' => Calendar::class,
            'choice_label' => '__toString',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('organizer', EntityType::class, [
            'label' => 'Event Creator/Organizer',
            'required' => false,
            'class' => User::class,
            'choice_label' => '__toString',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('attendees', EntityType::class, [
            'label' => 'Event Attendees',
            'required' => false,
            'entry_type' => App\Form\EventAttendeeType::class,
            'entry_options' => [
                'label' => false,
            ],
            'allow_add' => true,
            'allow_delete' => true,
            'by_reference' => false,
            'prototype' => true,
            'attr' => [
                'class' => 'form-input-modern',
            ],
            'constraints' => [
                new \Symfony\Component\Validator\Constraints\Count(['min' => 1]),
            ],
        ]);

        $builder->add('categories', EntityType::class, [
            'label' => 'Event Categories',
            'required' => false,
            'class' => EventCategory::class,
            'choice_label' => '__toString',
            'multiple' => true,
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('attachments', EntityType::class, [
            'label' => 'Event Attachments',
            'required' => false,
            'entry_type' => App\Form\AttachmentType::class,
            'entry_options' => [
                'label' => false,
            ],
            'allow_add' => true,
            'allow_delete' => true,
            'by_reference' => false,
            'prototype' => true,
            'attr' => [
                'class' => 'form-input-modern',
            ],
            'constraints' => [
                new \Symfony\Component\Validator\Constraints\Count(['min' => 1]),
            ],
        ]);

        $builder->add('reminders', EntityType::class, [
            'label' => 'Event Reminders',
            'required' => false,
            'entry_type' => App\Form\ReminderType::class,
            'entry_options' => [
                'label' => false,
            ],
            'allow_add' => true,
            'allow_delete' => true,
            'by_reference' => false,
            'prototype' => true,
            'attr' => [
                'class' => 'form-input-modern',
            ],
            'constraints' => [
                new \Symfony\Component\Validator\Constraints\Count(['min' => 1]),
            ],
        ]);

        $builder->add('resourceBookings', EntityType::class, [
            'label' => 'Room/Equipment Bookings',
            'required' => false,
            'entry_type' => App\Form\EventResourceBookingType::class,
            'entry_options' => [
                'label' => false,
            ],
            'allow_add' => true,
            'allow_delete' => true,
            'by_reference' => false,
            'prototype' => true,
            'attr' => [
                'class' => 'form-input-modern',
            ],
            'constraints' => [
                new \Symfony\Component\Validator\Constraints\Count(['min' => 1]),
            ],
        ]);

        $builder->add('parentEvent', EntityType::class, [
            'label' => 'Parent for Recurring Event Instances',
            'required' => false,
            'class' => Event::class,
            'choice_label' => '__toString',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('childrenEvents', EntityType::class, [
            'label' => 'Child Recurring Instances',
            'required' => false,
            'entry_type' => App\Form\EventType::class,
            'entry_options' => [
                'label' => false,
            ],
            'allow_add' => true,
            'allow_delete' => true,
            'by_reference' => false,
            'prototype' => true,
            'attr' => [
                'class' => 'form-input-modern',
            ],
            'constraints' => [
                new \Symfony\Component\Validator\Constraints\Count(['min' => 1]),
            ],
        ]);

        $builder->add('originalStartTime', DateTimeType::class, [
            'label' => 'Original Start for Modified Recurring Instances',
            'required' => false,
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('sequence', IntegerType::class, [
            'label' => 'iCalendar Sequence Number',
            'required' => false,
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('conferenceData', TextareaType::class, [
            'label' => 'Google conferenceData JSON Structure',
            'required' => false,
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter google conferencedata json structure',
            ],
        ]);

        $builder->add('extendedProperties', TextareaType::class, [
            'label' => 'Extended Properties for API Sync',
            'required' => false,
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter extended properties for api sync',
            ],
        ]);

        $builder->add('source', TextareaType::class, [
            'label' => 'External Source Information',
            'required' => false,
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter external source information',
            ],
        ]);

        $builder->add('subject', TextType::class, [
            'label' => 'Event Subject (Salesforce/Outlook)',
            'required' => false,
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter event subject (salesforce/outlook)',
            ],
        ]);

        $builder->add('status', EnumType::class, [
            'label' => 'Event Lifecycle Status',
            'required' => true,
            'class' => App\Enum\StatusEnum::class,
            'choice_label' => 'getLabel',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('showAs', EnumType::class, [
            'label' => 'Free/Busy Status',
            'required' => true,
            'class' => App\Enum\ShowasEnum::class,
            'choice_label' => 'getLabel',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('eventType', EnumType::class, [
            'label' => 'Event Type/Category',
            'required' => false,
            'class' => App\Enum\EventtypeEnum::class,
            'choice_label' => 'getLabel',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('importance', EnumType::class, [
            'label' => 'Event Importance/Priority',
            'required' => true,
            'class' => App\Enum\ImportanceEnum::class,
            'choice_label' => 'getLabel',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('sensitivity', EnumType::class, [
            'label' => 'Confidentiality Level',
            'required' => true,
            'class' => App\Enum\SensitivityEnum::class,
            'choice_label' => 'getLabel',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('timezone', TextType::class, [
            'label' => 'Event Timezone',
            'required' => false,
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter event timezone',
            ],
        ]);

        $builder->add('startTimezone', TextType::class, [
            'label' => 'Start Timezone',
            'required' => false,
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter start timezone',
            ],
        ]);

        $builder->add('endTimezone', TextType::class, [
            'label' => 'End Timezone',
            'required' => false,
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter end timezone',
            ],
        ]);

        $builder->add('duration', IntegerType::class, [
            'label' => 'Duration in Minutes',
            'required' => false,
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('locationDisplayName', TextType::class, [
            'label' => 'Formatted Location Name',
            'required' => false,
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter formatted location name',
            ],
        ]);

        $builder->add('locationUrl', TextType::class, [
            'label' => 'Location URL',
            'required' => false,
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter location url',
            ],
        ]);

        $builder->add('locationCoordinates', TextareaType::class, [
            'label' => 'Location Coordinates',
            'required' => false,
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter location coordinates',
            ],
        ]);

        $builder->add('onlineMeeting', CheckboxType::class, [
            'label' => 'Online Meeting Flag',
            'required' => true,
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('onlineMeetingProvider', EnumType::class, [
            'label' => 'Meeting Provider',
            'required' => false,
            'class' => App\Enum\OnlinemeetingproviderEnum::class,
            'choice_label' => 'getLabel',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('meetingId', TextType::class, [
            'label' => 'Meeting ID',
            'required' => false,
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter meeting id',
            ],
        ]);

        $builder->add('meetingPassword', TextType::class, [
            'label' => 'Meeting Password',
            'required' => false,
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter meeting password',
            ],
        ]);

        $builder->add('recurring', CheckboxType::class, [
            'label' => 'Recurring Event Flag',
            'required' => true,
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('recurrenceRule', TextareaType::class, [
            'label' => 'RFC 5545 RRULE String',
            'required' => false,
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter rfc 5545 rrule string',
            ],
        ]);

        $builder->add('recurrenceExceptions', TextareaType::class, [
            'label' => 'Recurrence Exception Dates',
            'required' => false,
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter recurrence exception dates',
            ],
        ]);

        $builder->add('cancelled', CheckboxType::class, [
            'label' => 'Cancelled Event Flag',
            'required' => true,
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('draft', CheckboxType::class, [
            'label' => 'Draft Event Flag',
            'required' => true,
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('responseStatus', EnumType::class, [
            'label' => 'Organizer Response Status',
            'required' => false,
            'class' => App\Enum\ResponsestatusEnum::class,
            'choice_label' => 'getLabel',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('responseRequested', CheckboxType::class, [
            'label' => 'Response Requested Flag',
            'required' => true,
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('allowNewTimeProposals', CheckboxType::class, [
            'label' => 'Allow Time Proposals',
            'required' => true,
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('hideAttendees', CheckboxType::class, [
            'label' => 'Hide Attendee List',
            'required' => true,
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('guestsCanModify', CheckboxType::class, [
            'label' => 'Guests Can Modify',
            'required' => true,
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('guestsCanInviteOthers', CheckboxType::class, [
            'label' => 'Guests Can Invite Others',
            'required' => true,
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('guestsCanSeeOtherGuests', CheckboxType::class, [
            'label' => 'Guests Can See Other Guests',
            'required' => true,
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('transparency', EnumType::class, [
            'label' => 'Calendar Transparency',
            'required' => true,
            'class' => App\Enum\TransparencyEnum::class,
            'choice_label' => 'getLabel',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('reminderMinutes', IntegerType::class, [
            'label' => 'Default Reminder Minutes',
            'required' => false,
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('externalCalendarId', TextType::class, [
            'label' => 'External Calendar Event ID',
            'required' => false,
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter external calendar event id',
            ],
        ]);

        $builder->add('externalCalendarProvider', EnumType::class, [
            'label' => 'External Calendar Provider',
            'required' => false,
            'class' => App\Enum\ExternalcalendarproviderEnum::class,
            'choice_label' => 'getLabel',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('icalUid', TextType::class, [
            'label' => 'iCalendar UID',
            'required' => false,
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter icalendar uid',
            ],
        ]);

        $builder->add('webLink', TextType::class, [
            'label' => 'External Calendar Web Link',
            'required' => false,
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter external calendar web link',
            ],
        ]);

        $builder->add('htmlLink', TextType::class, [
            'label' => 'HTML Link to Event',
            'required' => false,
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter html link to event',
            ],
        ]);

        $builder->add('colorId', TextType::class, [
            'label' => 'Google Calendar Color ID',
            'required' => false,
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter google calendar color id',
            ],
        ]);

        $builder->add('locked', CheckboxType::class, [
            'label' => 'Event Locked Flag',
            'required' => true,
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('assignedTo', EntityType::class, [
            'label' => 'Assigned To User',
            'required' => false,
            'class' => User::class,
            'choice_label' => '__toString',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('contact', EntityType::class, [
            'label' => 'Related Contact',
            'required' => false,
            'class' => Contact::class,
            'choice_label' => '__toString',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('company', EntityType::class, [
            'label' => 'Related Company',
            'required' => false,
            'class' => Company::class,
            'choice_label' => '__toString',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('deal', EntityType::class, [
            'label' => 'Related Deal',
            'required' => false,
            'class' => Deal::class,
            'choice_label' => '__toString',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            'data_class' => Event::class,
        ]);
    }
}
