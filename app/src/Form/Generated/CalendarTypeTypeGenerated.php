<?php

declare(strict_types=1);

namespace App\Form\Generated;

use App\Entity\CalendarType;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
use Symfony\Component\Form\Extension\Core\Type\ColorType;
use Symfony\Component\Form\Extension\Core\Type\CheckboxType;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\IntegerType;
use Symfony\Contracts\Translation\TranslatorInterface;

/**
 * Generated Base Form for CalendarType
 *
 * ⚠️ WARNING: This file is ALWAYS regenerated by Genmax
 * DO NOT EDIT THIS FILE - Edit CalendarTypeType instead
 *
 * @generated by Genmax
 * @codeCoverageIgnore
 */
abstract class CalendarTypeTypeGenerated extends AbstractType
{
    public function __construct(
        protected readonly TranslatorInterface $translator
    ) {}

    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder->add('name', TextType::class, [
            'label' => 'Name',
            'required' => true,
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter name',
            ],
        ]);

        $builder->add('description', TextareaType::class, [
            'label' => 'Description',
            'required' => false,
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter description',
            ],
        ]);

        $builder->add('color', ColorType::class, [
            'label' => 'Color',
            'required' => true,
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('icon', TextType::class, [
            'label' => 'Icon',
            'required' => true,
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter icon',
            ],
        ]);

        $builder->add('active', CheckboxType::class, [
            'label' => 'Active',
            'required' => true,
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('default', CheckboxType::class, [
            'label' => 'Default',
            'required' => true,
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('visibility', ChoiceType::class, [
            'label' => 'Visibility',
            'required' => true,
            'class' => App\Enum\VisibilityEnum::class,
            'choice_label' => 'getLabel',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('access_level', ChoiceType::class, [
            'label' => 'Access Level',
            'required' => true,
            'class' => App\Enum\AccessLevelEnum::class,
            'choice_label' => 'getLabel',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('sort_order', IntegerType::class, [
            'label' => 'Sort Order',
            'required' => true,
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('allow_sharing', CheckboxType::class, [
            'label' => 'Allow Sharing',
            'required' => true,
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('require_approval', CheckboxType::class, [
            'label' => 'Require Approval',
            'required' => true,
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('max_calendars_per_user', IntegerType::class, [
            'label' => 'Max Calendars Per User',
            'required' => false,
            'attr' => [
                'placeholder' => 'No limit',
            ],
        ]);

    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            'data_class' => CalendarType::class,
        ]);
    }
}
