<?php

declare(strict_types=1);

namespace App\Form\Generated;

use App\Entity\PipelineStageTemplate;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\Extension\Core\Type\NumberType;
use Symfony\Component\Form\Extension\Core\Type\IntegerType;
use Symfony\Component\Form\Extension\Core\Type\CheckboxType;
use Symfony\Component\Form\Extension\Core\Type\ColorType;
use Symfony\Bridge\Doctrine\Form\Type\EntityType;
use Symfony\Component\Form\Extension\Core\Type\EnumType;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
use Symfony\Contracts\Translation\TranslatorInterface;

/**
 * Generated Base Form for PipelineStageTemplate
 *
 * ⚠️ WARNING: This file is ALWAYS regenerated by Genmax
 * DO NOT EDIT THIS FILE - Edit PipelineStageTemplateType instead
 *
 * @generated by Genmax
 * @codeCoverageIgnore
 */
abstract class PipelineStageTemplateTypeGenerated extends AbstractType
{
    public function __construct(
        protected readonly TranslatorInterface $translator
    ) {}

    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder->add('name', TextType::class, [
            'label' => 'Stage Name',
            'required' => true,
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter stage name',
            ],
        ]);

        $builder->add('description', TextType::class, [
            'label' => 'Description',
            'required' => false,
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter description',
            ],
        ]);

        $builder->add('probability', NumberType::class, [
            'label' => 'Probability (%)',
            'required' => true,
            'help' => 'Win probability percentage for deals in this stage (0-100)',
            'attr' => [
                'min' => '0',
                'max' => '100',
                'step' => '0.01',
            ],
            'scale' => '2',
            'html5' => true,
        ]);

        $builder->add('order', IntegerType::class, [
            'label' => 'Order',
            'required' => true,
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('active', CheckboxType::class, [
            'label' => 'Active',
            'required' => true,
            'help' => 'Whether this stage template is currently active and available for use',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('color', ColorType::class, [
            'label' => 'Color',
            'required' => false,
            'help' => 'Hex color code for visual identification (e.g., #FF5733)',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('rottingDays', IntegerType::class, [
            'label' => 'Rotting Days',
            'required' => false,
            'help' => 'Number of days before a deal in this stage is considered &quot;rotting&quot; (inactive/stale)',
            'attr' => [
                'min' => '1',
            ],
            'html5' => true,
        ]);

        $builder->add('pipelineTemplate', EntityType::class, [
            'label' => 'Pipeline Template',
            'required' => true,
            'class' => PipelineTemplate::class,
            'choice_label' => '__toString',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('tasks', EntityType::class, [
            'label' => 'Tasks',
            'required' => false,
            'entry_type' => App\Form\TaskTemplateType::class,
            'entry_options' => [
                'label' => false,
            ],
            'allow_add' => true,
            'allow_delete' => true,
            'by_reference' => false,
            'prototype' => true,
            'attr' => [
                'class' => 'form-input-modern',
            ],
            'constraints' => [
                new \Symfony\Component\Validator\Constraints\Count(['min' => 1]),
            ],
        ]);

        $builder->add('final', CheckboxType::class, [
            'label' => 'Final Stage',
            'required' => true,
            'help' => 'Whether this is a final/terminal stage (e.g., Won, Lost, Abandoned)',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('stageType', EnumType::class, [
            'label' => 'Stage Type',
            'required' => true,
            'help' => 'Type of stage: active (in progress), won (successful close), lost (unsuccessful close)',
            'class' => App\Enum\PipelineStageType::class,
            'choice_label' => 'getLabel',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('automationRules', TextareaType::class, [
            'label' => 'Automation Rules',
            'required' => false,
            'help' => 'JSON configuration for automation rules when deals enter this stage',
            'attr' => [
                'rows' => '5',
            ],
        ]);

        $builder->add('requiredFields', TextareaType::class, [
            'label' => 'Required Fields',
            'required' => false,
            'help' => 'Array of field names required to be filled before advancing from this stage',
            'attr' => [
                'rows' => '3',
            ],
        ]);

        $builder->add('icon', TextType::class, [
            'label' => 'Icon',
            'required' => false,
            'help' => 'Bootstrap icon class for visual representation (e.g., bi-check-circle, bi-x-circle)',
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter icon',
            ],
        ]);

    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            'data_class' => PipelineStageTemplate::class,
        ]);
    }
}
