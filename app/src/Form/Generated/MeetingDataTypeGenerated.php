<?php

declare(strict_types=1);

namespace App\Form\Generated;

use App\Entity\MeetingData;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Bridge\Doctrine\Form\Type\EntityType;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\DateTimeType;
use Symfony\Component\Form\Extension\Core\Type\IntegerType;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
use Symfony\Component\Form\Extension\Core\Type\CheckboxType;
use Symfony\Contracts\Translation\TranslatorInterface;

/**
 * Generated Base Form for MeetingData
 *
 * ⚠️ WARNING: This file is ALWAYS regenerated by Genmax
 * DO NOT EDIT THIS FILE - Edit MeetingDataType instead
 *
 * @generated by Genmax
 * @codeCoverageIgnore
 */
abstract class MeetingDataTypeGenerated extends AbstractType
{
    public function __construct(
        protected readonly TranslatorInterface $translator
    ) {}

    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder->add('event', EntityType::class, [
            'label' => 'Event',
            'required' => false,
            'help' => 'Link this meeting to a calendar event',
            'class' => Event::class,
            'choice_label' => '__toString',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('title', TextType::class, [
            'label' => 'Meeting Title',
            'required' => true,
            'help' => 'Enter a descriptive title for the meeting',
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter meeting title',
            ],
        ]);

        $builder->add('meetingType', ChoiceType::class, [
            'label' => 'Meeting Type',
            'required' => true,
            'help' => 'Select the type of meeting',
            'class' => App\Enum\MeetingtypeEnum::class,
            'choice_label' => 'getLabel',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('status', ChoiceType::class, [
            'label' => 'Status',
            'required' => true,
            'help' => 'Current status of the meeting',
            'class' => App\Enum\StatusEnum::class,
            'choice_label' => 'getLabel',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('startTime', DateTimeType::class, [
            'label' => 'Start Time',
            'required' => true,
            'help' => 'Scheduled start date and time',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('endTime', DateTimeType::class, [
            'label' => 'End Time',
            'required' => false,
            'help' => 'Scheduled end date and time',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('duration', IntegerType::class, [
            'label' => 'Duration (minutes)',
            'required' => false,
            'help' => 'Duration of the meeting in minutes',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('location', TextType::class, [
            'label' => 'Location',
            'required' => false,
            'help' => 'Physical location or virtual meeting space',
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter location',
            ],
        ]);

        $builder->add('agenda', TextareaType::class, [
            'label' => 'Agenda',
            'required' => false,
            'help' => 'Meeting agenda with topics and time allocations',
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter agenda',
            ],
        ]);

        $builder->add('notes', TextareaType::class, [
            'label' => 'Meeting Notes',
            'required' => false,
            'help' => 'General notes taken during the meeting',
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter meeting notes',
            ],
        ]);

        $builder->add('minutes', TextareaType::class, [
            'label' => 'Meeting Minutes',
            'required' => false,
            'help' => 'Formal minutes of the meeting',
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter meeting minutes',
            ],
        ]);

        $builder->add('attendees', TextareaType::class, [
            'label' => 'Attendees',
            'required' => false,
            'help' => 'List of meeting attendees with attendance status',
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter attendees',
            ],
        ]);

        $builder->add('meetingId', TextType::class, [
            'label' => 'Meeting ID',
            'required' => false,
            'help' => 'Unique identifier from the meeting platform',
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter meeting id',
            ],
        ]);

        $builder->add('absentees', TextareaType::class, [
            'label' => 'Absentees',
            'required' => false,
            'help' => 'List of expected attendees who were absent',
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter absentees',
            ],
        ]);

        $builder->add('decisions', TextareaType::class, [
            'label' => 'Decisions',
            'required' => false,
            'help' => 'Key decisions made during the meeting',
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter decisions',
            ],
        ]);

        $builder->add('actionItems', TextareaType::class, [
            'label' => 'Action Items',
            'required' => false,
            'help' => 'Action items and tasks assigned during the meeting',
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter action items',
            ],
        ]);

        $builder->add('recordingAvailable', CheckboxType::class, [
            'label' => 'Recording Available',
            'required' => true,
            'help' => 'Indicates if a recording of the meeting is available',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('nextMeetingDate', DateTimeType::class, [
            'label' => 'Next Meeting Date',
            'required' => false,
            'help' => 'Scheduled date for the next meeting',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('organizer', TextType::class, [
            'label' => 'Organizer',
            'required' => false,
            'help' => 'Name of the meeting organizer or facilitator',
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter organizer',
            ],
        ]);

        $builder->add('tags', TextType::class, [
            'label' => 'Tags',
            'required' => false,
            'help' => 'Tags for categorizing and organizing meetings',
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter tags',
            ],
        ]);

        $builder->add('platform', ChoiceType::class, [
            'label' => 'Platform',
            'required' => false,
            'help' => 'Virtual meeting platform used',
            'class' => App\Enum\PlatformEnum::class,
            'choice_label' => 'getLabel',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('confidential', CheckboxType::class, [
            'label' => 'Confidential',
            'required' => true,
            'help' => 'Mark this meeting as confidential',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('recurring', CheckboxType::class, [
            'label' => 'Recurring',
            'required' => true,
            'help' => 'Is this a recurring meeting?',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('recurrencePattern', TextareaType::class, [
            'label' => 'Recurrence Pattern',
            'required' => false,
            'help' => 'Pattern for recurring meetings (frequency, interval, end date)',
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter recurrence pattern',
            ],
        ]);

        $builder->add('recordUrl', TextType::class, [
            'label' => 'Recording URL',
            'required' => false,
            'help' => 'URL to access the meeting recording',
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter recording url',
            ],
        ]);

        $builder->add('secret', TextType::class, [
            'label' => 'Meeting Secret/Password',
            'required' => false,
            'help' => 'Password or secret key to join the meeting',
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter meeting secret/password',
            ],
        ]);

        $builder->add('url', TextType::class, [
            'label' => 'Meeting URL',
            'required' => false,
            'help' => 'URL to join the virtual meeting',
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter meeting url',
            ],
        ]);

    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            'data_class' => MeetingData::class,
        ]);
    }
}
