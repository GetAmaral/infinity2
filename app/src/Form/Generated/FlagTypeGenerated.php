<?php

declare(strict_types=1);

namespace App\Form\Generated;

use App\Entity\Flag;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\Extension\Core\Type\ChoiceType;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
use Symfony\Component\Form\Extension\Core\Type\ColorType;
use Symfony\Component\Form\Extension\Core\Type\IntegerType;
use Symfony\Component\Form\Extension\Core\Type\CheckboxType;
use Symfony\Component\Form\Extension\Core\Type\DateType;
use Symfony\Contracts\Translation\TranslatorInterface;

/**
 * Generated Base Form for Flag
 *
 * ⚠️ WARNING: This file is ALWAYS regenerated by Genmax
 * DO NOT EDIT THIS FILE - Edit FlagType instead
 *
 * @generated by Genmax
 * @codeCoverageIgnore
 */
abstract class FlagTypeGenerated extends AbstractType
{
    public function __construct(
        protected readonly TranslatorInterface $translator
    ) {}

    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder->add('name', TextType::class, [
            'label' => 'Name',
            'required' => true,
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter name',
            ],
        ]);

        $builder->add('category', ChoiceType::class, [
            'label' => 'Category',
            'required' => true,
            'help' => 'Categorize this flag for better organization',
            'class' => App\Enum\CategoryEnum::class,
            'choice_label' => 'getLabel',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('description', TextareaType::class, [
            'label' => 'Description',
            'required' => false,
            'help' => 'Optional explanation of this flag&#039;s purpose',
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter description',
            ],
        ]);

        $builder->add('color', ColorType::class, [
            'label' => 'Color',
            'required' => false,
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('icon', TextType::class, [
            'label' => 'Icon',
            'required' => false,
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter icon',
            ],
        ]);

        $builder->add('entityType', ChoiceType::class, [
            'label' => 'Entity Type',
            'required' => true,
            'help' => 'What type of entity is being flagged',
            'class' => App\Enum\EntitytypeEnum::class,
            'choice_label' => 'getLabel',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('priority', ChoiceType::class, [
            'label' => 'Priority',
            'required' => true,
            'help' => 'Business priority: 1=Low, 2=Medium, 3=High, 4=Urgent',
            'class' => App\Enum\PriorityEnum::class,
            'choice_label' => 'getLabel',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('displayOrder', IntegerType::class, [
            'label' => 'Display Order',
            'required' => true,
            'help' => 'Order in which flags appear in UI',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('active', CheckboxType::class, [
            'label' => 'Active',
            'required' => true,
            'help' => 'Uncheck to deactivate flag without deleting',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('system', CheckboxType::class, [
            'label' => 'System Flag',
            'required' => true,
            'help' => 'System flags cannot be deleted',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('dueDate', DateType::class, [
            'label' => 'Due Date',
            'required' => false,
            'help' => 'Optional reminder or follow-up date',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            'data_class' => Flag::class,
        ]);
    }
}
