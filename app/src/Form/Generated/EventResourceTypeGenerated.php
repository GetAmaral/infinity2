<?php

declare(strict_types=1);

namespace App\Form\Generated;

use App\Entity\EventResource;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
use Symfony\Component\Form\Extension\Core\Type\CheckboxType;
use Symfony\Component\Form\Extension\Core\Type\TimezoneType;
use Symfony\Component\Form\Extension\Core\Type\IntegerType;
use Symfony\Component\Form\Extension\Core\Type\MoneyType;
use Symfony\Component\Form\Extension\Core\Type\UrlType;
use Symfony\Bridge\Doctrine\Form\Type\EntityType;
use Symfony\Contracts\Translation\TranslatorInterface;

/**
 * Generated Base Form for EventResource
 *
 * ⚠️ WARNING: This file is ALWAYS regenerated by Genmax
 * DO NOT EDIT THIS FILE - Edit EventResourceType instead
 *
 * @generated by Genmax
 * @codeCoverageIgnore
 */
abstract class EventResourceTypeGenerated extends AbstractType
{
    public function __construct(
        protected readonly TranslatorInterface $translator
    ) {}

    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder->add('name', TextType::class, [
            'label' => 'Name',
            'required' => true,
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter name',
            ],
        ]);

        $builder->add('description', TextareaType::class, [
            'label' => 'Description',
            'required' => false,
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter description',
            ],
        ]);

        $builder->add('availabilitySchedule', TextareaType::class, [
            'label' => 'AvailabilitySchedule',
            'required' => false,
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter availabilityschedule',
            ],
        ]);

        $builder->add('available', CheckboxType::class, [
            'label' => 'Available',
            'required' => true,
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('active', CheckboxType::class, [
            'label' => 'Active',
            'required' => true,
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('bookable', CheckboxType::class, [
            'label' => 'Bookable',
            'required' => true,
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('timezone', TimezoneType::class, [
            'label' => 'Timezone',
            'required' => false,
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('requiresApproval', CheckboxType::class, [
            'label' => 'Requires Approval',
            'required' => true,
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('autoConfirm', CheckboxType::class, [
            'label' => 'Auto Confirm',
            'required' => true,
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('minimumBookingDuration', IntegerType::class, [
            'label' => 'Minimum Booking Duration',
            'required' => false,
            'help' => 'Duration in minutes (e.g., 30 for 30 minutes)',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('maximumBookingDuration', IntegerType::class, [
            'label' => 'Maximum Booking Duration',
            'required' => false,
            'help' => 'Duration in minutes (e.g., 480 for 8 hours)',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('pricePerHour', MoneyType::class, [
            'label' => 'Price Per Hour',
            'required' => false,
            'help' => 'Cost per hour in organization currency',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('bookingRules', TextareaType::class, [
            'label' => 'BookingRules',
            'required' => false,
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter bookingrules',
            ],
        ]);

        $builder->add('pricePerDay', MoneyType::class, [
            'label' => 'Price Per Day',
            'required' => false,
            'help' => 'Cost per day in organization currency',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('imageUrl', UrlType::class, [
            'label' => 'Image URL',
            'required' => false,
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('thumbnailUrl', UrlType::class, [
            'label' => 'Thumbnail URL',
            'required' => false,
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('tags', TextareaType::class, [
            'label' => 'Tags',
            'required' => false,
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter tags',
            ],
        ]);

        $builder->add('capacity', IntegerType::class, [
            'label' => 'Capacity',
            'required' => false,
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('city', EntityType::class, [
            'label' => 'City',
            'required' => false,
            'class' => City::class,
            'choice_label' => '__toString',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('equipment', TextareaType::class, [
            'label' => 'Equipment',
            'required' => false,
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter equipment',
            ],
        ]);

        $builder->add('eventBookings', EntityType::class, [
            'label' => 'EventBookings',
            'required' => false,
            'entry_type' => App\Form\EventResourceBookingType::class,
            'entry_options' => [
                'label' => false,
            ],
            'allow_add' => true,
            'allow_delete' => true,
            'by_reference' => false,
            'prototype' => true,
            'attr' => [
                'class' => 'form-input-modern',
            ],
            'constraints' => [
                new \Symfony\Component\Validator\Constraints\Count(['min' => 1]),
            ],
        ]);

        $builder->add('geoCoordinates', TextType::class, [
            'label' => 'Geo Coordinates',
            'required' => false,
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter geo coordinates',
            ],
        ]);

        $builder->add('location', TextType::class, [
            'label' => 'Location',
            'required' => false,
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter location',
            ],
        ]);

        $builder->add('type', EntityType::class, [
            'label' => 'Type',
            'required' => true,
            'class' => EventResourceType::class,
            'choice_label' => '__toString',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            'data_class' => EventResource::class,
        ]);
    }
}
