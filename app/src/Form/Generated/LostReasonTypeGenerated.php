<?php

declare(strict_types=1);

namespace App\Form\Generated;

use App\Entity\LostReason;
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Symfony\Component\Form\Extension\Core\Type\TextType;
use Symfony\Component\Form\Extension\Core\Type\TextareaType;
use Symfony\Component\Form\Extension\Core\Type\EnumType;
use Symfony\Component\Form\Extension\Core\Type\CheckboxType;
use Symfony\Component\Form\Extension\Core\Type\IntegerType;
use Symfony\Component\Form\Extension\Core\Type\ColorType;
use Symfony\Contracts\Translation\TranslatorInterface;

/**
 * Generated Base Form for LostReason
 *
 * ⚠️ WARNING: This file is ALWAYS regenerated by Genmax
 * DO NOT EDIT THIS FILE - Edit LostReasonType instead
 *
 * @generated by Genmax
 * @codeCoverageIgnore
 */
abstract class LostReasonTypeGenerated extends AbstractType
{
    public function __construct(
        protected readonly TranslatorInterface $translator
    ) {}

    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
        $builder->add('name', TextType::class, [
            'label' => 'Name',
            'required' => true,
            'help' => 'Enter a clear, concise name for this lost reason',
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter name',
            ],
        ]);

        $builder->add('description', TextareaType::class, [
            'label' => 'Description',
            'required' => false,
            'help' => 'Provide guidance to help sales reps understand when to use this reason',
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter description',
            ],
        ]);

        $builder->add('category', EnumType::class, [
            'label' => 'Category',
            'required' => true,
            'help' => 'Select the primary category for this lost reason to enable better analysis and reporting',
            'class' => App\Enum\CategoryEnum::class,
            'choice_label' => 'getLabel',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('active', CheckboxType::class, [
            'label' => 'Active',
            'required' => true,
            'help' => 'Inactive reasons will not appear in dropdowns but historical data is preserved',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('default', CheckboxType::class, [
            'label' => 'Default',
            'required' => true,
            'help' => 'Only one lost reason should be marked as default',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('sortOrder', IntegerType::class, [
            'label' => 'Sort Order',
            'required' => true,
            'help' => 'Set the display order (e.g., 10, 20, 30) to control how reasons appear in dropdowns',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('requiresNotes', CheckboxType::class, [
            'label' => 'Requires Notes',
            'required' => true,
            'help' => 'Enable this to force sales reps to provide detailed notes when selecting this reason',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('color', ColorType::class, [
            'label' => 'Color',
            'required' => false,
            'help' => 'Hex color code for visual representation in dashboards and reports',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('critical', CheckboxType::class, [
            'label' => 'Critical',
            'required' => true,
            'help' => 'Mark as critical if this reason indicates a systemic problem requiring leadership review',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('impact', EnumType::class, [
            'label' => 'Impact',
            'required' => false,
            'help' => 'Impact level helps prioritize which lost reasons need strategic attention',
            'class' => App\Enum\ImpactEnum::class,
            'choice_label' => 'getLabel',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('winBackPotential', EnumType::class, [
            'label' => 'Win-Back Potential',
            'required' => false,
            'help' => 'Win-back potential helps identify which lost deals should be nurtured for future opportunities',
            'class' => App\Enum\WinbackpotentialEnum::class,
            'choice_label' => 'getLabel',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('actionable', CheckboxType::class, [
            'label' => 'Actionable',
            'required' => true,
            'help' => 'Actionable reasons (e.g., pricing, features) vs non-actionable (e.g., timing, budget cuts)',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('internal', CheckboxType::class, [
            'label' => 'Internal Only',
            'required' => true,
            'help' => 'Internal reasons help track issues without exposing sensitive data to customers',
            'attr' => [
                'class' => 'form-input-modern',
            ],
        ]);

        $builder->add('competitorName', TextType::class, [
            'label' => 'Competitor Name',
            'required' => false,
            'help' => 'Track which competitors are winning deals to identify market threats',
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter competitor name',
            ],
        ]);

        $builder->add('automationRule', TextareaType::class, [
            'label' => 'Automation Rule',
            'required' => false,
            'help' => 'Define automated workflows triggered when this lost reason is selected',
            'attr' => [
                'class' => 'form-input-modern',
                'placeholder' => 'Enter automation rule',
            ],
        ]);

    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            'data_class' => LostReason::class,
        ]);
    }
}
