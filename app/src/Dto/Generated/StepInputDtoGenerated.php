<?php

declare(strict_types=1);

namespace App\Dto\Generated;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Context\ExecutionContextInterface;
use Symfony\Component\Serializer\Annotation\Groups;
use App\Dto\TreeFlowInputDto;
use App\Dto\StepQuestionInputDto;
use App\Dto\StepOutputInputDto;
use App\Dto\StepInputInputDto;

/**
 * Step Input DTO (Generated Base Class)
 *
 * Individual steps in automated workflows *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom validation logic to StepInputDto.php instead.
 *
 * @generated by Genmax Code Generator
 */
abstract class StepInputDtoGenerated
{
    /**
     * treeFlow reference
     * Must be: IRI string (e.g., "/api/treeflows/uuid")
     */
    #[Assert\NotNull]
    #[Groups(['step:write'])]
    public ?string $treeFlow = null;

    #[Assert\Length(max: 255)]
    #[Groups(['step:write'])]
    public string $name;

    #[Groups(['step:write'])]
    public bool $first = false;

    #[Assert\Length(max: 255)]
    #[Groups(['step:write'])]
    public string $slug;

    #[Groups(['step:write'])]
    public ?string $objective = null;

    #[Groups(['step:write'])]
    public ?string $prompt = null;

    #[Groups(['step:write'])]
    public int $viewOrder = 1;

    #[Groups(['step:write'])]
    public ?int $positionX = null;

    #[Groups(['step:write'])]
    public ?int $positionY = null;

    /**
     * Nested questions collection
     * Strategy: create_and_update
     * Max items: 20     */
    #[Assert\Valid]
    #[Assert\Count(max: 20, maxMessage: 'Cannot have more than 20 questions')]
    #[Groups(['step:write'])]
    public array $questions = [];

    /**
     * Nested outputs collection
     * Strategy: create_and_update
     * Max items: 20     */
    #[Assert\Valid]
    #[Assert\Count(max: 20, maxMessage: 'Cannot have more than 20 outputs')]
    #[Groups(['step:write'])]
    public array $outputs = [];

    /**
     * Nested inputs collection
     * Strategy: create_and_update
     * Max items: 20     */
    #[Assert\Valid]
    #[Assert\Count(max: 20, maxMessage: 'Cannot have more than 20 inputs')]
    #[Groups(['step:write'])]
    public array $inputs = [];


    // Getters and Setters

    public function getTreeflow(): ?string    {
        return $this->treeFlow;
    }

    public function setTreeflow(?string $treeFlow): self
    {
        $this->treeFlow = $treeFlow;
        return $this;
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getFirst(): bool    {
        return $this->first;
    }

    public function setFirst(bool $first): self
    {
        $this->first = $first;
        return $this;
    }

    public function getSlug(): string    {
        return $this->slug;
    }

    public function setSlug(string $slug): self
    {
        $this->slug = $slug;
        return $this;
    }

    public function getObjective(): ?string    {
        return $this->objective;
    }

    public function setObjective(?string $objective): self
    {
        $this->objective = $objective;
        return $this;
    }

    public function getPrompt(): ?string    {
        return $this->prompt;
    }

    public function setPrompt(?string $prompt): self
    {
        $this->prompt = $prompt;
        return $this;
    }

    public function getVieworder(): int    {
        return $this->viewOrder;
    }

    public function setVieworder(int $viewOrder): self
    {
        $this->viewOrder = $viewOrder;
        return $this;
    }

    public function getPositionx(): ?int    {
        return $this->positionX;
    }

    public function setPositionx(?int $positionX): self
    {
        $this->positionX = $positionX;
        return $this;
    }

    public function getPositiony(): ?int    {
        return $this->positionY;
    }

    public function setPositiony(?int $positionY): self
    {
        $this->positionY = $positionY;
        return $this;
    }

    public function getQuestions(): array    {
        return $this->questions;
    }

    public function setQuestions(array $questions): self
    {
        $this->questions = $questions;
        return $this;
    }

    public function getOutputs(): array    {
        return $this->outputs;
    }

    public function setOutputs(array $outputs): self
    {
        $this->outputs = $outputs;
        return $this;
    }

    public function getInputs(): array    {
        return $this->inputs;
    }

    public function setInputs(array $inputs): self
    {
        $this->inputs = $inputs;
        return $this;
    }
}
