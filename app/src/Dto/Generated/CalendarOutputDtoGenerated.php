<?php

declare(strict_types=1);

namespace App\Dto\Generated;

use Symfony\Component\Uid\Uuid;
use App\Dto\OrganizationOutputDto;
use App\Dto\UserOutputDto;
use App\Dto\CalendarTypeOutputDto;
use App\Dto\EventOutputDto;
use App\Dto\CalendarExternalLinkOutputDto;
use App\Dto\WorkingHourOutputDto;
use App\Dto\HolidayOutputDto;

/**
 * Calendar Output DTO (Generated Base Class)
 *
 * Calendars for organizing events and meetings *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom computed properties to CalendarOutputDto.php instead.
 *
 * @generated by Genmax Code Generator
 */
abstract class CalendarOutputDtoGenerated
{
    public ?Uuid $id = null;

    /**
     * organization reference
     * Can be: IRI string or nested OrganizationOutput object
     */
    public string|OrganizationOutputDto $organization;

    public string $name;

    public ?string $description = null;

    /**
     * user reference
     * Can be: IRI string or nested UserOutput object
     */
    public string|UserOutputDto|null $user = null;

    public string $timeZone;

    public ?string $color = null;

    public ?bool $primary = null;

    public ?bool $visible = null;

    public ?string $accessRole = null;

    /**
     * calendarType reference
     * Can be: IRI string or nested CalendarTypeOutput object
     */
    public string|CalendarTypeOutputDto|null $calendarType = null;

    /**
     * events collection
     * @var EventOutputDto[]
     */
    public array $events = [];

    /**
     * externalLink reference
     * Can be: IRI string or nested CalendarExternalLinkOutput object
     */
    public string|CalendarExternalLinkOutputDto|null $externalLink = null;

    public ?string $externalApiKey = null;

    /**
     * workingHours collection
     * @var WorkingHourOutputDto[]
     */
    public array $workingHours = [];

    /**
     * holidays collection
     * @var HolidayOutputDto[]
     */
    public array $holidays = [];

    public bool $default;

    public bool $active;

    public bool $public;

    public ?string $icon = null;

    public ?int $sortOrder = null;

    public ?string $externalId = null;

    public ?\DateTimeImmutable $lastSyncedAt = null;

    public ?array $permissions = null;

    public ?array $settings = null;

    public ?\DateTimeImmutable $createdAt = null;

    public ?\DateTimeImmutable $updatedAt = null;

    // Getters and Setters
    public function getId(): ?Uuid
    {
        return $this->id;
    }

    public function setId(?Uuid $id): self
    {
        $this->id = $id;
        return $this;
    }


    public function getOrganization(): string|OrganizationOutputDto    {
        return $this->organization;
    }

    public function setOrganization(string|OrganizationOutputDto $organization): self
    {
        $this->organization = $organization;
        return $this;
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getDescription(): ?string    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    public function getUser(): string|UserOutputDto|null    {
        return $this->user;
    }

    public function setUser(string|UserOutputDto|null $user): self
    {
        $this->user = $user;
        return $this;
    }

    public function getTimeZone(): string    {
        return $this->timeZone;
    }

    public function setTimeZone(string $timeZone): self
    {
        $this->timeZone = $timeZone;
        return $this;
    }

    public function getColor(): ?string    {
        return $this->color;
    }

    public function setColor(?string $color): self
    {
        $this->color = $color;
        return $this;
    }

    public function getPrimary(): ?bool    {
        return $this->primary;
    }

    public function setPrimary(?bool $primary): self
    {
        $this->primary = $primary;
        return $this;
    }

    public function getVisible(): ?bool    {
        return $this->visible;
    }

    public function setVisible(?bool $visible): self
    {
        $this->visible = $visible;
        return $this;
    }

    public function getAccessRole(): ?string    {
        return $this->accessRole;
    }

    public function setAccessRole(?string $accessRole): self
    {
        $this->accessRole = $accessRole;
        return $this;
    }

    public function getCalendarType(): string|CalendarTypeOutputDto|null    {
        return $this->calendarType;
    }

    public function setCalendarType(string|CalendarTypeOutputDto|null $calendarType): self
    {
        $this->calendarType = $calendarType;
        return $this;
    }

    public function getEvents(): array    {
        return $this->events;
    }

    public function setEvents(array $events): self
    {
        $this->events = $events;
        return $this;
    }

    public function getExternalLink(): string|CalendarExternalLinkOutputDto|null    {
        return $this->externalLink;
    }

    public function setExternalLink(string|CalendarExternalLinkOutputDto|null $externalLink): self
    {
        $this->externalLink = $externalLink;
        return $this;
    }

    public function getExternalApiKey(): ?string    {
        return $this->externalApiKey;
    }

    public function setExternalApiKey(?string $externalApiKey): self
    {
        $this->externalApiKey = $externalApiKey;
        return $this;
    }

    public function getWorkingHours(): array    {
        return $this->workingHours;
    }

    public function setWorkingHours(array $workingHours): self
    {
        $this->workingHours = $workingHours;
        return $this;
    }

    public function getHolidays(): array    {
        return $this->holidays;
    }

    public function setHolidays(array $holidays): self
    {
        $this->holidays = $holidays;
        return $this;
    }

    public function getDefault(): bool    {
        return $this->default;
    }

    public function setDefault(bool $default): self
    {
        $this->default = $default;
        return $this;
    }

    public function getActive(): bool    {
        return $this->active;
    }

    public function setActive(bool $active): self
    {
        $this->active = $active;
        return $this;
    }

    public function getPublic(): bool    {
        return $this->public;
    }

    public function setPublic(bool $public): self
    {
        $this->public = $public;
        return $this;
    }

    public function getIcon(): ?string    {
        return $this->icon;
    }

    public function setIcon(?string $icon): self
    {
        $this->icon = $icon;
        return $this;
    }

    public function getSortOrder(): ?int    {
        return $this->sortOrder;
    }

    public function setSortOrder(?int $sortOrder): self
    {
        $this->sortOrder = $sortOrder;
        return $this;
    }

    public function getExternalId(): ?string    {
        return $this->externalId;
    }

    public function setExternalId(?string $externalId): self
    {
        $this->externalId = $externalId;
        return $this;
    }

    public function getLastSyncedAt(): ?\DateTimeImmutable    {
        return $this->lastSyncedAt;
    }

    public function setLastSyncedAt(?\DateTimeImmutable $lastSyncedAt): self
    {
        $this->lastSyncedAt = $lastSyncedAt;
        return $this;
    }

    public function getPermissions(): ?array    {
        return $this->permissions;
    }

    public function setPermissions(?array $permissions): self
    {
        $this->permissions = $permissions;
        return $this;
    }

    public function getSettings(): ?array    {
        return $this->settings;
    }

    public function setSettings(?array $settings): self
    {
        $this->settings = $settings;
        return $this;
    }

    public function getCreatedAt(): ?\DateTimeImmutable
    {
        return $this->createdAt;
    }

    public function setCreatedAt(?\DateTimeImmutable $createdAt): self
    {
        $this->createdAt = $createdAt;
        return $this;
    }

    public function getUpdatedAt(): ?\DateTimeImmutable
    {
        return $this->updatedAt;
    }

    public function setUpdatedAt(?\DateTimeImmutable $updatedAt): self
    {
        $this->updatedAt = $updatedAt;
        return $this;
    }
}
