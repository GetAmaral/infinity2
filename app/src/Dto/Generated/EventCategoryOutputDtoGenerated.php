<?php

declare(strict_types=1);

namespace App\Dto\Generated;

use Symfony\Component\Uid\Uuid;
use App\Dto\OrganizationOutputDto;
use App\Dto\EventOutputDto;

/**
 * EventCategory Output DTO (Generated Base Class)
 *
 * Event categories for calendar organization *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom computed properties to EventCategoryOutputDto.php instead.
 *
 * @generated by Genmax Code Generator
 */
abstract class EventCategoryOutputDtoGenerated
{
    public ?Uuid $id = null;

    /**
     * organization reference
     * Can be: IRI string or nested OrganizationOutput object
     */
    public string|OrganizationOutputDto $organization;

    public string $name;

    public string $color;

    public ?string $description = null;

    public string $icon;

    public bool $default;

    public ?string $eventType = null;

    public int $sortOrder;

    public bool $allowMultiple;

    public bool $active;

    /**
     * events collection
     * @var EventOutputDto[]
     */
    public array $events = [];

    public ?\DateTimeImmutable $createdAt = null;

    public ?\DateTimeImmutable $updatedAt = null;

    // Getters and Setters
    public function getId(): ?Uuid
    {
        return $this->id;
    }

    public function setId(?Uuid $id): self
    {
        $this->id = $id;
        return $this;
    }


    public function getOrganization(): string|OrganizationOutputDto    {
        return $this->organization;
    }

    public function setOrganization(string|OrganizationOutputDto $organization): self
    {
        $this->organization = $organization;
        return $this;
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getColor(): string    {
        return $this->color;
    }

    public function setColor(string $color): self
    {
        $this->color = $color;
        return $this;
    }

    public function getDescription(): ?string    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    public function getIcon(): string    {
        return $this->icon;
    }

    public function setIcon(string $icon): self
    {
        $this->icon = $icon;
        return $this;
    }

    public function getDefault(): bool    {
        return $this->default;
    }

    public function setDefault(bool $default): self
    {
        $this->default = $default;
        return $this;
    }

    public function getEventtype(): ?string    {
        return $this->eventType;
    }

    public function setEventtype(?string $eventType): self
    {
        $this->eventType = $eventType;
        return $this;
    }

    public function getSortorder(): int    {
        return $this->sortOrder;
    }

    public function setSortorder(int $sortOrder): self
    {
        $this->sortOrder = $sortOrder;
        return $this;
    }

    public function getAllowmultiple(): bool    {
        return $this->allowMultiple;
    }

    public function setAllowmultiple(bool $allowMultiple): self
    {
        $this->allowMultiple = $allowMultiple;
        return $this;
    }

    public function getActive(): bool    {
        return $this->active;
    }

    public function setActive(bool $active): self
    {
        $this->active = $active;
        return $this;
    }

    public function getEvents(): array    {
        return $this->events;
    }

    public function setEvents(array $events): self
    {
        $this->events = $events;
        return $this;
    }

    public function getCreatedAt(): ?\DateTimeImmutable
    {
        return $this->createdAt;
    }

    public function setCreatedAt(?\DateTimeImmutable $createdAt): self
    {
        $this->createdAt = $createdAt;
        return $this;
    }

    public function getUpdatedAt(): ?\DateTimeImmutable
    {
        return $this->updatedAt;
    }

    public function setUpdatedAt(?\DateTimeImmutable $updatedAt): self
    {
        $this->updatedAt = $updatedAt;
        return $this;
    }
}
