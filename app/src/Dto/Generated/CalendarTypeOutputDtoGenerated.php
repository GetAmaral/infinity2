<?php

declare(strict_types=1);

namespace App\Dto\Generated;

use Symfony\Component\Uid\Uuid;
use App\Dto\OrganizationOutputDto;
use App\Dto\CalendarOutputDto;

/**
 * Calendar Type Output DTO (Generated Base Class)
 *
 * Calendar types (Personal, Shared, Public, etc.) *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom computed properties to CalendarTypeOutputDto.php instead.
 *
 * @generated by Genmax Code Generator
 */
abstract class CalendarTypeOutputDtoGenerated
{
    public ?Uuid $id = null;

    /**
     * organization reference
     * Can be: IRI string or nested OrganizationOutput object
     */
    public string|OrganizationOutputDto $organization;

    public string $name;

    public ?string $description = null;

    /**
     * calendars collection
     * @var CalendarOutputDto[]
     */
    public array $calendars = [];

    public string $color;

    public string $icon;

    public bool $active;

    public bool $default;

    public string $visibility;

    public string $access_level;

    public int $sort_order;

    public bool $allow_sharing;

    public bool $require_approval;

    public ?int $max_calendars_per_user = null;

    public ?\DateTimeImmutable $createdAt = null;

    public ?\DateTimeImmutable $updatedAt = null;

    // Getters and Setters
    public function getId(): ?Uuid
    {
        return $this->id;
    }

    public function setId(?Uuid $id): self
    {
        $this->id = $id;
        return $this;
    }


    public function getOrganization(): string|OrganizationOutputDto    {
        return $this->organization;
    }

    public function setOrganization(string|OrganizationOutputDto $organization): self
    {
        $this->organization = $organization;
        return $this;
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getDescription(): ?string    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    public function getCalendars(): array    {
        return $this->calendars;
    }

    public function setCalendars(array $calendars): self
    {
        $this->calendars = $calendars;
        return $this;
    }

    public function getColor(): string    {
        return $this->color;
    }

    public function setColor(string $color): self
    {
        $this->color = $color;
        return $this;
    }

    public function getIcon(): string    {
        return $this->icon;
    }

    public function setIcon(string $icon): self
    {
        $this->icon = $icon;
        return $this;
    }

    public function getActive(): bool    {
        return $this->active;
    }

    public function setActive(bool $active): self
    {
        $this->active = $active;
        return $this;
    }

    public function getDefault(): bool    {
        return $this->default;
    }

    public function setDefault(bool $default): self
    {
        $this->default = $default;
        return $this;
    }

    public function getVisibility(): string    {
        return $this->visibility;
    }

    public function setVisibility(string $visibility): self
    {
        $this->visibility = $visibility;
        return $this;
    }

    public function getAccess_level(): string    {
        return $this->access_level;
    }

    public function setAccess_level(string $access_level): self
    {
        $this->access_level = $access_level;
        return $this;
    }

    public function getSort_order(): int    {
        return $this->sort_order;
    }

    public function setSort_order(int $sort_order): self
    {
        $this->sort_order = $sort_order;
        return $this;
    }

    public function getAllow_sharing(): bool    {
        return $this->allow_sharing;
    }

    public function setAllow_sharing(bool $allow_sharing): self
    {
        $this->allow_sharing = $allow_sharing;
        return $this;
    }

    public function getRequire_approval(): bool    {
        return $this->require_approval;
    }

    public function setRequire_approval(bool $require_approval): self
    {
        $this->require_approval = $require_approval;
        return $this;
    }

    public function getMax_calendars_per_user(): ?int    {
        return $this->max_calendars_per_user;
    }

    public function setMax_calendars_per_user(?int $max_calendars_per_user): self
    {
        $this->max_calendars_per_user = $max_calendars_per_user;
        return $this;
    }

    public function getCreatedAt(): ?\DateTimeImmutable
    {
        return $this->createdAt;
    }

    public function setCreatedAt(?\DateTimeImmutable $createdAt): self
    {
        $this->createdAt = $createdAt;
        return $this;
    }

    public function getUpdatedAt(): ?\DateTimeImmutable
    {
        return $this->updatedAt;
    }

    public function setUpdatedAt(?\DateTimeImmutable $updatedAt): self
    {
        $this->updatedAt = $updatedAt;
        return $this;
    }
}
