<?php

declare(strict_types=1);

namespace App\Dto\Generated;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Context\ExecutionContextInterface;
use App\Dto\StepInputDto;
use App\Dto\StepConnectionInputDto;

/**
 * StepOutput Input DTO (Generated Base Class)
 *
 * Output values from workflow steps *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom validation logic to StepOutputInputDto.php instead.
 *
 * @generated by Genmax Code Generator
 */
abstract class StepOutputInputDtoGenerated
{
    /**
     * step reference
     * Can be: IRI string (e.g., "/api/steps/uuid") or nested StepInput object
     */
    #[Assert\NotNull]
    public string|StepInputDto $step;

    #[Assert\Length(max: 255)]
    public string $name;

    public ?string $description = null;

    #[Assert\Length(max: 255)]
    public ?string $slug = null;

    public ?string $conditional = null;

    /**
     * connection reference
     * Can be: IRI string (e.g., "/api/stepconnections/uuid") or nested StepConnectionInput object
     */
    public string|StepConnectionInputDto|null $connection = null;


    // Getters and Setters

    public function getStep(): string|StepInputDto    {
        return $this->step;
    }

    public function setStep(string|StepInputDto $step): self
    {
        $this->step = $step;
        return $this;
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getDescription(): ?string    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    public function getSlug(): ?string    {
        return $this->slug;
    }

    public function setSlug(?string $slug): self
    {
        $this->slug = $slug;
        return $this;
    }

    public function getConditional(): ?string    {
        return $this->conditional;
    }

    public function setConditional(?string $conditional): self
    {
        $this->conditional = $conditional;
        return $this;
    }

    public function getConnection(): string|StepConnectionInputDto|null    {
        return $this->connection;
    }

    public function setConnection(string|StepConnectionInputDto|null $connection): self
    {
        $this->connection = $connection;
        return $this;
    }
}
