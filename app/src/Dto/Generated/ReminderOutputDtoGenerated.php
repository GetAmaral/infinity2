<?php

declare(strict_types=1);

namespace App\Dto\Generated;

use Symfony\Component\Uid\Uuid;
use App\Dto\OrganizationOutputDto;
use App\Dto\CommunicationMethodOutputDto;
use App\Dto\EventOutputDto;
use App\Dto\NotificationOutputDto;

/**
 * Reminder Output DTO (Generated Base Class)
 *
 * Automated reminders and notifications for events, tasks, meetings, and follow-ups with multi-channel delivery support *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom computed properties to ReminderOutputDto.php instead.
 *
 * @generated by Genmax Code Generator
 */
abstract class ReminderOutputDtoGenerated
{
    public ?Uuid $id = null;

    /**
     * organization reference
     * Can be: IRI string or nested OrganizationOutput object
     */
    public string|OrganizationOutputDto $organization;

    public string $name;

    public ?bool $active = null;

    /**
     * communicationMethod reference
     * Can be: IRI string or nested CommunicationMethodOutput object
     */
    public string|CommunicationMethodOutputDto|null $communicationMethod = null;

    /**
     * event reference
     * Can be: IRI string or nested EventOutput object
     */
    public string|EventOutputDto|null $event = null;

    public int $minutesBeforeStart;

    /**
     * notifications collection
     * @var NotificationOutputDto[]
     */
    public array $notifications = [];

    public ?\DateTimeImmutable $createdAt = null;

    public ?\DateTimeImmutable $updatedAt = null;

    // Getters and Setters
    public function getId(): ?Uuid
    {
        return $this->id;
    }

    public function setId(?Uuid $id): self
    {
        $this->id = $id;
        return $this;
    }


    public function getOrganization(): string|OrganizationOutputDto    {
        return $this->organization;
    }

    public function setOrganization(string|OrganizationOutputDto $organization): self
    {
        $this->organization = $organization;
        return $this;
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getActive(): ?bool    {
        return $this->active;
    }

    public function setActive(?bool $active): self
    {
        $this->active = $active;
        return $this;
    }

    public function getCommunicationmethod(): string|CommunicationMethodOutputDto|null    {
        return $this->communicationMethod;
    }

    public function setCommunicationmethod(string|CommunicationMethodOutputDto|null $communicationMethod): self
    {
        $this->communicationMethod = $communicationMethod;
        return $this;
    }

    public function getEvent(): string|EventOutputDto|null    {
        return $this->event;
    }

    public function setEvent(string|EventOutputDto|null $event): self
    {
        $this->event = $event;
        return $this;
    }

    public function getMinutesbeforestart(): int    {
        return $this->minutesBeforeStart;
    }

    public function setMinutesbeforestart(int $minutesBeforeStart): self
    {
        $this->minutesBeforeStart = $minutesBeforeStart;
        return $this;
    }

    public function getNotifications(): array    {
        return $this->notifications;
    }

    public function setNotifications(array $notifications): self
    {
        $this->notifications = $notifications;
        return $this;
    }

    public function getCreatedAt(): ?\DateTimeImmutable
    {
        return $this->createdAt;
    }

    public function setCreatedAt(?\DateTimeImmutable $createdAt): self
    {
        $this->createdAt = $createdAt;
        return $this;
    }

    public function getUpdatedAt(): ?\DateTimeImmutable
    {
        return $this->updatedAt;
    }

    public function setUpdatedAt(?\DateTimeImmutable $updatedAt): self
    {
        $this->updatedAt = $updatedAt;
        return $this;
    }
}
