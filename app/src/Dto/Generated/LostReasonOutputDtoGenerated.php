<?php

declare(strict_types=1);

namespace App\Dto\Generated;

use Symfony\Component\Uid\Uuid;
use App\Dto\OrganizationOutputDto;
use App\Dto\DealOutputDto;

/**
 * LostReason Output DTO (Generated Base Class)
 *
 * Tracks and categorizes reasons for lost deals with advanced analytics capabilities. Supports win-loss analysis, competitor tracking, and actionable insights to improve win rates. Implements CRM best practices for structured data collection and longitudinal analysis. *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom computed properties to LostReasonOutputDto.php instead.
 *
 * @generated by Genmax Code Generator
 */
abstract class LostReasonOutputDtoGenerated
{
    public ?Uuid $id = null;

    /**
     * organization reference
     * Can be: IRI string or nested OrganizationOutput object
     */
    public string|OrganizationOutputDto $organization;

    public string $name;

    public ?string $description = null;

    public string $category;

    /**
     * deals collection
     * @var DealOutputDto[]
     */
    public array $deals = [];

    public bool $active;

    public bool $default;

    public int $sortOrder;

    public bool $requiresNotes;

    public ?string $color = null;

    public bool $critical;

    public ?string $impact = null;

    public ?string $winBackPotential = null;

    public bool $actionable;

    public bool $internal;

    public ?string $competitorName = null;

    public ?string $automationRule = null;

    public ?\DateTimeImmutable $createdAt = null;

    public ?\DateTimeImmutable $updatedAt = null;

    // Getters and Setters
    public function getId(): ?Uuid
    {
        return $this->id;
    }

    public function setId(?Uuid $id): self
    {
        $this->id = $id;
        return $this;
    }


    public function getOrganization(): string|OrganizationOutputDto    {
        return $this->organization;
    }

    public function setOrganization(string|OrganizationOutputDto $organization): self
    {
        $this->organization = $organization;
        return $this;
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getDescription(): ?string    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    public function getCategory(): string    {
        return $this->category;
    }

    public function setCategory(string $category): self
    {
        $this->category = $category;
        return $this;
    }

    public function getDeals(): array    {
        return $this->deals;
    }

    public function setDeals(array $deals): self
    {
        $this->deals = $deals;
        return $this;
    }

    public function getActive(): bool    {
        return $this->active;
    }

    public function setActive(bool $active): self
    {
        $this->active = $active;
        return $this;
    }

    public function getDefault(): bool    {
        return $this->default;
    }

    public function setDefault(bool $default): self
    {
        $this->default = $default;
        return $this;
    }

    public function getSortorder(): int    {
        return $this->sortOrder;
    }

    public function setSortorder(int $sortOrder): self
    {
        $this->sortOrder = $sortOrder;
        return $this;
    }

    public function getRequiresnotes(): bool    {
        return $this->requiresNotes;
    }

    public function setRequiresnotes(bool $requiresNotes): self
    {
        $this->requiresNotes = $requiresNotes;
        return $this;
    }

    public function getColor(): ?string    {
        return $this->color;
    }

    public function setColor(?string $color): self
    {
        $this->color = $color;
        return $this;
    }

    public function getCritical(): bool    {
        return $this->critical;
    }

    public function setCritical(bool $critical): self
    {
        $this->critical = $critical;
        return $this;
    }

    public function getImpact(): ?string    {
        return $this->impact;
    }

    public function setImpact(?string $impact): self
    {
        $this->impact = $impact;
        return $this;
    }

    public function getWinbackpotential(): ?string    {
        return $this->winBackPotential;
    }

    public function setWinbackpotential(?string $winBackPotential): self
    {
        $this->winBackPotential = $winBackPotential;
        return $this;
    }

    public function getActionable(): bool    {
        return $this->actionable;
    }

    public function setActionable(bool $actionable): self
    {
        $this->actionable = $actionable;
        return $this;
    }

    public function getInternal(): bool    {
        return $this->internal;
    }

    public function setInternal(bool $internal): self
    {
        $this->internal = $internal;
        return $this;
    }

    public function getCompetitorname(): ?string    {
        return $this->competitorName;
    }

    public function setCompetitorname(?string $competitorName): self
    {
        $this->competitorName = $competitorName;
        return $this;
    }

    public function getAutomationrule(): ?string    {
        return $this->automationRule;
    }

    public function setAutomationrule(?string $automationRule): self
    {
        $this->automationRule = $automationRule;
        return $this;
    }

    public function getCreatedAt(): ?\DateTimeImmutable
    {
        return $this->createdAt;
    }

    public function setCreatedAt(?\DateTimeImmutable $createdAt): self
    {
        $this->createdAt = $createdAt;
        return $this;
    }

    public function getUpdatedAt(): ?\DateTimeImmutable
    {
        return $this->updatedAt;
    }

    public function setUpdatedAt(?\DateTimeImmutable $updatedAt): self
    {
        $this->updatedAt = $updatedAt;
        return $this;
    }
}
