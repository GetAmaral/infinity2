<?php

declare(strict_types=1);

namespace App\Dto\Generated;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Context\ExecutionContextInterface;
use App\Dto\OrganizationInputDto;

/**
 * LostReason Input DTO (Generated Base Class)
 *
 * Tracks and categorizes reasons for lost deals with advanced analytics capabilities. Supports win-loss analysis, competitor tracking, and actionable insights to improve win rates. Implements CRM best practices for structured data collection and longitudinal analysis. *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom validation logic to LostReasonInputDto.php instead.
 *
 * @generated by Genmax Code Generator
 */
abstract class LostReasonInputDtoGenerated
{
    /**
     * organization reference
     * Can be: IRI string (e.g., "/api/organizations/uuid") or nested OrganizationInput object
     */
    #[Assert\NotNull]
    public string|OrganizationInputDto $organization;

    public string $name;

    public ?string $description = null;

    public string $category;

    public bool $active = true;

    public bool $default = false;

    public int $sortOrder = 0;

    public bool $requiresNotes = false;

    public ?string $color = '#0dcaf0';

    public bool $critical = false;

    public ?string $impact = null;

    public ?string $winBackPotential = null;

    public bool $actionable = true;

    public bool $internal = false;

    public ?string $competitorName = null;

    public ?string $automationRule = null;


    // Getters and Setters

    public function getOrganization(): string|OrganizationInputDto    {
        return $this->organization;
    }

    public function setOrganization(string|OrganizationInputDto $organization): self
    {
        $this->organization = $organization;
        return $this;
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getDescription(): ?string    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    public function getCategory(): string    {
        return $this->category;
    }

    public function setCategory(string $category): self
    {
        $this->category = $category;
        return $this;
    }

    public function getDeals(): ?string    {
        return $this->deals;
    }

    public function setDeals(?string $deals): self
    {
        $this->deals = $deals;
        return $this;
    }

    public function getActive(): bool    {
        return $this->active;
    }

    public function setActive(bool $active): self
    {
        $this->active = $active;
        return $this;
    }

    public function getDefault(): bool    {
        return $this->default;
    }

    public function setDefault(bool $default): self
    {
        $this->default = $default;
        return $this;
    }

    public function getSortorder(): int    {
        return $this->sortOrder;
    }

    public function setSortorder(int $sortOrder): self
    {
        $this->sortOrder = $sortOrder;
        return $this;
    }

    public function getRequiresnotes(): bool    {
        return $this->requiresNotes;
    }

    public function setRequiresnotes(bool $requiresNotes): self
    {
        $this->requiresNotes = $requiresNotes;
        return $this;
    }

    public function getColor(): ?string    {
        return $this->color;
    }

    public function setColor(?string $color): self
    {
        $this->color = $color;
        return $this;
    }

    public function getCritical(): bool    {
        return $this->critical;
    }

    public function setCritical(bool $critical): self
    {
        $this->critical = $critical;
        return $this;
    }

    public function getImpact(): ?string    {
        return $this->impact;
    }

    public function setImpact(?string $impact): self
    {
        $this->impact = $impact;
        return $this;
    }

    public function getWinbackpotential(): ?string    {
        return $this->winBackPotential;
    }

    public function setWinbackpotential(?string $winBackPotential): self
    {
        $this->winBackPotential = $winBackPotential;
        return $this;
    }

    public function getActionable(): bool    {
        return $this->actionable;
    }

    public function setActionable(bool $actionable): self
    {
        $this->actionable = $actionable;
        return $this;
    }

    public function getInternal(): bool    {
        return $this->internal;
    }

    public function setInternal(bool $internal): self
    {
        $this->internal = $internal;
        return $this;
    }

    public function getCompetitorname(): ?string    {
        return $this->competitorName;
    }

    public function setCompetitorname(?string $competitorName): self
    {
        $this->competitorName = $competitorName;
        return $this;
    }

    public function getAutomationrule(): ?string    {
        return $this->automationRule;
    }

    public function setAutomationrule(?string $automationRule): self
    {
        $this->automationRule = $automationRule;
        return $this;
    }
}
