<?php

declare(strict_types=1);

namespace App\Dto\Generated;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Context\ExecutionContextInterface;
use App\Dto\UserInputDto;

/**
 * Audit Log Input DTO (Generated Base Class)
 *
 * Audit log for tracking all system changes and user actions *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom validation logic to AuditLogInputDto.php instead.
 *
 * @generated by Genmax Code Generator
 */
abstract class AuditLogInputDtoGenerated
{
    public array $changes;

    #[Assert\Length(max: 255)]
    public string $action;

    #[Assert\Length(max: 64)]
    public ?string $checksum = null;

    #[Assert\Length(max: 255)]
    public string $entityClass;

    public string $entityId;

    public ?array $metadata = null;

    /**
     * user reference
     * Can be: IRI string (e.g., "/api/users/uuid") or nested UserInput object
     */
    public string|UserInputDto|null $user = null;


    // Getters and Setters

    public function getChanges(): array    {
        return $this->changes;
    }

    public function setChanges(array $changes): self
    {
        $this->changes = $changes;
        return $this;
    }

    public function getAction(): string    {
        return $this->action;
    }

    public function setAction(string $action): self
    {
        $this->action = $action;
        return $this;
    }

    public function getChecksum(): ?string    {
        return $this->checksum;
    }

    public function setChecksum(?string $checksum): self
    {
        $this->checksum = $checksum;
        return $this;
    }

    public function getEntityclass(): string    {
        return $this->entityClass;
    }

    public function setEntityclass(string $entityClass): self
    {
        $this->entityClass = $entityClass;
        return $this;
    }

    public function getEntityid(): string    {
        return $this->entityId;
    }

    public function setEntityid(string $entityId): self
    {
        $this->entityId = $entityId;
        return $this;
    }

    public function getMetadata(): ?array    {
        return $this->metadata;
    }

    public function setMetadata(?array $metadata): self
    {
        $this->metadata = $metadata;
        return $this;
    }

    public function getUser(): string|UserInputDto|null    {
        return $this->user;
    }

    public function setUser(string|UserInputDto|null $user): self
    {
        $this->user = $user;
        return $this;
    }
}
