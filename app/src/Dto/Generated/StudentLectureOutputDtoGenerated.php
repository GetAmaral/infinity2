<?php

declare(strict_types=1);

namespace App\Dto\Generated;

use Symfony\Component\Uid\Uuid;
use App\Dto\UserOutputDto;
use App\Dto\CourseLectureOutputDto;
use App\Dto\StudentCourseOutputDto;

/**
 * StudentLecture Output DTO (Generated Base Class)
 *
 * Student lecture progress and completion tracking *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom computed properties to StudentLectureOutputDto.php instead.
 *
 * @generated by Genmax Code Generator
 */
abstract class StudentLectureOutputDtoGenerated
{
    public ?Uuid $id = null;

    /**
     * student reference
     * Can be: IRI string or nested UserOutput object
     */
    public string|UserOutputDto $student;

    /**
     * lecture reference
     * Can be: IRI string or nested CourseLectureOutput object
     */
    public string|CourseLectureOutputDto $lecture;

    /**
     * studentCourse reference
     * Can be: IRI string or nested StudentCourseOutput object
     */
    public string|StudentCourseOutputDto|null $studentCourse = null;

    public int $watchedSeconds;

    public int $lastPositionSeconds;

    public string $completionPercentage;

    public bool $completed;

    public ?\DateTimeImmutable $lastWatchedAt = null;

    public ?\DateTimeImmutable $completedAt = null;

    public ?\DateTimeImmutable $createdAt = null;

    public ?\DateTimeImmutable $updatedAt = null;

    // Getters and Setters
    public function getId(): ?Uuid
    {
        return $this->id;
    }

    public function setId(?Uuid $id): self
    {
        $this->id = $id;
        return $this;
    }


    public function getStudent(): string|UserOutputDto    {
        return $this->student;
    }

    public function setStudent(string|UserOutputDto $student): self
    {
        $this->student = $student;
        return $this;
    }

    public function getLecture(): string|CourseLectureOutputDto    {
        return $this->lecture;
    }

    public function setLecture(string|CourseLectureOutputDto $lecture): self
    {
        $this->lecture = $lecture;
        return $this;
    }

    public function getStudentcourse(): string|StudentCourseOutputDto|null    {
        return $this->studentCourse;
    }

    public function setStudentcourse(string|StudentCourseOutputDto|null $studentCourse): self
    {
        $this->studentCourse = $studentCourse;
        return $this;
    }

    public function getWatchedseconds(): int    {
        return $this->watchedSeconds;
    }

    public function setWatchedseconds(int $watchedSeconds): self
    {
        $this->watchedSeconds = $watchedSeconds;
        return $this;
    }

    public function getLastpositionseconds(): int    {
        return $this->lastPositionSeconds;
    }

    public function setLastpositionseconds(int $lastPositionSeconds): self
    {
        $this->lastPositionSeconds = $lastPositionSeconds;
        return $this;
    }

    public function getCompletionpercentage(): string    {
        return $this->completionPercentage;
    }

    public function setCompletionpercentage(string $completionPercentage): self
    {
        $this->completionPercentage = $completionPercentage;
        return $this;
    }

    public function getCompleted(): bool    {
        return $this->completed;
    }

    public function setCompleted(bool $completed): self
    {
        $this->completed = $completed;
        return $this;
    }

    public function getLastwatchedat(): ?\DateTimeImmutable    {
        return $this->lastWatchedAt;
    }

    public function setLastwatchedat(?\DateTimeImmutable $lastWatchedAt): self
    {
        $this->lastWatchedAt = $lastWatchedAt;
        return $this;
    }

    public function getCompletedat(): ?\DateTimeImmutable    {
        return $this->completedAt;
    }

    public function setCompletedat(?\DateTimeImmutable $completedAt): self
    {
        $this->completedAt = $completedAt;
        return $this;
    }

    public function getCreatedAt(): ?\DateTimeImmutable
    {
        return $this->createdAt;
    }

    public function setCreatedAt(?\DateTimeImmutable $createdAt): self
    {
        $this->createdAt = $createdAt;
        return $this;
    }

    public function getUpdatedAt(): ?\DateTimeImmutable
    {
        return $this->updatedAt;
    }

    public function setUpdatedAt(?\DateTimeImmutable $updatedAt): self
    {
        $this->updatedAt = $updatedAt;
        return $this;
    }
}
