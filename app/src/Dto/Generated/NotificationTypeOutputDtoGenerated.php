<?php

declare(strict_types=1);

namespace App\Dto\Generated;

use Symfony\Component\Uid\Uuid;
use App\Dto\OrganizationOutputDto;
use App\Dto\NotificationOutputDto;

/**
 * NotificationType Output DTO (Generated Base Class)
 *
 * Notification types for the organization *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom computed properties to NotificationTypeOutputDto.php instead.
 *
 * @generated by Genmax Code Generator
 */
abstract class NotificationTypeOutputDtoGenerated
{
    public ?Uuid $id = null;

    /**
     * organization reference
     * Can be: IRI string or nested OrganizationOutput object
     */
    public string|OrganizationOutputDto $organization;

    public string $name;

    public ?string $description = null;

    public string $icon;

    /**
     * notifications collection
     * @var NotificationOutputDto[]
     */
    public array $notifications = [];

    public bool $active;

    public bool $default;

    public array $channels;

    public string $priority;

    public string $color;

    public ?string $emailSubject = null;

    public ?string $emailTemplate = null;

    public ?string $smsTemplate = null;

    public ?string $pushTitle = null;

    public ?string $pushBody = null;

    public string $frequency;

    public bool $retryEnabled;

    public ?int $maxRetries = null;

    public bool $throttleEnabled;

    public ?int $throttleLimit = null;

    public ?array $tags = null;

    public ?array $metadata = null;

    public bool $userPreferenceAllowed;

    public bool $requiresAction;

    public ?int $expiresAfterHours = null;

    public ?\DateTimeImmutable $createdAt = null;

    public ?\DateTimeImmutable $updatedAt = null;

    // Getters and Setters
    public function getId(): ?Uuid
    {
        return $this->id;
    }

    public function setId(?Uuid $id): self
    {
        $this->id = $id;
        return $this;
    }


    public function getOrganization(): string|OrganizationOutputDto    {
        return $this->organization;
    }

    public function setOrganization(string|OrganizationOutputDto $organization): self
    {
        $this->organization = $organization;
        return $this;
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getDescription(): ?string    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    public function getIcon(): string    {
        return $this->icon;
    }

    public function setIcon(string $icon): self
    {
        $this->icon = $icon;
        return $this;
    }

    public function getNotifications(): array    {
        return $this->notifications;
    }

    public function setNotifications(array $notifications): self
    {
        $this->notifications = $notifications;
        return $this;
    }

    public function getActive(): bool    {
        return $this->active;
    }

    public function setActive(bool $active): self
    {
        $this->active = $active;
        return $this;
    }

    public function getDefault(): bool    {
        return $this->default;
    }

    public function setDefault(bool $default): self
    {
        $this->default = $default;
        return $this;
    }

    public function getChannels(): array    {
        return $this->channels;
    }

    public function setChannels(array $channels): self
    {
        $this->channels = $channels;
        return $this;
    }

    public function getPriority(): string    {
        return $this->priority;
    }

    public function setPriority(string $priority): self
    {
        $this->priority = $priority;
        return $this;
    }

    public function getColor(): string    {
        return $this->color;
    }

    public function setColor(string $color): self
    {
        $this->color = $color;
        return $this;
    }

    public function getEmailSubject(): ?string    {
        return $this->emailSubject;
    }

    public function setEmailSubject(?string $emailSubject): self
    {
        $this->emailSubject = $emailSubject;
        return $this;
    }

    public function getEmailTemplate(): ?string    {
        return $this->emailTemplate;
    }

    public function setEmailTemplate(?string $emailTemplate): self
    {
        $this->emailTemplate = $emailTemplate;
        return $this;
    }

    public function getSmsTemplate(): ?string    {
        return $this->smsTemplate;
    }

    public function setSmsTemplate(?string $smsTemplate): self
    {
        $this->smsTemplate = $smsTemplate;
        return $this;
    }

    public function getPushTitle(): ?string    {
        return $this->pushTitle;
    }

    public function setPushTitle(?string $pushTitle): self
    {
        $this->pushTitle = $pushTitle;
        return $this;
    }

    public function getPushBody(): ?string    {
        return $this->pushBody;
    }

    public function setPushBody(?string $pushBody): self
    {
        $this->pushBody = $pushBody;
        return $this;
    }

    public function getFrequency(): string    {
        return $this->frequency;
    }

    public function setFrequency(string $frequency): self
    {
        $this->frequency = $frequency;
        return $this;
    }

    public function getRetryEnabled(): bool    {
        return $this->retryEnabled;
    }

    public function setRetryEnabled(bool $retryEnabled): self
    {
        $this->retryEnabled = $retryEnabled;
        return $this;
    }

    public function getMaxRetries(): ?int    {
        return $this->maxRetries;
    }

    public function setMaxRetries(?int $maxRetries): self
    {
        $this->maxRetries = $maxRetries;
        return $this;
    }

    public function getThrottleEnabled(): bool    {
        return $this->throttleEnabled;
    }

    public function setThrottleEnabled(bool $throttleEnabled): self
    {
        $this->throttleEnabled = $throttleEnabled;
        return $this;
    }

    public function getThrottleLimit(): ?int    {
        return $this->throttleLimit;
    }

    public function setThrottleLimit(?int $throttleLimit): self
    {
        $this->throttleLimit = $throttleLimit;
        return $this;
    }

    public function getTags(): ?array    {
        return $this->tags;
    }

    public function setTags(?array $tags): self
    {
        $this->tags = $tags;
        return $this;
    }

    public function getMetadata(): ?array    {
        return $this->metadata;
    }

    public function setMetadata(?array $metadata): self
    {
        $this->metadata = $metadata;
        return $this;
    }

    public function getUserPreferenceAllowed(): bool    {
        return $this->userPreferenceAllowed;
    }

    public function setUserPreferenceAllowed(bool $userPreferenceAllowed): self
    {
        $this->userPreferenceAllowed = $userPreferenceAllowed;
        return $this;
    }

    public function getRequiresAction(): bool    {
        return $this->requiresAction;
    }

    public function setRequiresAction(bool $requiresAction): self
    {
        $this->requiresAction = $requiresAction;
        return $this;
    }

    public function getExpiresAfterHours(): ?int    {
        return $this->expiresAfterHours;
    }

    public function setExpiresAfterHours(?int $expiresAfterHours): self
    {
        $this->expiresAfterHours = $expiresAfterHours;
        return $this;
    }

    public function getCreatedAt(): ?\DateTimeImmutable
    {
        return $this->createdAt;
    }

    public function setCreatedAt(?\DateTimeImmutable $createdAt): self
    {
        $this->createdAt = $createdAt;
        return $this;
    }

    public function getUpdatedAt(): ?\DateTimeImmutable
    {
        return $this->updatedAt;
    }

    public function setUpdatedAt(?\DateTimeImmutable $updatedAt): self
    {
        $this->updatedAt = $updatedAt;
        return $this;
    }
}
