<?php

declare(strict_types=1);

namespace App\Dto\Generated;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Context\ExecutionContextInterface;
use App\Dto\OrganizationInputDto;
use App\Dto\ProductInputDto;

/**
 * ProductBatch Input DTO (Generated Base Class)
 *
 * Tracks product batches with manufacturing dates, expiry dates, lot numbers, and inventory quantities for complete supply chain traceability *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom validation logic to ProductBatchInputDto.php instead.
 *
 * @generated by Genmax Code Generator
 */
abstract class ProductBatchInputDtoGenerated
{
    /**
     * organization reference
     * Can be: IRI string (e.g., "/api/organizations/uuid") or nested OrganizationInput object
     */
    #[Assert\NotNull]
    public string|OrganizationInputDto $organization;

    public string $batchNumber;

    public string $name;

    public ?\DateTimeImmutable $manufacturingDate = null;

    public ?string $lotNumber = null;

    public ?string $serialNumber = null;

    public bool $expired = false;

    public ?string $supplier = null;

    public ?string $qualityStatus = null;

    public ?string $notes = null;

    public ?int $availableQuantity = null;

    public bool $active = true;

    public ?string $commissionAmount = null;

    #[Assert\Range(max: 100, min: 0)]
    public ?string $commissionRate = null;

    public ?string $costPrice = null;

    public ?string $currency = null;

    public ?string $discountAmount = null;

    #[Assert\Range(max: 100, min: 0)]
    public ?string $discountPercentage = null;

    public ?float $exchangeRate = null;

    public ?\DateTimeImmutable $expirationDate = null;

    public ?string $listPrice = null;

    #[Assert\Range(max: 100, min: 0)]
    public ?string $marginPercentage = null;

    public ?string $maximumDiscount = null;

    public ?string $minimumPrice = null;

    /**
     * product reference
     * Can be: IRI string (e.g., "/api/products/uuid") or nested ProductInput object
     */
    public string|ProductInputDto|null $product = null;

    public ?int $reservedQuantity = null;

    public ?int $stockQuantity = null;


    // Getters and Setters

    public function getOrganization(): string|OrganizationInputDto    {
        return $this->organization;
    }

    public function setOrganization(string|OrganizationInputDto $organization): self
    {
        $this->organization = $organization;
        return $this;
    }

    public function getBatchnumber(): string    {
        return $this->batchNumber;
    }

    public function setBatchnumber(string $batchNumber): self
    {
        $this->batchNumber = $batchNumber;
        return $this;
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getManufacturingdate(): ?\DateTimeImmutable    {
        return $this->manufacturingDate;
    }

    public function setManufacturingdate(?\DateTimeImmutable $manufacturingDate): self
    {
        $this->manufacturingDate = $manufacturingDate;
        return $this;
    }

    public function getLotnumber(): ?string    {
        return $this->lotNumber;
    }

    public function setLotnumber(?string $lotNumber): self
    {
        $this->lotNumber = $lotNumber;
        return $this;
    }

    public function getSerialnumber(): ?string    {
        return $this->serialNumber;
    }

    public function setSerialnumber(?string $serialNumber): self
    {
        $this->serialNumber = $serialNumber;
        return $this;
    }

    public function getExpired(): bool    {
        return $this->expired;
    }

    public function setExpired(bool $expired): self
    {
        $this->expired = $expired;
        return $this;
    }

    public function getSupplier(): ?string    {
        return $this->supplier;
    }

    public function setSupplier(?string $supplier): self
    {
        $this->supplier = $supplier;
        return $this;
    }

    public function getQualitystatus(): ?string    {
        return $this->qualityStatus;
    }

    public function setQualitystatus(?string $qualityStatus): self
    {
        $this->qualityStatus = $qualityStatus;
        return $this;
    }

    public function getNotes(): ?string    {
        return $this->notes;
    }

    public function setNotes(?string $notes): self
    {
        $this->notes = $notes;
        return $this;
    }

    public function getAvailablequantity(): ?int    {
        return $this->availableQuantity;
    }

    public function setAvailablequantity(?int $availableQuantity): self
    {
        $this->availableQuantity = $availableQuantity;
        return $this;
    }

    public function getActive(): bool    {
        return $this->active;
    }

    public function setActive(bool $active): self
    {
        $this->active = $active;
        return $this;
    }

    public function getCommissionamount(): ?string    {
        return $this->commissionAmount;
    }

    public function setCommissionamount(?string $commissionAmount): self
    {
        $this->commissionAmount = $commissionAmount;
        return $this;
    }

    public function getCommissionrate(): ?string    {
        return $this->commissionRate;
    }

    public function setCommissionrate(?string $commissionRate): self
    {
        $this->commissionRate = $commissionRate;
        return $this;
    }

    public function getCostprice(): ?string    {
        return $this->costPrice;
    }

    public function setCostprice(?string $costPrice): self
    {
        $this->costPrice = $costPrice;
        return $this;
    }

    public function getCurrency(): ?string    {
        return $this->currency;
    }

    public function setCurrency(?string $currency): self
    {
        $this->currency = $currency;
        return $this;
    }

    public function getDiscountamount(): ?string    {
        return $this->discountAmount;
    }

    public function setDiscountamount(?string $discountAmount): self
    {
        $this->discountAmount = $discountAmount;
        return $this;
    }

    public function getDiscountpercentage(): ?string    {
        return $this->discountPercentage;
    }

    public function setDiscountpercentage(?string $discountPercentage): self
    {
        $this->discountPercentage = $discountPercentage;
        return $this;
    }

    public function getExchangerate(): ?float    {
        return $this->exchangeRate;
    }

    public function setExchangerate(?float $exchangeRate): self
    {
        $this->exchangeRate = $exchangeRate;
        return $this;
    }

    public function getExpirationdate(): ?\DateTimeImmutable    {
        return $this->expirationDate;
    }

    public function setExpirationdate(?\DateTimeImmutable $expirationDate): self
    {
        $this->expirationDate = $expirationDate;
        return $this;
    }

    public function getListprice(): ?string    {
        return $this->listPrice;
    }

    public function setListprice(?string $listPrice): self
    {
        $this->listPrice = $listPrice;
        return $this;
    }

    public function getMarginpercentage(): ?string    {
        return $this->marginPercentage;
    }

    public function setMarginpercentage(?string $marginPercentage): self
    {
        $this->marginPercentage = $marginPercentage;
        return $this;
    }

    public function getMaximumdiscount(): ?string    {
        return $this->maximumDiscount;
    }

    public function setMaximumdiscount(?string $maximumDiscount): self
    {
        $this->maximumDiscount = $maximumDiscount;
        return $this;
    }

    public function getMinimumprice(): ?string    {
        return $this->minimumPrice;
    }

    public function setMinimumprice(?string $minimumPrice): self
    {
        $this->minimumPrice = $minimumPrice;
        return $this;
    }

    public function getProduct(): string|ProductInputDto|null    {
        return $this->product;
    }

    public function setProduct(string|ProductInputDto|null $product): self
    {
        $this->product = $product;
        return $this;
    }

    public function getReservedquantity(): ?int    {
        return $this->reservedQuantity;
    }

    public function setReservedquantity(?int $reservedQuantity): self
    {
        $this->reservedQuantity = $reservedQuantity;
        return $this;
    }

    public function getStockquantity(): ?int    {
        return $this->stockQuantity;
    }

    public function setStockquantity(?int $stockQuantity): self
    {
        $this->stockQuantity = $stockQuantity;
        return $this;
    }
}
