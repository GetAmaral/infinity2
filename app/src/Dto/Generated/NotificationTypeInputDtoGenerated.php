<?php

declare(strict_types=1);

namespace App\Dto\Generated;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Context\ExecutionContextInterface;
use Symfony\Component\Serializer\Annotation\Groups;
use App\Dto\OrganizationInputDto;

/**
 * NotificationType Input DTO (Generated Base Class)
 *
 * Notification types for the organization *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom validation logic to NotificationTypeInputDto.php instead.
 *
 * @generated by Genmax Code Generator
 */
abstract class NotificationTypeInputDtoGenerated
{
    /**
     * organization reference
     * Must be: IRI string (e.g., "/api/organizations/uuid")
     * Auto-assigned by system if not provided
     */
    #[Groups(['notificationtype:write'])]
    public ?string $organization = null;

    #[Groups(['notificationtype:write'])]
    public string $name;

    #[Groups(['notificationtype:write'])]
    public ?string $description = null;

    #[Groups(['notificationtype:write'])]
    public string $icon = 'bi-bell-fill';

    #[Groups(['notificationtype:write'])]
    public bool $active = true;

    #[Groups(['notificationtype:write'])]
    public bool $default = false;

    #[Groups(['notificationtype:write'])]
    public array $channels;

    #[Groups(['notificationtype:write'])]
    public string $priority = 'normal';

    #[Groups(['notificationtype:write'])]
    public string $color = '#0dcaf0';

    #[Groups(['notificationtype:write'])]
    public ?string $emailSubject = null;

    #[Groups(['notificationtype:write'])]
    public ?string $emailTemplate = null;

    #[Groups(['notificationtype:write'])]
    public ?string $smsTemplate = null;

    #[Groups(['notificationtype:write'])]
    public ?string $pushTitle = null;

    #[Groups(['notificationtype:write'])]
    public ?string $pushBody = null;

    #[Groups(['notificationtype:write'])]
    public string $frequency = 'immediate';

    #[Groups(['notificationtype:write'])]
    public bool $retryEnabled = true;

    #[Groups(['notificationtype:write'])]
    public ?int $maxRetries = 3;

    #[Groups(['notificationtype:write'])]
    public bool $throttleEnabled = false;

    #[Groups(['notificationtype:write'])]
    public ?int $throttleLimit = 10;

    #[Groups(['notificationtype:write'])]
    public ?array $tags = null;

    #[Groups(['notificationtype:write'])]
    public ?array $metadata = null;

    #[Groups(['notificationtype:write'])]
    public bool $userPreferenceAllowed = true;

    #[Groups(['notificationtype:write'])]
    public bool $requiresAction = false;

    #[Groups(['notificationtype:write'])]
    public ?int $expiresAfterHours = null;


    // Getters and Setters

    public function getOrganization(): ?string    {
        return $this->organization;
    }

    public function setOrganization(?string $organization): self
    {
        $this->organization = $organization;
        return $this;
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getDescription(): ?string    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    public function getIcon(): string    {
        return $this->icon;
    }

    public function setIcon(string $icon): self
    {
        $this->icon = $icon;
        return $this;
    }

    public function getNotifications(): ?string    {
        return $this->notifications;
    }

    public function setNotifications(?string $notifications): self
    {
        $this->notifications = $notifications;
        return $this;
    }

    public function getActive(): bool    {
        return $this->active;
    }

    public function setActive(bool $active): self
    {
        $this->active = $active;
        return $this;
    }

    public function getDefault(): bool    {
        return $this->default;
    }

    public function setDefault(bool $default): self
    {
        $this->default = $default;
        return $this;
    }

    public function getChannels(): array    {
        return $this->channels;
    }

    public function setChannels(array $channels): self
    {
        $this->channels = $channels;
        return $this;
    }

    public function getPriority(): string    {
        return $this->priority;
    }

    public function setPriority(string $priority): self
    {
        $this->priority = $priority;
        return $this;
    }

    public function getColor(): string    {
        return $this->color;
    }

    public function setColor(string $color): self
    {
        $this->color = $color;
        return $this;
    }

    public function getEmailsubject(): ?string    {
        return $this->emailSubject;
    }

    public function setEmailsubject(?string $emailSubject): self
    {
        $this->emailSubject = $emailSubject;
        return $this;
    }

    public function getEmailtemplate(): ?string    {
        return $this->emailTemplate;
    }

    public function setEmailtemplate(?string $emailTemplate): self
    {
        $this->emailTemplate = $emailTemplate;
        return $this;
    }

    public function getSmstemplate(): ?string    {
        return $this->smsTemplate;
    }

    public function setSmstemplate(?string $smsTemplate): self
    {
        $this->smsTemplate = $smsTemplate;
        return $this;
    }

    public function getPushtitle(): ?string    {
        return $this->pushTitle;
    }

    public function setPushtitle(?string $pushTitle): self
    {
        $this->pushTitle = $pushTitle;
        return $this;
    }

    public function getPushbody(): ?string    {
        return $this->pushBody;
    }

    public function setPushbody(?string $pushBody): self
    {
        $this->pushBody = $pushBody;
        return $this;
    }

    public function getFrequency(): string    {
        return $this->frequency;
    }

    public function setFrequency(string $frequency): self
    {
        $this->frequency = $frequency;
        return $this;
    }

    public function getRetryenabled(): bool    {
        return $this->retryEnabled;
    }

    public function setRetryenabled(bool $retryEnabled): self
    {
        $this->retryEnabled = $retryEnabled;
        return $this;
    }

    public function getMaxretries(): ?int    {
        return $this->maxRetries;
    }

    public function setMaxretries(?int $maxRetries): self
    {
        $this->maxRetries = $maxRetries;
        return $this;
    }

    public function getThrottleenabled(): bool    {
        return $this->throttleEnabled;
    }

    public function setThrottleenabled(bool $throttleEnabled): self
    {
        $this->throttleEnabled = $throttleEnabled;
        return $this;
    }

    public function getThrottlelimit(): ?int    {
        return $this->throttleLimit;
    }

    public function setThrottlelimit(?int $throttleLimit): self
    {
        $this->throttleLimit = $throttleLimit;
        return $this;
    }

    public function getTags(): ?array    {
        return $this->tags;
    }

    public function setTags(?array $tags): self
    {
        $this->tags = $tags;
        return $this;
    }

    public function getMetadata(): ?array    {
        return $this->metadata;
    }

    public function setMetadata(?array $metadata): self
    {
        $this->metadata = $metadata;
        return $this;
    }

    public function getUserpreferenceallowed(): bool    {
        return $this->userPreferenceAllowed;
    }

    public function setUserpreferenceallowed(bool $userPreferenceAllowed): self
    {
        $this->userPreferenceAllowed = $userPreferenceAllowed;
        return $this;
    }

    public function getRequiresaction(): bool    {
        return $this->requiresAction;
    }

    public function setRequiresaction(bool $requiresAction): self
    {
        $this->requiresAction = $requiresAction;
        return $this;
    }

    public function getExpiresafterhours(): ?int    {
        return $this->expiresAfterHours;
    }

    public function setExpiresafterhours(?int $expiresAfterHours): self
    {
        $this->expiresAfterHours = $expiresAfterHours;
        return $this;
    }
}
