<?php

declare(strict_types=1);

namespace App\Dto\Generated;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Context\ExecutionContextInterface;
use App\Dto\OrganizationInputDto;
use App\Dto\CommunicationMethodInputDto;
use App\Dto\EventInputDto;

/**
 * Reminder Input DTO (Generated Base Class)
 *
 * Automated reminders and notifications for events, tasks, meetings, and follow-ups with multi-channel delivery support *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom validation logic to ReminderInputDto.php instead.
 *
 * @generated by Genmax Code Generator
 */
abstract class ReminderInputDtoGenerated
{
    /**
     * organization reference
     * Can be: IRI string (e.g., "/api/organizations/uuid") or nested OrganizationInput object
     */
    #[Assert\NotNull]
    public string|OrganizationInputDto $organization;

    public string $name;

    public ?bool $active = true;

    /**
     * communicationMethod reference
     * Can be: IRI string (e.g., "/api/communicationmethods/uuid") or nested CommunicationMethodInput object
     */
    public string|CommunicationMethodInputDto|null $communicationMethod = null;

    /**
     * event reference
     * Can be: IRI string (e.g., "/api/events/uuid") or nested EventInput object
     */
    public string|EventInputDto|null $event = null;

    public int $minutesBeforeStart = 15;


    // Getters and Setters

    public function getOrganization(): string|OrganizationInputDto    {
        return $this->organization;
    }

    public function setOrganization(string|OrganizationInputDto $organization): self
    {
        $this->organization = $organization;
        return $this;
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getActive(): ?bool    {
        return $this->active;
    }

    public function setActive(?bool $active): self
    {
        $this->active = $active;
        return $this;
    }

    public function getCommunicationmethod(): string|CommunicationMethodInputDto|null    {
        return $this->communicationMethod;
    }

    public function setCommunicationmethod(string|CommunicationMethodInputDto|null $communicationMethod): self
    {
        $this->communicationMethod = $communicationMethod;
        return $this;
    }

    public function getEvent(): string|EventInputDto|null    {
        return $this->event;
    }

    public function setEvent(string|EventInputDto|null $event): self
    {
        $this->event = $event;
        return $this;
    }

    public function getMinutesbeforestart(): int    {
        return $this->minutesBeforeStart;
    }

    public function setMinutesbeforestart(int $minutesBeforeStart): self
    {
        $this->minutesBeforeStart = $minutesBeforeStart;
        return $this;
    }

    public function getNotifications(): ?string    {
        return $this->notifications;
    }

    public function setNotifications(?string $notifications): self
    {
        $this->notifications = $notifications;
        return $this;
    }
}
