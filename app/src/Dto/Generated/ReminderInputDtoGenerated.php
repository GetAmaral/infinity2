<?php

declare(strict_types=1);

namespace App\Dto\Generated;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Context\ExecutionContextInterface;
use Symfony\Component\Serializer\Annotation\Groups;
use App\Dto\OrganizationInputDto;
use App\Dto\CommunicationMethodInputDto;
use App\Dto\EventInputDto;

/**
 * Reminder Input DTO (Generated Base Class)
 *
 * Automated reminders and notifications for events, tasks, meetings, and follow-ups with multi-channel delivery support *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom validation logic to ReminderInputDto.php instead.
 *
 * @generated by Genmax Code Generator
 */
abstract class ReminderInputDtoGenerated
{
    /**
     * organization reference
     * Must be: IRI string (e.g., "/api/organizatia/uuid")
     * Auto-assigned by system if not provided
     */
    #[Groups(['reminder:write'])]
    public ?string $organization = null;

    #[Groups(['reminder:write'])]
    public string $name;

    #[Groups(['reminder:write'])]
    public ?bool $active = true;

    /**
     * communicationMethod reference
     * Must be: IRI string (e.g., "/api/communication_methods/uuid")
     */
    #[Groups(['reminder:write'])]
    public ?string $communicationMethod = null;

    /**
     * event reference
     * Must be: IRI string (e.g., "/api/events/uuid")
     */
    #[Groups(['reminder:write'])]
    public ?string $event = null;

    #[Groups(['reminder:write'])]
    public int $minutesBeforeStart = 15;


    // Getters and Setters

    public function getOrganization(): ?string    {
        return $this->organization;
    }

    public function setOrganization(?string $organization): self
    {
        $this->organization = $organization;
        return $this;
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getActive(): ?bool    {
        return $this->active;
    }

    public function setActive(?bool $active): self
    {
        $this->active = $active;
        return $this;
    }

    public function getCommunicationMethod(): ?string    {
        return $this->communicationMethod;
    }

    public function setCommunicationMethod(?string $communicationMethod): self
    {
        $this->communicationMethod = $communicationMethod;
        return $this;
    }

    public function getEvent(): ?string    {
        return $this->event;
    }

    public function setEvent(?string $event): self
    {
        $this->event = $event;
        return $this;
    }

    public function getMinutesBeforeStart(): int    {
        return $this->minutesBeforeStart;
    }

    public function setMinutesBeforeStart(int $minutesBeforeStart): self
    {
        $this->minutesBeforeStart = $minutesBeforeStart;
        return $this;
    }

    public function getNotifications(): ?string    {
        return $this->notifications;
    }

    public function setNotifications(?string $notifications): self
    {
        $this->notifications = $notifications;
        return $this;
    }
}
