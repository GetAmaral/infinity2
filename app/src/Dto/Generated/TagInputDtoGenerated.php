<?php

declare(strict_types=1);

namespace App\Dto\Generated;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Context\ExecutionContextInterface;
use Symfony\Component\Serializer\Annotation\Groups;
use App\Dto\OrganizationInputDto;

/**
 * Tag Input DTO (Generated Base Class)
 *
 * Tags for flexible categorization across all entities *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom validation logic to TagInputDto.php instead.
 *
 * @generated by Genmax Code Generator
 */
abstract class TagInputDtoGenerated
{
    /**
     * organization reference
     * Must be: IRI string (e.g., "/api/organizatia/uuid")
     * Auto-assigned by system if not provided
     */
    #[Groups(['tag:write'])]
    public ?string $organization = null;

    #[Groups(['tag:write'])]
    public string $name;

    #[Groups(['tag:write'])]
    public ?string $description = null;

    #[Groups(['tag:write'])]
    public ?string $color = '#0dcaf0';

    #[Groups(['tag:write'])]
    public ?int $sentiment = null;


    // Getters and Setters

    public function getOrganization(): ?string    {
        return $this->organization;
    }

    public function setOrganization(?string $organization): self
    {
        $this->organization = $organization;
        return $this;
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getDescription(): ?string    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    public function getColor(): ?string    {
        return $this->color;
    }

    public function setColor(?string $color): self
    {
        $this->color = $color;
        return $this;
    }

    public function getDeals(): ?string    {
        return $this->deals;
    }

    public function setDeals(?string $deals): self
    {
        $this->deals = $deals;
        return $this;
    }

    public function getProducts(): ?string    {
        return $this->products;
    }

    public function setProducts(?string $products): self
    {
        $this->products = $products;
        return $this;
    }

    public function getSentiment(): ?int    {
        return $this->sentiment;
    }

    public function setSentiment(?int $sentiment): self
    {
        $this->sentiment = $sentiment;
        return $this;
    }
}
