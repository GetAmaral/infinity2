<?php

declare(strict_types=1);

namespace App\Dto\Generated;

use Symfony\Component\Uid\Uuid;
use App\Dto\OrganizationOutputDto;
use App\Dto\ProductOutputDto;
use App\Dto\CompanyOutputDto;

/**
 * Brand Output DTO (Generated Base Class)
 *
 * Product brands for catalog organization *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom computed properties to BrandOutputDto.php instead.
 *
 * @generated by Genmax Code Generator
 */
abstract class BrandOutputDtoGenerated
{
    public ?Uuid $id = null;

    /**
     * organization reference
     * Can be: IRI string or nested OrganizationOutput object
     */
    public string|OrganizationOutputDto $organization;

    public string $name;

    public ?string $description = null;

    public ?string $tagline = null;

    public ?string $logoUrl = null;

    public ?string $primaryColor = null;

    public ?string $industry = null;

    public ?string $positioning = null;

    public ?string $targetMarket = null;

    public ?string $marketShare = null;

    public ?string $brandValue = null;

    public ?string $countryOfOrigin = null;

    public ?int $foundedYear = null;

    public ?string $website = null;

    public bool $active;

    /**
     * products collection
     * @var ProductOutputDto[]
     */
    public array $products = [];

    /**
     * manufacturers collection
     * @var CompanyOutputDto[]
     */
    public array $manufacturers = [];

    /**
     * suppliers collection
     * @var CompanyOutputDto[]
     */
    public array $suppliers = [];

    public ?\DateTimeImmutable $createdAt = null;

    public ?\DateTimeImmutable $updatedAt = null;

    // Getters and Setters
    public function getId(): ?Uuid
    {
        return $this->id;
    }

    public function setId(?Uuid $id): self
    {
        $this->id = $id;
        return $this;
    }


    public function getOrganization(): string|OrganizationOutputDto    {
        return $this->organization;
    }

    public function setOrganization(string|OrganizationOutputDto $organization): self
    {
        $this->organization = $organization;
        return $this;
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getDescription(): ?string    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    public function getTagline(): ?string    {
        return $this->tagline;
    }

    public function setTagline(?string $tagline): self
    {
        $this->tagline = $tagline;
        return $this;
    }

    public function getLogoUrl(): ?string    {
        return $this->logoUrl;
    }

    public function setLogoUrl(?string $logoUrl): self
    {
        $this->logoUrl = $logoUrl;
        return $this;
    }

    public function getPrimaryColor(): ?string    {
        return $this->primaryColor;
    }

    public function setPrimaryColor(?string $primaryColor): self
    {
        $this->primaryColor = $primaryColor;
        return $this;
    }

    public function getIndustry(): ?string    {
        return $this->industry;
    }

    public function setIndustry(?string $industry): self
    {
        $this->industry = $industry;
        return $this;
    }

    public function getPositioning(): ?string    {
        return $this->positioning;
    }

    public function setPositioning(?string $positioning): self
    {
        $this->positioning = $positioning;
        return $this;
    }

    public function getTargetMarket(): ?string    {
        return $this->targetMarket;
    }

    public function setTargetMarket(?string $targetMarket): self
    {
        $this->targetMarket = $targetMarket;
        return $this;
    }

    public function getMarketShare(): ?string    {
        return $this->marketShare;
    }

    public function setMarketShare(?string $marketShare): self
    {
        $this->marketShare = $marketShare;
        return $this;
    }

    public function getBrandValue(): ?string    {
        return $this->brandValue;
    }

    public function setBrandValue(?string $brandValue): self
    {
        $this->brandValue = $brandValue;
        return $this;
    }

    public function getCountryOfOrigin(): ?string    {
        return $this->countryOfOrigin;
    }

    public function setCountryOfOrigin(?string $countryOfOrigin): self
    {
        $this->countryOfOrigin = $countryOfOrigin;
        return $this;
    }

    public function getFoundedYear(): ?int    {
        return $this->foundedYear;
    }

    public function setFoundedYear(?int $foundedYear): self
    {
        $this->foundedYear = $foundedYear;
        return $this;
    }

    public function getWebsite(): ?string    {
        return $this->website;
    }

    public function setWebsite(?string $website): self
    {
        $this->website = $website;
        return $this;
    }

    public function getActive(): bool    {
        return $this->active;
    }

    public function setActive(bool $active): self
    {
        $this->active = $active;
        return $this;
    }

    public function getProducts(): array    {
        return $this->products;
    }

    public function setProducts(array $products): self
    {
        $this->products = $products;
        return $this;
    }

    public function getManufacturers(): array    {
        return $this->manufacturers;
    }

    public function setManufacturers(array $manufacturers): self
    {
        $this->manufacturers = $manufacturers;
        return $this;
    }

    public function getSuppliers(): array    {
        return $this->suppliers;
    }

    public function setSuppliers(array $suppliers): self
    {
        $this->suppliers = $suppliers;
        return $this;
    }

    public function getCreatedAt(): ?\DateTimeImmutable
    {
        return $this->createdAt;
    }

    public function setCreatedAt(?\DateTimeImmutable $createdAt): self
    {
        $this->createdAt = $createdAt;
        return $this;
    }

    public function getUpdatedAt(): ?\DateTimeImmutable
    {
        return $this->updatedAt;
    }

    public function setUpdatedAt(?\DateTimeImmutable $updatedAt): self
    {
        $this->updatedAt = $updatedAt;
        return $this;
    }
}
