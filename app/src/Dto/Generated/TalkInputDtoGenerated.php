<?php

declare(strict_types=1);

namespace App\Dto\Generated;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Context\ExecutionContextInterface;
use Symfony\Component\Serializer\Annotation\Groups;
use App\Dto\OrganizationInputDto;
use App\Dto\CompanyInputDto;
use App\Dto\ContactInputDto;
use App\Dto\DealInputDto;
use App\Dto\TalkTypeInputDto;
use App\Dto\UserInputDto;

/**
 * Talk Input DTO (Generated Base Class)
 *
 * Communication threads with customers and prospects *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom validation logic to TalkInputDto.php instead.
 *
 * @generated by Genmax Code Generator
 */
abstract class TalkInputDtoGenerated
{
    /**
     * organization reference
     * Must be: IRI string (e.g., "/api/organizatia/uuid")
     * Auto-assigned by system if not provided
     */
    #[Groups(['talk:write'])]
    public ?string $organization = null;

    #[Groups(['talk:write'])]
    public string $subject;

    #[Groups(['talk:write'])]
    public ?string $summary = null;

    /**
     * company reference
     * Must be: IRI string (e.g., "/api/nies/uuid")
     */
    #[Groups(['talk:write'])]
    public ?string $company = null;

    /**
     * contact reference
     * Must be: IRI string (e.g., "/api/contacts/uuid")
     */
    #[Groups(['talk:write'])]
    public ?string $contact = null;

    /**
     * deal reference
     * Must be: IRI string (e.g., "/api/deals/uuid")
     */
    #[Groups(['talk:write'])]
    public ?string $deal = null;

    /**
     * talkType reference
     * Must be: IRI string (e.g., "/api/talk_types/uuid")
     */
    #[Assert\NotNull]
    #[Groups(['talk:write'])]
    public ?string $talkType = null;

    #[Groups(['talk:write'])]
    public int $channel = 0;

    #[Groups(['talk:write'])]
    public int $status = 0;

    #[Assert\Range(max: 5, min: 1)]
    #[Groups(['talk:write'])]
    public ?int $priority = null;

    #[Groups(['talk:write'])]
    public ?int $outcome = null;

    #[Assert\Length(max: 50)]
    #[Groups(['talk:write'])]
    public ?string $sentiment = null;

    #[Groups(['talk:write'])]
    public ?\DateTimeImmutable $dateStart = null;

    #[Groups(['talk:write'])]
    public ?\DateTimeImmutable $dateLastMessage = null;

    #[Groups(['talk:write'])]
    public ?\DateTimeImmutable $closedAt = null;

    #[Groups(['talk:write'])]
    public ?int $durationSeconds = null;

    #[Groups(['talk:write'])]
    public ?string $recordingUrl = null;

    /**
     * owner reference
     * Must be: IRI string (e.g., "/api/users/uuid")
     * Auto-assigned by system if not provided
     */
    #[Groups(['talk:write'])]
    public ?string $owner = null;

    /**
     * assignedTo reference
     * Must be: IRI string (e.g., "/api/users/uuid")
     */
    #[Groups(['talk:write'])]
    public ?string $assignedTo = null;

    #[Assert\Range(max: 150, min: 0)]
    #[Groups(['talk:write'])]
    public int $messageCount = 0;

    #[Groups(['talk:write'])]
    public bool $archived = false;

    #[Groups(['talk:write'])]
    public bool $internal = false;

    #[Groups(['talk:write'])]
    public ?array $tags = null;


    // Getters and Setters

    public function getOrganization(): ?string    {
        return $this->organization;
    }

    public function setOrganization(?string $organization): self
    {
        $this->organization = $organization;
        return $this;
    }

    public function getSubject(): string    {
        return $this->subject;
    }

    public function setSubject(string $subject): self
    {
        $this->subject = $subject;
        return $this;
    }

    public function getSummary(): ?string    {
        return $this->summary;
    }

    public function setSummary(?string $summary): self
    {
        $this->summary = $summary;
        return $this;
    }

    public function getCompany(): ?string    {
        return $this->company;
    }

    public function setCompany(?string $company): self
    {
        $this->company = $company;
        return $this;
    }

    public function getContact(): ?string    {
        return $this->contact;
    }

    public function setContact(?string $contact): self
    {
        $this->contact = $contact;
        return $this;
    }

    public function getDeal(): ?string    {
        return $this->deal;
    }

    public function setDeal(?string $deal): self
    {
        $this->deal = $deal;
        return $this;
    }

    public function getTalkType(): ?string    {
        return $this->talkType;
    }

    public function setTalkType(?string $talkType): self
    {
        $this->talkType = $talkType;
        return $this;
    }

    public function getChannel(): int    {
        return $this->channel;
    }

    public function setChannel(int $channel): self
    {
        $this->channel = $channel;
        return $this;
    }

    public function getStatus(): int    {
        return $this->status;
    }

    public function setStatus(int $status): self
    {
        $this->status = $status;
        return $this;
    }

    public function getPriority(): ?int    {
        return $this->priority;
    }

    public function setPriority(?int $priority): self
    {
        $this->priority = $priority;
        return $this;
    }

    public function getOutcome(): ?int    {
        return $this->outcome;
    }

    public function setOutcome(?int $outcome): self
    {
        $this->outcome = $outcome;
        return $this;
    }

    public function getSentiment(): ?string    {
        return $this->sentiment;
    }

    public function setSentiment(?string $sentiment): self
    {
        $this->sentiment = $sentiment;
        return $this;
    }

    public function getDateStart(): ?\DateTimeImmutable    {
        return $this->dateStart;
    }

    public function setDateStart(?\DateTimeImmutable $dateStart): self
    {
        $this->dateStart = $dateStart;
        return $this;
    }

    public function getDateLastMessage(): ?\DateTimeImmutable    {
        return $this->dateLastMessage;
    }

    public function setDateLastMessage(?\DateTimeImmutable $dateLastMessage): self
    {
        $this->dateLastMessage = $dateLastMessage;
        return $this;
    }

    public function getClosedAt(): ?\DateTimeImmutable    {
        return $this->closedAt;
    }

    public function setClosedAt(?\DateTimeImmutable $closedAt): self
    {
        $this->closedAt = $closedAt;
        return $this;
    }

    public function getDurationSeconds(): ?int    {
        return $this->durationSeconds;
    }

    public function setDurationSeconds(?int $durationSeconds): self
    {
        $this->durationSeconds = $durationSeconds;
        return $this;
    }

    public function getRecordingUrl(): ?string    {
        return $this->recordingUrl;
    }

    public function setRecordingUrl(?string $recordingUrl): self
    {
        $this->recordingUrl = $recordingUrl;
        return $this;
    }

    public function getUsers(): ?string    {
        return $this->users;
    }

    public function setUsers(?string $users): self
    {
        $this->users = $users;
        return $this;
    }

    public function getOwner(): ?string    {
        return $this->owner;
    }

    public function setOwner(?string $owner): self
    {
        $this->owner = $owner;
        return $this;
    }

    public function getAssignedTo(): ?string    {
        return $this->assignedTo;
    }

    public function setAssignedTo(?string $assignedTo): self
    {
        $this->assignedTo = $assignedTo;
        return $this;
    }

    public function getAgents(): ?string    {
        return $this->agents;
    }

    public function setAgents(?string $agents): self
    {
        $this->agents = $agents;
        return $this;
    }

    public function getCampaigns(): ?string    {
        return $this->campaigns;
    }

    public function setCampaigns(?string $campaigns): self
    {
        $this->campaigns = $campaigns;
        return $this;
    }

    public function getMessages(): ?string    {
        return $this->messages;
    }

    public function setMessages(?string $messages): self
    {
        $this->messages = $messages;
        return $this;
    }

    public function getMessageCount(): int    {
        return $this->messageCount;
    }

    public function setMessageCount(int $messageCount): self
    {
        $this->messageCount = $messageCount;
        return $this;
    }

    public function getArchived(): bool    {
        return $this->archived;
    }

    public function setArchived(bool $archived): self
    {
        $this->archived = $archived;
        return $this;
    }

    public function getInternal(): bool    {
        return $this->internal;
    }

    public function setInternal(bool $internal): self
    {
        $this->internal = $internal;
        return $this;
    }

    public function getTags(): ?array    {
        return $this->tags;
    }

    public function setTags(?array $tags): self
    {
        $this->tags = $tags;
        return $this;
    }
}
