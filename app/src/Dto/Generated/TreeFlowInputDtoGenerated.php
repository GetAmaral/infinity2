<?php

declare(strict_types=1);

namespace App\Dto\Generated;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Context\ExecutionContextInterface;
use Symfony\Component\Serializer\Annotation\Groups;
use App\Dto\OrganizationInputDto;
use App\Dto\StepInputDto;

/**
 * TreeFlow Input DTO (Generated Base Class)
 *
 * Workflow automation trees for business processes *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom validation logic to TreeFlowInputDto.php instead.
 *
 * @generated by Genmax Code Generator
 */
abstract class TreeFlowInputDtoGenerated
{
    /**
     * organization reference
     * Must be: IRI string (e.g., "/api/organizatia/uuid")
     * Auto-assigned by system if not provided
     */
    #[Groups(['treeflow:write'])]
    public ?string $organization = null;

    #[Assert\Length(max: 255)]
    #[Groups(['treeflow:write'])]
    public string $name;

    #[Assert\Length(max: 255)]
    #[Groups(['treeflow:write'])]
    public ?string $slug = null;

    #[Groups(['treeflow:write'])]
    public int $version = 1;

    #[Groups(['treeflow:write'])]
    public ?array $canvasViewState = null;

    #[Groups(['treeflow:write'])]
    public ?array $jsonStructure = null;

    #[Groups(['treeflow:write'])]
    public ?array $talkFlow = null;

    /**
     * Nested steps collection
     * Strategy: create_and_update
     * Max items: 100     */
    #[Assert\Valid]
    #[Assert\Count(max: 100, maxMessage: 'Cannot have more than 100 steps')]
    #[Groups(['treeflow:write'])]
    public array $steps = [];

    #[Groups(['treeflow:write'])]
    public bool $active = true;


    // Getters and Setters

    public function getOrganization(): ?string    {
        return $this->organization;
    }

    public function setOrganization(?string $organization): self
    {
        $this->organization = $organization;
        return $this;
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getSlug(): ?string    {
        return $this->slug;
    }

    public function setSlug(?string $slug): self
    {
        $this->slug = $slug;
        return $this;
    }

    public function getVersion(): int    {
        return $this->version;
    }

    public function setVersion(int $version): self
    {
        $this->version = $version;
        return $this;
    }

    public function getCanvasViewState(): ?array    {
        return $this->canvasViewState;
    }

    public function setCanvasViewState(?array $canvasViewState): self
    {
        $this->canvasViewState = $canvasViewState;
        return $this;
    }

    public function getJsonStructure(): ?array    {
        return $this->jsonStructure;
    }

    public function setJsonStructure(?array $jsonStructure): self
    {
        $this->jsonStructure = $jsonStructure;
        return $this;
    }

    public function getTalkFlow(): ?array    {
        return $this->talkFlow;
    }

    public function setTalkFlow(?array $talkFlow): self
    {
        $this->talkFlow = $talkFlow;
        return $this;
    }

    public function getSteps(): array    {
        return $this->steps;
    }

    public function setSteps(array $steps): self
    {
        $this->steps = $steps;
        return $this;
    }

    public function getActive(): bool    {
        return $this->active;
    }

    public function setActive(bool $active): self
    {
        $this->active = $active;
        return $this;
    }
}
