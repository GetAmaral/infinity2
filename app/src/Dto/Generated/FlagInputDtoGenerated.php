<?php

declare(strict_types=1);

namespace App\Dto\Generated;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Context\ExecutionContextInterface;
use App\Dto\OrganizationInputDto;

/**
 * Flag Input DTO (Generated Base Class)
 *
 * Categorizable flags and labels for follow-ups, reminders, and entity tagging with polymorphic relationships *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom validation logic to FlagInputDto.php instead.
 *
 * @generated by Genmax Code Generator
 */
abstract class FlagInputDtoGenerated
{
    /**
     * organization reference
     * Can be: IRI string (e.g., "/api/organizations/uuid") or nested OrganizationInput object
     */
    #[Assert\NotNull]
    public string|OrganizationInputDto $organization;

    public string $name;

    #[Assert\Length(max: 50)]
    public string $category = 'custom';

    public ?string $description = null;

    #[Assert\Length(max: 7)]
    public ?string $color = '#0dcaf0';

    #[Assert\Length(max: 50)]
    public ?string $icon = 'bi-flag';

    #[Assert\Length(max: 50)]
    public string $entityType;

    public string $entityId;

    #[Assert\Range(max: 5, min: 1)]
    public int $priority = 2;

    public int $displayOrder = 0;

    public bool $active = true;

    public bool $system = false;

    public ?\DateTimeImmutable $dueDate = null;


    // Getters and Setters

    public function getOrganization(): string|OrganizationInputDto    {
        return $this->organization;
    }

    public function setOrganization(string|OrganizationInputDto $organization): self
    {
        $this->organization = $organization;
        return $this;
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getCategory(): string    {
        return $this->category;
    }

    public function setCategory(string $category): self
    {
        $this->category = $category;
        return $this;
    }

    public function getDescription(): ?string    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    public function getColor(): ?string    {
        return $this->color;
    }

    public function setColor(?string $color): self
    {
        $this->color = $color;
        return $this;
    }

    public function getIcon(): ?string    {
        return $this->icon;
    }

    public function setIcon(?string $icon): self
    {
        $this->icon = $icon;
        return $this;
    }

    public function getEntitytype(): string    {
        return $this->entityType;
    }

    public function setEntitytype(string $entityType): self
    {
        $this->entityType = $entityType;
        return $this;
    }

    public function getEntityid(): string    {
        return $this->entityId;
    }

    public function setEntityid(string $entityId): self
    {
        $this->entityId = $entityId;
        return $this;
    }

    public function getPriority(): int    {
        return $this->priority;
    }

    public function setPriority(int $priority): self
    {
        $this->priority = $priority;
        return $this;
    }

    public function getDisplayorder(): int    {
        return $this->displayOrder;
    }

    public function setDisplayorder(int $displayOrder): self
    {
        $this->displayOrder = $displayOrder;
        return $this;
    }

    public function getActive(): bool    {
        return $this->active;
    }

    public function setActive(bool $active): self
    {
        $this->active = $active;
        return $this;
    }

    public function getSystem(): bool    {
        return $this->system;
    }

    public function setSystem(bool $system): self
    {
        $this->system = $system;
        return $this;
    }

    public function getDuedate(): ?\DateTimeImmutable    {
        return $this->dueDate;
    }

    public function setDuedate(?\DateTimeImmutable $dueDate): self
    {
        $this->dueDate = $dueDate;
        return $this;
    }
}
