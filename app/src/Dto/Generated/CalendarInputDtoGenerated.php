<?php

declare(strict_types=1);

namespace App\Dto\Generated;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Context\ExecutionContextInterface;
use Symfony\Component\Serializer\Annotation\Groups;
use App\Dto\OrganizationInputDto;
use App\Dto\UserInputDto;
use App\Dto\CalendarTypeInputDto;
use App\Dto\CalendarExternalLinkInputDto;

/**
 * Calendar Input DTO (Generated Base Class)
 *
 * Calendars for organizing events and meetings *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom validation logic to CalendarInputDto.php instead.
 *
 * @generated by Genmax Code Generator
 */
abstract class CalendarInputDtoGenerated
{
    /**
     * organization reference
     * Must be: IRI string (e.g., "/api/organizatia/uuid")
     * Auto-assigned by system if not provided
     */
    #[Groups(['calendar:write'])]
    public ?string $organization = null;

    #[Assert\Length(max: 255)]
    #[Groups(['calendar:write'])]
    public string $name;

    #[Groups(['calendar:write'])]
    public ?string $description = null;

    /**
     * user reference
     * Must be: IRI string (e.g., "/api/users/uuid")
     */
    #[Groups(['calendar:write'])]
    public ?string $user = null;

    #[Groups(['calendar:write'])]
    public string $timeZone = 'UTC';

    #[Assert\Length(max: 7)]
    #[Groups(['calendar:write'])]
    public ?string $color = '#0dcaf0';

    #[Groups(['calendar:write'])]
    public ?bool $primary = false;

    #[Groups(['calendar:write'])]
    public ?bool $visible = true;

    #[Groups(['calendar:write'])]
    public ?string $accessRole = null;

    /**
     * calendarType reference
     * Must be: IRI string (e.g., "/api/calendar_types/uuid")
     */
    #[Groups(['calendar:write'])]
    public ?string $calendarType = null;

    /**
     * externalLink reference
     * Must be: IRI string (e.g., "/api/calendar_external_links/uuid")
     */
    #[Groups(['calendar:write'])]
    public ?string $externalLink = null;

    #[Groups(['calendar:write'])]
    public ?string $externalApiKey = null;

    #[Groups(['calendar:write'])]
    public bool $default = false;

    #[Groups(['calendar:write'])]
    public bool $active = true;

    #[Groups(['calendar:write'])]
    public bool $public = false;

    #[Assert\Length(max: 100)]
    #[Groups(['calendar:write'])]
    public ?string $icon = null;

    #[Groups(['calendar:write'])]
    public ?int $sortOrder = null;

    #[Assert\Length(max: 255)]
    #[Groups(['calendar:write'])]
    public ?string $externalId = null;

    #[Groups(['calendar:write'])]
    public ?\DateTimeImmutable $lastSyncedAt = null;

    #[Groups(['calendar:write'])]
    public ?array $permissions = null;

    #[Groups(['calendar:write'])]
    public ?array $settings = null;


    // Getters and Setters

    public function getOrganization(): ?string    {
        return $this->organization;
    }

    public function setOrganization(?string $organization): self
    {
        $this->organization = $organization;
        return $this;
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getDescription(): ?string    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    public function getUser(): ?string    {
        return $this->user;
    }

    public function setUser(?string $user): self
    {
        $this->user = $user;
        return $this;
    }

    public function getTimeZone(): string    {
        return $this->timeZone;
    }

    public function setTimeZone(string $timeZone): self
    {
        $this->timeZone = $timeZone;
        return $this;
    }

    public function getColor(): ?string    {
        return $this->color;
    }

    public function setColor(?string $color): self
    {
        $this->color = $color;
        return $this;
    }

    public function getPrimary(): ?bool    {
        return $this->primary;
    }

    public function setPrimary(?bool $primary): self
    {
        $this->primary = $primary;
        return $this;
    }

    public function getVisible(): ?bool    {
        return $this->visible;
    }

    public function setVisible(?bool $visible): self
    {
        $this->visible = $visible;
        return $this;
    }

    public function getAccessRole(): ?string    {
        return $this->accessRole;
    }

    public function setAccessRole(?string $accessRole): self
    {
        $this->accessRole = $accessRole;
        return $this;
    }

    public function getCalendarType(): ?string    {
        return $this->calendarType;
    }

    public function setCalendarType(?string $calendarType): self
    {
        $this->calendarType = $calendarType;
        return $this;
    }

    public function getEvents(): ?string    {
        return $this->events;
    }

    public function setEvents(?string $events): self
    {
        $this->events = $events;
        return $this;
    }

    public function getExternalLink(): ?string    {
        return $this->externalLink;
    }

    public function setExternalLink(?string $externalLink): self
    {
        $this->externalLink = $externalLink;
        return $this;
    }

    public function getExternalApiKey(): ?string    {
        return $this->externalApiKey;
    }

    public function setExternalApiKey(?string $externalApiKey): self
    {
        $this->externalApiKey = $externalApiKey;
        return $this;
    }

    public function getWorkingHours(): ?string    {
        return $this->workingHours;
    }

    public function setWorkingHours(?string $workingHours): self
    {
        $this->workingHours = $workingHours;
        return $this;
    }

    public function getHolidays(): ?string    {
        return $this->holidays;
    }

    public function setHolidays(?string $holidays): self
    {
        $this->holidays = $holidays;
        return $this;
    }

    public function getDefault(): bool    {
        return $this->default;
    }

    public function setDefault(bool $default): self
    {
        $this->default = $default;
        return $this;
    }

    public function getActive(): bool    {
        return $this->active;
    }

    public function setActive(bool $active): self
    {
        $this->active = $active;
        return $this;
    }

    public function getPublic(): bool    {
        return $this->public;
    }

    public function setPublic(bool $public): self
    {
        $this->public = $public;
        return $this;
    }

    public function getIcon(): ?string    {
        return $this->icon;
    }

    public function setIcon(?string $icon): self
    {
        $this->icon = $icon;
        return $this;
    }

    public function getSortOrder(): ?int    {
        return $this->sortOrder;
    }

    public function setSortOrder(?int $sortOrder): self
    {
        $this->sortOrder = $sortOrder;
        return $this;
    }

    public function getExternalId(): ?string    {
        return $this->externalId;
    }

    public function setExternalId(?string $externalId): self
    {
        $this->externalId = $externalId;
        return $this;
    }

    public function getLastSyncedAt(): ?\DateTimeImmutable    {
        return $this->lastSyncedAt;
    }

    public function setLastSyncedAt(?\DateTimeImmutable $lastSyncedAt): self
    {
        $this->lastSyncedAt = $lastSyncedAt;
        return $this;
    }

    public function getPermissions(): ?array    {
        return $this->permissions;
    }

    public function setPermissions(?array $permissions): self
    {
        $this->permissions = $permissions;
        return $this;
    }

    public function getSettings(): ?array    {
        return $this->settings;
    }

    public function setSettings(?array $settings): self
    {
        $this->settings = $settings;
        return $this;
    }
}
