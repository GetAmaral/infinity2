<?php

declare(strict_types=1);

namespace App\Dto\Generated;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Context\ExecutionContextInterface;
use Symfony\Component\Serializer\Annotation\Groups;
use App\Dto\OrganizationInputDto;
use App\Dto\CalendarInputDto;
use App\Dto\EventInputDto;

/**
 * Holiday Input DTO (Generated Base Class)
 *
 * Company and regional holidays *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom validation logic to HolidayInputDto.php instead.
 *
 * @generated by Genmax Code Generator
 */
abstract class HolidayInputDtoGenerated
{
    /**
     * organization reference
     * Must be: IRI string (e.g., "/api/organizatia/uuid")
     * Auto-assigned by system if not provided
     */
    #[Groups(['holiday:write'])]
    public ?string $organization = null;

    #[Groups(['holiday:write'])]
    public string $name;

    #[Groups(['holiday:write'])]
    public ?string $description = null;

    #[Groups(['holiday:write'])]
    public bool $recurring;

    #[Groups(['holiday:write'])]
    public ?bool $blocksScheduling = null;

    #[Groups(['holiday:write'])]
    public bool $observed;

    #[Groups(['holiday:write'])]
    public bool $active = true;

    #[Groups(['holiday:write'])]
    public ?string $country = null;

    /**
     * calendar reference
     * Must be: IRI string (e.g., "/api/calendars/uuid")
     */
    #[Groups(['holiday:write'])]
    public ?string $calendar = null;

    #[Groups(['holiday:write'])]
    public ?string $region = null;

    #[Groups(['holiday:write'])]
    public ?int $year = null;

    /**
     * event reference
     * Must be: IRI string (e.g., "/api/events/uuid")
     */
    #[Groups(['holiday:write'])]
    public ?string $event = null;

    #[Groups(['holiday:write'])]
    public ?string $holidayType = null;

    #[Groups(['holiday:write'])]
    public ?\DateTimeImmutable $originalDate = null;

    #[Groups(['holiday:write'])]
    public bool $affectsSLA = true;

    #[Groups(['holiday:write'])]
    public \DateTimeImmutable $sentAt;

    #[Groups(['holiday:write'])]
    public bool $workingDay = false;

    #[Groups(['holiday:write'])]
    public ?string $notes = null;

    #[Groups(['holiday:write'])]
    public ?string $startTime = null;

    #[Groups(['holiday:write'])]
    public ?string $endTime = null;


    // Getters and Setters

    public function getOrganization(): ?string    {
        return $this->organization;
    }

    public function setOrganization(?string $organization): self
    {
        $this->organization = $organization;
        return $this;
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getDescription(): ?string    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    public function getRecurring(): bool    {
        return $this->recurring;
    }

    public function setRecurring(bool $recurring): self
    {
        $this->recurring = $recurring;
        return $this;
    }

    public function getBlocksScheduling(): ?bool    {
        return $this->blocksScheduling;
    }

    public function setBlocksScheduling(?bool $blocksScheduling): self
    {
        $this->blocksScheduling = $blocksScheduling;
        return $this;
    }

    public function getObserved(): bool    {
        return $this->observed;
    }

    public function setObserved(bool $observed): self
    {
        $this->observed = $observed;
        return $this;
    }

    public function getActive(): bool    {
        return $this->active;
    }

    public function setActive(bool $active): self
    {
        $this->active = $active;
        return $this;
    }

    public function getCountry(): ?string    {
        return $this->country;
    }

    public function setCountry(?string $country): self
    {
        $this->country = $country;
        return $this;
    }

    public function getCalendar(): ?string    {
        return $this->calendar;
    }

    public function setCalendar(?string $calendar): self
    {
        $this->calendar = $calendar;
        return $this;
    }

    public function getRegion(): ?string    {
        return $this->region;
    }

    public function setRegion(?string $region): self
    {
        $this->region = $region;
        return $this;
    }

    public function getYear(): ?int    {
        return $this->year;
    }

    public function setYear(?int $year): self
    {
        $this->year = $year;
        return $this;
    }

    public function getEvent(): ?string    {
        return $this->event;
    }

    public function setEvent(?string $event): self
    {
        $this->event = $event;
        return $this;
    }

    public function getHolidayType(): ?string    {
        return $this->holidayType;
    }

    public function setHolidayType(?string $holidayType): self
    {
        $this->holidayType = $holidayType;
        return $this;
    }

    public function getOriginalDate(): ?\DateTimeImmutable    {
        return $this->originalDate;
    }

    public function setOriginalDate(?\DateTimeImmutable $originalDate): self
    {
        $this->originalDate = $originalDate;
        return $this;
    }

    public function getAffectsSLA(): bool    {
        return $this->affectsSLA;
    }

    public function setAffectsSLA(bool $affectsSLA): self
    {
        $this->affectsSLA = $affectsSLA;
        return $this;
    }

    public function getSentAt(): \DateTimeImmutable    {
        return $this->sentAt;
    }

    public function setSentAt(\DateTimeImmutable $sentAt): self
    {
        $this->sentAt = $sentAt;
        return $this;
    }

    public function getWorkingDay(): bool    {
        return $this->workingDay;
    }

    public function setWorkingDay(bool $workingDay): self
    {
        $this->workingDay = $workingDay;
        return $this;
    }

    public function getNotes(): ?string    {
        return $this->notes;
    }

    public function setNotes(?string $notes): self
    {
        $this->notes = $notes;
        return $this;
    }

    public function getStartTime(): ?string    {
        return $this->startTime;
    }

    public function setStartTime(?string $startTime): self
    {
        $this->startTime = $startTime;
        return $this;
    }

    public function getEndTime(): ?string    {
        return $this->endTime;
    }

    public function setEndTime(?string $endTime): self
    {
        $this->endTime = $endTime;
        return $this;
    }
}
