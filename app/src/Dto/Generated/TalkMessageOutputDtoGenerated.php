<?php

declare(strict_types=1);

namespace App\Dto\Generated;

use Symfony\Component\Uid\Uuid;
use App\Dto\OrganizationOutputDto;
use App\Dto\TalkOutputDto;
use App\Dto\ContactOutputDto;
use App\Dto\UserOutputDto;
use App\Dto\AgentOutputDto;
use App\Dto\AttachmentOutputDto;
use App\Dto\TalkMessageOutputDto;
use App\Dto\NotificationOutputDto;

/**
 * TalkMessage Output DTO (Generated Base Class)
 *
 * Individual messages within communication threads *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom computed properties to TalkMessageOutputDto.php instead.
 *
 * @generated by Genmax Code Generator
 */
abstract class TalkMessageOutputDtoGenerated
{
    public ?Uuid $id = null;

    /**
     * organization reference
     * Can be: IRI string or nested OrganizationOutput object
     */
    public string|OrganizationOutputDto $organization;

    /**
     * talk reference
     * Can be: IRI string or nested TalkOutput object
     */
    public string|TalkOutputDto $talk;

    /**
     * fromContact reference
     * Can be: IRI string or nested ContactOutput object
     */
    public string|ContactOutputDto|null $fromContact = null;

    /**
     * fromUser reference
     * Can be: IRI string or nested UserOutput object
     */
    public string|UserOutputDto|null $fromUser = null;

    /**
     * fromAgent reference
     * Can be: IRI string or nested AgentOutput object
     */
    public string|AgentOutputDto|null $fromAgent = null;

    public \DateTimeImmutable $sentAt;

    public string $body;

    public string $messageType;

    /**
     * attachments collection
     * @var AttachmentOutputDto[]
     */
    public array $attachments = [];

    public bool $read;

    public ?\DateTimeImmutable $readAt = null;

    public ?string $sentiment = null;

    /**
     * parentMessage reference
     * Can be: IRI string or nested TalkMessageOutput object
     */
    public string|TalkMessageOutputDto|null $parentMessage = null;

    public ?bool $edited = null;

    /**
     * notification reference
     * Can be: IRI string or nested NotificationOutput object
     */
    public string|NotificationOutputDto|null $notification = null;

    public string $direction;

    public ?\DateTimeImmutable $deliveredAt = null;

    public bool $internal;

    public bool $system;

    public ?\DateTimeImmutable $editedAt = null;

    public ?string $channel = null;

    public ?string $subject = null;

    public ?array $metadata = null;

    public ?\DateTimeImmutable $createdAt = null;

    public ?\DateTimeImmutable $updatedAt = null;

    // Getters and Setters
    public function getId(): ?Uuid
    {
        return $this->id;
    }

    public function setId(?Uuid $id): self
    {
        $this->id = $id;
        return $this;
    }


    public function getOrganization(): string|OrganizationOutputDto    {
        return $this->organization;
    }

    public function setOrganization(string|OrganizationOutputDto $organization): self
    {
        $this->organization = $organization;
        return $this;
    }

    public function getTalk(): string|TalkOutputDto    {
        return $this->talk;
    }

    public function setTalk(string|TalkOutputDto $talk): self
    {
        $this->talk = $talk;
        return $this;
    }

    public function getFromContact(): string|ContactOutputDto|null    {
        return $this->fromContact;
    }

    public function setFromContact(string|ContactOutputDto|null $fromContact): self
    {
        $this->fromContact = $fromContact;
        return $this;
    }

    public function getFromUser(): string|UserOutputDto|null    {
        return $this->fromUser;
    }

    public function setFromUser(string|UserOutputDto|null $fromUser): self
    {
        $this->fromUser = $fromUser;
        return $this;
    }

    public function getFromAgent(): string|AgentOutputDto|null    {
        return $this->fromAgent;
    }

    public function setFromAgent(string|AgentOutputDto|null $fromAgent): self
    {
        $this->fromAgent = $fromAgent;
        return $this;
    }

    public function getSentAt(): \DateTimeImmutable    {
        return $this->sentAt;
    }

    public function setSentAt(\DateTimeImmutable $sentAt): self
    {
        $this->sentAt = $sentAt;
        return $this;
    }

    public function getBody(): string    {
        return $this->body;
    }

    public function setBody(string $body): self
    {
        $this->body = $body;
        return $this;
    }

    public function getMessageType(): string    {
        return $this->messageType;
    }

    public function setMessageType(string $messageType): self
    {
        $this->messageType = $messageType;
        return $this;
    }

    public function getAttachments(): array    {
        return $this->attachments;
    }

    public function setAttachments(array $attachments): self
    {
        $this->attachments = $attachments;
        return $this;
    }

    public function getRead(): bool    {
        return $this->read;
    }

    public function setRead(bool $read): self
    {
        $this->read = $read;
        return $this;
    }

    public function getReadAt(): ?\DateTimeImmutable    {
        return $this->readAt;
    }

    public function setReadAt(?\DateTimeImmutable $readAt): self
    {
        $this->readAt = $readAt;
        return $this;
    }

    public function getSentiment(): ?string    {
        return $this->sentiment;
    }

    public function setSentiment(?string $sentiment): self
    {
        $this->sentiment = $sentiment;
        return $this;
    }

    public function getParentMessage(): string|TalkMessageOutputDto|null    {
        return $this->parentMessage;
    }

    public function setParentMessage(string|TalkMessageOutputDto|null $parentMessage): self
    {
        $this->parentMessage = $parentMessage;
        return $this;
    }

    public function getEdited(): ?bool    {
        return $this->edited;
    }

    public function setEdited(?bool $edited): self
    {
        $this->edited = $edited;
        return $this;
    }

    public function getNotification(): string|NotificationOutputDto|null    {
        return $this->notification;
    }

    public function setNotification(string|NotificationOutputDto|null $notification): self
    {
        $this->notification = $notification;
        return $this;
    }

    public function getDirection(): string    {
        return $this->direction;
    }

    public function setDirection(string $direction): self
    {
        $this->direction = $direction;
        return $this;
    }

    public function getDeliveredAt(): ?\DateTimeImmutable    {
        return $this->deliveredAt;
    }

    public function setDeliveredAt(?\DateTimeImmutable $deliveredAt): self
    {
        $this->deliveredAt = $deliveredAt;
        return $this;
    }

    public function getInternal(): bool    {
        return $this->internal;
    }

    public function setInternal(bool $internal): self
    {
        $this->internal = $internal;
        return $this;
    }

    public function getSystem(): bool    {
        return $this->system;
    }

    public function setSystem(bool $system): self
    {
        $this->system = $system;
        return $this;
    }

    public function getEditedAt(): ?\DateTimeImmutable    {
        return $this->editedAt;
    }

    public function setEditedAt(?\DateTimeImmutable $editedAt): self
    {
        $this->editedAt = $editedAt;
        return $this;
    }

    public function getChannel(): ?string    {
        return $this->channel;
    }

    public function setChannel(?string $channel): self
    {
        $this->channel = $channel;
        return $this;
    }

    public function getSubject(): ?string    {
        return $this->subject;
    }

    public function setSubject(?string $subject): self
    {
        $this->subject = $subject;
        return $this;
    }

    public function getMetadata(): ?array    {
        return $this->metadata;
    }

    public function setMetadata(?array $metadata): self
    {
        $this->metadata = $metadata;
        return $this;
    }

    public function getCreatedAt(): ?\DateTimeImmutable
    {
        return $this->createdAt;
    }

    public function setCreatedAt(?\DateTimeImmutable $createdAt): self
    {
        $this->createdAt = $createdAt;
        return $this;
    }

    public function getUpdatedAt(): ?\DateTimeImmutable
    {
        return $this->updatedAt;
    }

    public function setUpdatedAt(?\DateTimeImmutable $updatedAt): self
    {
        $this->updatedAt = $updatedAt;
        return $this;
    }
}
