<?php

declare(strict_types=1);

namespace App\Dto\Generated;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Context\ExecutionContextInterface;
use Symfony\Component\Serializer\Annotation\Groups;
use App\Dto\OrganizationInputDto;
use App\Dto\UserInputDto;
use App\Dto\EventAttendeeInputDto;
use App\Dto\CommunicationMethodInputDto;
use App\Dto\EventInputDto;
use App\Dto\ReminderInputDto;
use App\Dto\TalkMessageInputDto;
use App\Dto\NotificationTypeInputDto;

/**
 * Notification Input DTO (Generated Base Class)
 *
 * System notifications for users *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom validation logic to NotificationInputDto.php instead.
 *
 * @generated by Genmax Code Generator
 */
abstract class NotificationInputDtoGenerated
{
    /**
     * organization reference
     * Must be: IRI string (e.g., "/api/organizations/uuid")
     * Auto-assigned by system if not provided
     */
    #[Groups(['notification:write'])]
    public ?string $organization = null;

    #[Assert\Length(max: 255)]
    #[Groups(['notification:write'])]
    public string $title;

    /**
     * recipient reference
     * Must be: IRI string (e.g., "/api/users/uuid")
     */
    #[Assert\NotNull]
    #[Groups(['notification:write'])]
    public ?string $recipient = null;

    /**
     * sender reference
     * Must be: IRI string (e.g., "/api/users/uuid")
     */
    #[Groups(['notification:write'])]
    public ?string $sender = null;

    #[Assert\Length(max: 20)]
    #[Groups(['notification:write'])]
    public string $priority;

    #[Assert\Length(max: 500)]
    #[Groups(['notification:write'])]
    public ?string $actionUrl = null;

    /**
     * attendee reference
     * Must be: IRI string (e.g., "/api/eventattendees/uuid")
     */
    #[Groups(['notification:write'])]
    public ?string $attendee = null;

    #[Groups(['notification:write'])]
    public bool $read;

    #[Groups(['notification:write'])]
    public bool $archived;

    #[Groups(['notification:write'])]
    public ?\DateTimeImmutable $readAt = null;

    /**
     * communicationMethod reference
     * Must be: IRI string (e.g., "/api/communicationmethods/uuid")
     */
    #[Groups(['notification:write'])]
    public ?string $communicationMethod = null;

    /**
     * event reference
     * Must be: IRI string (e.g., "/api/events/uuid")
     */
    #[Groups(['notification:write'])]
    public ?string $event = null;

    #[Groups(['notification:write'])]
    public ?string $message = null;

    #[Groups(['notification:write'])]
    public ?int $notificationStatus = null;

    /**
     * reminder reference
     * Must be: IRI string (e.g., "/api/reminders/uuid")
     */
    #[Groups(['notification:write'])]
    public ?string $reminder = null;

    #[Groups(['notification:write'])]
    public ?\DateTimeImmutable $sentAt = null;

    /**
     * talkMessage reference
     * Must be: IRI string (e.g., "/api/talkmessages/uuid")
     */
    #[Groups(['notification:write'])]
    public ?string $talkMessage = null;

    /**
     * type reference
     * Must be: IRI string (e.g., "/api/notificationtypes/uuid")
     */
    #[Groups(['notification:write'])]
    public ?string $type = null;


    // Getters and Setters

    public function getOrganization(): ?string    {
        return $this->organization;
    }

    public function setOrganization(?string $organization): self
    {
        $this->organization = $organization;
        return $this;
    }

    public function getTitle(): string    {
        return $this->title;
    }

    public function setTitle(string $title): self
    {
        $this->title = $title;
        return $this;
    }

    public function getRecipient(): ?string    {
        return $this->recipient;
    }

    public function setRecipient(?string $recipient): self
    {
        $this->recipient = $recipient;
        return $this;
    }

    public function getSender(): ?string    {
        return $this->sender;
    }

    public function setSender(?string $sender): self
    {
        $this->sender = $sender;
        return $this;
    }

    public function getPriority(): string    {
        return $this->priority;
    }

    public function setPriority(string $priority): self
    {
        $this->priority = $priority;
        return $this;
    }

    public function getActionurl(): ?string    {
        return $this->actionUrl;
    }

    public function setActionurl(?string $actionUrl): self
    {
        $this->actionUrl = $actionUrl;
        return $this;
    }

    public function getAttendee(): ?string    {
        return $this->attendee;
    }

    public function setAttendee(?string $attendee): self
    {
        $this->attendee = $attendee;
        return $this;
    }

    public function getRead(): bool    {
        return $this->read;
    }

    public function setRead(bool $read): self
    {
        $this->read = $read;
        return $this;
    }

    public function getArchived(): bool    {
        return $this->archived;
    }

    public function setArchived(bool $archived): self
    {
        $this->archived = $archived;
        return $this;
    }

    public function getReadat(): ?\DateTimeImmutable    {
        return $this->readAt;
    }

    public function setReadat(?\DateTimeImmutable $readAt): self
    {
        $this->readAt = $readAt;
        return $this;
    }

    public function getCommunicationmethod(): ?string    {
        return $this->communicationMethod;
    }

    public function setCommunicationmethod(?string $communicationMethod): self
    {
        $this->communicationMethod = $communicationMethod;
        return $this;
    }

    public function getEvent(): ?string    {
        return $this->event;
    }

    public function setEvent(?string $event): self
    {
        $this->event = $event;
        return $this;
    }

    public function getMessage(): ?string    {
        return $this->message;
    }

    public function setMessage(?string $message): self
    {
        $this->message = $message;
        return $this;
    }

    public function getNotificationstatus(): ?int    {
        return $this->notificationStatus;
    }

    public function setNotificationstatus(?int $notificationStatus): self
    {
        $this->notificationStatus = $notificationStatus;
        return $this;
    }

    public function getReminder(): ?string    {
        return $this->reminder;
    }

    public function setReminder(?string $reminder): self
    {
        $this->reminder = $reminder;
        return $this;
    }

    public function getSentat(): ?\DateTimeImmutable    {
        return $this->sentAt;
    }

    public function setSentat(?\DateTimeImmutable $sentAt): self
    {
        $this->sentAt = $sentAt;
        return $this;
    }

    public function getTalkmessage(): ?string    {
        return $this->talkMessage;
    }

    public function setTalkmessage(?string $talkMessage): self
    {
        $this->talkMessage = $talkMessage;
        return $this;
    }

    public function getType(): ?string    {
        return $this->type;
    }

    public function setType(?string $type): self
    {
        $this->type = $type;
        return $this;
    }
}
