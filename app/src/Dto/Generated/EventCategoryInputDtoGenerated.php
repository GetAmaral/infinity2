<?php

declare(strict_types=1);

namespace App\Dto\Generated;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Context\ExecutionContextInterface;
use Symfony\Component\Serializer\Annotation\Groups;
use App\Dto\OrganizationInputDto;

/**
 * EventCategory Input DTO (Generated Base Class)
 *
 * Event categories for calendar organization *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom validation logic to EventCategoryInputDto.php instead.
 *
 * @generated by Genmax Code Generator
 */
abstract class EventCategoryInputDtoGenerated
{
    /**
     * organization reference
     * Must be: IRI string (e.g., "/api/organizations/uuid")
     * Auto-assigned by system if not provided
     */
    #[Groups(['eventcategory:write'])]
    public ?string $organization = null;

    #[Groups(['eventcategory:write'])]
    public string $name;

    #[Groups(['eventcategory:write'])]
    public string $color = '#0dcaf0';

    #[Groups(['eventcategory:write'])]
    public ?string $description = null;

    #[Groups(['eventcategory:write'])]
    public string $icon = 'bi-calendar-event';

    #[Groups(['eventcategory:write'])]
    public bool $default = false;

    #[Groups(['eventcategory:write'])]
    public ?string $eventType = null;

    #[Groups(['eventcategory:write'])]
    public int $sortOrder = 0;

    #[Groups(['eventcategory:write'])]
    public bool $allowMultiple = true;

    #[Groups(['eventcategory:write'])]
    public bool $active = true;


    // Getters and Setters

    public function getOrganization(): ?string    {
        return $this->organization;
    }

    public function setOrganization(?string $organization): self
    {
        $this->organization = $organization;
        return $this;
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getColor(): string    {
        return $this->color;
    }

    public function setColor(string $color): self
    {
        $this->color = $color;
        return $this;
    }

    public function getDescription(): ?string    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    public function getIcon(): string    {
        return $this->icon;
    }

    public function setIcon(string $icon): self
    {
        $this->icon = $icon;
        return $this;
    }

    public function getDefault(): bool    {
        return $this->default;
    }

    public function setDefault(bool $default): self
    {
        $this->default = $default;
        return $this;
    }

    public function getEventtype(): ?string    {
        return $this->eventType;
    }

    public function setEventtype(?string $eventType): self
    {
        $this->eventType = $eventType;
        return $this;
    }

    public function getSortorder(): int    {
        return $this->sortOrder;
    }

    public function setSortorder(int $sortOrder): self
    {
        $this->sortOrder = $sortOrder;
        return $this;
    }

    public function getAllowmultiple(): bool    {
        return $this->allowMultiple;
    }

    public function setAllowmultiple(bool $allowMultiple): self
    {
        $this->allowMultiple = $allowMultiple;
        return $this;
    }

    public function getActive(): bool    {
        return $this->active;
    }

    public function setActive(bool $active): self
    {
        $this->active = $active;
        return $this;
    }

    public function getEvents(): ?string    {
        return $this->events;
    }

    public function setEvents(?string $events): self
    {
        $this->events = $events;
        return $this;
    }
}
