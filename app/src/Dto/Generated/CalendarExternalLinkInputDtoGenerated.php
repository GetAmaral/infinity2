<?php

declare(strict_types=1);

namespace App\Dto\Generated;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Context\ExecutionContextInterface;
use App\Dto\UserInputDto;

/**
 * Calendar External Link Input DTO (Generated Base Class)
 *
 * Manages OAuth-based external calendar integrations (Google Calendar, Microsoft Outlook, Apple Calendar) with bi-directional sync, webhook support, and token refresh management *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom validation logic to CalendarExternalLinkInputDto.php instead.
 *
 * @generated by Genmax Code Generator
 */
abstract class CalendarExternalLinkInputDtoGenerated
{
    #[Assert\Length(max: 100)]
    public string $name;

    #[Assert\Length(max: 50)]
    public string $externalProvider;

    public bool $active = true;

    public ?string $externalId = null;

    #[Assert\Length(max: 500)]
    public ?string $url = null;

    public ?string $accessToken = null;

    public ?string $refreshToken = null;

    public ?\DateTimeImmutable $tokenExpiresAt = null;

    #[Assert\Length(max: 500)]
    public ?string $syncToken = null;

    public ?\DateTimeImmutable $lastSyncedAt = null;

    #[Assert\Length(max: 500)]
    public ?string $webhookUrl = null;

    #[Assert\Length(max: 255)]
    public ?string $webhookChannelId = null;

    public ?\DateTimeImmutable $webhookExpiresAt = null;

    public string $syncDirection = 'bidirectional';

    public ?string $lastErrorMessage = null;

    public ?\DateTimeImmutable $lastErrorAt = null;

    public int $syncIntervalMinutes = 15;

    public int $retryCount = 0;

    public ?array $scopes = null;

    public ?array $metadata = null;

    /**
     * user reference
     * Can be: IRI string (e.g., "/api/users/uuid") or nested UserInput object
     */
    #[Assert\NotNull]
    public string|UserInputDto $user;


    // Getters and Setters

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getCalendars(): ?string    {
        return $this->calendars;
    }

    public function setCalendars(?string $calendars): self
    {
        $this->calendars = $calendars;
        return $this;
    }

    public function getExternalprovider(): string    {
        return $this->externalProvider;
    }

    public function setExternalprovider(string $externalProvider): self
    {
        $this->externalProvider = $externalProvider;
        return $this;
    }

    public function getActive(): bool    {
        return $this->active;
    }

    public function setActive(bool $active): self
    {
        $this->active = $active;
        return $this;
    }

    public function getExternalid(): ?string    {
        return $this->externalId;
    }

    public function setExternalid(?string $externalId): self
    {
        $this->externalId = $externalId;
        return $this;
    }

    public function getUrl(): ?string    {
        return $this->url;
    }

    public function setUrl(?string $url): self
    {
        $this->url = $url;
        return $this;
    }

    public function getAccesstoken(): ?string    {
        return $this->accessToken;
    }

    public function setAccesstoken(?string $accessToken): self
    {
        $this->accessToken = $accessToken;
        return $this;
    }

    public function getRefreshtoken(): ?string    {
        return $this->refreshToken;
    }

    public function setRefreshtoken(?string $refreshToken): self
    {
        $this->refreshToken = $refreshToken;
        return $this;
    }

    public function getTokenexpiresat(): ?\DateTimeImmutable    {
        return $this->tokenExpiresAt;
    }

    public function setTokenexpiresat(?\DateTimeImmutable $tokenExpiresAt): self
    {
        $this->tokenExpiresAt = $tokenExpiresAt;
        return $this;
    }

    public function getSynctoken(): ?string    {
        return $this->syncToken;
    }

    public function setSynctoken(?string $syncToken): self
    {
        $this->syncToken = $syncToken;
        return $this;
    }

    public function getLastsyncedat(): ?\DateTimeImmutable    {
        return $this->lastSyncedAt;
    }

    public function setLastsyncedat(?\DateTimeImmutable $lastSyncedAt): self
    {
        $this->lastSyncedAt = $lastSyncedAt;
        return $this;
    }

    public function getWebhookurl(): ?string    {
        return $this->webhookUrl;
    }

    public function setWebhookurl(?string $webhookUrl): self
    {
        $this->webhookUrl = $webhookUrl;
        return $this;
    }

    public function getWebhookchannelid(): ?string    {
        return $this->webhookChannelId;
    }

    public function setWebhookchannelid(?string $webhookChannelId): self
    {
        $this->webhookChannelId = $webhookChannelId;
        return $this;
    }

    public function getWebhookexpiresat(): ?\DateTimeImmutable    {
        return $this->webhookExpiresAt;
    }

    public function setWebhookexpiresat(?\DateTimeImmutable $webhookExpiresAt): self
    {
        $this->webhookExpiresAt = $webhookExpiresAt;
        return $this;
    }

    public function getSyncdirection(): string    {
        return $this->syncDirection;
    }

    public function setSyncdirection(string $syncDirection): self
    {
        $this->syncDirection = $syncDirection;
        return $this;
    }

    public function getLasterrormessage(): ?string    {
        return $this->lastErrorMessage;
    }

    public function setLasterrormessage(?string $lastErrorMessage): self
    {
        $this->lastErrorMessage = $lastErrorMessage;
        return $this;
    }

    public function getLasterrorat(): ?\DateTimeImmutable    {
        return $this->lastErrorAt;
    }

    public function setLasterrorat(?\DateTimeImmutable $lastErrorAt): self
    {
        $this->lastErrorAt = $lastErrorAt;
        return $this;
    }

    public function getSyncintervalminutes(): int    {
        return $this->syncIntervalMinutes;
    }

    public function setSyncintervalminutes(int $syncIntervalMinutes): self
    {
        $this->syncIntervalMinutes = $syncIntervalMinutes;
        return $this;
    }

    public function getRetrycount(): int    {
        return $this->retryCount;
    }

    public function setRetrycount(int $retryCount): self
    {
        $this->retryCount = $retryCount;
        return $this;
    }

    public function getScopes(): ?array    {
        return $this->scopes;
    }

    public function setScopes(?array $scopes): self
    {
        $this->scopes = $scopes;
        return $this;
    }

    public function getMetadata(): ?array    {
        return $this->metadata;
    }

    public function setMetadata(?array $metadata): self
    {
        $this->metadata = $metadata;
        return $this;
    }

    public function getUser(): string|UserInputDto    {
        return $this->user;
    }

    public function setUser(string|UserInputDto $user): self
    {
        $this->user = $user;
        return $this;
    }
}
