<?php

declare(strict_types=1);

namespace App\Dto\Generated;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Context\ExecutionContextInterface;
use Symfony\Component\Serializer\Annotation\Groups;
use App\Dto\OrganizationInputDto;
use App\Dto\PipelineTemplateInputDto;

/**
 * PipelineStageTemplate Input DTO (Generated Base Class)
 *
 * Templates for pipeline stages *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom validation logic to PipelineStageTemplateInputDto.php instead.
 *
 * @generated by Genmax Code Generator
 */
abstract class PipelineStageTemplateInputDtoGenerated
{
    /**
     * organization reference
     * Must be: IRI string (e.g., "/api/organizatia/uuid")
     * Auto-assigned by system if not provided
     */
    #[Groups(['pipelinestagetemplate:write'])]
    public ?string $organization = null;

    #[Groups(['pipelinestagetemplate:write'])]
    public string $name;

    #[Groups(['pipelinestagetemplate:write'])]
    public ?string $description = null;

    #[Groups(['pipelinestagetemplate:write'])]
    public string $probability = '0';

    #[Groups(['pipelinestagetemplate:write'])]
    public int $order = 0;

    #[Groups(['pipelinestagetemplate:write'])]
    public bool $active;

    #[Groups(['pipelinestagetemplate:write'])]
    public ?string $color = '#0dcaf0';

    #[Groups(['pipelinestagetemplate:write'])]
    public ?int $rottingDays = null;

    /**
     * pipelineTemplate reference
     * Must be: IRI string (e.g., "/api/pipeline_templates/uuid")
     */
    #[Assert\NotNull]
    #[Groups(['pipelinestagetemplate:write'])]
    public ?string $pipelineTemplate = null;

    #[Groups(['pipelinestagetemplate:write'])]
    public bool $final;

    #[Groups(['pipelinestagetemplate:write'])]
    public string $stageType;

    #[Groups(['pipelinestagetemplate:write'])]
    public ?array $automationRules = null;

    #[Groups(['pipelinestagetemplate:write'])]
    public ?array $requiredFields = null;

    #[Groups(['pipelinestagetemplate:write'])]
    public ?string $icon = null;


    // Getters and Setters

    public function getOrganization(): ?string    {
        return $this->organization;
    }

    public function setOrganization(?string $organization): self
    {
        $this->organization = $organization;
        return $this;
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getDescription(): ?string    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    public function getProbability(): string    {
        return $this->probability;
    }

    public function setProbability(string $probability): self
    {
        $this->probability = $probability;
        return $this;
    }

    public function getOrder(): int    {
        return $this->order;
    }

    public function setOrder(int $order): self
    {
        $this->order = $order;
        return $this;
    }

    public function getActive(): bool    {
        return $this->active;
    }

    public function setActive(bool $active): self
    {
        $this->active = $active;
        return $this;
    }

    public function getColor(): ?string    {
        return $this->color;
    }

    public function setColor(?string $color): self
    {
        $this->color = $color;
        return $this;
    }

    public function getRottingDays(): ?int    {
        return $this->rottingDays;
    }

    public function setRottingDays(?int $rottingDays): self
    {
        $this->rottingDays = $rottingDays;
        return $this;
    }

    public function getPipelineTemplate(): ?string    {
        return $this->pipelineTemplate;
    }

    public function setPipelineTemplate(?string $pipelineTemplate): self
    {
        $this->pipelineTemplate = $pipelineTemplate;
        return $this;
    }

    public function getTasks(): ?string    {
        return $this->tasks;
    }

    public function setTasks(?string $tasks): self
    {
        $this->tasks = $tasks;
        return $this;
    }

    public function getFinal(): bool    {
        return $this->final;
    }

    public function setFinal(bool $final): self
    {
        $this->final = $final;
        return $this;
    }

    public function getStageType(): string    {
        return $this->stageType;
    }

    public function setStageType(string $stageType): self
    {
        $this->stageType = $stageType;
        return $this;
    }

    public function getAutomationRules(): ?array    {
        return $this->automationRules;
    }

    public function setAutomationRules(?array $automationRules): self
    {
        $this->automationRules = $automationRules;
        return $this;
    }

    public function getRequiredFields(): ?array    {
        return $this->requiredFields;
    }

    public function setRequiredFields(?array $requiredFields): self
    {
        $this->requiredFields = $requiredFields;
        return $this;
    }

    public function getIcon(): ?string    {
        return $this->icon;
    }

    public function setIcon(?string $icon): self
    {
        $this->icon = $icon;
        return $this;
    }
}
