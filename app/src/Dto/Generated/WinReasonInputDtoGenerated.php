<?php

declare(strict_types=1);

namespace App\Dto\Generated;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Context\ExecutionContextInterface;
use Symfony\Component\Serializer\Annotation\Groups;
use App\Dto\OrganizationInputDto;

/**
 * Win Reason Input DTO (Generated Base Class)
 *
 * Tracks reasons for won deals to analyze success patterns and competitive positioning *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom validation logic to WinReasonInputDto.php instead.
 *
 * @generated by Genmax Code Generator
 */
abstract class WinReasonInputDtoGenerated
{
    /**
     * organization reference
     * Must be: IRI string (e.g., "/api/organizations/uuid")
     * Auto-assigned by system if not provided
     */
    #[Groups(['winreason:write'])]
    public ?string $organization = null;

    #[Assert\NotBlank(message: 'Win reason name is required')]
    #[Assert\Length(max: 100)]
    #[Groups(['winreason:write'])]
    public string $name;

    #[Assert\Length(max: 1000)]
    #[Groups(['winreason:write'])]
    public ?string $description = null;

    #[Assert\NotBlank(message: 'Category is required')]
    #[Groups(['winreason:write'])]
    public string $category;

    #[Groups(['winreason:write'])]
    public int $sortOrder = 100;

    #[Assert\Range(min: 0, max: 100)]
    #[Groups(['winreason:write'])]
    public ?string $impactScore = null;

    #[Groups(['winreason:write'])]
    public int $usageCount = 0;

    #[Groups(['winreason:write'])]
    public ?\DateTimeImmutable $lastUsedAt = null;

    #[Groups(['winreason:write'])]
    public bool $competitorRelated = false;

    #[Assert\Length(max: 100)]
    #[Groups(['winreason:write'])]
    public ?string $primaryCompetitor = null;

    #[Assert\Choice(choices: ['HIGH', 'MEDIUM', 'LOW', 'NEUTRAL'])]
    #[Groups(['winreason:write'])]
    public ?string $dealValueImpact = null;

    #[Assert\Regex(pattern: '^#[0-9A-Fa-f]{6}$')]
    #[Groups(['winreason:write'])]
    public string $color = '#0dcaf0';

    #[Groups(['winreason:write'])]
    public ?array $tags = null;

    #[Groups(['winreason:write'])]
    public bool $active = true;

    #[Assert\Length(max: 2000)]
    #[Groups(['winreason:write'])]
    public ?string $notes = null;

    #[Groups(['winreason:write'])]
    public bool $requiresApproval = false;


    // Getters and Setters

    public function getOrganization(): ?string    {
        return $this->organization;
    }

    public function setOrganization(?string $organization): self
    {
        $this->organization = $organization;
        return $this;
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getDescription(): ?string    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    public function getCategory(): string    {
        return $this->category;
    }

    public function setCategory(string $category): self
    {
        $this->category = $category;
        return $this;
    }

    public function getSortorder(): int    {
        return $this->sortOrder;
    }

    public function setSortorder(int $sortOrder): self
    {
        $this->sortOrder = $sortOrder;
        return $this;
    }

    public function getImpactscore(): ?string    {
        return $this->impactScore;
    }

    public function setImpactscore(?string $impactScore): self
    {
        $this->impactScore = $impactScore;
        return $this;
    }

    public function getUsagecount(): int    {
        return $this->usageCount;
    }

    public function setUsagecount(int $usageCount): self
    {
        $this->usageCount = $usageCount;
        return $this;
    }

    public function getLastusedat(): ?\DateTimeImmutable    {
        return $this->lastUsedAt;
    }

    public function setLastusedat(?\DateTimeImmutable $lastUsedAt): self
    {
        $this->lastUsedAt = $lastUsedAt;
        return $this;
    }

    public function getCompetitorrelated(): bool    {
        return $this->competitorRelated;
    }

    public function setCompetitorrelated(bool $competitorRelated): self
    {
        $this->competitorRelated = $competitorRelated;
        return $this;
    }

    public function getPrimarycompetitor(): ?string    {
        return $this->primaryCompetitor;
    }

    public function setPrimarycompetitor(?string $primaryCompetitor): self
    {
        $this->primaryCompetitor = $primaryCompetitor;
        return $this;
    }

    public function getDealvalueimpact(): ?string    {
        return $this->dealValueImpact;
    }

    public function setDealvalueimpact(?string $dealValueImpact): self
    {
        $this->dealValueImpact = $dealValueImpact;
        return $this;
    }

    public function getColor(): string    {
        return $this->color;
    }

    public function setColor(string $color): self
    {
        $this->color = $color;
        return $this;
    }

    public function getTags(): ?array    {
        return $this->tags;
    }

    public function setTags(?array $tags): self
    {
        $this->tags = $tags;
        return $this;
    }

    public function getActive(): bool    {
        return $this->active;
    }

    public function setActive(bool $active): self
    {
        $this->active = $active;
        return $this;
    }

    public function getNotes(): ?string    {
        return $this->notes;
    }

    public function setNotes(?string $notes): self
    {
        $this->notes = $notes;
        return $this;
    }

    public function getRequiresapproval(): bool    {
        return $this->requiresApproval;
    }

    public function setRequiresapproval(bool $requiresApproval): self
    {
        $this->requiresApproval = $requiresApproval;
        return $this;
    }

    public function getDeals(): ?string    {
        return $this->deals;
    }

    public function setDeals(?string $deals): self
    {
        $this->deals = $deals;
        return $this;
    }
}
