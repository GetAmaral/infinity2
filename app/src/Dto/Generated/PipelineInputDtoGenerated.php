<?php

declare(strict_types=1);

namespace App\Dto\Generated;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Context\ExecutionContextInterface;
use Symfony\Component\Serializer\Annotation\Groups;
use App\Dto\OrganizationInputDto;
use App\Dto\UserInputDto;

/**
 * Pipeline Input DTO (Generated Base Class)
 *
 * Sales pipelines for managing deal flow *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom validation logic to PipelineInputDto.php instead.
 *
 * @generated by Genmax Code Generator
 */
abstract class PipelineInputDtoGenerated
{
    /**
     * organization reference
     * Must be: IRI string (e.g., "/api/organizatia/uuid")
     * Auto-assigned by system if not provided
     */
    #[Groups(['pipeline:write'])]
    public ?string $organization = null;

    #[Groups(['pipeline:write'])]
    public string $name;

    #[Groups(['pipeline:write'])]
    public ?string $description = null;

    #[Groups(['pipeline:write'])]
    public bool $active = true;

    #[Groups(['pipeline:write'])]
    public string $pipelineType = 'Sales';

    #[Groups(['pipeline:write'])]
    public bool $default = false;

    /**
     * owner reference
     * Must be: IRI string (e.g., "/api/users/uuid")
     * Auto-assigned by system if not provided
     */
    #[Groups(['pipeline:write'])]
    public ?string $owner = null;

    #[Groups(['pipeline:write'])]
    public int $displayOrder = 0;

    #[Groups(['pipeline:write'])]
    public string $color = '#0dcaf0';

    #[Groups(['pipeline:write'])]
    public string $icon = 'bi-diagram-3';

    #[Groups(['pipeline:write'])]
    public bool $forecastEnabled = true;

    #[Groups(['pipeline:write'])]
    public bool $autoAdvanceStages = false;

    #[Groups(['pipeline:write'])]
    public int $rottenDealThreshold = 30;

    #[Groups(['pipeline:write'])]
    public string $currency = 'USD';

    #[Groups(['pipeline:write'])]
    public ?string $avgDealSize = '0';

    #[Groups(['pipeline:write'])]
    public ?int $avgCycleTime = null;

    #[Groups(['pipeline:write'])]
    public ?string $winRate = null;

    #[Groups(['pipeline:write'])]
    public ?string $conversionRate = null;

    #[Groups(['pipeline:write'])]
    public int $totalDealsCount = 0;

    #[Groups(['pipeline:write'])]
    public int $activeDealsCount = 0;

    #[Groups(['pipeline:write'])]
    public string $totalPipelineValue = '0';

    #[Groups(['pipeline:write'])]
    public ?\DateTimeImmutable $archivedAt = null;


    // Getters and Setters

    public function getOrganization(): ?string    {
        return $this->organization;
    }

    public function setOrganization(?string $organization): self
    {
        $this->organization = $organization;
        return $this;
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getDescription(): ?string    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    public function getActive(): bool    {
        return $this->active;
    }

    public function setActive(bool $active): self
    {
        $this->active = $active;
        return $this;
    }

    public function getPipelineType(): string    {
        return $this->pipelineType;
    }

    public function setPipelineType(string $pipelineType): self
    {
        $this->pipelineType = $pipelineType;
        return $this;
    }

    public function getDefault(): bool    {
        return $this->default;
    }

    public function setDefault(bool $default): self
    {
        $this->default = $default;
        return $this;
    }

    public function getOwner(): ?string    {
        return $this->owner;
    }

    public function setOwner(?string $owner): self
    {
        $this->owner = $owner;
        return $this;
    }

    public function getStages(): ?string    {
        return $this->stages;
    }

    public function setStages(?string $stages): self
    {
        $this->stages = $stages;
        return $this;
    }

    public function getDisplayOrder(): int    {
        return $this->displayOrder;
    }

    public function setDisplayOrder(int $displayOrder): self
    {
        $this->displayOrder = $displayOrder;
        return $this;
    }

    public function getColor(): string    {
        return $this->color;
    }

    public function setColor(string $color): self
    {
        $this->color = $color;
        return $this;
    }

    public function getIcon(): string    {
        return $this->icon;
    }

    public function setIcon(string $icon): self
    {
        $this->icon = $icon;
        return $this;
    }

    public function getForecastEnabled(): bool    {
        return $this->forecastEnabled;
    }

    public function setForecastEnabled(bool $forecastEnabled): self
    {
        $this->forecastEnabled = $forecastEnabled;
        return $this;
    }

    public function getAutoAdvanceStages(): bool    {
        return $this->autoAdvanceStages;
    }

    public function setAutoAdvanceStages(bool $autoAdvanceStages): self
    {
        $this->autoAdvanceStages = $autoAdvanceStages;
        return $this;
    }

    public function getRottenDealThreshold(): int    {
        return $this->rottenDealThreshold;
    }

    public function setRottenDealThreshold(int $rottenDealThreshold): self
    {
        $this->rottenDealThreshold = $rottenDealThreshold;
        return $this;
    }

    public function getCurrency(): string    {
        return $this->currency;
    }

    public function setCurrency(string $currency): self
    {
        $this->currency = $currency;
        return $this;
    }

    public function getAvgDealSize(): ?string    {
        return $this->avgDealSize;
    }

    public function setAvgDealSize(?string $avgDealSize): self
    {
        $this->avgDealSize = $avgDealSize;
        return $this;
    }

    public function getAvgCycleTime(): ?int    {
        return $this->avgCycleTime;
    }

    public function setAvgCycleTime(?int $avgCycleTime): self
    {
        $this->avgCycleTime = $avgCycleTime;
        return $this;
    }

    public function getWinRate(): ?string    {
        return $this->winRate;
    }

    public function setWinRate(?string $winRate): self
    {
        $this->winRate = $winRate;
        return $this;
    }

    public function getConversionRate(): ?string    {
        return $this->conversionRate;
    }

    public function setConversionRate(?string $conversionRate): self
    {
        $this->conversionRate = $conversionRate;
        return $this;
    }

    public function getTotalDealsCount(): int    {
        return $this->totalDealsCount;
    }

    public function setTotalDealsCount(int $totalDealsCount): self
    {
        $this->totalDealsCount = $totalDealsCount;
        return $this;
    }

    public function getActiveDealsCount(): int    {
        return $this->activeDealsCount;
    }

    public function setActiveDealsCount(int $activeDealsCount): self
    {
        $this->activeDealsCount = $activeDealsCount;
        return $this;
    }

    public function getTotalPipelineValue(): string    {
        return $this->totalPipelineValue;
    }

    public function setTotalPipelineValue(string $totalPipelineValue): self
    {
        $this->totalPipelineValue = $totalPipelineValue;
        return $this;
    }

    public function getDeals(): ?string    {
        return $this->deals;
    }

    public function setDeals(?string $deals): self
    {
        $this->deals = $deals;
        return $this;
    }

    public function getArchivedAt(): ?\DateTimeImmutable    {
        return $this->archivedAt;
    }

    public function setArchivedAt(?\DateTimeImmutable $archivedAt): self
    {
        $this->archivedAt = $archivedAt;
        return $this;
    }
}
