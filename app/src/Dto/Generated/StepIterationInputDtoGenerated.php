<?php

declare(strict_types=1);

namespace App\Dto\Generated;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Context\ExecutionContextInterface;
use Symfony\Component\Serializer\Annotation\Groups;
use App\Dto\StepInputDto;

/**
 * StepIteration Input DTO (Generated Base Class)
 *
 * Decision questions in workflow logic *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom validation logic to StepIterationInputDto.php instead.
 *
 * @generated by Genmax Code Generator
 */
abstract class StepIterationInputDtoGenerated
{
    /**
     * step reference
     * Must be: IRI string (e.g., "/api/steps/uuid")
     */
    #[Assert\NotNull]
    #[Groups(['step_question:write'])]
    public ?string $step = null;

    #[Assert\Length(max: 255)]
    #[Groups(['step_question:write'])]
    public string $name;

    #[Assert\Length(max: 255)]
    #[Groups(['step_question:write'])]
    public string $slug;

    #[Groups(['step_question:write'])]
    public ?string $prompt = null;

    #[Groups(['step_question:write'])]
    public ?string $objective = null;

    #[Groups(['step_question:write'])]
    public ?int $importance = 1;

    #[Groups(['step_question:write'])]
    public int $viewOrder = 1;

    #[Groups(['step_question:write'])]
    public ?array $fewShotPositive = null;

    #[Groups(['step_question:write'])]
    public ?array $fewShotNegative = null;


    // Getters and Setters

    public function getStep(): ?string    {
        return $this->step;
    }

    public function setStep(?string $step): self
    {
        $this->step = $step;
        return $this;
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getSlug(): string    {
        return $this->slug;
    }

    public function setSlug(string $slug): self
    {
        $this->slug = $slug;
        return $this;
    }

    public function getPrompt(): ?string    {
        return $this->prompt;
    }

    public function setPrompt(?string $prompt): self
    {
        $this->prompt = $prompt;
        return $this;
    }

    public function getObjective(): ?string    {
        return $this->objective;
    }

    public function setObjective(?string $objective): self
    {
        $this->objective = $objective;
        return $this;
    }

    public function getImportance(): ?int    {
        return $this->importance;
    }

    public function setImportance(?int $importance): self
    {
        $this->importance = $importance;
        return $this;
    }

    public function getViewOrder(): int    {
        return $this->viewOrder;
    }

    public function setViewOrder(int $viewOrder): self
    {
        $this->viewOrder = $viewOrder;
        return $this;
    }

    public function getFewShotPositive(): ?array    {
        return $this->fewShotPositive;
    }

    public function setFewShotPositive(?array $fewShotPositive): self
    {
        $this->fewShotPositive = $fewShotPositive;
        return $this;
    }

    public function getFewShotNegative(): ?array    {
        return $this->fewShotNegative;
    }

    public function setFewShotNegative(?array $fewShotNegative): self
    {
        $this->fewShotNegative = $fewShotNegative;
        return $this;
    }
}
