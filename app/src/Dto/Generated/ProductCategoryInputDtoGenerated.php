<?php

declare(strict_types=1);

namespace App\Dto\Generated;

use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Validator\Context\ExecutionContextInterface;
use Symfony\Component\Serializer\Annotation\Groups;
use App\Dto\OrganizationInputDto;
use App\Dto\ProductCategoryInputDto;

/**
 * ProductCategory Input DTO (Generated Base Class)
 *
 * Product categories for catalog organization *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom validation logic to ProductCategoryInputDto.php instead.
 *
 * @generated by Genmax Code Generator
 */
abstract class ProductCategoryInputDtoGenerated
{
    /**
     * organization reference
     * Must be: IRI string (e.g., "/api/organizatia/uuid")
     * Auto-assigned by system if not provided
     */
    #[Groups(['productcategory:write'])]
    public ?string $organization = null;

    #[Groups(['productcategory:write'])]
    public string $name;

    #[Groups(['productcategory:write'])]
    public ?string $description = null;

    /**
     * parentCategory reference
     * Must be: IRI string (e.g., "/api/product_ries/uuid")
     */
    #[Groups(['productcategory:write'])]
    public ?string $parentCategory = null;


    // Getters and Setters

    public function getOrganization(): ?string    {
        return $this->organization;
    }

    public function setOrganization(?string $organization): self
    {
        $this->organization = $organization;
        return $this;
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getDescription(): ?string    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    public function getParentCategory(): ?string    {
        return $this->parentCategory;
    }

    public function setParentCategory(?string $parentCategory): self
    {
        $this->parentCategory = $parentCategory;
        return $this;
    }

    public function getSubcategories(): ?string    {
        return $this->subcategories;
    }

    public function setSubcategories(?string $subcategories): self
    {
        $this->subcategories = $subcategories;
        return $this;
    }

    public function getProducts(): ?string    {
        return $this->products;
    }

    public function setProducts(?string $products): self
    {
        $this->products = $products;
        return $this;
    }
}
