<?php

declare(strict_types=1);

namespace App\State;

use ApiPlatform\Metadata\Operation;
use ApiPlatform\State\ProcessorInterface;
use App\Entity\ProductBatch;
use App\Dto\ProductBatchInputDto;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\DependencyInjection\Attribute\Autowire;
use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;
use Symfony\Component\Uid\Uuid;
use App\Entity\Organization;
use App\Entity\Product;

/**
 * ProductBatch State Processor
 *
 * Handles Input DTO -> Entity transformation for POST, PUT, PATCH operations
 * with support for nested object creation and updates.
 *
 * This file is ALWAYS regenerated. DO NOT edit.
 * For custom processing logic, use Event Subscribers.
 *
 * @generated by Genmax Code Generator
 */
class ProductBatchProcessor implements ProcessorInterface
{
    public function __construct(
        private readonly EntityManagerInterface $entityManager,
        #[Autowire(service: 'App\MultiTenant\TenantEntityProcessor')]
        private readonly ProcessorInterface $persistProcessor
    ) {}

    /**
     * @param ProductBatchInputDto $data
     */
    public function process(mixed $data, Operation $operation, array $uriVariables = [], array $context = []): ProductBatch
    {
        if (!$data instanceof ProductBatchInputDto) {
            throw new BadRequestHttpException('Invalid input data type');
        }

        // Determine if this is a create or update operation
        $entity = null;
        if (isset($uriVariables['id'])) {
            $entity = $this->entityManager->getRepository(ProductBatch::class)->find($uriVariables['id']);
            if (!$entity) {
                throw new BadRequestHttpException('ProductBatch not found');
            }
        }

        if (!$entity) {
            $entity = new ProductBatch();
        }

        // Map scalar properties from DTO to Entity
        $entity->setBatchnumber($data->batchNumber);
        $entity->setName($data->name);
        $entity->setManufacturingdate($data->manufacturingDate);
        $entity->setLotnumber($data->lotNumber);
        $entity->setSerialnumber($data->serialNumber);
        $entity->setExpired($data->expired);
        $entity->setSupplier($data->supplier);
        $entity->setQualitystatus($data->qualityStatus);
        $entity->setNotes($data->notes);
        $entity->setAvailablequantity($data->availableQuantity);
        $entity->setActive($data->active);
        $entity->setCommissionamount($data->commissionAmount);
        $entity->setCommissionrate($data->commissionRate);
        $entity->setCostprice($data->costPrice);
        $entity->setCurrency($data->currency);
        $entity->setDiscountamount($data->discountAmount);
        $entity->setDiscountpercentage($data->discountPercentage);
        $entity->setExchangerate($data->exchangeRate);
        $entity->setExpirationdate($data->expirationDate);
        $entity->setListprice($data->listPrice);
        $entity->setMarginpercentage($data->marginPercentage);
        $entity->setMaximumdiscount($data->maximumDiscount);
        $entity->setMinimumprice($data->minimumPrice);
        $entity->setReservedquantity($data->reservedQuantity);
        $entity->setStockquantity($data->stockQuantity);

        // Map relationship properties
        // organization: ManyToOne
        if ($data->organization !== null) {
            if (is_string($data->organization)) {
                // IRI format: "/api/organizations/{id}"
                $organizationId = $this->extractIdFromIri($data->organization);
                $organization = $this->entityManager->getRepository(Organization::class)->find($organizationId);
                if (!$organization) {
                    throw new BadRequestHttpException('Organization not found: ' . $organizationId);
                }
                $entity->setOrganization($organization);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested organization creation not supported. Use IRI format.');
            }
        } else {
            throw new BadRequestHttpException('organization is required');
        }

        // product: ManyToOne
        if ($data->product !== null) {
            if (is_string($data->product)) {
                // IRI format: "/api/products/{id}"
                $productId = $this->extractIdFromIri($data->product);
                $product = $this->entityManager->getRepository(Product::class)->find($productId);
                if (!$product) {
                    throw new BadRequestHttpException('Product not found: ' . $productId);
                }
                $entity->setProduct($product);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested product creation not supported. Use IRI format.');
            }
        }

        // Persist and flush
        return $this->persistProcessor->process($entity, $operation, $uriVariables, $context);
    }

    /**
     * Extract UUID from IRI format
     */
    private function extractIdFromIri(string $iri): Uuid
    {
        $parts = explode('/', $iri);
        $id = end($parts);

        if (!Uuid::isValid($id)) {
            throw new BadRequestHttpException('Invalid UUID in IRI: ' . $iri);
        }

        return Uuid::fromString($id);
    }

}
