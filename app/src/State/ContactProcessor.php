<?php

declare(strict_types=1);

namespace App\State;

use ApiPlatform\Metadata\Operation;
use ApiPlatform\State\ProcessorInterface;
use App\Entity\Contact;
use App\Dto\ContactInputDto;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\DependencyInjection\Attribute\Autowire;
use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;
use Symfony\Component\Uid\Uuid;
use App\Entity\Organization;
use App\Entity\User;
use App\Entity\City;
use App\Entity\Campaign;
use App\Entity\Company;
use App\Entity\Deal;
use App\Entity\EventAttendee;
use App\Entity\SocialMedia;
use App\Entity\Talk;
use App\Entity\Task;

/**
 * Contact State Processor
 *
 * Handles Input DTO -> Entity transformation for POST, PUT, PATCH operations
 * with support for nested object creation and updates.
 *
 * This file is ALWAYS regenerated. DO NOT edit.
 * For custom processing logic, use Event Subscribers.
 *
 * @generated by Genmax Code Generator
 */
class ContactProcessor implements ProcessorInterface
{
    public function __construct(
        private readonly EntityManagerInterface $entityManager,
        #[Autowire(service: 'App\MultiTenant\TenantEntityProcessor')]
        private readonly ProcessorInterface $persistProcessor
    ) {}

    /**
     * @param ContactInputDto $data
     */
    public function process(mixed $data, Operation $operation, array $uriVariables = [], array $context = []): Contact
    {
        if (!$data instanceof ContactInputDto) {
            throw new BadRequestHttpException('Invalid input data type');
        }

        // Determine if this is a create or update operation
        $entity = null;
        if (isset($uriVariables['id'])) {
            $entity = $this->entityManager->getRepository(Contact::class)->find($uriVariables['id']);
            if (!$entity) {
                throw new BadRequestHttpException('Contact not found');
            }
        }

        if (!$entity) {
            $entity = new Contact();
        }

        // Map scalar properties from DTO to Entity
        $entity->setFirstname($data->firstName);
        $entity->setName($data->name);
        $entity->setLastname($data->lastName);
        $entity->setWebsite($data->website);
        $entity->setAddress($data->address);
        $entity->setBillingaddress($data->billingAddress);
        $entity->setBirthdate($data->birthDate);
        $entity->setMobilephone($data->mobilePhone);
        $entity->setLinkedinurl($data->linkedinUrl);
        $entity->setTitle($data->title);
        $entity->setDepartment($data->department);
        $entity->setEmailoptout($data->emailOptOut);
        $entity->setLeadsource($data->leadSource);
        $entity->setDonotcall($data->doNotCall);
        $entity->setPreferredcontactmethod($data->preferredContactMethod);
        $entity->setLastcontactdate($data->lastContactDate);
        $entity->setDocument($data->document);
        $entity->setEmail($data->email);
        $entity->setFirsttalkdate($data->firstTalkDate);
        $entity->setGender($data->gender);
        $entity->setGeo($data->geo);
        $entity->setLasttalkdate($data->lastTalkDate);
        $entity->setNeighborhood($data->neighborhood);
        $entity->setNickname($data->nickname);
        $entity->setNotes($data->notes);
        $entity->setOrigin($data->origin);
        $entity->setPhone($data->phone);
        $entity->setPostalcode($data->postalCode);
        $entity->setProfilepictureurl($data->profilePictureUrl);
        $entity->setRanking($data->ranking);
        $entity->setScore($data->score);
        $entity->setStatus($data->status);

        // Map relationship properties
        // organization: ManyToOne
        if ($data->organization !== null) {
            if (is_string($data->organization)) {
                // IRI format: "/api/organizations/{id}"
                $organizationId = $this->extractIdFromIri($data->organization);
                $organization = $this->entityManager->getRepository(Organization::class)->find($organizationId);
                if (!$organization) {
                    throw new BadRequestHttpException('Organization not found: ' . $organizationId);
                }
                $entity->setOrganization($organization);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested organization creation not supported. Use IRI format.');
            }
        } else {
            throw new BadRequestHttpException('organization is required');
        }

        // accountManager: ManyToOne
        if ($data->accountManager !== null) {
            if (is_string($data->accountManager)) {
                // IRI format: "/api/users/{id}"
                $accountManagerId = $this->extractIdFromIri($data->accountManager);
                $accountManager = $this->entityManager->getRepository(User::class)->find($accountManagerId);
                if (!$accountManager) {
                    throw new BadRequestHttpException('User not found: ' . $accountManagerId);
                }
                $entity->setAccountmanager($accountManager);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested accountManager creation not supported. Use IRI format.');
            }
        }

        // billingCity: ManyToOne
        if ($data->billingCity !== null) {
            if (is_string($data->billingCity)) {
                // IRI format: "/api/citys/{id}"
                $billingCityId = $this->extractIdFromIri($data->billingCity);
                $billingCity = $this->entityManager->getRepository(City::class)->find($billingCityId);
                if (!$billingCity) {
                    throw new BadRequestHttpException('City not found: ' . $billingCityId);
                }
                $entity->setBillingcity($billingCity);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested billingCity creation not supported. Use IRI format.');
            }
        }

        // city: ManyToOne
        if ($data->city !== null) {
            if (is_string($data->city)) {
                // IRI format: "/api/citys/{id}"
                $cityId = $this->extractIdFromIri($data->city);
                $city = $this->entityManager->getRepository(City::class)->find($cityId);
                if (!$city) {
                    throw new BadRequestHttpException('City not found: ' . $cityId);
                }
                $entity->setCity($city);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested city creation not supported. Use IRI format.');
            }
        }

        // company: ManyToOne
        if ($data->company !== null) {
            if (is_string($data->company)) {
                // IRI format: "/api/companys/{id}"
                $companyId = $this->extractIdFromIri($data->company);
                $company = $this->entityManager->getRepository(Company::class)->find($companyId);
                if (!$company) {
                    throw new BadRequestHttpException('Company not found: ' . $companyId);
                }
                $entity->setCompany($company);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested company creation not supported. Use IRI format.');
            }
        } else {
            throw new BadRequestHttpException('company is required');
        }

        // Persist and flush
        return $this->persistProcessor->process($entity, $operation, $uriVariables, $context);
    }

    /**
     * Extract UUID from IRI format
     */
    private function extractIdFromIri(string $iri): Uuid
    {
        $parts = explode('/', $iri);
        $id = end($parts);

        if (!Uuid::isValid($id)) {
            throw new BadRequestHttpException('Invalid UUID in IRI: ' . $iri);
        }

        return Uuid::fromString($id);
    }

}
