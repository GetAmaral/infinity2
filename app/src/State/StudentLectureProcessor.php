<?php

declare(strict_types=1);

namespace App\State;

use ApiPlatform\Metadata\Operation;
use ApiPlatform\State\ProcessorInterface;
use App\Entity\StudentLecture;
use App\Dto\StudentLectureInputDto;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\DependencyInjection\Attribute\Autowire;
use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;
use Symfony\Component\Uid\Uuid;
use App\Entity\User;
use App\Entity\CourseLecture;
use App\Entity\StudentCourse;

/**
 * StudentLecture State Processor
 *
 * Handles Input DTO -> Entity transformation for POST, PUT, PATCH operations
 * with support for nested object creation and updates.
 *
 * This file is ALWAYS regenerated. DO NOT edit.
 * For custom processing logic, use Event Subscribers.
 *
 * @generated by Genmax Code Generator
 */
class StudentLectureProcessor implements ProcessorInterface
{
    public function __construct(
        private readonly EntityManagerInterface $entityManager,
        #[Autowire(service: 'App\MultiTenant\TenantEntityProcessor')]
        private readonly ProcessorInterface $persistProcessor
    ) {}

    /**
     * @param StudentLectureInputDto $data
     */
    public function process(mixed $data, Operation $operation, array $uriVariables = [], array $context = []): StudentLecture
    {
        if (!$data instanceof StudentLectureInputDto) {
            throw new BadRequestHttpException('Invalid input data type');
        }

        // Determine if this is a create or update operation
        $entity = null;
        if (isset($uriVariables['id'])) {
            $entity = $this->entityManager->getRepository(StudentLecture::class)->find($uriVariables['id']);
            if (!$entity) {
                throw new BadRequestHttpException('StudentLecture not found');
            }
        }

        if (!$entity) {
            $entity = new StudentLecture();
        }

        // Map scalar properties from DTO to Entity
        $entity->setWatchedseconds($data->watchedSeconds);
        $entity->setLastpositionseconds($data->lastPositionSeconds);
        $entity->setCompletionpercentage($data->completionPercentage);
        $entity->setCompleted($data->completed);
        $entity->setLastwatchedat($data->lastWatchedAt);
        $entity->setCompletedat($data->completedAt);

        // Map relationship properties
        // student: ManyToOne
        if ($data->student !== null) {
            if (is_string($data->student)) {
                // IRI format: "/api/users/{id}"
                $studentId = $this->extractIdFromIri($data->student);
                $student = $this->entityManager->getRepository(User::class)->find($studentId);
                if (!$student) {
                    throw new BadRequestHttpException('User not found: ' . $studentId);
                }
                $entity->setStudent($student);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested student creation not supported. Use IRI format.');
            }
        } else {
            throw new BadRequestHttpException('student is required');
        }

        // lecture: ManyToOne
        if ($data->lecture !== null) {
            if (is_string($data->lecture)) {
                // IRI format: "/api/courselectures/{id}"
                $lectureId = $this->extractIdFromIri($data->lecture);
                $lecture = $this->entityManager->getRepository(CourseLecture::class)->find($lectureId);
                if (!$lecture) {
                    throw new BadRequestHttpException('CourseLecture not found: ' . $lectureId);
                }
                $entity->setLecture($lecture);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested lecture creation not supported. Use IRI format.');
            }
        } else {
            throw new BadRequestHttpException('lecture is required');
        }

        // studentCourse: ManyToOne
        if ($data->studentCourse !== null) {
            if (is_string($data->studentCourse)) {
                // IRI format: "/api/studentcourses/{id}"
                $studentCourseId = $this->extractIdFromIri($data->studentCourse);
                $studentCourse = $this->entityManager->getRepository(StudentCourse::class)->find($studentCourseId);
                if (!$studentCourse) {
                    throw new BadRequestHttpException('StudentCourse not found: ' . $studentCourseId);
                }
                $entity->setStudentcourse($studentCourse);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested studentCourse creation not supported. Use IRI format.');
            }
        }

        // Persist and flush
        return $this->persistProcessor->process($entity, $operation, $uriVariables, $context);
    }

    /**
     * Extract UUID from IRI format
     */
    private function extractIdFromIri(string $iri): Uuid
    {
        $parts = explode('/', $iri);
        $id = end($parts);

        if (!Uuid::isValid($id)) {
            throw new BadRequestHttpException('Invalid UUID in IRI: ' . $iri);
        }

        return Uuid::fromString($id);
    }

}
