<?php

declare(strict_types=1);

namespace App\State;

use ApiPlatform\Metadata\Operation;
use ApiPlatform\State\ProcessorInterface;
use App\Entity\TreeFlow;
use App\Dto\TreeFlowInputDto;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\DependencyInjection\Attribute\Autowire;
use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;
use Symfony\Component\Uid\Uuid;
use App\Entity\Organization;
use App\Entity\Step;

/**
 * TreeFlow State Processor
 *
 * Handles Input DTO -> Entity transformation for POST, PUT, PATCH operations
 * with support for nested object creation and updates.
 *
 * This file is ALWAYS regenerated. DO NOT edit.
 * For custom processing logic, use Event Subscribers.
 *
 * @generated by Genmax Code Generator
 */
class TreeFlowProcessor implements ProcessorInterface
{
    public function __construct(
        private readonly EntityManagerInterface $entityManager,
        #[Autowire(service: 'App\MultiTenant\TenantEntityProcessor')]
        private readonly ProcessorInterface $persistProcessor
    ) {}

    /**
     * @param TreeFlowInputDto $data
     */
    public function process(mixed $data, Operation $operation, array $uriVariables = [], array $context = []): TreeFlow
    {
        if (!$data instanceof TreeFlowInputDto) {
            throw new BadRequestHttpException('Invalid input data type');
        }

        // Determine if this is a create or update operation
        $entity = null;
        if (isset($uriVariables['id'])) {
            $entity = $this->entityManager->getRepository(TreeFlow::class)->find($uriVariables['id']);
            if (!$entity) {
                throw new BadRequestHttpException('TreeFlow not found');
            }
        }

        if (!$entity) {
            $entity = new TreeFlow();
        }

        // Map scalar properties from DTO to Entity
        $entity->setName($data->name);
        $entity->setSlug($data->slug);
        $entity->setVersion($data->version);
        $entity->setCanvasviewstate($data->canvasViewState);
        $entity->setJsonstructure($data->jsonStructure);
        $entity->setTalkflow($data->talkFlow);
        $entity->setActive($data->active);

        // Map relationship properties
        // organization: ManyToOne
        if ($data->organization !== null) {
            if (is_string($data->organization)) {
                // IRI format: "/api/organizations/{id}"
                $organizationId = $this->extractIdFromIri($data->organization);
                $organization = $this->entityManager->getRepository(Organization::class)->find($organizationId);
                if (!$organization) {
                    throw new BadRequestHttpException('Organization not found: ' . $organizationId);
                }
                $entity->setOrganization($organization);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested organization creation not supported. Use IRI format.');
            }
        } else {
            throw new BadRequestHttpException('organization is required');
        }

        // steps: OneToMany with nested DTO support
        if (!empty($data->steps)) {
            $this->processStepsCollection(
                $entity,
                $data->steps,
                'create_and_update'
            );
        }

        // Persist and flush
        return $this->persistProcessor->process($entity, $operation, $uriVariables, $context);
    }

    /**
     * Extract UUID from IRI format
     */
    private function extractIdFromIri(string $iri): Uuid
    {
        $parts = explode('/', $iri);
        $id = end($parts);

        if (!Uuid::isValid($id)) {
            throw new BadRequestHttpException('Invalid UUID in IRI: ' . $iri);
        }

        return Uuid::fromString($id);
    }

    /**
     * Process steps collection
     *
     * @param TreeFlow $entity
     * @param array $itemsData Array of StepInput or arrays with @id
     * @param string $strategy 'create_only', 'update_only', or 'create_and_update'
     * @param bool $orphanRemoval Remove items not in input array
     */
    private function processStepsCollection(
        TreeFlow $entity,
        array $itemsData,
        string $strategy = 'create_and_update',
        bool $orphanRemoval = false
    ): void {
        $existingItems = $entity->getSteps()->toArray();
        $processedIds = [];

        foreach ($itemsData as $itemData) {
            // Check if this is an update (has @id) or create (no @id)
            $itemId = $itemData['@id'] ?? $itemData['id'] ?? null;

            if ($itemId) {
                // UPDATE existing item
                if ($strategy === 'create_only') {
                    throw new BadRequestHttpException('Cannot update steps: create_only strategy');
                }

                if (is_string($itemId)) {
                    $itemId = $this->extractIdFromIri($itemId);
                }

                $item = $this->entityManager->getRepository(Step::class)->find($itemId);
                if (!$item) {
                    throw new BadRequestHttpException('Step not found: ' . $itemId);
                }

                // Update item properties from DTO array
                $this->mapArrayToEntity($itemData, $item);

                $processedIds[] = $item->getId()->toString();
            } else {
                // CREATE new item
                if ($strategy === 'update_only') {
                    throw new BadRequestHttpException('Cannot create steps: update_only strategy');
                }

                $item = new Step();

                // Set properties from DTO array
                $this->mapArrayToEntity($itemData, $item);

                // Set parent relationship (treeflow)
                $item->setTreeflow($entity);

                $entity->addStep($item);
                $this->entityManager->persist($item);
            }
        }

        // Handle orphan removal
        if ($orphanRemoval) {
            foreach ($existingItems as $existingItem) {
                if (!in_array($existingItem->getId()->toString(), $processedIds, true)) {
                    $entity->removeStep($existingItem);
                    $this->entityManager->remove($existingItem);
                }
            }
        }
    }

    /**
     * Map array data to entity properties using setters
     *
     * @param array $data Associative array of property => value
     * @param object $entity Target entity instance
     */
    private function mapArrayToEntity(array $data, object $entity): void
    {
        foreach ($data as $property => $value) {
            // Skip special keys like @id, @type, @context
            if (str_starts_with($property, '@')) {
                continue;
            }

            // Convert snake_case to camelCase for setter
            $setter = 'set' . str_replace('_', '', ucwords($property, '_'));

            if (method_exists($entity, $setter)) {
                // Handle different value types
                if ($value instanceof \DateTimeInterface || $value === null || is_scalar($value) || is_array($value)) {
                    $entity->$setter($value);
                } elseif (is_string($value) && str_starts_with($value, '/api/')) {
                    // Handle IRI references - resolve to actual entity
                    try {
                        $refId = $this->extractIdFromIri($value);
                        // Infer entity class from IRI pattern (e.g., /api/users/... -> User)
                        $parts = explode('/', trim($value, '/'));
                        if (count($parts) >= 3) {
                            $resourceName = $parts[1]; // e.g., "users"
                            $className = 'App\Entity\\' . ucfirst(rtrim($resourceName, 's'));
                            if (class_exists($className)) {
                                $refEntity = $this->entityManager->getRepository($className)->find($refId);
                                if ($refEntity) {
                                    $entity->$setter($refEntity);
                                }
                            }
                        }
                    } catch (\Exception $e) {
                        // Skip if IRI resolution fails
                        continue;
                    }
                }
            }
        }
    }
}
