<?php

declare(strict_types=1);

namespace App\State;

use ApiPlatform\Metadata\Operation;
use ApiPlatform\State\ProcessorInterface;
use App\Entity\PipelineStage;
use App\Dto\PipelineStageInputDto;
use App\Service\Utils;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\DependencyInjection\Attribute\Autowire;
use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;
use Symfony\Component\Uid\Uuid;
use App\Entity\Organization;
use App\Entity\DealStage;
use App\Entity\Deal;
use App\Entity\Pipeline;
use App\Entity\Task;

/**
 * PipelineStage State Processor
 *
 * Handles Input DTO -> Entity transformation for POST, PUT, PATCH operations
 * with support for nested object creation and updates.
 *
 * This file is ALWAYS regenerated. DO NOT edit.
 * For custom processing logic, use Event Subscribers.
 *
 * @generated by Genmax Code Generator
 */
class PipelineStageProcessor implements ProcessorInterface
{
    public function __construct(
        private readonly EntityManagerInterface $entityManager,
        #[Autowire(service: 'App\MultiTenant\TenantEntityProcessor')]
        private readonly ProcessorInterface $persistProcessor
    ) {}

    /**
     * Normalize property name for matching (removes underscores, lowercase)
     * Uses centralized Utils methods instead of manual string manipulation
     */
    private function normalizePropertyName(string $property): string
    {
        // Convert to camelCase (handles snake_case, etc.) then lowercase
        return strtolower(Utils::toCamelCase($property));
    }

    /**
     * Extract property name from method name (e.g., 'addItem' -> 'item')
     */
    private function extractPropertyFromMethod(string $methodName, string $prefix): string
    {
        // Remove prefix (e.g., 'add', 'set') and convert to lowercase
        return strtolower(substr($methodName, strlen($prefix)));
    }

    /**
     * @param PipelineStageInputDto $data
     */
    public function process(mixed $data, Operation $operation, array $uriVariables = [], array $context = []): PipelineStage
    {
        if (!$data instanceof PipelineStageInputDto) {
            throw new BadRequestHttpException('Invalid input data type');
        }

        // Determine if this is a create or update operation
        $entity = null;
        $isUpdate = isset($uriVariables['id']);
        $isPatch = $operation->getMethod() === 'PATCH';

        if ($isUpdate) {
            $entity = $this->entityManager->getRepository(PipelineStage::class)->find($uriVariables['id']);
            if (!$entity) {
                throw new BadRequestHttpException('PipelineStage not found');
            }
        }

        if (!$entity) {
            $entity = new PipelineStage();
        }

        // Get original request data to check which fields were actually sent (for PATCH)
        $requestData = $context['request']->toArray() ?? [];

        // Map scalar properties from DTO to Entity
        // description
        if (!$isPatch || array_key_exists('description', $requestData)) {
            $entity->setDescription($data->description);
        }
        // probability
        if (!$isPatch || array_key_exists('probability', $requestData)) {
            $entity->setProbability($data->probability);
        }
        // final
        if (!$isPatch || array_key_exists('final', $requestData)) {
            $entity->setFinal($data->final);
        }
        // won
        if (!$isPatch || array_key_exists('won', $requestData)) {
            $entity->setWon($data->won);
        }
        // active
        if (!$isPatch || array_key_exists('active', $requestData)) {
            $entity->setActive($data->active);
        }
        // lost
        if (!$isPatch || array_key_exists('lost', $requestData)) {
            $entity->setLost($data->lost);
        }
        // color
        if (!$isPatch || array_key_exists('color', $requestData)) {
            $entity->setColor($data->color);
        }
        // displayOrder
        if (!$isPatch || array_key_exists('displayOrder', $requestData)) {
            $entity->setDisplayOrder($data->displayOrder);
        }
        // migrationCriteria
        if (!$isPatch || array_key_exists('migrationCriteria', $requestData)) {
            $entity->setMigrationCriteria($data->migrationCriteria);
        }
        // stageName
        if (!$isPatch || array_key_exists('stageName', $requestData)) {
            $entity->setStageName($data->stageName);
        }

        // Map relationship properties
        // organization: ManyToOne
        // organization is auto-assigned by TenantEntityProcessor if not provided
        if (!$isPatch || array_key_exists('organization', $requestData)) {
            if ($data->organization !== null) {
                if (is_string($data->organization)) {
                    // IRI format: "/api/organizatia/{id}"
                    $organizationId = $this->extractIdFromIri($data->organization);
                    $organization = $this->entityManager->getRepository(Organization::class)->find($organizationId);
                    if (!$organization) {
                        throw new BadRequestHttpException('Organization not found: ' . $organizationId);
                    }
                    $entity->setOrganization($organization);
                } else {
                    // Nested object creation (if supported)
                    throw new BadRequestHttpException('Nested organization creation not supported. Use IRI format.');
                }
            }
        }

        // next: OneToOne
        if (!$isPatch || array_key_exists('next', $requestData)) {
            if ($data->next !== null) {
                if (is_string($data->next)) {
                    // IRI format: "/api/pipeline_stages/{id}"
                    $nextId = $this->extractIdFromIri($data->next);
                    $next = $this->entityManager->getRepository(PipelineStage::class)->find($nextId);
                    if (!$next) {
                        throw new BadRequestHttpException('PipelineStage not found: ' . $nextId);
                    }
                    $entity->setNext($next);
                } else {
                    // Nested object creation (if supported)
                    throw new BadRequestHttpException('Nested next creation not supported. Use IRI format.');
                }
            }
        }

        // pipeline: ManyToOne
        if (!$isPatch || array_key_exists('pipeline', $requestData)) {
            if ($data->pipeline !== null) {
                if (is_string($data->pipeline)) {
                    // IRI format: "/api/pipelines/{id}"
                    $pipelineId = $this->extractIdFromIri($data->pipeline);
                    $pipeline = $this->entityManager->getRepository(Pipeline::class)->find($pipelineId);
                    if (!$pipeline) {
                        throw new BadRequestHttpException('Pipeline not found: ' . $pipelineId);
                    }
                    $entity->setPipeline($pipeline);
                } else {
                    // Nested object creation (if supported)
                    throw new BadRequestHttpException('Nested pipeline creation not supported. Use IRI format.');
                }
            }
        }

        // previous: OneToOne
        if (!$isPatch || array_key_exists('previous', $requestData)) {
            if ($data->previous !== null) {
                if (is_string($data->previous)) {
                    // IRI format: "/api/pipeline_stages/{id}"
                    $previousId = $this->extractIdFromIri($data->previous);
                    $previous = $this->entityManager->getRepository(PipelineStage::class)->find($previousId);
                    if (!$previous) {
                        throw new BadRequestHttpException('PipelineStage not found: ' . $previousId);
                    }
                    $entity->setPrevious($previous);
                } else {
                    // Nested object creation (if supported)
                    throw new BadRequestHttpException('Nested previous creation not supported. Use IRI format.');
                }
            }
        }

        // Persist and flush
        return $this->persistProcessor->process($entity, $operation, $uriVariables, $context);
    }

    /**
     * Extract UUID from IRI format
     */
    private function extractIdFromIri(string $iri): Uuid
    {
        $parts = explode('/', $iri);
        $id = end($parts);

        if (!Uuid::isValid($id)) {
            throw new BadRequestHttpException('Invalid UUID in IRI: ' . $iri);
        }

        return Uuid::fromString($id);
    }

    /**
     * Map array data to entity properties using setters
     * Handles nested collections recursively
     *
     * @param array $data Associative array of property => value
     * @param object $entity Target entity instance
     */
    private function mapArrayToEntity(array $data, object $entity): void
    {
        foreach ($data as $property => $value) {
            // Skip special keys like @id, @type, @context
            if (str_starts_with($property, '@')) {
                continue;
            }

            // Handle nested collections using reflection to find adder methods
            if (is_array($value) && !empty($value) && isset($value[0]) && is_array($value[0])) {
                // Find adder method using reflection - scan all methods starting with 'add'
                $reflectionClass = new \ReflectionClass($entity);
                foreach ($reflectionClass->getMethods(\ReflectionMethod::IS_PUBLIC) as $method) {
                    if (!str_starts_with($method->getName(), 'add')) {
                        continue;
                    }

                    // Check if this might be the right adder based on property name similarity
                    $normalizedProperty = $this->normalizePropertyName($property);
                    $extractedFromMethod = $this->extractPropertyFromMethod($method->getName(), 'add');

                    // Try to match: property name should be similar to method's entity name
                    // e.g., 'items' matches 'addItem', 'user_items' matches 'addUserItem'
                    if (!str_contains($normalizedProperty, $extractedFromMethod) &&
                        !str_contains($extractedFromMethod, $normalizedProperty)) {
                        continue;
                    }

                    $parameters = $method->getParameters();
                    if (count($parameters) > 0) {
                        $paramType = $parameters[0]->getType();
                        if ($paramType && $paramType instanceof \ReflectionNamedType) {
                            $className = $paramType->getName();
                            if (class_exists($className)) {
                                $addMethod = $method->getName();
                                $setParentMethods = array_filter(
                                    $reflectionClass->getMethods(\ReflectionMethod::IS_PUBLIC),
                                    fn($m) => str_starts_with($m->getName(), 'set')
                                );

                                foreach ($value as $itemData) {
                                    $item = new $className();
                                    $this->mapArrayToEntity($itemData, $item);

                                    // Try to set parent relationship using reflection
                                    $itemReflection = new \ReflectionClass($item);
                                    foreach ($itemReflection->getMethods(\ReflectionMethod::IS_PUBLIC) as $itemMethod) {
                                        if (str_starts_with($itemMethod->getName(), 'set')) {
                                            $params = $itemMethod->getParameters();
                                            if (count($params) > 0) {
                                                $paramType = $params[0]->getType();
                                                if ($paramType instanceof \ReflectionNamedType &&
                                                    $paramType->getName() === get_class($entity)) {
                                                    $item->{$itemMethod->getName()}($entity);
                                                    break;
                                                }
                                            }
                                        }
                                    }

                                    $entity->$addMethod($item);
                                    $this->entityManager->persist($item);
                                }
                                continue 2; // Skip to next property
                            }
                        }
                    }
                }
            }

            // Find setter method using reflection - no string manipulation guessing
            $reflectionClass = new \ReflectionClass($entity);
            $setter = null;
            foreach ($reflectionClass->getMethods(\ReflectionMethod::IS_PUBLIC) as $method) {
                if (!str_starts_with($method->getName(), 'set')) {
                    continue;
                }

                // Check if method name matches property (case-insensitive, normalized matching)
                $extractedFromMethod = $this->extractPropertyFromMethod($method->getName(), 'set');
                $normalizedProperty = $this->normalizePropertyName($property);

                if ($extractedFromMethod === $normalizedProperty) {
                    $setter = $method->getName();
                    break;
                }
            }

            if (method_exists($entity, $setter)) {
                // Handle different value types
                if ($value instanceof \DateTimeInterface || $value === null || is_scalar($value)) {
                    $entity->$setter($value);
                } elseif (is_array($value) && !empty($value)) {
                    // Handle JSON arrays (like metadata, tags) - not entity collections
                    $entity->$setter($value);
                } elseif (is_string($value) && str_starts_with($value, '/api/') && $setter) {
                    // Handle IRI references - use reflection to determine expected type
                    try {
                        $refId = $this->extractIdFromIri($value);

                        // Use reflection to get the expected parameter type for the setter
                        $reflectionMethod = new \ReflectionMethod($entity, $setter);
                        $parameters = $reflectionMethod->getParameters();

                        if (count($parameters) > 0) {
                            $paramType = $parameters[0]->getType();
                            if ($paramType && $paramType instanceof \ReflectionNamedType) {
                                $className = $paramType->getName();
                                if (class_exists($className)) {
                                    $refEntity = $this->entityManager->getRepository($className)->find($refId);
                                    if ($refEntity) {
                                        $entity->$setter($refEntity);
                                    }
                                }
                            }
                        }
                    } catch (\Exception $e) {
                        // Skip if IRI resolution fails
                        continue;
                    }
                }
            }
        }
    }
}
