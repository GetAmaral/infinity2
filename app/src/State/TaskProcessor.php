<?php

declare(strict_types=1);

namespace App\State;

use ApiPlatform\Metadata\Operation;
use ApiPlatform\State\ProcessorInterface;
use App\Entity\Task;
use App\Dto\TaskInputDto;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\DependencyInjection\Attribute\Autowire;
use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;
use Symfony\Component\Uid\Uuid;
use App\Entity\Organization;
use App\Entity\Contact;
use App\Entity\Deal;
use App\Entity\PipelineStage;
use App\Entity\Company;
use App\Entity\TaskType;
use App\Entity\User;

/**
 * Task State Processor
 *
 * Handles Input DTO -> Entity transformation for POST, PUT, PATCH operations
 * with support for nested object creation and updates.
 *
 * This file is ALWAYS regenerated. DO NOT edit.
 * For custom processing logic, use Event Subscribers.
 *
 * @generated by Genmax Code Generator
 */
class TaskProcessor implements ProcessorInterface
{
    public function __construct(
        private readonly EntityManagerInterface $entityManager,
        #[Autowire(service: 'App\MultiTenant\TenantEntityProcessor')]
        private readonly ProcessorInterface $persistProcessor
    ) {}

    /**
     * @param TaskInputDto $data
     */
    public function process(mixed $data, Operation $operation, array $uriVariables = [], array $context = []): Task
    {
        if (!$data instanceof TaskInputDto) {
            throw new BadRequestHttpException('Invalid input data type');
        }

        // Determine if this is a create or update operation
        $entity = null;
        if (isset($uriVariables['id'])) {
            $entity = $this->entityManager->getRepository(Task::class)->find($uriVariables['id']);
            if (!$entity) {
                throw new BadRequestHttpException('Task not found');
            }
        }

        if (!$entity) {
            $entity = new Task();
        }

        // Map scalar properties from DTO to Entity
        $entity->setName($data->name);
        $entity->setDescription($data->description);
        $entity->setStartdate($data->startDate);
        $entity->setCompletionpercentage($data->completionPercentage);
        $entity->setCategory($data->category);
        $entity->setNotificationsent($data->notificationSent);
        $entity->setArchived($data->archived);
        $entity->setCommand($data->command);
        $entity->setCompleteddate($data->completedDate);
        $entity->setDurationminutes($data->durationMinutes);
        $entity->setLocation($data->location);
        $entity->setPriority($data->priority);
        $entity->setScheduleddate($data->scheduledDate);
        $entity->setCompleted($data->completed);
        $entity->setReminderdate($data->reminderDate);
        $entity->setReminder($data->reminder);
        $entity->setRecurring($data->recurring);
        $entity->setRecurrencerule($data->recurrenceRule);
        $entity->setOverdue($data->overdue);
        $entity->setQueue($data->queue);
        $entity->setEmailsubject($data->emailSubject);
        $entity->setTaskstatus($data->taskStatus);
        $entity->setPhonenumber($data->phoneNumber);
        $entity->setMeetingurl($data->meetingUrl);
        $entity->setOutcome($data->outcome);
        $entity->setNotes($data->notes);

        // Map relationship properties
        // organization: ManyToOne
        if ($data->organization !== null) {
            if (is_string($data->organization)) {
                // IRI format: "/api/organizations/{id}"
                $organizationId = $this->extractIdFromIri($data->organization);
                $organization = $this->entityManager->getRepository(Organization::class)->find($organizationId);
                if (!$organization) {
                    throw new BadRequestHttpException('Organization not found: ' . $organizationId);
                }
                $entity->setOrganization($organization);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested organization creation not supported. Use IRI format.');
            }
        } else {
            throw new BadRequestHttpException('organization is required');
        }

        // contact: ManyToOne
        if ($data->contact !== null) {
            if (is_string($data->contact)) {
                // IRI format: "/api/contacts/{id}"
                $contactId = $this->extractIdFromIri($data->contact);
                $contact = $this->entityManager->getRepository(Contact::class)->find($contactId);
                if (!$contact) {
                    throw new BadRequestHttpException('Contact not found: ' . $contactId);
                }
                $entity->setContact($contact);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested contact creation not supported. Use IRI format.');
            }
        }

        // deal: ManyToOne
        if ($data->deal !== null) {
            if (is_string($data->deal)) {
                // IRI format: "/api/deals/{id}"
                $dealId = $this->extractIdFromIri($data->deal);
                $deal = $this->entityManager->getRepository(Deal::class)->find($dealId);
                if (!$deal) {
                    throw new BadRequestHttpException('Deal not found: ' . $dealId);
                }
                $entity->setDeal($deal);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested deal creation not supported. Use IRI format.');
            }
        }

        // pipelineStage: ManyToOne
        if ($data->pipelineStage !== null) {
            if (is_string($data->pipelineStage)) {
                // IRI format: "/api/pipelinestages/{id}"
                $pipelineStageId = $this->extractIdFromIri($data->pipelineStage);
                $pipelineStage = $this->entityManager->getRepository(PipelineStage::class)->find($pipelineStageId);
                if (!$pipelineStage) {
                    throw new BadRequestHttpException('PipelineStage not found: ' . $pipelineStageId);
                }
                $entity->setPipelinestage($pipelineStage);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested pipelineStage creation not supported. Use IRI format.');
            }
        }

        // company: ManyToOne
        if ($data->company !== null) {
            if (is_string($data->company)) {
                // IRI format: "/api/companys/{id}"
                $companyId = $this->extractIdFromIri($data->company);
                $company = $this->entityManager->getRepository(Company::class)->find($companyId);
                if (!$company) {
                    throw new BadRequestHttpException('Company not found: ' . $companyId);
                }
                $entity->setCompany($company);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested company creation not supported. Use IRI format.');
            }
        }

        // type: ManyToOne
        if ($data->type !== null) {
            if (is_string($data->type)) {
                // IRI format: "/api/tasktypes/{id}"
                $typeId = $this->extractIdFromIri($data->type);
                $type = $this->entityManager->getRepository(TaskType::class)->find($typeId);
                if (!$type) {
                    throw new BadRequestHttpException('TaskType not found: ' . $typeId);
                }
                $entity->setType($type);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested type creation not supported. Use IRI format.');
            }
        }

        // user: ManyToOne
        if ($data->user !== null) {
            if (is_string($data->user)) {
                // IRI format: "/api/users/{id}"
                $userId = $this->extractIdFromIri($data->user);
                $user = $this->entityManager->getRepository(User::class)->find($userId);
                if (!$user) {
                    throw new BadRequestHttpException('User not found: ' . $userId);
                }
                $entity->setUser($user);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested user creation not supported. Use IRI format.');
            }
        }

        // Persist and flush
        return $this->persistProcessor->process($entity, $operation, $uriVariables, $context);
    }

    /**
     * Extract UUID from IRI format
     */
    private function extractIdFromIri(string $iri): Uuid
    {
        $parts = explode('/', $iri);
        $id = end($parts);

        if (!Uuid::isValid($id)) {
            throw new BadRequestHttpException('Invalid UUID in IRI: ' . $iri);
        }

        return Uuid::fromString($id);
    }

}
