<?php

declare(strict_types=1);

namespace App\State;

use ApiPlatform\Metadata\Operation;
use ApiPlatform\State\ProcessorInterface;
use App\Entity\Company;
use App\Dto\CompanyInputDto;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\DependencyInjection\Attribute\Autowire;
use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;
use Symfony\Component\Uid\Uuid;
use App\Entity\Organization;
use App\Entity\User;
use App\Entity\City;
use App\Entity\Campaign;
use App\Entity\Contact;
use App\Entity\Deal;
use App\Entity\Talk;
use App\Entity\Brand;
use App\Entity\Product;
use App\Entity\SocialMedia;

/**
 * Company State Processor
 *
 * Handles Input DTO -> Entity transformation for POST, PUT, PATCH operations
 * with support for nested object creation and updates.
 *
 * This file is ALWAYS regenerated. DO NOT edit.
 * For custom processing logic, use Event Subscribers.
 *
 * @generated by Genmax Code Generator
 */
class CompanyProcessor implements ProcessorInterface
{
    public function __construct(
        private readonly EntityManagerInterface $entityManager,
        #[Autowire(service: 'App\MultiTenant\TenantEntityProcessor')]
        private readonly ProcessorInterface $persistProcessor
    ) {}

    /**
     * @param CompanyInputDto $data
     */
    public function process(mixed $data, Operation $operation, array $uriVariables = [], array $context = []): Company
    {
        if (!$data instanceof CompanyInputDto) {
            throw new BadRequestHttpException('Invalid input data type');
        }

        // Determine if this is a create or update operation
        $entity = null;
        if (isset($uriVariables['id'])) {
            $entity = $this->entityManager->getRepository(Company::class)->find($uriVariables['id']);
            if (!$entity) {
                throw new BadRequestHttpException('Company not found');
            }
        }

        if (!$entity) {
            $entity = new Company();
        }

        // Map scalar properties from DTO to Entity
        $entity->setName($data->name);
        $entity->setDescription($data->description);
        $entity->setIndustry($data->industry);
        $entity->setWebsite($data->website);
        $entity->setBillingaddress($data->billingAddress);
        $entity->setLegalname($data->legalName);
        $entity->setShippingaddress($data->shippingAddress);
        $entity->setShippingpostalcode($data->shippingPostalCode);
        $entity->setAnnualrevenue($data->annualRevenue);
        $entity->setCurrency($data->currency);
        $entity->setCompanytype($data->companyType);
        $entity->setAccountsource($data->accountSource);
        $entity->setRating($data->rating);
        $entity->setCustomersince($data->customerSince);
        $entity->setPaymentterms($data->paymentTerms);
        $entity->setCreditlimit($data->creditLimit);
        $entity->setFiscalyearend($data->fiscalYearEnd);
        $entity->setSiccode($data->sicCode);
        $entity->setNaicscode($data->naicsCode);
        $entity->setOwnership($data->ownership);
        $entity->setTickersymbol($data->tickerSymbol);
        $entity->setLinkedinurl($data->linkedInUrl);
        $entity->setDonotcontact($data->doNotContact);
        $entity->setGdprconsent($data->gdprConsent);
        $entity->setCountry($data->country);
        $entity->setShippingcountry($data->shippingCountry);
        $entity->setCompanysize($data->companySize);
        $entity->setFax($data->fax);
        $entity->setCoordinates($data->coordinates);
        $entity->setEmail($data->email);
        $entity->setMobilephone($data->mobilePhone);
        $entity->setNotes($data->notes);
        $entity->setPhone($data->phone);
        $entity->setPostalcode($data->postalCode);
        $entity->setPrimarycontactname($data->primaryContactName);
        $entity->setStatus($data->status);
        $entity->setTaxid($data->taxId);
        $entity->setNextactivitydate($data->nextActivityDate);
        $entity->setLastactivitydate($data->lastActivityDate);
        $entity->setTimezone($data->timeZone);
        $entity->setStateprovince($data->stateProvince);
        $entity->setTags($data->tags);
        $entity->setLifecyclestage($data->lifecycleStage);
        $entity->setCompanydomain($data->companyDomain);
        $entity->setLeadstatus($data->leadStatus);
        $entity->setNumberofassociateddeals($data->numberOfAssociatedDeals);
        $entity->setNumberofassociatedcontacts($data->numberOfAssociatedContacts);
        $entity->setPublic($data->public);
        $entity->setShippingstateprovince($data->shippingStateProvince);

        // Map relationship properties
        // organization: ManyToOne
        if ($data->organization !== null) {
            if (is_string($data->organization)) {
                // IRI format: "/api/organizations/{id}"
                $organizationId = $this->extractIdFromIri($data->organization);
                $organization = $this->entityManager->getRepository(Organization::class)->find($organizationId);
                if (!$organization) {
                    throw new BadRequestHttpException('Organization not found: ' . $organizationId);
                }
                $entity->setOrganization($organization);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested organization creation not supported. Use IRI format.');
            }
        } else {
            throw new BadRequestHttpException('organization is required');
        }

        // accountManager: ManyToOne
        if ($data->accountManager !== null) {
            if (is_string($data->accountManager)) {
                // IRI format: "/api/users/{id}"
                $accountManagerId = $this->extractIdFromIri($data->accountManager);
                $accountManager = $this->entityManager->getRepository(User::class)->find($accountManagerId);
                if (!$accountManager) {
                    throw new BadRequestHttpException('User not found: ' . $accountManagerId);
                }
                $entity->setAccountmanager($accountManager);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested accountManager creation not supported. Use IRI format.');
            }
        }

        // shippingCity: ManyToOne
        if ($data->shippingCity !== null) {
            if (is_string($data->shippingCity)) {
                // IRI format: "/api/citys/{id}"
                $shippingCityId = $this->extractIdFromIri($data->shippingCity);
                $shippingCity = $this->entityManager->getRepository(City::class)->find($shippingCityId);
                if (!$shippingCity) {
                    throw new BadRequestHttpException('City not found: ' . $shippingCityId);
                }
                $entity->setShippingcity($shippingCity);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested shippingCity creation not supported. Use IRI format.');
            }
        }

        // parentCompany: ManyToOne
        if ($data->parentCompany !== null) {
            if (is_string($data->parentCompany)) {
                // IRI format: "/api/companys/{id}"
                $parentCompanyId = $this->extractIdFromIri($data->parentCompany);
                $parentCompany = $this->entityManager->getRepository(Company::class)->find($parentCompanyId);
                if (!$parentCompany) {
                    throw new BadRequestHttpException('Company not found: ' . $parentCompanyId);
                }
                $entity->setParentcompany($parentCompany);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested parentCompany creation not supported. Use IRI format.');
            }
        }

        // city: ManyToOne
        if ($data->city !== null) {
            if (is_string($data->city)) {
                // IRI format: "/api/citys/{id}"
                $cityId = $this->extractIdFromIri($data->city);
                $city = $this->entityManager->getRepository(City::class)->find($cityId);
                if (!$city) {
                    throw new BadRequestHttpException('City not found: ' . $cityId);
                }
                $entity->setCity($city);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested city creation not supported. Use IRI format.');
            }
        }

        // Persist and flush
        return $this->persistProcessor->process($entity, $operation, $uriVariables, $context);
    }

    /**
     * Extract UUID from IRI format
     */
    private function extractIdFromIri(string $iri): Uuid
    {
        $parts = explode('/', $iri);
        $id = end($parts);

        if (!Uuid::isValid($id)) {
            throw new BadRequestHttpException('Invalid UUID in IRI: ' . $iri);
        }

        return Uuid::fromString($id);
    }

}
