<?php

declare(strict_types=1);

namespace App\State;

use ApiPlatform\Metadata\Operation;
use ApiPlatform\State\ProcessorInterface;
use App\Entity\Company;
use App\Dto\CompanyInputDto;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\DependencyInjection\Attribute\Autowire;
use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;
use Symfony\Component\Uid\Uuid;
use App\Entity\Organization;
use App\Entity\User;
use App\Entity\City;
use App\Entity\Campaign;
use App\Entity\Contact;
use App\Entity\Deal;
use App\Entity\Talk;
use App\Entity\Brand;
use App\Entity\Product;
use App\Entity\SocialMedia;

/**
 * Company State Processor
 *
 * Handles Input DTO -> Entity transformation for POST, PUT, PATCH operations
 * with support for nested object creation and updates.
 *
 * This file is ALWAYS regenerated. DO NOT edit.
 * For custom processing logic, use Event Subscribers.
 *
 * @generated by Genmax Code Generator
 */
class CompanyProcessor implements ProcessorInterface
{
    public function __construct(
        private readonly EntityManagerInterface $entityManager,
        #[Autowire(service: 'App\MultiTenant\TenantEntityProcessor')]
        private readonly ProcessorInterface $persistProcessor
    ) {}

    /**
     * @param CompanyInputDto $data
     */
    public function process(mixed $data, Operation $operation, array $uriVariables = [], array $context = []): Company
    {
        if (!$data instanceof CompanyInputDto) {
            throw new BadRequestHttpException('Invalid input data type');
        }

        // Determine if this is a create or update operation
        $entity = null;
        $isUpdate = isset($uriVariables['id']);
        $isPatch = $operation->getMethod() === 'PATCH';

        if ($isUpdate) {
            $entity = $this->entityManager->getRepository(Company::class)->find($uriVariables['id']);
            if (!$entity) {
                throw new BadRequestHttpException('Company not found');
            }
        }

        if (!$entity) {
            $entity = new Company();
        }

        // Get original request data to check which fields were actually sent (for PATCH)
        $requestData = $context['request']->toArray() ?? [];

        // Map scalar properties from DTO to Entity
        // name
        if (!$isPatch || array_key_exists('name', $requestData)) {
            $entity->setName($data->name);
        }
        // description
        if (!$isPatch || array_key_exists('description', $requestData)) {
            $entity->setDescription($data->description);
        }
        // industry
        if (!$isPatch || array_key_exists('industry', $requestData)) {
            $entity->setIndustry($data->industry);
        }
        // website
        if (!$isPatch || array_key_exists('website', $requestData)) {
            $entity->setWebsite($data->website);
        }
        // billingAddress
        if (!$isPatch || array_key_exists('billingAddress', $requestData)) {
            $entity->setBillingaddress($data->billingAddress);
        }
        // legalName
        if (!$isPatch || array_key_exists('legalName', $requestData)) {
            $entity->setLegalname($data->legalName);
        }
        // shippingAddress
        if (!$isPatch || array_key_exists('shippingAddress', $requestData)) {
            $entity->setShippingaddress($data->shippingAddress);
        }
        // shippingPostalCode
        if (!$isPatch || array_key_exists('shippingPostalCode', $requestData)) {
            $entity->setShippingpostalcode($data->shippingPostalCode);
        }
        // annualRevenue
        if (!$isPatch || array_key_exists('annualRevenue', $requestData)) {
            $entity->setAnnualrevenue($data->annualRevenue);
        }
        // currency
        if (!$isPatch || array_key_exists('currency', $requestData)) {
            $entity->setCurrency($data->currency);
        }
        // companyType
        if (!$isPatch || array_key_exists('companyType', $requestData)) {
            $entity->setCompanytype($data->companyType);
        }
        // accountSource
        if (!$isPatch || array_key_exists('accountSource', $requestData)) {
            $entity->setAccountsource($data->accountSource);
        }
        // rating
        if (!$isPatch || array_key_exists('rating', $requestData)) {
            $entity->setRating($data->rating);
        }
        // customerSince
        if (!$isPatch || array_key_exists('customerSince', $requestData)) {
            $entity->setCustomersince($data->customerSince);
        }
        // paymentTerms
        if (!$isPatch || array_key_exists('paymentTerms', $requestData)) {
            $entity->setPaymentterms($data->paymentTerms);
        }
        // creditLimit
        if (!$isPatch || array_key_exists('creditLimit', $requestData)) {
            $entity->setCreditlimit($data->creditLimit);
        }
        // fiscalYearEnd
        if (!$isPatch || array_key_exists('fiscalYearEnd', $requestData)) {
            $entity->setFiscalyearend($data->fiscalYearEnd);
        }
        // sicCode
        if (!$isPatch || array_key_exists('sicCode', $requestData)) {
            $entity->setSiccode($data->sicCode);
        }
        // naicsCode
        if (!$isPatch || array_key_exists('naicsCode', $requestData)) {
            $entity->setNaicscode($data->naicsCode);
        }
        // ownership
        if (!$isPatch || array_key_exists('ownership', $requestData)) {
            $entity->setOwnership($data->ownership);
        }
        // tickerSymbol
        if (!$isPatch || array_key_exists('tickerSymbol', $requestData)) {
            $entity->setTickersymbol($data->tickerSymbol);
        }
        // linkedInUrl
        if (!$isPatch || array_key_exists('linkedInUrl', $requestData)) {
            $entity->setLinkedinurl($data->linkedInUrl);
        }
        // doNotContact
        if (!$isPatch || array_key_exists('doNotContact', $requestData)) {
            $entity->setDonotcontact($data->doNotContact);
        }
        // gdprConsent
        if (!$isPatch || array_key_exists('gdprConsent', $requestData)) {
            $entity->setGdprconsent($data->gdprConsent);
        }
        // country
        if (!$isPatch || array_key_exists('country', $requestData)) {
            $entity->setCountry($data->country);
        }
        // shippingCountry
        if (!$isPatch || array_key_exists('shippingCountry', $requestData)) {
            $entity->setShippingcountry($data->shippingCountry);
        }
        // companySize
        if (!$isPatch || array_key_exists('companySize', $requestData)) {
            $entity->setCompanysize($data->companySize);
        }
        // fax
        if (!$isPatch || array_key_exists('fax', $requestData)) {
            $entity->setFax($data->fax);
        }
        // coordinates
        if (!$isPatch || array_key_exists('coordinates', $requestData)) {
            $entity->setCoordinates($data->coordinates);
        }
        // email
        if (!$isPatch || array_key_exists('email', $requestData)) {
            $entity->setEmail($data->email);
        }
        // mobilePhone
        if (!$isPatch || array_key_exists('mobilePhone', $requestData)) {
            $entity->setMobilephone($data->mobilePhone);
        }
        // notes
        if (!$isPatch || array_key_exists('notes', $requestData)) {
            $entity->setNotes($data->notes);
        }
        // phone
        if (!$isPatch || array_key_exists('phone', $requestData)) {
            $entity->setPhone($data->phone);
        }
        // postalCode
        if (!$isPatch || array_key_exists('postalCode', $requestData)) {
            $entity->setPostalcode($data->postalCode);
        }
        // primaryContactName
        if (!$isPatch || array_key_exists('primaryContactName', $requestData)) {
            $entity->setPrimarycontactname($data->primaryContactName);
        }
        // status
        if (!$isPatch || array_key_exists('status', $requestData)) {
            $entity->setStatus($data->status);
        }
        // taxId
        if (!$isPatch || array_key_exists('taxId', $requestData)) {
            $entity->setTaxid($data->taxId);
        }
        // nextActivityDate
        if (!$isPatch || array_key_exists('nextActivityDate', $requestData)) {
            $entity->setNextactivitydate($data->nextActivityDate);
        }
        // lastActivityDate
        if (!$isPatch || array_key_exists('lastActivityDate', $requestData)) {
            $entity->setLastactivitydate($data->lastActivityDate);
        }
        // timeZone
        if (!$isPatch || array_key_exists('timeZone', $requestData)) {
            $entity->setTimezone($data->timeZone);
        }
        // stateProvince
        if (!$isPatch || array_key_exists('stateProvince', $requestData)) {
            $entity->setStateprovince($data->stateProvince);
        }
        // tags
        if (!$isPatch || array_key_exists('tags', $requestData)) {
            $entity->setTags($data->tags);
        }
        // lifecycleStage
        if (!$isPatch || array_key_exists('lifecycleStage', $requestData)) {
            $entity->setLifecyclestage($data->lifecycleStage);
        }
        // companyDomain
        if (!$isPatch || array_key_exists('companyDomain', $requestData)) {
            $entity->setCompanydomain($data->companyDomain);
        }
        // leadStatus
        if (!$isPatch || array_key_exists('leadStatus', $requestData)) {
            $entity->setLeadstatus($data->leadStatus);
        }
        // numberOfAssociatedDeals
        if (!$isPatch || array_key_exists('numberOfAssociatedDeals', $requestData)) {
            $entity->setNumberofassociateddeals($data->numberOfAssociatedDeals);
        }
        // numberOfAssociatedContacts
        if (!$isPatch || array_key_exists('numberOfAssociatedContacts', $requestData)) {
            $entity->setNumberofassociatedcontacts($data->numberOfAssociatedContacts);
        }
        // public
        if (!$isPatch || array_key_exists('public', $requestData)) {
            $entity->setPublic($data->public);
        }
        // shippingStateProvince
        if (!$isPatch || array_key_exists('shippingStateProvince', $requestData)) {
            $entity->setShippingstateprovince($data->shippingStateProvince);
        }

        // Map relationship properties
        // organization: ManyToOne
        // organization is auto-assigned by TenantEntityProcessor if not provided
        if (!$isPatch || array_key_exists('organization', $requestData)) {
            if ($data->organization !== null) {
                if (is_string($data->organization)) {
                    // IRI format: "/api/organizations/{id}"
                    $organizationId = $this->extractIdFromIri($data->organization);
                    $organization = $this->entityManager->getRepository(Organization::class)->find($organizationId);
                    if (!$organization) {
                        throw new BadRequestHttpException('Organization not found: ' . $organizationId);
                    }
                    $entity->setOrganization($organization);
                } else {
                    // Nested object creation (if supported)
                    throw new BadRequestHttpException('Nested organization creation not supported. Use IRI format.');
                }
            }
        }

        // accountManager: ManyToOne
        if (!$isPatch || array_key_exists('accountManager', $requestData)) {
            if ($data->accountManager !== null) {
                if (is_string($data->accountManager)) {
                    // IRI format: "/api/users/{id}"
                    $accountManagerId = $this->extractIdFromIri($data->accountManager);
                    $accountManager = $this->entityManager->getRepository(User::class)->find($accountManagerId);
                    if (!$accountManager) {
                        throw new BadRequestHttpException('User not found: ' . $accountManagerId);
                    }
                    $entity->setAccountmanager($accountManager);
                } else {
                    // Nested object creation (if supported)
                    throw new BadRequestHttpException('Nested accountManager creation not supported. Use IRI format.');
                }
            }
        }

        // shippingCity: ManyToOne
        if (!$isPatch || array_key_exists('shippingCity', $requestData)) {
            if ($data->shippingCity !== null) {
                if (is_string($data->shippingCity)) {
                    // IRI format: "/api/citys/{id}"
                    $shippingCityId = $this->extractIdFromIri($data->shippingCity);
                    $shippingCity = $this->entityManager->getRepository(City::class)->find($shippingCityId);
                    if (!$shippingCity) {
                        throw new BadRequestHttpException('City not found: ' . $shippingCityId);
                    }
                    $entity->setShippingcity($shippingCity);
                } else {
                    // Nested object creation (if supported)
                    throw new BadRequestHttpException('Nested shippingCity creation not supported. Use IRI format.');
                }
            }
        }

        // parentCompany: ManyToOne
        if (!$isPatch || array_key_exists('parentCompany', $requestData)) {
            if ($data->parentCompany !== null) {
                if (is_string($data->parentCompany)) {
                    // IRI format: "/api/companys/{id}"
                    $parentCompanyId = $this->extractIdFromIri($data->parentCompany);
                    $parentCompany = $this->entityManager->getRepository(Company::class)->find($parentCompanyId);
                    if (!$parentCompany) {
                        throw new BadRequestHttpException('Company not found: ' . $parentCompanyId);
                    }
                    $entity->setParentcompany($parentCompany);
                } else {
                    // Nested object creation (if supported)
                    throw new BadRequestHttpException('Nested parentCompany creation not supported. Use IRI format.');
                }
            }
        }

        // city: ManyToOne
        if (!$isPatch || array_key_exists('city', $requestData)) {
            if ($data->city !== null) {
                if (is_string($data->city)) {
                    // IRI format: "/api/citys/{id}"
                    $cityId = $this->extractIdFromIri($data->city);
                    $city = $this->entityManager->getRepository(City::class)->find($cityId);
                    if (!$city) {
                        throw new BadRequestHttpException('City not found: ' . $cityId);
                    }
                    $entity->setCity($city);
                } else {
                    // Nested object creation (if supported)
                    throw new BadRequestHttpException('Nested city creation not supported. Use IRI format.');
                }
            }
        }

        // Persist and flush
        return $this->persistProcessor->process($entity, $operation, $uriVariables, $context);
    }

    /**
     * Extract UUID from IRI format
     */
    private function extractIdFromIri(string $iri): Uuid
    {
        $parts = explode('/', $iri);
        $id = end($parts);

        if (!Uuid::isValid($id)) {
            throw new BadRequestHttpException('Invalid UUID in IRI: ' . $iri);
        }

        return Uuid::fromString($id);
    }

    /**
     * Map array data to entity properties using setters
     *
     * @param array $data Associative array of property => value
     * @param object $entity Target entity instance
     */
    private function mapArrayToEntity(array $data, object $entity): void
    {
        foreach ($data as $property => $value) {
            // Skip special keys like @id, @type, @context
            if (str_starts_with($property, '@')) {
                continue;
            }

            // Convert snake_case to camelCase for setter
            $setter = 'set' . str_replace('_', '', ucwords($property, '_'));

            if (method_exists($entity, $setter)) {
                // Handle different value types
                if ($value instanceof \DateTimeInterface || $value === null || is_scalar($value) || is_array($value)) {
                    $entity->$setter($value);
                } elseif (is_string($value) && str_starts_with($value, '/api/')) {
                    // Handle IRI references - resolve to actual entity
                    try {
                        $refId = $this->extractIdFromIri($value);
                        // Infer entity class from IRI pattern (e.g., /api/users/... -> User)
                        $parts = explode('/', trim($value, '/'));
                        if (count($parts) >= 3) {
                            $resourceName = $parts[1]; // e.g., "users"
                            $className = 'App\Entity\\' . ucfirst(rtrim($resourceName, 's'));
                            if (class_exists($className)) {
                                $refEntity = $this->entityManager->getRepository($className)->find($refId);
                                if ($refEntity) {
                                    $entity->$setter($refEntity);
                                }
                            }
                        }
                    } catch (\Exception $e) {
                        // Skip if IRI resolution fails
                        continue;
                    }
                }
            }
        }
    }
}
