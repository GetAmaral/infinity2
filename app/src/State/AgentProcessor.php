<?php

declare(strict_types=1);

namespace App\State;

use ApiPlatform\Metadata\Operation;
use ApiPlatform\State\ProcessorInterface;
use App\Entity\Agent;
use App\Dto\AgentInputDto;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\DependencyInjection\Attribute\Autowire;
use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;
use Symfony\Component\Uid\Uuid;
use App\Entity\Organization;
use App\Entity\User;
use App\Entity\AgentType;
use App\Entity\Talk;

/**
 * Agent State Processor
 *
 * Handles Input DTO -> Entity transformation for POST, PUT, PATCH operations
 * with support for nested object creation and updates.
 *
 * This file is ALWAYS regenerated. DO NOT edit.
 * For custom processing logic, use Event Subscribers.
 *
 * @generated by Genmax Code Generator
 */
class AgentProcessor implements ProcessorInterface
{
    public function __construct(
        private readonly EntityManagerInterface $entityManager,
        #[Autowire(service: 'App\MultiTenant\TenantEntityProcessor')]
        private readonly ProcessorInterface $persistProcessor
    ) {}

    /**
     * @param AgentInputDto $data
     */
    public function process(mixed $data, Operation $operation, array $uriVariables = [], array $context = []): Agent
    {
        if (!$data instanceof AgentInputDto) {
            throw new BadRequestHttpException('Invalid input data type');
        }

        // Determine if this is a create or update operation
        $entity = null;
        if (isset($uriVariables['id'])) {
            $entity = $this->entityManager->getRepository(Agent::class)->find($uriVariables['id']);
            if (!$entity) {
                throw new BadRequestHttpException('Agent not found');
            }
        }

        if (!$entity) {
            $entity = new Agent();
        }

        // Map scalar properties from DTO to Entity
        $entity->setName($data->name);
        $entity->setPhone($data->phone);
        $entity->setTitle($data->title);
        $entity->setActive($data->active);
        $entity->setAvailable($data->available);
        $entity->setTerritory($data->territory);
        $entity->setQuota($data->quota);
        $entity->setCommissionrate($data->commissionRate);
        $entity->setStartdate($data->startDate);
        $entity->setEnddate($data->endDate);
        $entity->setSpecialization($data->specialization);
        $entity->setLanguages($data->languages);
        $entity->setCertifications($data->certifications);
        $entity->setTotalsales($data->totalSales);
        $entity->setCurrentmonthsales($data->currentMonthSales);
        $entity->setConversionrate($data->conversionRate);
        $entity->setCustomersatisfactionscore($data->customerSatisfactionScore);
        $entity->setMaxconcurrentcustomers($data->maxConcurrentCustomers);
        $entity->setCurrentcustomercount($data->currentCustomerCount);
        $entity->setAverageresponsetime($data->averageResponseTime);
        $entity->setSkills($data->skills);
        $entity->setPrompt($data->prompt);

        // Map relationship properties
        // organization: ManyToOne
        if ($data->organization !== null) {
            if (is_string($data->organization)) {
                // IRI format: "/api/organizations/{id}"
                $organizationId = $this->extractIdFromIri($data->organization);
                $organization = $this->entityManager->getRepository(Organization::class)->find($organizationId);
                if (!$organization) {
                    throw new BadRequestHttpException('Organization not found: ' . $organizationId);
                }
                $entity->setOrganization($organization);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested organization creation not supported. Use IRI format.');
            }
        } else {
            throw new BadRequestHttpException('organization is required');
        }

        // user: ManyToOne
        if ($data->user !== null) {
            if (is_string($data->user)) {
                // IRI format: "/api/users/{id}"
                $userId = $this->extractIdFromIri($data->user);
                $user = $this->entityManager->getRepository(User::class)->find($userId);
                if (!$user) {
                    throw new BadRequestHttpException('User not found: ' . $userId);
                }
                $entity->setUser($user);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested user creation not supported. Use IRI format.');
            }
        }

        // agentType: ManyToOne
        if ($data->agentType !== null) {
            if (is_string($data->agentType)) {
                // IRI format: "/api/agenttypes/{id}"
                $agentTypeId = $this->extractIdFromIri($data->agentType);
                $agentType = $this->entityManager->getRepository(AgentType::class)->find($agentTypeId);
                if (!$agentType) {
                    throw new BadRequestHttpException('AgentType not found: ' . $agentTypeId);
                }
                $entity->setAgenttype($agentType);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested agentType creation not supported. Use IRI format.');
            }
        }

        // Persist and flush
        return $this->persistProcessor->process($entity, $operation, $uriVariables, $context);
    }

    /**
     * Extract UUID from IRI format
     */
    private function extractIdFromIri(string $iri): Uuid
    {
        $parts = explode('/', $iri);
        $id = end($parts);

        if (!Uuid::isValid($id)) {
            throw new BadRequestHttpException('Invalid UUID in IRI: ' . $iri);
        }

        return Uuid::fromString($id);
    }

}
