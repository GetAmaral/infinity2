<?php

declare(strict_types=1);

namespace App\State;

use ApiPlatform\Metadata\Operation;
use ApiPlatform\State\ProcessorInterface;
use App\Entity\CourseLecture;
use App\Dto\CourseLectureInputDto;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\DependencyInjection\Attribute\Autowire;
use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;
use Symfony\Component\Uid\Uuid;
use App\Entity\CourseModule;
use App\Entity\StudentLecture;
use App\Entity\StudentCourse;
use App\Entity\Organization;

/**
 * CourseLecture State Processor
 *
 * Handles Input DTO -> Entity transformation for POST, PUT, PATCH operations
 * with support for nested object creation and updates.
 *
 * This file is ALWAYS regenerated. DO NOT edit.
 * For custom processing logic, use Event Subscribers.
 *
 * @generated by Genmax Code Generator
 */
class CourseLectureProcessor implements ProcessorInterface
{
    public function __construct(
        private readonly EntityManagerInterface $entityManager,
        #[Autowire(service: 'App\MultiTenant\TenantEntityProcessor')]
        private readonly ProcessorInterface $persistProcessor
    ) {}

    /**
     * @param CourseLectureInputDto $data
     */
    public function process(mixed $data, Operation $operation, array $uriVariables = [], array $context = []): CourseLecture
    {
        if (!$data instanceof CourseLectureInputDto) {
            throw new BadRequestHttpException('Invalid input data type');
        }

        // Determine if this is a create or update operation
        $entity = null;
        if (isset($uriVariables['id'])) {
            $entity = $this->entityManager->getRepository(CourseLecture::class)->find($uriVariables['id']);
            if (!$entity) {
                throw new BadRequestHttpException('CourseLecture not found');
            }
        }

        if (!$entity) {
            $entity = new CourseLecture();
        }

        // Map scalar properties from DTO to Entity
        $entity->setName($data->name);
        $entity->setDescription($data->description);
        $entity->setVideofilename($data->videoFileName);
        $entity->setVideopath($data->videoPath);
        $entity->setProcessingstatus($data->processingStatus);
        $entity->setProcessingstep($data->processingStep);
        $entity->setProcessingpercentage($data->processingPercentage);
        $entity->setProcessingerror($data->processingError);
        $entity->setProcessedat($data->processedAt);
        $entity->setVieworder($data->viewOrder);
        $entity->setLengthseconds($data->lengthSeconds);
        $entity->setActive($data->active);
        $entity->setPublished($data->published);
        $entity->setFree($data->free);
        $entity->setPublishedat($data->publishedAt);
        $entity->setVideourl($data->videoUrl);
        $entity->setVideotype($data->videoType);
        $entity->setVideoresolution($data->videoResolution);
        $entity->setVideosizebytes($data->videoSizeBytes);
        $entity->setTranscript($data->transcript);
        $entity->setSubtitleurl($data->subtitleUrl);
        $entity->setSubtitlelanguage($data->subtitleLanguage);
        $entity->setAttachments($data->attachments);
        $entity->setExternallinks($data->externalLinks);
        $entity->setLearningobjectives($data->learningObjectives);
        $entity->setPrerequisites($data->prerequisites);
        $entity->setViewcount($data->viewCount);
        $entity->setCompletioncount($data->completionCount);
        $entity->setAveragewatchpercentage($data->averageWatchPercentage);
        $entity->setRating($data->rating);
        $entity->setRatingcount($data->ratingCount);
        $entity->setDurationseconds($data->durationSeconds);
        $entity->setDifficultylevel($data->difficultyLevel);
        $entity->setTags($data->tags);
        $entity->setSkillscovered($data->skillsCovered);
        $entity->setPointsvalue($data->pointsValue);
        $entity->setBadges($data->badges);

        // Map relationship properties
        // courseModule: ManyToOne
        if ($data->courseModule !== null) {
            if (is_string($data->courseModule)) {
                // IRI format: "/api/coursemodules/{id}"
                $courseModuleId = $this->extractIdFromIri($data->courseModule);
                $courseModule = $this->entityManager->getRepository(CourseModule::class)->find($courseModuleId);
                if (!$courseModule) {
                    throw new BadRequestHttpException('CourseModule not found: ' . $courseModuleId);
                }
                $entity->setCoursemodule($courseModule);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested courseModule creation not supported. Use IRI format.');
            }
        } else {
            throw new BadRequestHttpException('courseModule is required');
        }

        // organization: ManyToOne
        if ($data->organization !== null) {
            if (is_string($data->organization)) {
                // IRI format: "/api/organizations/{id}"
                $organizationId = $this->extractIdFromIri($data->organization);
                $organization = $this->entityManager->getRepository(Organization::class)->find($organizationId);
                if (!$organization) {
                    throw new BadRequestHttpException('Organization not found: ' . $organizationId);
                }
                $entity->setOrganization($organization);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested organization creation not supported. Use IRI format.');
            }
        } else {
            throw new BadRequestHttpException('organization is required');
        }

        // Persist and flush
        return $this->persistProcessor->process($entity, $operation, $uriVariables, $context);
    }

    /**
     * Extract UUID from IRI format
     */
    private function extractIdFromIri(string $iri): Uuid
    {
        $parts = explode('/', $iri);
        $id = end($parts);

        if (!Uuid::isValid($id)) {
            throw new BadRequestHttpException('Invalid UUID in IRI: ' . $iri);
        }

        return Uuid::fromString($id);
    }

}
