<?php

declare(strict_types=1);

namespace App\State;

use ApiPlatform\Metadata\Operation;
use ApiPlatform\State\ProcessorInterface;
use App\Entity\Product;
use App\Dto\ProductInputDto;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\DependencyInjection\Attribute\Autowire;
use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;
use Symfony\Component\Uid\Uuid;
use App\Entity\Organization;
use App\Entity\Attachment;
use App\Entity\ProductBatch;
use App\Entity\BillingFrequency;
use App\Entity\Brand;
use App\Entity\ProductCategory;
use App\Entity\Deal;
use App\Entity\Company;
use App\Entity\ProductLine;
use App\Entity\Tag;
use App\Entity\TaxCategory;

/**
 * Product State Processor
 *
 * Handles Input DTO -> Entity transformation for POST, PUT, PATCH operations
 * with support for nested object creation and updates.
 *
 * This file is ALWAYS regenerated. DO NOT edit.
 * For custom processing logic, use Event Subscribers.
 *
 * @generated by Genmax Code Generator
 */
class ProductProcessor implements ProcessorInterface
{
    public function __construct(
        private readonly EntityManagerInterface $entityManager,
        #[Autowire(service: 'App\MultiTenant\TenantEntityProcessor')]
        private readonly ProcessorInterface $persistProcessor
    ) {}

    /**
     * @param ProductInputDto $data
     */
    public function process(mixed $data, Operation $operation, array $uriVariables = [], array $context = []): Product
    {
        if (!$data instanceof ProductInputDto) {
            throw new BadRequestHttpException('Invalid input data type');
        }

        // Determine if this is a create or update operation
        $entity = null;
        if (isset($uriVariables['id'])) {
            $entity = $this->entityManager->getRepository(Product::class)->find($uriVariables['id']);
            if (!$entity) {
                throw new BadRequestHttpException('Product not found');
            }
        }

        if (!$entity) {
            $entity = new Product();
        }

        // Map scalar properties from DTO to Entity
        $entity->setSku($data->sku);
        $entity->setName($data->name);
        $entity->setDescription($data->description);
        $entity->setGtin($data->gtin);
        $entity->setUpc($data->upc);
        $entity->setEan($data->ean);
        $entity->setMpn($data->mpn);
        $entity->setBarcode($data->barcode);
        $entity->setAvailable($data->available);
        $entity->setPrice($data->price);
        $entity->setCompareatprice($data->compareAtPrice);
        $entity->setStatus($data->status);
        $entity->setReorderlevel($data->reorderLevel);
        $entity->setReorderquantity($data->reorderQuantity);
        $entity->setLeadtime($data->leadTime);
        $entity->setActive($data->active);
        $entity->setMinorderquantity($data->minOrderQuantity);
        $entity->setMaxorderquantity($data->maxOrderQuantity);
        $entity->setAvailablequantity($data->availableQuantity);
        $entity->setCancellationfee($data->cancellationFee);
        $entity->setCommissionamount($data->commissionAmount);
        $entity->setCommissionrate($data->commissionRate);
        $entity->setCostprice($data->costPrice);
        $entity->setCurrency($data->currency);
        $entity->setCustomfields($data->customFields);
        $entity->setDimensions($data->dimensions);
        $entity->setDiscountamount($data->discountAmount);
        $entity->setDiscountpercentage($data->discountPercentage);
        $entity->setEndoflifedate($data->endOfLifeDate);
        $entity->setExchangerate($data->exchangeRate);
        $entity->setFeatures($data->features);
        $entity->setLaunchdate($data->launchDate);
        $entity->setLifecyclestage($data->lifecycleStage);
        $entity->setListprice($data->listPrice);
        $entity->setMarginpercentage($data->marginPercentage);
        $entity->setMaximumdiscount($data->maximumDiscount);
        $entity->setMinimumprice($data->minimumPrice);
        $entity->setProductcode($data->productCode);
        $entity->setProducttype($data->productType);
        $entity->setPurchasable($data->purchasable);
        $entity->setRecurringfee($data->recurringFee);
        $entity->setRequiresapproval($data->requiresApproval);
        $entity->setReservedquantity($data->reservedQuantity);
        $entity->setSellable($data->sellable);
        $entity->setSetupfee($data->setupFee);
        $entity->setShortdescription($data->shortDescription);
        $entity->setSpecifications($data->specifications);
        $entity->setStockquantity($data->stockQuantity);
        $entity->setSubscription($data->subscription);
        $entity->setSubscriptionperiod($data->subscriptionPeriod);
        $entity->setSupportperiod($data->supportPeriod);
        $entity->setUnitofmeasure($data->unitOfMeasure);
        $entity->setWarrantyperiod($data->warrantyPeriod);
        $entity->setWeight($data->weight);

        // Map relationship properties
        // organization: ManyToOne
        if ($data->organization !== null) {
            if (is_string($data->organization)) {
                // IRI format: "/api/organizations/{id}"
                $organizationId = $this->extractIdFromIri($data->organization);
                $organization = $this->entityManager->getRepository(Organization::class)->find($organizationId);
                if (!$organization) {
                    throw new BadRequestHttpException('Organization not found: ' . $organizationId);
                }
                $entity->setOrganization($organization);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested organization creation not supported. Use IRI format.');
            }
        } else {
            throw new BadRequestHttpException('organization is required');
        }

        // billingFrequency: ManyToOne
        if ($data->billingFrequency !== null) {
            if (is_string($data->billingFrequency)) {
                // IRI format: "/api/billingfrequencys/{id}"
                $billingFrequencyId = $this->extractIdFromIri($data->billingFrequency);
                $billingFrequency = $this->entityManager->getRepository(BillingFrequency::class)->find($billingFrequencyId);
                if (!$billingFrequency) {
                    throw new BadRequestHttpException('BillingFrequency not found: ' . $billingFrequencyId);
                }
                $entity->setBillingfrequency($billingFrequency);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested billingFrequency creation not supported. Use IRI format.');
            }
        }

        // brand: ManyToOne
        if ($data->brand !== null) {
            if (is_string($data->brand)) {
                // IRI format: "/api/brands/{id}"
                $brandId = $this->extractIdFromIri($data->brand);
                $brand = $this->entityManager->getRepository(Brand::class)->find($brandId);
                if (!$brand) {
                    throw new BadRequestHttpException('Brand not found: ' . $brandId);
                }
                $entity->setBrand($brand);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested brand creation not supported. Use IRI format.');
            }
        }

        // category: ManyToOne
        if ($data->category !== null) {
            if (is_string($data->category)) {
                // IRI format: "/api/productcategorys/{id}"
                $categoryId = $this->extractIdFromIri($data->category);
                $category = $this->entityManager->getRepository(ProductCategory::class)->find($categoryId);
                if (!$category) {
                    throw new BadRequestHttpException('ProductCategory not found: ' . $categoryId);
                }
                $entity->setCategory($category);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested category creation not supported. Use IRI format.');
            }
        }

        // productLine: ManyToOne
        if ($data->productLine !== null) {
            if (is_string($data->productLine)) {
                // IRI format: "/api/productlines/{id}"
                $productLineId = $this->extractIdFromIri($data->productLine);
                $productLine = $this->entityManager->getRepository(ProductLine::class)->find($productLineId);
                if (!$productLine) {
                    throw new BadRequestHttpException('ProductLine not found: ' . $productLineId);
                }
                $entity->setProductline($productLine);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested productLine creation not supported. Use IRI format.');
            }
        }

        // taxCategory: ManyToOne
        if ($data->taxCategory !== null) {
            if (is_string($data->taxCategory)) {
                // IRI format: "/api/taxcategorys/{id}"
                $taxCategoryId = $this->extractIdFromIri($data->taxCategory);
                $taxCategory = $this->entityManager->getRepository(TaxCategory::class)->find($taxCategoryId);
                if (!$taxCategory) {
                    throw new BadRequestHttpException('TaxCategory not found: ' . $taxCategoryId);
                }
                $entity->setTaxcategory($taxCategory);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested taxCategory creation not supported. Use IRI format.');
            }
        }

        // Persist and flush
        return $this->persistProcessor->process($entity, $operation, $uriVariables, $context);
    }

    /**
     * Extract UUID from IRI format
     */
    private function extractIdFromIri(string $iri): Uuid
    {
        $parts = explode('/', $iri);
        $id = end($parts);

        if (!Uuid::isValid($id)) {
            throw new BadRequestHttpException('Invalid UUID in IRI: ' . $iri);
        }

        return Uuid::fromString($id);
    }

}
