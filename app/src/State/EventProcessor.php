<?php

declare(strict_types=1);

namespace App\State;

use ApiPlatform\Metadata\Operation;
use ApiPlatform\State\ProcessorInterface;
use App\Entity\Event;
use App\Dto\EventInputDto;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\DependencyInjection\Attribute\Autowire;
use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;
use Symfony\Component\Uid\Uuid;
use App\Entity\Organization;
use App\Entity\Calendar;
use App\Entity\User;
use App\Entity\EventAttendee;
use App\Entity\EventCategory;
use App\Entity\Attachment;
use App\Entity\Reminder;
use App\Entity\EventResourceBooking;
use App\Entity\WorkingHour;
use App\Entity\Notification;
use App\Entity\MeetingData;
use App\Entity\Holiday;
use App\Entity\Contact;
use App\Entity\Company;
use App\Entity\Deal;

/**
 * Event State Processor
 *
 * Handles Input DTO -> Entity transformation for POST, PUT, PATCH operations
 * with support for nested object creation and updates.
 *
 * This file is ALWAYS regenerated. DO NOT edit.
 * For custom processing logic, use Event Subscribers.
 *
 * @generated by Genmax Code Generator
 */
class EventProcessor implements ProcessorInterface
{
    public function __construct(
        private readonly EntityManagerInterface $entityManager,
        #[Autowire(service: 'App\MultiTenant\TenantEntityProcessor')]
        private readonly ProcessorInterface $persistProcessor
    ) {}

    /**
     * @param EventInputDto $data
     */
    public function process(mixed $data, Operation $operation, array $uriVariables = [], array $context = []): Event
    {
        if (!$data instanceof EventInputDto) {
            throw new BadRequestHttpException('Invalid input data type');
        }

        // Determine if this is a create or update operation
        $entity = null;
        if (isset($uriVariables['id'])) {
            $entity = $this->entityManager->getRepository(Event::class)->find($uriVariables['id']);
            if (!$entity) {
                throw new BadRequestHttpException('Event not found');
            }
        }

        if (!$entity) {
            $entity = new Event();
        }

        // Map scalar properties from DTO to Entity
        $entity->setName($data->name);
        $entity->setStarttime($data->startTime);
        $entity->setDescription($data->description);
        $entity->setEndtime($data->endTime);
        $entity->setAllday($data->allDay);
        $entity->setLocation($data->location);
        $entity->setMeetingurl($data->meetingUrl);
        $entity->setOriginalstarttime($data->originalStartTime);
        $entity->setSequence($data->sequence);
        $entity->setConferencedata($data->conferenceData);
        $entity->setExtendedproperties($data->extendedProperties);
        $entity->setSource($data->source);
        $entity->setSubject($data->subject);
        $entity->setStatus($data->status);
        $entity->setShowas($data->showAs);
        $entity->setEventtype($data->eventType);
        $entity->setImportance($data->importance);
        $entity->setSensitivity($data->sensitivity);
        $entity->setTimezone($data->timezone);
        $entity->setStarttimezone($data->startTimezone);
        $entity->setEndtimezone($data->endTimezone);
        $entity->setDuration($data->duration);
        $entity->setLocationdisplayname($data->locationDisplayName);
        $entity->setLocationurl($data->locationUrl);
        $entity->setLocationcoordinates($data->locationCoordinates);
        $entity->setOnlinemeeting($data->onlineMeeting);
        $entity->setOnlinemeetingprovider($data->onlineMeetingProvider);
        $entity->setMeetingid($data->meetingId);
        $entity->setMeetingpassword($data->meetingPassword);
        $entity->setRecurring($data->recurring);
        $entity->setRecurrencerule($data->recurrenceRule);
        $entity->setRecurrenceexceptions($data->recurrenceExceptions);
        $entity->setCancelled($data->cancelled);
        $entity->setDraft($data->draft);
        $entity->setResponsestatus($data->responseStatus);
        $entity->setResponserequested($data->responseRequested);
        $entity->setAllownewtimeproposals($data->allowNewTimeProposals);
        $entity->setHideattendees($data->hideAttendees);
        $entity->setGuestscanmodify($data->guestsCanModify);
        $entity->setGuestscaninviteothers($data->guestsCanInviteOthers);
        $entity->setGuestscanseeotherguests($data->guestsCanSeeOtherGuests);
        $entity->setTransparency($data->transparency);
        $entity->setReminderminutes($data->reminderMinutes);
        $entity->setExternalcalendarid($data->externalCalendarId);
        $entity->setExternalcalendarprovider($data->externalCalendarProvider);
        $entity->setIcaluid($data->icalUid);
        $entity->setWeblink($data->webLink);
        $entity->setHtmllink($data->htmlLink);
        $entity->setColorid($data->colorId);
        $entity->setLocked($data->locked);

        // Map relationship properties
        // organization: ManyToOne
        if ($data->organization !== null) {
            if (is_string($data->organization)) {
                // IRI format: "/api/organizations/{id}"
                $organizationId = $this->extractIdFromIri($data->organization);
                $organization = $this->entityManager->getRepository(Organization::class)->find($organizationId);
                if (!$organization) {
                    throw new BadRequestHttpException('Organization not found: ' . $organizationId);
                }
                $entity->setOrganization($organization);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested organization creation not supported. Use IRI format.');
            }
        } else {
            throw new BadRequestHttpException('organization is required');
        }

        // calendar: ManyToOne
        if ($data->calendar !== null) {
            if (is_string($data->calendar)) {
                // IRI format: "/api/calendars/{id}"
                $calendarId = $this->extractIdFromIri($data->calendar);
                $calendar = $this->entityManager->getRepository(Calendar::class)->find($calendarId);
                if (!$calendar) {
                    throw new BadRequestHttpException('Calendar not found: ' . $calendarId);
                }
                $entity->setCalendar($calendar);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested calendar creation not supported. Use IRI format.');
            }
        }

        // organizer: ManyToOne
        if ($data->organizer !== null) {
            if (is_string($data->organizer)) {
                // IRI format: "/api/users/{id}"
                $organizerId = $this->extractIdFromIri($data->organizer);
                $organizer = $this->entityManager->getRepository(User::class)->find($organizerId);
                if (!$organizer) {
                    throw new BadRequestHttpException('User not found: ' . $organizerId);
                }
                $entity->setOrganizer($organizer);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested organizer creation not supported. Use IRI format.');
            }
        }

        // parentEvent: ManyToOne
        if ($data->parentEvent !== null) {
            if (is_string($data->parentEvent)) {
                // IRI format: "/api/events/{id}"
                $parentEventId = $this->extractIdFromIri($data->parentEvent);
                $parentEvent = $this->entityManager->getRepository(Event::class)->find($parentEventId);
                if (!$parentEvent) {
                    throw new BadRequestHttpException('Event not found: ' . $parentEventId);
                }
                $entity->setParentevent($parentEvent);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested parentEvent creation not supported. Use IRI format.');
            }
        }

        // assignedTo: ManyToOne
        if ($data->assignedTo !== null) {
            if (is_string($data->assignedTo)) {
                // IRI format: "/api/users/{id}"
                $assignedToId = $this->extractIdFromIri($data->assignedTo);
                $assignedTo = $this->entityManager->getRepository(User::class)->find($assignedToId);
                if (!$assignedTo) {
                    throw new BadRequestHttpException('User not found: ' . $assignedToId);
                }
                $entity->setAssignedto($assignedTo);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested assignedTo creation not supported. Use IRI format.');
            }
        }

        // contact: ManyToOne
        if ($data->contact !== null) {
            if (is_string($data->contact)) {
                // IRI format: "/api/contacts/{id}"
                $contactId = $this->extractIdFromIri($data->contact);
                $contact = $this->entityManager->getRepository(Contact::class)->find($contactId);
                if (!$contact) {
                    throw new BadRequestHttpException('Contact not found: ' . $contactId);
                }
                $entity->setContact($contact);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested contact creation not supported. Use IRI format.');
            }
        }

        // company: ManyToOne
        if ($data->company !== null) {
            if (is_string($data->company)) {
                // IRI format: "/api/companys/{id}"
                $companyId = $this->extractIdFromIri($data->company);
                $company = $this->entityManager->getRepository(Company::class)->find($companyId);
                if (!$company) {
                    throw new BadRequestHttpException('Company not found: ' . $companyId);
                }
                $entity->setCompany($company);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested company creation not supported. Use IRI format.');
            }
        }

        // deal: ManyToOne
        if ($data->deal !== null) {
            if (is_string($data->deal)) {
                // IRI format: "/api/deals/{id}"
                $dealId = $this->extractIdFromIri($data->deal);
                $deal = $this->entityManager->getRepository(Deal::class)->find($dealId);
                if (!$deal) {
                    throw new BadRequestHttpException('Deal not found: ' . $dealId);
                }
                $entity->setDeal($deal);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested deal creation not supported. Use IRI format.');
            }
        }

        // Persist and flush
        return $this->persistProcessor->process($entity, $operation, $uriVariables, $context);
    }

    /**
     * Extract UUID from IRI format
     */
    private function extractIdFromIri(string $iri): Uuid
    {
        $parts = explode('/', $iri);
        $id = end($parts);

        if (!Uuid::isValid($id)) {
            throw new BadRequestHttpException('Invalid UUID in IRI: ' . $iri);
        }

        return Uuid::fromString($id);
    }

}
