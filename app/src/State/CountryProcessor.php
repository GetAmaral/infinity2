<?php

declare(strict_types=1);

namespace App\State;

use ApiPlatform\Metadata\Operation;
use ApiPlatform\State\ProcessorInterface;
use App\Entity\Country;
use App\Dto\CountryInputDto;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\DependencyInjection\Attribute\Autowire;
use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;
use Symfony\Component\Uid\Uuid;
use App\Entity\HolidayTemplate;

/**
 * Country State Processor
 *
 * Handles Input DTO -> Entity transformation for POST, PUT, PATCH operations
 * with support for nested object creation and updates.
 *
 * This file is ALWAYS regenerated. DO NOT edit.
 * For custom processing logic, use Event Subscribers.
 *
 * @generated by Genmax Code Generator
 */
class CountryProcessor implements ProcessorInterface
{
    public function __construct(
        private readonly EntityManagerInterface $entityManager,
        #[Autowire(service: 'App\MultiTenant\TenantEntityProcessor')]
        private readonly ProcessorInterface $persistProcessor
    ) {}

    /**
     * @param CountryInputDto $data
     */
    public function process(mixed $data, Operation $operation, array $uriVariables = [], array $context = []): Country
    {
        if (!$data instanceof CountryInputDto) {
            throw new BadRequestHttpException('Invalid input data type');
        }

        // Determine if this is a create or update operation
        $entity = null;
        if (isset($uriVariables['id'])) {
            $entity = $this->entityManager->getRepository(Country::class)->find($uriVariables['id']);
            if (!$entity) {
                throw new BadRequestHttpException('Country not found');
            }
        }

        if (!$entity) {
            $entity = new Country();
        }

        // Map scalar properties from DTO to Entity
        $entity->setIso2($data->iso2);
        $entity->setName($data->name);
        $entity->setIso3($data->iso3);
        $entity->setNumericcode($data->numericCode);
        $entity->setCurrencycode($data->currencyCode);
        $entity->setPhonecode($data->phoneCode);
        $entity->setContinent($data->continent);
        $entity->setCapital($data->capital);
        $entity->setCurrencysymbol($data->currencySymbol);
        $entity->setEumember($data->euMember);
        $entity->setRegion($data->region);
        $entity->setNativename($data->nativeName);
        $entity->setOfficialname($data->officialName);
        $entity->setActive($data->active);
        $entity->setSubregion($data->subregion);
        $entity->setLatitude($data->latitude);
        $entity->setLongitude($data->longitude);
        $entity->setTimezones($data->timezones);
        $entity->setLanguages($data->languages);
        $entity->setTld($data->tld);
        $entity->setNationalityname($data->nationalityName);
        $entity->setAvailableforshipping($data->availableForShipping);
        $entity->setAvailableforbilling($data->availableForBilling);
        $entity->setSchengenmember($data->schengenMember);
        $entity->setOecdmember($data->oecdMember);
        $entity->setDataresidencyrequired($data->dataResidencyRequired);
        $entity->setPostalcodeformat($data->postalCodeFormat);
        $entity->setPostalcoderequired($data->postalCodeRequired);
        $entity->setAddressformat($data->addressFormat);
        $entity->setTaxidrequired($data->taxIdRequired);
        $entity->setPopulation($data->population);
        $entity->setArea($data->area);
        $entity->setUnmembersince($data->unMemberSince);
        $entity->setFlagemoji($data->flagEmoji);
        $entity->setFlagsvgurl($data->flagSvgUrl);

        // Map relationship properties
        // Persist and flush
        return $this->persistProcessor->process($entity, $operation, $uriVariables, $context);
    }

    /**
     * Extract UUID from IRI format
     */
    private function extractIdFromIri(string $iri): Uuid
    {
        $parts = explode('/', $iri);
        $id = end($parts);

        if (!Uuid::isValid($id)) {
            throw new BadRequestHttpException('Invalid UUID in IRI: ' . $iri);
        }

        return Uuid::fromString($id);
    }

}
