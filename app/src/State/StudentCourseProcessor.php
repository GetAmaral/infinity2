<?php

declare(strict_types=1);

namespace App\State;

use ApiPlatform\Metadata\Operation;
use ApiPlatform\State\ProcessorInterface;
use App\Entity\StudentCourse;
use App\Dto\StudentCourseInputDto;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\DependencyInjection\Attribute\Autowire;
use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;
use Symfony\Component\Uid\Uuid;
use App\Entity\Organization;
use App\Entity\User;
use App\Entity\Course;
use App\Entity\CourseLecture;
use App\Entity\StudentLecture;

/**
 * StudentCourse State Processor
 *
 * Handles Input DTO -> Entity transformation for POST, PUT, PATCH operations
 * with support for nested object creation and updates.
 *
 * This file is ALWAYS regenerated. DO NOT edit.
 * For custom processing logic, use Event Subscribers.
 *
 * @generated by Genmax Code Generator
 */
class StudentCourseProcessor implements ProcessorInterface
{
    public function __construct(
        private readonly EntityManagerInterface $entityManager,
        #[Autowire(service: 'App\MultiTenant\TenantEntityProcessor')]
        private readonly ProcessorInterface $persistProcessor
    ) {}

    /**
     * @param StudentCourseInputDto $data
     */
    public function process(mixed $data, Operation $operation, array $uriVariables = [], array $context = []): StudentCourse
    {
        if (!$data instanceof StudentCourseInputDto) {
            throw new BadRequestHttpException('Invalid input data type');
        }

        // Determine if this is a create or update operation
        $entity = null;
        if (isset($uriVariables['id'])) {
            $entity = $this->entityManager->getRepository(StudentCourse::class)->find($uriVariables['id']);
            if (!$entity) {
                throw new BadRequestHttpException('StudentCourse not found');
            }
        }

        if (!$entity) {
            $entity = new StudentCourse();
        }

        // Map scalar properties from DTO to Entity
        $entity->setEnrolledat($data->enrolledAt);
        $entity->setStartdate($data->startDate);
        $entity->setLastdate($data->lastDate);
        $entity->setProgressseconds($data->progressSeconds);
        $entity->setProgresspercentage($data->progressPercentage);
        $entity->setCompletedat($data->completedAt);
        $entity->setActive($data->active);

        // Map relationship properties
        // organization: ManyToOne
        if ($data->organization !== null) {
            if (is_string($data->organization)) {
                // IRI format: "/api/organizations/{id}"
                $organizationId = $this->extractIdFromIri($data->organization);
                $organization = $this->entityManager->getRepository(Organization::class)->find($organizationId);
                if (!$organization) {
                    throw new BadRequestHttpException('Organization not found: ' . $organizationId);
                }
                $entity->setOrganization($organization);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested organization creation not supported. Use IRI format.');
            }
        } else {
            throw new BadRequestHttpException('organization is required');
        }

        // student: ManyToOne
        if ($data->student !== null) {
            if (is_string($data->student)) {
                // IRI format: "/api/users/{id}"
                $studentId = $this->extractIdFromIri($data->student);
                $student = $this->entityManager->getRepository(User::class)->find($studentId);
                if (!$student) {
                    throw new BadRequestHttpException('User not found: ' . $studentId);
                }
                $entity->setStudent($student);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested student creation not supported. Use IRI format.');
            }
        } else {
            throw new BadRequestHttpException('student is required');
        }

        // course: ManyToOne
        if ($data->course !== null) {
            if (is_string($data->course)) {
                // IRI format: "/api/courses/{id}"
                $courseId = $this->extractIdFromIri($data->course);
                $course = $this->entityManager->getRepository(Course::class)->find($courseId);
                if (!$course) {
                    throw new BadRequestHttpException('Course not found: ' . $courseId);
                }
                $entity->setCourse($course);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested course creation not supported. Use IRI format.');
            }
        } else {
            throw new BadRequestHttpException('course is required');
        }

        // currentLecture: ManyToOne
        if ($data->currentLecture !== null) {
            if (is_string($data->currentLecture)) {
                // IRI format: "/api/courselectures/{id}"
                $currentLectureId = $this->extractIdFromIri($data->currentLecture);
                $currentLecture = $this->entityManager->getRepository(CourseLecture::class)->find($currentLectureId);
                if (!$currentLecture) {
                    throw new BadRequestHttpException('CourseLecture not found: ' . $currentLectureId);
                }
                $entity->setCurrentlecture($currentLecture);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested currentLecture creation not supported. Use IRI format.');
            }
        }

        // Persist and flush
        return $this->persistProcessor->process($entity, $operation, $uriVariables, $context);
    }

    /**
     * Extract UUID from IRI format
     */
    private function extractIdFromIri(string $iri): Uuid
    {
        $parts = explode('/', $iri);
        $id = end($parts);

        if (!Uuid::isValid($id)) {
            throw new BadRequestHttpException('Invalid UUID in IRI: ' . $iri);
        }

        return Uuid::fromString($id);
    }

}
