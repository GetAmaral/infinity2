<?php

declare(strict_types=1);

namespace App\State;

use ApiPlatform\Metadata\Operation;
use ApiPlatform\State\ProcessorInterface;
use App\Entity\TalkMessage;
use App\Dto\TalkMessageInputDto;
use App\Service\Utils;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\DependencyInjection\Attribute\Autowire;
use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;
use Symfony\Component\Uid\Uuid;
use App\Entity\Organization;
use App\Entity\Talk;
use App\Entity\Contact;
use App\Entity\User;
use App\Entity\Agent;
use App\Entity\Attachment;
use App\Entity\Notification;

/**
 * TalkMessage State Processor
 *
 * Handles Input DTO -> Entity transformation for POST, PUT, PATCH operations
 * with support for nested object creation and updates.
 *
 * This file is ALWAYS regenerated. DO NOT edit.
 * For custom processing logic, use Event Subscribers.
 *
 * @generated by Genmax Code Generator
 */
class TalkMessageProcessor implements ProcessorInterface
{
    public function __construct(
        private readonly EntityManagerInterface $entityManager,
        #[Autowire(service: 'App\MultiTenant\TenantEntityProcessor')]
        private readonly ProcessorInterface $persistProcessor
    ) {}

    /**
     * Normalize property name for matching (removes underscores, lowercase)
     * Uses centralized Utils methods instead of manual string manipulation
     */
    private function normalizePropertyName(string $property): string
    {
        // Convert to camelCase (handles snake_case, etc.) then lowercase
        return strtolower(Utils::toCamelCase($property));
    }

    /**
     * Extract property name from method name (e.g., 'addItem' -> 'item')
     */
    private function extractPropertyFromMethod(string $methodName, string $prefix): string
    {
        // Remove prefix (e.g., 'add', 'set') and convert to lowercase
        return strtolower(substr($methodName, strlen($prefix)));
    }

    /**
     * @param TalkMessageInputDto $data
     */
    public function process(mixed $data, Operation $operation, array $uriVariables = [], array $context = []): TalkMessage
    {
        if (!$data instanceof TalkMessageInputDto) {
            throw new BadRequestHttpException('Invalid input data type');
        }

        // Determine if this is a create or update operation
        $entity = null;
        $isUpdate = isset($uriVariables['id']);
        $isPatch = $operation->getMethod() === 'PATCH';

        if ($isUpdate) {
            $entity = $this->entityManager->getRepository(TalkMessage::class)->find($uriVariables['id']);
            if (!$entity) {
                throw new BadRequestHttpException('TalkMessage not found');
            }
        }

        if (!$entity) {
            $entity = new TalkMessage();
        }

        // Get original request data to check which fields were actually sent (for PATCH)
        $requestData = $context['request']->toArray() ?? [];

        // Map scalar properties from DTO to Entity
        // sentAt
        if (!$isPatch || array_key_exists('sentAt', $requestData)) {
            $entity->setSentAt($data->sentAt);
        }
        // body
        if (!$isPatch || array_key_exists('body', $requestData)) {
            $entity->setBody($data->body);
        }
        // messageType
        if (!$isPatch || array_key_exists('messageType', $requestData)) {
            $entity->setMessageType($data->messageType);
        }
        // read
        if (!$isPatch || array_key_exists('read', $requestData)) {
            $entity->setRead($data->read);
        }
        // readAt
        if (!$isPatch || array_key_exists('readAt', $requestData)) {
            $entity->setReadAt($data->readAt);
        }
        // sentiment
        if (!$isPatch || array_key_exists('sentiment', $requestData)) {
            $entity->setSentiment($data->sentiment);
        }
        // edited
        if (!$isPatch || array_key_exists('edited', $requestData)) {
            $entity->setEdited($data->edited);
        }
        // direction
        if (!$isPatch || array_key_exists('direction', $requestData)) {
            $entity->setDirection($data->direction);
        }
        // deliveredAt
        if (!$isPatch || array_key_exists('deliveredAt', $requestData)) {
            $entity->setDeliveredAt($data->deliveredAt);
        }
        // internal
        if (!$isPatch || array_key_exists('internal', $requestData)) {
            $entity->setInternal($data->internal);
        }
        // system
        if (!$isPatch || array_key_exists('system', $requestData)) {
            $entity->setSystem($data->system);
        }
        // editedAt
        if (!$isPatch || array_key_exists('editedAt', $requestData)) {
            $entity->setEditedAt($data->editedAt);
        }
        // channel
        if (!$isPatch || array_key_exists('channel', $requestData)) {
            $entity->setChannel($data->channel);
        }
        // subject
        if (!$isPatch || array_key_exists('subject', $requestData)) {
            $entity->setSubject($data->subject);
        }
        // metadata
        if (!$isPatch || array_key_exists('metadata', $requestData)) {
            $entity->setMetadata($data->metadata);
        }

        // Map relationship properties
        // organization: ManyToOne
        // organization is auto-assigned by TenantEntityProcessor if not provided
        if (!$isPatch || array_key_exists('organization', $requestData)) {
            if ($data->organization !== null) {
                if (is_string($data->organization)) {
                    // IRI format: "/api/organizatia/{id}"
                    $organizationId = $this->extractIdFromIri($data->organization);
                    $organization = $this->entityManager->getRepository(Organization::class)->find($organizationId);
                    if (!$organization) {
                        throw new BadRequestHttpException('Organization not found: ' . $organizationId);
                    }
                    $entity->setOrganization($organization);
                } else {
                    // Nested object creation (if supported)
                    throw new BadRequestHttpException('Nested organization creation not supported. Use IRI format.');
                }
            }
        }

        // talk: ManyToOne
        if (!$isPatch || array_key_exists('talk', $requestData)) {
            if ($data->talk !== null) {
                if (is_string($data->talk)) {
                    // IRI format: "/api/talks/{id}"
                    $talkId = $this->extractIdFromIri($data->talk);
                    $talk = $this->entityManager->getRepository(Talk::class)->find($talkId);
                    if (!$talk) {
                        throw new BadRequestHttpException('Talk not found: ' . $talkId);
                    }
                    $entity->setTalk($talk);
                } else {
                    // Nested object creation (if supported)
                    throw new BadRequestHttpException('Nested talk creation not supported. Use IRI format.');
                }
            } else {
                throw new BadRequestHttpException('talk is required');
            }
        }

        // fromContact: ManyToOne
        if (!$isPatch || array_key_exists('fromContact', $requestData)) {
            if ($data->fromContact !== null) {
                if (is_string($data->fromContact)) {
                    // IRI format: "/api/contacts/{id}"
                    $fromContactId = $this->extractIdFromIri($data->fromContact);
                    $fromContact = $this->entityManager->getRepository(Contact::class)->find($fromContactId);
                    if (!$fromContact) {
                        throw new BadRequestHttpException('Contact not found: ' . $fromContactId);
                    }
                    $entity->setFromContact($fromContact);
                } else {
                    // Nested object creation (if supported)
                    throw new BadRequestHttpException('Nested fromContact creation not supported. Use IRI format.');
                }
            }
        }

        // fromUser: ManyToOne
        if (!$isPatch || array_key_exists('fromUser', $requestData)) {
            if ($data->fromUser !== null) {
                if (is_string($data->fromUser)) {
                    // IRI format: "/api/users/{id}"
                    $fromUserId = $this->extractIdFromIri($data->fromUser);
                    $fromUser = $this->entityManager->getRepository(User::class)->find($fromUserId);
                    if (!$fromUser) {
                        throw new BadRequestHttpException('User not found: ' . $fromUserId);
                    }
                    $entity->setFromUser($fromUser);
                } else {
                    // Nested object creation (if supported)
                    throw new BadRequestHttpException('Nested fromUser creation not supported. Use IRI format.');
                }
            }
        }

        // fromAgent: ManyToOne
        if (!$isPatch || array_key_exists('fromAgent', $requestData)) {
            if ($data->fromAgent !== null) {
                if (is_string($data->fromAgent)) {
                    // IRI format: "/api/agents/{id}"
                    $fromAgentId = $this->extractIdFromIri($data->fromAgent);
                    $fromAgent = $this->entityManager->getRepository(Agent::class)->find($fromAgentId);
                    if (!$fromAgent) {
                        throw new BadRequestHttpException('Agent not found: ' . $fromAgentId);
                    }
                    $entity->setFromAgent($fromAgent);
                } else {
                    // Nested object creation (if supported)
                    throw new BadRequestHttpException('Nested fromAgent creation not supported. Use IRI format.');
                }
            }
        }

        // parentMessage: ManyToOne
        if (!$isPatch || array_key_exists('parentMessage', $requestData)) {
            if ($data->parentMessage !== null) {
                if (is_string($data->parentMessage)) {
                    // IRI format: "/api/talk_messages/{id}"
                    $parentMessageId = $this->extractIdFromIri($data->parentMessage);
                    $parentMessage = $this->entityManager->getRepository(TalkMessage::class)->find($parentMessageId);
                    if (!$parentMessage) {
                        throw new BadRequestHttpException('TalkMessage not found: ' . $parentMessageId);
                    }
                    $entity->setParentMessage($parentMessage);
                } else {
                    // Nested object creation (if supported)
                    throw new BadRequestHttpException('Nested parentMessage creation not supported. Use IRI format.');
                }
            }
        }

        // notification: OneToOne
        if (!$isPatch || array_key_exists('notification', $requestData)) {
            if ($data->notification !== null) {
                if (is_string($data->notification)) {
                    // IRI format: "/api/notificatia/{id}"
                    $notificationId = $this->extractIdFromIri($data->notification);
                    $notification = $this->entityManager->getRepository(Notification::class)->find($notificationId);
                    if (!$notification) {
                        throw new BadRequestHttpException('Notification not found: ' . $notificationId);
                    }
                    $entity->setNotification($notification);
                } else {
                    // Nested object creation (if supported)
                    throw new BadRequestHttpException('Nested notification creation not supported. Use IRI format.');
                }
            }
        }

        // Persist and flush
        return $this->persistProcessor->process($entity, $operation, $uriVariables, $context);
    }

    /**
     * Extract UUID from IRI format
     */
    private function extractIdFromIri(string $iri): Uuid
    {
        $parts = explode('/', $iri);
        $id = end($parts);

        if (!Uuid::isValid($id)) {
            throw new BadRequestHttpException('Invalid UUID in IRI: ' . $iri);
        }

        return Uuid::fromString($id);
    }

    /**
     * Map array data to entity properties using setters
     * Handles nested collections recursively
     *
     * @param array $data Associative array of property => value
     * @param object $entity Target entity instance
     */
    private function mapArrayToEntity(array $data, object $entity): void
    {
        foreach ($data as $property => $value) {
            // Skip special keys like @id, @type, @context
            if (str_starts_with($property, '@')) {
                continue;
            }

            // Handle nested collections using reflection to find adder methods
            if (is_array($value) && !empty($value) && isset($value[0]) && is_array($value[0])) {
                // Find adder method using reflection - scan all methods starting with 'add'
                $reflectionClass = new \ReflectionClass($entity);
                foreach ($reflectionClass->getMethods(\ReflectionMethod::IS_PUBLIC) as $method) {
                    if (!str_starts_with($method->getName(), 'add')) {
                        continue;
                    }

                    // Check if this might be the right adder based on property name similarity
                    $normalizedProperty = $this->normalizePropertyName($property);
                    $extractedFromMethod = $this->extractPropertyFromMethod($method->getName(), 'add');

                    // Try to match: property name should be similar to method's entity name
                    // e.g., 'items' matches 'addItem', 'user_items' matches 'addUserItem'
                    if (!str_contains($normalizedProperty, $extractedFromMethod) &&
                        !str_contains($extractedFromMethod, $normalizedProperty)) {
                        continue;
                    }

                    $parameters = $method->getParameters();
                    if (count($parameters) > 0) {
                        $paramType = $parameters[0]->getType();
                        if ($paramType && $paramType instanceof \ReflectionNamedType) {
                            $className = $paramType->getName();
                            if (class_exists($className)) {
                                $addMethod = $method->getName();
                                $setParentMethods = array_filter(
                                    $reflectionClass->getMethods(\ReflectionMethod::IS_PUBLIC),
                                    fn($m) => str_starts_with($m->getName(), 'set')
                                );

                                foreach ($value as $itemData) {
                                    $item = new $className();
                                    $this->mapArrayToEntity($itemData, $item);

                                    // Try to set parent relationship using reflection
                                    $itemReflection = new \ReflectionClass($item);
                                    foreach ($itemReflection->getMethods(\ReflectionMethod::IS_PUBLIC) as $itemMethod) {
                                        if (str_starts_with($itemMethod->getName(), 'set')) {
                                            $params = $itemMethod->getParameters();
                                            if (count($params) > 0) {
                                                $paramType = $params[0]->getType();
                                                if ($paramType instanceof \ReflectionNamedType &&
                                                    $paramType->getName() === get_class($entity)) {
                                                    $item->{$itemMethod->getName()}($entity);
                                                    break;
                                                }
                                            }
                                        }
                                    }

                                    $entity->$addMethod($item);
                                    $this->entityManager->persist($item);
                                }
                                continue 2; // Skip to next property
                            }
                        }
                    }
                }
            }

            // Find setter method using reflection - no string manipulation guessing
            $reflectionClass = new \ReflectionClass($entity);
            $setter = null;
            foreach ($reflectionClass->getMethods(\ReflectionMethod::IS_PUBLIC) as $method) {
                if (!str_starts_with($method->getName(), 'set')) {
                    continue;
                }

                // Check if method name matches property (case-insensitive, normalized matching)
                $extractedFromMethod = $this->extractPropertyFromMethod($method->getName(), 'set');
                $normalizedProperty = $this->normalizePropertyName($property);

                if ($extractedFromMethod === $normalizedProperty) {
                    $setter = $method->getName();
                    break;
                }
            }

            if (method_exists($entity, $setter)) {
                // Handle different value types
                if ($value instanceof \DateTimeInterface || $value === null || is_scalar($value)) {
                    $entity->$setter($value);
                } elseif (is_array($value) && !empty($value)) {
                    // Handle JSON arrays (like metadata, tags) - not entity collections
                    $entity->$setter($value);
                } elseif (is_string($value) && str_starts_with($value, '/api/') && $setter) {
                    // Handle IRI references - use reflection to determine expected type
                    try {
                        $refId = $this->extractIdFromIri($value);

                        // Use reflection to get the expected parameter type for the setter
                        $reflectionMethod = new \ReflectionMethod($entity, $setter);
                        $parameters = $reflectionMethod->getParameters();

                        if (count($parameters) > 0) {
                            $paramType = $parameters[0]->getType();
                            if ($paramType && $paramType instanceof \ReflectionNamedType) {
                                $className = $paramType->getName();
                                if (class_exists($className)) {
                                    $refEntity = $this->entityManager->getRepository($className)->find($refId);
                                    if ($refEntity) {
                                        $entity->$setter($refEntity);
                                    }
                                }
                            }
                        }
                    } catch (\Exception $e) {
                        // Skip if IRI resolution fails
                        continue;
                    }
                }
            }
        }
    }
}
