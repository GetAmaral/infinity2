<?php

declare(strict_types=1);

namespace App\State;

use ApiPlatform\Metadata\Operation;
use ApiPlatform\State\ProcessorInterface;
use App\Entity\TalkMessage;
use App\Dto\TalkMessageInputDto;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\DependencyInjection\Attribute\Autowire;
use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;
use Symfony\Component\Uid\Uuid;
use App\Entity\Organization;
use App\Entity\Talk;
use App\Entity\Contact;
use App\Entity\User;
use App\Entity\Agent;
use App\Entity\Attachment;
use App\Entity\Notification;

/**
 * TalkMessage State Processor
 *
 * Handles Input DTO -> Entity transformation for POST, PUT, PATCH operations
 * with support for nested object creation and updates.
 *
 * This file is ALWAYS regenerated. DO NOT edit.
 * For custom processing logic, use Event Subscribers.
 *
 * @generated by Genmax Code Generator
 */
class TalkMessageProcessor implements ProcessorInterface
{
    public function __construct(
        private readonly EntityManagerInterface $entityManager,
        #[Autowire(service: 'App\MultiTenant\TenantEntityProcessor')]
        private readonly ProcessorInterface $persistProcessor
    ) {}

    /**
     * @param TalkMessageInputDto $data
     */
    public function process(mixed $data, Operation $operation, array $uriVariables = [], array $context = []): TalkMessage
    {
        if (!$data instanceof TalkMessageInputDto) {
            throw new BadRequestHttpException('Invalid input data type');
        }

        // Determine if this is a create or update operation
        $entity = null;
        if (isset($uriVariables['id'])) {
            $entity = $this->entityManager->getRepository(TalkMessage::class)->find($uriVariables['id']);
            if (!$entity) {
                throw new BadRequestHttpException('TalkMessage not found');
            }
        }

        if (!$entity) {
            $entity = new TalkMessage();
        }

        // Map scalar properties from DTO to Entity
        $entity->setSentat($data->sentAt);
        $entity->setBody($data->body);
        $entity->setMessagetype($data->messageType);
        $entity->setRead($data->read);
        $entity->setReadat($data->readAt);
        $entity->setSentiment($data->sentiment);
        $entity->setEdited($data->edited);
        $entity->setDirection($data->direction);
        $entity->setDeliveredat($data->deliveredAt);
        $entity->setInternal($data->internal);
        $entity->setSystem($data->system);
        $entity->setEditedat($data->editedAt);
        $entity->setChannel($data->channel);
        $entity->setSubject($data->subject);
        $entity->setMetadata($data->metadata);

        // Map relationship properties
        // organization: ManyToOne
        if ($data->organization !== null) {
            if (is_string($data->organization)) {
                // IRI format: "/api/organizations/{id}"
                $organizationId = $this->extractIdFromIri($data->organization);
                $organization = $this->entityManager->getRepository(Organization::class)->find($organizationId);
                if (!$organization) {
                    throw new BadRequestHttpException('Organization not found: ' . $organizationId);
                }
                $entity->setOrganization($organization);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested organization creation not supported. Use IRI format.');
            }
        } else {
            throw new BadRequestHttpException('organization is required');
        }

        // talk: ManyToOne
        if ($data->talk !== null) {
            if (is_string($data->talk)) {
                // IRI format: "/api/talks/{id}"
                $talkId = $this->extractIdFromIri($data->talk);
                $talk = $this->entityManager->getRepository(Talk::class)->find($talkId);
                if (!$talk) {
                    throw new BadRequestHttpException('Talk not found: ' . $talkId);
                }
                $entity->setTalk($talk);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested talk creation not supported. Use IRI format.');
            }
        } else {
            throw new BadRequestHttpException('talk is required');
        }

        // fromContact: ManyToOne
        if ($data->fromContact !== null) {
            if (is_string($data->fromContact)) {
                // IRI format: "/api/contacts/{id}"
                $fromContactId = $this->extractIdFromIri($data->fromContact);
                $fromContact = $this->entityManager->getRepository(Contact::class)->find($fromContactId);
                if (!$fromContact) {
                    throw new BadRequestHttpException('Contact not found: ' . $fromContactId);
                }
                $entity->setFromcontact($fromContact);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested fromContact creation not supported. Use IRI format.');
            }
        }

        // fromUser: ManyToOne
        if ($data->fromUser !== null) {
            if (is_string($data->fromUser)) {
                // IRI format: "/api/users/{id}"
                $fromUserId = $this->extractIdFromIri($data->fromUser);
                $fromUser = $this->entityManager->getRepository(User::class)->find($fromUserId);
                if (!$fromUser) {
                    throw new BadRequestHttpException('User not found: ' . $fromUserId);
                }
                $entity->setFromuser($fromUser);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested fromUser creation not supported. Use IRI format.');
            }
        }

        // fromAgent: ManyToOne
        if ($data->fromAgent !== null) {
            if (is_string($data->fromAgent)) {
                // IRI format: "/api/agents/{id}"
                $fromAgentId = $this->extractIdFromIri($data->fromAgent);
                $fromAgent = $this->entityManager->getRepository(Agent::class)->find($fromAgentId);
                if (!$fromAgent) {
                    throw new BadRequestHttpException('Agent not found: ' . $fromAgentId);
                }
                $entity->setFromagent($fromAgent);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested fromAgent creation not supported. Use IRI format.');
            }
        }

        // parentMessage: ManyToOne
        if ($data->parentMessage !== null) {
            if (is_string($data->parentMessage)) {
                // IRI format: "/api/talkmessages/{id}"
                $parentMessageId = $this->extractIdFromIri($data->parentMessage);
                $parentMessage = $this->entityManager->getRepository(TalkMessage::class)->find($parentMessageId);
                if (!$parentMessage) {
                    throw new BadRequestHttpException('TalkMessage not found: ' . $parentMessageId);
                }
                $entity->setParentmessage($parentMessage);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested parentMessage creation not supported. Use IRI format.');
            }
        }

        // notification: OneToOne
        if ($data->notification !== null) {
            if (is_string($data->notification)) {
                // IRI format: "/api/notifications/{id}"
                $notificationId = $this->extractIdFromIri($data->notification);
                $notification = $this->entityManager->getRepository(Notification::class)->find($notificationId);
                if (!$notification) {
                    throw new BadRequestHttpException('Notification not found: ' . $notificationId);
                }
                $entity->setNotification($notification);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested notification creation not supported. Use IRI format.');
            }
        }

        // Persist and flush
        return $this->persistProcessor->process($entity, $operation, $uriVariables, $context);
    }

    /**
     * Extract UUID from IRI format
     */
    private function extractIdFromIri(string $iri): Uuid
    {
        $parts = explode('/', $iri);
        $id = end($parts);

        if (!Uuid::isValid($id)) {
            throw new BadRequestHttpException('Invalid UUID in IRI: ' . $iri);
        }

        return Uuid::fromString($id);
    }

}
