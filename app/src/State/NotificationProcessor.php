<?php

declare(strict_types=1);

namespace App\State;

use ApiPlatform\Metadata\Operation;
use ApiPlatform\State\ProcessorInterface;
use App\Entity\Notification;
use App\Dto\NotificationInputDto;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\DependencyInjection\Attribute\Autowire;
use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;
use Symfony\Component\Uid\Uuid;
use App\Entity\Organization;
use App\Entity\User;
use App\Entity\EventAttendee;
use App\Entity\CommunicationMethod;
use App\Entity\Event;
use App\Entity\Reminder;
use App\Entity\TalkMessage;
use App\Entity\NotificationType;

/**
 * Notification State Processor
 *
 * Handles Input DTO -> Entity transformation for POST, PUT, PATCH operations
 * with support for nested object creation and updates.
 *
 * This file is ALWAYS regenerated. DO NOT edit.
 * For custom processing logic, use Event Subscribers.
 *
 * @generated by Genmax Code Generator
 */
class NotificationProcessor implements ProcessorInterface
{
    public function __construct(
        private readonly EntityManagerInterface $entityManager,
        #[Autowire(service: 'App\MultiTenant\TenantEntityProcessor')]
        private readonly ProcessorInterface $persistProcessor
    ) {}

    /**
     * @param NotificationInputDto $data
     */
    public function process(mixed $data, Operation $operation, array $uriVariables = [], array $context = []): Notification
    {
        if (!$data instanceof NotificationInputDto) {
            throw new BadRequestHttpException('Invalid input data type');
        }

        // Determine if this is a create or update operation
        $entity = null;
        if (isset($uriVariables['id'])) {
            $entity = $this->entityManager->getRepository(Notification::class)->find($uriVariables['id']);
            if (!$entity) {
                throw new BadRequestHttpException('Notification not found');
            }
        }

        if (!$entity) {
            $entity = new Notification();
        }

        // Map scalar properties from DTO to Entity
        $entity->setTitle($data->title);
        $entity->setPriority($data->priority);
        $entity->setActionurl($data->actionUrl);
        $entity->setRead($data->read);
        $entity->setArchived($data->archived);
        $entity->setReadat($data->readAt);
        $entity->setMessage($data->message);
        $entity->setNotificationstatus($data->notificationStatus);
        $entity->setSentat($data->sentAt);

        // Map relationship properties
        // organization: ManyToOne
        if ($data->organization !== null) {
            if (is_string($data->organization)) {
                // IRI format: "/api/organizations/{id}"
                $organizationId = $this->extractIdFromIri($data->organization);
                $organization = $this->entityManager->getRepository(Organization::class)->find($organizationId);
                if (!$organization) {
                    throw new BadRequestHttpException('Organization not found: ' . $organizationId);
                }
                $entity->setOrganization($organization);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested organization creation not supported. Use IRI format.');
            }
        } else {
            throw new BadRequestHttpException('organization is required');
        }

        // recipient: ManyToOne
        if ($data->recipient !== null) {
            if (is_string($data->recipient)) {
                // IRI format: "/api/users/{id}"
                $recipientId = $this->extractIdFromIri($data->recipient);
                $recipient = $this->entityManager->getRepository(User::class)->find($recipientId);
                if (!$recipient) {
                    throw new BadRequestHttpException('User not found: ' . $recipientId);
                }
                $entity->setRecipient($recipient);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested recipient creation not supported. Use IRI format.');
            }
        } else {
            throw new BadRequestHttpException('recipient is required');
        }

        // sender: ManyToOne
        if ($data->sender !== null) {
            if (is_string($data->sender)) {
                // IRI format: "/api/users/{id}"
                $senderId = $this->extractIdFromIri($data->sender);
                $sender = $this->entityManager->getRepository(User::class)->find($senderId);
                if (!$sender) {
                    throw new BadRequestHttpException('User not found: ' . $senderId);
                }
                $entity->setSender($sender);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested sender creation not supported. Use IRI format.');
            }
        }

        // attendee: ManyToOne
        if ($data->attendee !== null) {
            if (is_string($data->attendee)) {
                // IRI format: "/api/eventattendees/{id}"
                $attendeeId = $this->extractIdFromIri($data->attendee);
                $attendee = $this->entityManager->getRepository(EventAttendee::class)->find($attendeeId);
                if (!$attendee) {
                    throw new BadRequestHttpException('EventAttendee not found: ' . $attendeeId);
                }
                $entity->setAttendee($attendee);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested attendee creation not supported. Use IRI format.');
            }
        }

        // communicationMethod: ManyToOne
        if ($data->communicationMethod !== null) {
            if (is_string($data->communicationMethod)) {
                // IRI format: "/api/communicationmethods/{id}"
                $communicationMethodId = $this->extractIdFromIri($data->communicationMethod);
                $communicationMethod = $this->entityManager->getRepository(CommunicationMethod::class)->find($communicationMethodId);
                if (!$communicationMethod) {
                    throw new BadRequestHttpException('CommunicationMethod not found: ' . $communicationMethodId);
                }
                $entity->setCommunicationmethod($communicationMethod);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested communicationMethod creation not supported. Use IRI format.');
            }
        }

        // event: ManyToOne
        if ($data->event !== null) {
            if (is_string($data->event)) {
                // IRI format: "/api/events/{id}"
                $eventId = $this->extractIdFromIri($data->event);
                $event = $this->entityManager->getRepository(Event::class)->find($eventId);
                if (!$event) {
                    throw new BadRequestHttpException('Event not found: ' . $eventId);
                }
                $entity->setEvent($event);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested event creation not supported. Use IRI format.');
            }
        }

        // reminder: ManyToOne
        if ($data->reminder !== null) {
            if (is_string($data->reminder)) {
                // IRI format: "/api/reminders/{id}"
                $reminderId = $this->extractIdFromIri($data->reminder);
                $reminder = $this->entityManager->getRepository(Reminder::class)->find($reminderId);
                if (!$reminder) {
                    throw new BadRequestHttpException('Reminder not found: ' . $reminderId);
                }
                $entity->setReminder($reminder);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested reminder creation not supported. Use IRI format.');
            }
        }

        // talkMessage: OneToOne
        if ($data->talkMessage !== null) {
            if (is_string($data->talkMessage)) {
                // IRI format: "/api/talkmessages/{id}"
                $talkMessageId = $this->extractIdFromIri($data->talkMessage);
                $talkMessage = $this->entityManager->getRepository(TalkMessage::class)->find($talkMessageId);
                if (!$talkMessage) {
                    throw new BadRequestHttpException('TalkMessage not found: ' . $talkMessageId);
                }
                $entity->setTalkmessage($talkMessage);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested talkMessage creation not supported. Use IRI format.');
            }
        }

        // type: ManyToOne
        if ($data->type !== null) {
            if (is_string($data->type)) {
                // IRI format: "/api/notificationtypes/{id}"
                $typeId = $this->extractIdFromIri($data->type);
                $type = $this->entityManager->getRepository(NotificationType::class)->find($typeId);
                if (!$type) {
                    throw new BadRequestHttpException('NotificationType not found: ' . $typeId);
                }
                $entity->setType($type);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested type creation not supported. Use IRI format.');
            }
        }

        // Persist and flush
        return $this->persistProcessor->process($entity, $operation, $uriVariables, $context);
    }

    /**
     * Extract UUID from IRI format
     */
    private function extractIdFromIri(string $iri): Uuid
    {
        $parts = explode('/', $iri);
        $id = end($parts);

        if (!Uuid::isValid($id)) {
            throw new BadRequestHttpException('Invalid UUID in IRI: ' . $iri);
        }

        return Uuid::fromString($id);
    }

}
