<?php

declare(strict_types=1);

namespace App\State;

use ApiPlatform\Metadata\Operation;
use ApiPlatform\State\ProviderInterface;
use App\Entity\PipelineStageTemplate;
use App\Repository\PipelineStageTemplateRepository;
use App\DTO\SearchCriteria;

/**
 * PipelineStageTemplate State Provider
 *
 * Handles data retrieval for GET and GetCollection operations.
 * Delegates to PipelineStageTemplateRepository for all query logic.
 *
 * This file is ALWAYS regenerated. DO NOT edit.
 * For custom retrieval logic, extend the Repository instead.
 *
 * @generated by Genmax Code Generator
 */
class PipelineStageTemplateProvider implements ProviderInterface
{
    public function __construct(
        private readonly PipelineStageTemplateRepository $repository
    ) {}

    /**
     * Provide data for GET or GetCollection operations
     *
     * @param Operation $operation The operation being performed
     * @param array<string, mixed> $uriVariables URI variables (e.g., ['id' => '...'])
     * @param array<string, mixed> $context Request context with filters, pagination, etc.
     * @return object|array|null Single entity, array of entities, or null
     */
    public function provide(
        Operation $operation,
        array $uriVariables = [],
        array $context = []
    ): object|array|null {
        // GetCollection: GET /api/pipelinestagetemplates
        if ($operation instanceof \ApiPlatform\Metadata\GetCollection) {
            return $this->provideCollection($context);
        }

        // Get: GET /api/pipelinestagetemplates/{id}
        if ($operation instanceof \ApiPlatform\Metadata\Get) {
            return $this->provideItem($uriVariables);
        }

        return null;
    }

    /**
     * Provide collection of PipelineStageTemplate entities
     *
     * Uses PipelineStageTemplateRepository::apiSearch() for:
     * - Full-text search with UNACCENT
     * - Multi-column filtering
     * - Sorting
     * - Pagination
     *
     * @param array<string, mixed> $context
     * @return array<PipelineStageTemplate> Array of entities (API Platform handles pagination metadata)
     */
    private function provideCollection(array $context): array
    {
        // Extract search criteria from API Platform context
        $criteria = SearchCriteria::fromApiContext($context);

        // Delegate to repository's advanced search
        $result = $this->repository->apiSearch($criteria);

        // Return items - API Platform will add pagination metadata automatically
        return $result->items;
    }

    /**
     * Provide single PipelineStageTemplate entity
     *
     * @param array<string, mixed> $uriVariables
     * @return PipelineStageTemplate|null
     */
    private function provideItem(array $uriVariables): ?PipelineStageTemplate
    {
        $id = $uriVariables['id'] ?? null;

        if (!$id) {
            return null;
        }

        // Use repository's find method (with TenantDataFilter applied automatically)
        return $this->repository->find($id);
    }
}
