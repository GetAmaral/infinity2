<?php

declare(strict_types=1);

namespace App\State;

use ApiPlatform\Metadata\Operation;
use ApiPlatform\State\ProcessorInterface;
use App\Entity\LostReason;
use App\Dto\LostReasonInputDto;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\DependencyInjection\Attribute\Autowire;
use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;
use Symfony\Component\Uid\Uuid;
use App\Entity\Organization;
use App\Entity\Deal;

/**
 * LostReason State Processor
 *
 * Handles Input DTO -> Entity transformation for POST, PUT, PATCH operations
 * with support for nested object creation and updates.
 *
 * This file is ALWAYS regenerated. DO NOT edit.
 * For custom processing logic, use Event Subscribers.
 *
 * @generated by Genmax Code Generator
 */
class LostReasonProcessor implements ProcessorInterface
{
    public function __construct(
        private readonly EntityManagerInterface $entityManager,
        #[Autowire(service: 'App\MultiTenant\TenantEntityProcessor')]
        private readonly ProcessorInterface $persistProcessor
    ) {}

    /**
     * @param LostReasonInputDto $data
     */
    public function process(mixed $data, Operation $operation, array $uriVariables = [], array $context = []): LostReason
    {
        if (!$data instanceof LostReasonInputDto) {
            throw new BadRequestHttpException('Invalid input data type');
        }

        // Determine if this is a create or update operation
        $entity = null;
        $isUpdate = isset($uriVariables['id']);
        $isPatch = $operation->getMethod() === 'PATCH';

        if ($isUpdate) {
            $entity = $this->entityManager->getRepository(LostReason::class)->find($uriVariables['id']);
            if (!$entity) {
                throw new BadRequestHttpException('LostReason not found');
            }
        }

        if (!$entity) {
            $entity = new LostReason();
        }

        // Get original request data to check which fields were actually sent (for PATCH)
        $requestData = $context['request']->toArray() ?? [];

        // Map scalar properties from DTO to Entity
        // name
        if (!$isPatch || array_key_exists('name', $requestData)) {
            $entity->setName($data->name);
        }
        // description
        if (!$isPatch || array_key_exists('description', $requestData)) {
            $entity->setDescription($data->description);
        }
        // category
        if (!$isPatch || array_key_exists('category', $requestData)) {
            $entity->setCategory($data->category);
        }
        // active
        if (!$isPatch || array_key_exists('active', $requestData)) {
            $entity->setActive($data->active);
        }
        // default
        if (!$isPatch || array_key_exists('default', $requestData)) {
            $entity->setDefault($data->default);
        }
        // sortOrder
        if (!$isPatch || array_key_exists('sortOrder', $requestData)) {
            $entity->setSortorder($data->sortOrder);
        }
        // requiresNotes
        if (!$isPatch || array_key_exists('requiresNotes', $requestData)) {
            $entity->setRequiresnotes($data->requiresNotes);
        }
        // color
        if (!$isPatch || array_key_exists('color', $requestData)) {
            $entity->setColor($data->color);
        }
        // critical
        if (!$isPatch || array_key_exists('critical', $requestData)) {
            $entity->setCritical($data->critical);
        }
        // impact
        if (!$isPatch || array_key_exists('impact', $requestData)) {
            $entity->setImpact($data->impact);
        }
        // winBackPotential
        if (!$isPatch || array_key_exists('winBackPotential', $requestData)) {
            $entity->setWinbackpotential($data->winBackPotential);
        }
        // actionable
        if (!$isPatch || array_key_exists('actionable', $requestData)) {
            $entity->setActionable($data->actionable);
        }
        // internal
        if (!$isPatch || array_key_exists('internal', $requestData)) {
            $entity->setInternal($data->internal);
        }
        // competitorName
        if (!$isPatch || array_key_exists('competitorName', $requestData)) {
            $entity->setCompetitorname($data->competitorName);
        }
        // automationRule
        if (!$isPatch || array_key_exists('automationRule', $requestData)) {
            $entity->setAutomationrule($data->automationRule);
        }

        // Map relationship properties
        // organization: ManyToOne
        // organization is auto-assigned by TenantEntityProcessor if not provided
        if (!$isPatch || array_key_exists('organization', $requestData)) {
            if ($data->organization !== null) {
                if (is_string($data->organization)) {
                    // IRI format: "/api/organizations/{id}"
                    $organizationId = $this->extractIdFromIri($data->organization);
                    $organization = $this->entityManager->getRepository(Organization::class)->find($organizationId);
                    if (!$organization) {
                        throw new BadRequestHttpException('Organization not found: ' . $organizationId);
                    }
                    $entity->setOrganization($organization);
                } else {
                    // Nested object creation (if supported)
                    throw new BadRequestHttpException('Nested organization creation not supported. Use IRI format.');
                }
            }
        }

        // Persist and flush
        return $this->persistProcessor->process($entity, $operation, $uriVariables, $context);
    }

    /**
     * Extract UUID from IRI format
     */
    private function extractIdFromIri(string $iri): Uuid
    {
        $parts = explode('/', $iri);
        $id = end($parts);

        if (!Uuid::isValid($id)) {
            throw new BadRequestHttpException('Invalid UUID in IRI: ' . $iri);
        }

        return Uuid::fromString($id);
    }

    /**
     * Map array data to entity properties using setters
     *
     * @param array $data Associative array of property => value
     * @param object $entity Target entity instance
     */
    private function mapArrayToEntity(array $data, object $entity): void
    {
        foreach ($data as $property => $value) {
            // Skip special keys like @id, @type, @context
            if (str_starts_with($property, '@')) {
                continue;
            }

            // Convert snake_case to camelCase for setter
            $setter = 'set' . str_replace('_', '', ucwords($property, '_'));

            if (method_exists($entity, $setter)) {
                // Handle different value types
                if ($value instanceof \DateTimeInterface || $value === null || is_scalar($value) || is_array($value)) {
                    $entity->$setter($value);
                } elseif (is_string($value) && str_starts_with($value, '/api/')) {
                    // Handle IRI references - resolve to actual entity
                    try {
                        $refId = $this->extractIdFromIri($value);
                        // Infer entity class from IRI pattern (e.g., /api/users/... -> User)
                        $parts = explode('/', trim($value, '/'));
                        if (count($parts) >= 3) {
                            $resourceName = $parts[1]; // e.g., "users"
                            $className = 'App\Entity\\' . ucfirst(rtrim($resourceName, 's'));
                            if (class_exists($className)) {
                                $refEntity = $this->entityManager->getRepository($className)->find($refId);
                                if ($refEntity) {
                                    $entity->$setter($refEntity);
                                }
                            }
                        }
                    } catch (\Exception $e) {
                        // Skip if IRI resolution fails
                        continue;
                    }
                }
            }
        }
    }
}
