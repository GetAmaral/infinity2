<?php

declare(strict_types=1);

namespace App\State;

use ApiPlatform\Metadata\Operation;
use ApiPlatform\State\ProcessorInterface;
use App\Entity\DealStage;
use App\Dto\DealStageInputDto;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\DependencyInjection\Attribute\Autowire;
use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;
use Symfony\Component\Uid\Uuid;
use App\Entity\Organization;
use App\Entity\User;
use App\Entity\Deal;
use App\Entity\PipelineStage;

/**
 * DealStage State Processor
 *
 * Handles Input DTO -> Entity transformation for POST, PUT, PATCH operations
 * with support for nested object creation and updates.
 *
 * This file is ALWAYS regenerated. DO NOT edit.
 * For custom processing logic, use Event Subscribers.
 *
 * @generated by Genmax Code Generator
 */
class DealStageProcessor implements ProcessorInterface
{
    public function __construct(
        private readonly EntityManagerInterface $entityManager,
        #[Autowire(service: 'App\MultiTenant\TenantEntityProcessor')]
        private readonly ProcessorInterface $persistProcessor
    ) {}

    /**
     * @param DealStageInputDto $data
     */
    public function process(mixed $data, Operation $operation, array $uriVariables = [], array $context = []): DealStage
    {
        if (!$data instanceof DealStageInputDto) {
            throw new BadRequestHttpException('Invalid input data type');
        }

        // Determine if this is a create or update operation
        $entity = null;
        if (isset($uriVariables['id'])) {
            $entity = $this->entityManager->getRepository(DealStage::class)->find($uriVariables['id']);
            if (!$entity) {
                throw new BadRequestHttpException('DealStage not found');
            }
        }

        if (!$entity) {
            $entity = new DealStage();
        }

        // Map scalar properties from DTO to Entity
        $entity->setStagename($data->stageName);
        $entity->setProbability($data->probability);
        $entity->setRottendays($data->rottenDays);
        $entity->setRotten($data->rotten);
        $entity->setExpectedclosedate($data->expectedCloseDate);
        $entity->setStagevalue($data->stageValue);
        $entity->setDaysinstage($data->daysInStage);
        $entity->setWeightedvalue($data->weightedValue);
        $entity->setActive($data->active);
        $entity->setEndedat($data->endedAt);
        $entity->setLastupdatedat($data->lastUpdatedAt);
        $entity->setNotes($data->notes);
        $entity->setStartedat($data->startedAt);

        // Map relationship properties
        // organization: ManyToOne
        if ($data->organization !== null) {
            if (is_string($data->organization)) {
                // IRI format: "/api/organizations/{id}"
                $organizationId = $this->extractIdFromIri($data->organization);
                $organization = $this->entityManager->getRepository(Organization::class)->find($organizationId);
                if (!$organization) {
                    throw new BadRequestHttpException('Organization not found: ' . $organizationId);
                }
                $entity->setOrganization($organization);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested organization creation not supported. Use IRI format.');
            }
        } else {
            throw new BadRequestHttpException('organization is required');
        }

        // enteredBy: ManyToOne
        if ($data->enteredBy !== null) {
            if (is_string($data->enteredBy)) {
                // IRI format: "/api/users/{id}"
                $enteredById = $this->extractIdFromIri($data->enteredBy);
                $enteredBy = $this->entityManager->getRepository(User::class)->find($enteredById);
                if (!$enteredBy) {
                    throw new BadRequestHttpException('User not found: ' . $enteredById);
                }
                $entity->setEnteredby($enteredBy);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested enteredBy creation not supported. Use IRI format.');
            }
        }

        // exitedBy: ManyToOne
        if ($data->exitedBy !== null) {
            if (is_string($data->exitedBy)) {
                // IRI format: "/api/users/{id}"
                $exitedById = $this->extractIdFromIri($data->exitedBy);
                $exitedBy = $this->entityManager->getRepository(User::class)->find($exitedById);
                if (!$exitedBy) {
                    throw new BadRequestHttpException('User not found: ' . $exitedById);
                }
                $entity->setExitedby($exitedBy);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested exitedBy creation not supported. Use IRI format.');
            }
        }

        // deal: ManyToOne
        if ($data->deal !== null) {
            if (is_string($data->deal)) {
                // IRI format: "/api/deals/{id}"
                $dealId = $this->extractIdFromIri($data->deal);
                $deal = $this->entityManager->getRepository(Deal::class)->find($dealId);
                if (!$deal) {
                    throw new BadRequestHttpException('Deal not found: ' . $dealId);
                }
                $entity->setDeal($deal);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested deal creation not supported. Use IRI format.');
            }
        }

        // pipelineStage: ManyToOne
        if ($data->pipelineStage !== null) {
            if (is_string($data->pipelineStage)) {
                // IRI format: "/api/pipelinestages/{id}"
                $pipelineStageId = $this->extractIdFromIri($data->pipelineStage);
                $pipelineStage = $this->entityManager->getRepository(PipelineStage::class)->find($pipelineStageId);
                if (!$pipelineStage) {
                    throw new BadRequestHttpException('PipelineStage not found: ' . $pipelineStageId);
                }
                $entity->setPipelinestage($pipelineStage);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested pipelineStage creation not supported. Use IRI format.');
            }
        }

        // Persist and flush
        return $this->persistProcessor->process($entity, $operation, $uriVariables, $context);
    }

    /**
     * Extract UUID from IRI format
     */
    private function extractIdFromIri(string $iri): Uuid
    {
        $parts = explode('/', $iri);
        $id = end($parts);

        if (!Uuid::isValid($id)) {
            throw new BadRequestHttpException('Invalid UUID in IRI: ' . $iri);
        }

        return Uuid::fromString($id);
    }

}
