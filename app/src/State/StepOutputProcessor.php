<?php

declare(strict_types=1);

namespace App\State;

use ApiPlatform\Metadata\Operation;
use ApiPlatform\State\ProcessorInterface;
use App\Entity\StepOutput;
use App\Dto\StepOutputInputDto;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\DependencyInjection\Attribute\Autowire;
use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;
use Symfony\Component\Uid\Uuid;
use App\Entity\Step;
use App\Entity\StepConnection;

/**
 * StepOutput State Processor
 *
 * Handles Input DTO -> Entity transformation for POST, PUT, PATCH operations
 * with support for nested object creation and updates.
 *
 * This file is ALWAYS regenerated. DO NOT edit.
 * For custom processing logic, use Event Subscribers.
 *
 * @generated by Genmax Code Generator
 */
class StepOutputProcessor implements ProcessorInterface
{
    public function __construct(
        private readonly EntityManagerInterface $entityManager,
        #[Autowire(service: 'App\MultiTenant\TenantEntityProcessor')]
        private readonly ProcessorInterface $persistProcessor
    ) {}

    /**
     * @param StepOutputInputDto $data
     */
    public function process(mixed $data, Operation $operation, array $uriVariables = [], array $context = []): StepOutput
    {
        if (!$data instanceof StepOutputInputDto) {
            throw new BadRequestHttpException('Invalid input data type');
        }

        // Determine if this is a create or update operation
        $entity = null;
        if (isset($uriVariables['id'])) {
            $entity = $this->entityManager->getRepository(StepOutput::class)->find($uriVariables['id']);
            if (!$entity) {
                throw new BadRequestHttpException('StepOutput not found');
            }
        }

        if (!$entity) {
            $entity = new StepOutput();
        }

        // Map scalar properties from DTO to Entity
        $entity->setName($data->name);
        $entity->setDescription($data->description);
        $entity->setSlug($data->slug);
        $entity->setConditional($data->conditional);

        // Map relationship properties
        // step: ManyToOne
        if ($data->step !== null) {
            if (is_string($data->step)) {
                // IRI format: "/api/steps/{id}"
                $stepId = $this->extractIdFromIri($data->step);
                $step = $this->entityManager->getRepository(Step::class)->find($stepId);
                if (!$step) {
                    throw new BadRequestHttpException('Step not found: ' . $stepId);
                }
                $entity->setStep($step);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested step creation not supported. Use IRI format.');
            }
        } else {
            throw new BadRequestHttpException('step is required');
        }

        // connection: OneToOne
        if ($data->connection !== null) {
            if (is_string($data->connection)) {
                // IRI format: "/api/stepconnections/{id}"
                $connectionId = $this->extractIdFromIri($data->connection);
                $connection = $this->entityManager->getRepository(StepConnection::class)->find($connectionId);
                if (!$connection) {
                    throw new BadRequestHttpException('StepConnection not found: ' . $connectionId);
                }
                $entity->setConnection($connection);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested connection creation not supported. Use IRI format.');
            }
        }

        // Persist and flush
        return $this->persistProcessor->process($entity, $operation, $uriVariables, $context);
    }

    /**
     * Extract UUID from IRI format
     */
    private function extractIdFromIri(string $iri): Uuid
    {
        $parts = explode('/', $iri);
        $id = end($parts);

        if (!Uuid::isValid($id)) {
            throw new BadRequestHttpException('Invalid UUID in IRI: ' . $iri);
        }

        return Uuid::fromString($id);
    }

}
