<?php

declare(strict_types=1);

namespace App\State;

use ApiPlatform\Metadata\Operation;
use ApiPlatform\State\ProcessorInterface;
use App\Entity\Campaign;
use App\Dto\CampaignInputDto;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\DependencyInjection\Attribute\Autowire;
use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;
use Symfony\Component\Uid\Uuid;
use App\Entity\Organization;
use App\Entity\Company;
use App\Entity\Contact;
use App\Entity\Deal;
use App\Entity\User;
use App\Entity\SocialMedia;
use App\Entity\Talk;

/**
 * Campaign State Processor
 *
 * Handles Input DTO -> Entity transformation for POST, PUT, PATCH operations
 * with support for nested object creation and updates.
 *
 * This file is ALWAYS regenerated. DO NOT edit.
 * For custom processing logic, use Event Subscribers.
 *
 * @generated by Genmax Code Generator
 */
class CampaignProcessor implements ProcessorInterface
{
    public function __construct(
        private readonly EntityManagerInterface $entityManager,
        #[Autowire(service: 'App\MultiTenant\TenantEntityProcessor')]
        private readonly ProcessorInterface $persistProcessor
    ) {}

    /**
     * @param CampaignInputDto $data
     */
    public function process(mixed $data, Operation $operation, array $uriVariables = [], array $context = []): Campaign
    {
        if (!$data instanceof CampaignInputDto) {
            throw new BadRequestHttpException('Invalid input data type');
        }

        // Determine if this is a create or update operation
        $entity = null;
        if (isset($uriVariables['id'])) {
            $entity = $this->entityManager->getRepository(Campaign::class)->find($uriVariables['id']);
            if (!$entity) {
                throw new BadRequestHttpException('Campaign not found');
            }
        }

        if (!$entity) {
            $entity = new Campaign();
        }

        // Map scalar properties from DTO to Entity
        $entity->setName($data->name);
        $entity->setDescription($data->description);
        $entity->setActualbudget($data->actualBudget);
        $entity->setActive($data->active);
        $entity->setActualcost($data->actualCost);
        $entity->setActualreturn($data->actualReturn);
        $entity->setActualrevenue($data->actualRevenue);
        $entity->setArchived($data->archived);
        $entity->setBudgetedcost($data->budgetedCost);
        $entity->setCampaignstatus($data->campaignStatus);
        $entity->setCampaigntype($data->campaignType);
        $entity->setCodename($data->codeName);
        $entity->setDraft($data->draft);
        $entity->setDuration($data->duration);
        $entity->setEmailaddress($data->emailAddress);
        $entity->setEnddate($data->endDate);
        $entity->setExpectedresponse($data->expectedResponse);
        $entity->setExpectedrevenue($data->expectedRevenue);
        $entity->setMessage($data->message);
        $entity->setNumberofcontacts($data->numberOfContacts);
        $entity->setNumberofconverted($data->numberOfConverted);
        $entity->setNumberofleads($data->numberOfLeads);
        $entity->setNumberofresponses($data->numberOfResponses);
        $entity->setObjective($data->objective);
        $entity->setOthercost($data->otherCost);
        $entity->setPlannedbudget($data->plannedBudget);
        $entity->setPlannedduration($data->plannedDuration);
        $entity->setPlannedenddate($data->plannedEndDate);
        $entity->setPlannedreturn($data->plannedReturn);
        $entity->setPlannedstartdate($data->plannedStartDate);
        $entity->setRoi($data->roi);
        $entity->setStartdate($data->startDate);
        $entity->setStatus($data->status);
        $entity->setTargetaudience($data->targetAudience);
        $entity->setTemplate($data->template);

        // Map relationship properties
        // organization: ManyToOne
        if ($data->organization !== null) {
            if (is_string($data->organization)) {
                // IRI format: "/api/organizations/{id}"
                $organizationId = $this->extractIdFromIri($data->organization);
                $organization = $this->entityManager->getRepository(Organization::class)->find($organizationId);
                if (!$organization) {
                    throw new BadRequestHttpException('Organization not found: ' . $organizationId);
                }
                $entity->setOrganization($organization);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested organization creation not supported. Use IRI format.');
            }
        } else {
            throw new BadRequestHttpException('organization is required');
        }

        // manager: ManyToOne
        if ($data->manager !== null) {
            if (is_string($data->manager)) {
                // IRI format: "/api/users/{id}"
                $managerId = $this->extractIdFromIri($data->manager);
                $manager = $this->entityManager->getRepository(User::class)->find($managerId);
                if (!$manager) {
                    throw new BadRequestHttpException('User not found: ' . $managerId);
                }
                $entity->setManager($manager);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested manager creation not supported. Use IRI format.');
            }
        }

        // owner: ManyToOne
        if ($data->owner !== null) {
            if (is_string($data->owner)) {
                // IRI format: "/api/users/{id}"
                $ownerId = $this->extractIdFromIri($data->owner);
                $owner = $this->entityManager->getRepository(User::class)->find($ownerId);
                if (!$owner) {
                    throw new BadRequestHttpException('User not found: ' . $ownerId);
                }
                $entity->setOwner($owner);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested owner creation not supported. Use IRI format.');
            }
        } else {
            throw new BadRequestHttpException('owner is required');
        }

        // parentCampaign: ManyToOne
        if ($data->parentCampaign !== null) {
            if (is_string($data->parentCampaign)) {
                // IRI format: "/api/campaigns/{id}"
                $parentCampaignId = $this->extractIdFromIri($data->parentCampaign);
                $parentCampaign = $this->entityManager->getRepository(Campaign::class)->find($parentCampaignId);
                if (!$parentCampaign) {
                    throw new BadRequestHttpException('Campaign not found: ' . $parentCampaignId);
                }
                $entity->setParentcampaign($parentCampaign);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested parentCampaign creation not supported. Use IRI format.');
            }
        }

        // Persist and flush
        return $this->persistProcessor->process($entity, $operation, $uriVariables, $context);
    }

    /**
     * Extract UUID from IRI format
     */
    private function extractIdFromIri(string $iri): Uuid
    {
        $parts = explode('/', $iri);
        $id = end($parts);

        if (!Uuid::isValid($id)) {
            throw new BadRequestHttpException('Invalid UUID in IRI: ' . $iri);
        }

        return Uuid::fromString($id);
    }

}
