<?php

declare(strict_types=1);

namespace App\State;

use ApiPlatform\Metadata\Operation;
use ApiPlatform\State\ProcessorInterface;
use App\Entity\Calendar;
use App\Dto\CalendarInputDto;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\DependencyInjection\Attribute\Autowire;
use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;
use Symfony\Component\Uid\Uuid;
use App\Entity\Organization;
use App\Entity\User;
use App\Entity\CalendarType;
use App\Entity\Event;
use App\Entity\CalendarExternalLink;
use App\Entity\WorkingHour;
use App\Entity\Holiday;

/**
 * Calendar State Processor
 *
 * Handles Input DTO -> Entity transformation for POST, PUT, PATCH operations
 * with support for nested object creation and updates.
 *
 * This file is ALWAYS regenerated. DO NOT edit.
 * For custom processing logic, use Event Subscribers.
 *
 * @generated by Genmax Code Generator
 */
class CalendarProcessor implements ProcessorInterface
{
    public function __construct(
        private readonly EntityManagerInterface $entityManager,
        #[Autowire(service: 'App\MultiTenant\TenantEntityProcessor')]
        private readonly ProcessorInterface $persistProcessor
    ) {}

    /**
     * @param CalendarInputDto $data
     */
    public function process(mixed $data, Operation $operation, array $uriVariables = [], array $context = []): Calendar
    {
        if (!$data instanceof CalendarInputDto) {
            throw new BadRequestHttpException('Invalid input data type');
        }

        // Determine if this is a create or update operation
        $entity = null;
        if (isset($uriVariables['id'])) {
            $entity = $this->entityManager->getRepository(Calendar::class)->find($uriVariables['id']);
            if (!$entity) {
                throw new BadRequestHttpException('Calendar not found');
            }
        }

        if (!$entity) {
            $entity = new Calendar();
        }

        // Map scalar properties from DTO to Entity
        $entity->setName($data->name);
        $entity->setDescription($data->description);
        $entity->setTimezone($data->timeZone);
        $entity->setColor($data->color);
        $entity->setPrimary($data->primary);
        $entity->setVisible($data->visible);
        $entity->setAccessrole($data->accessRole);
        $entity->setExternalapikey($data->externalApiKey);
        $entity->setDefault($data->default);
        $entity->setActive($data->active);
        $entity->setPublic($data->public);
        $entity->setIcon($data->icon);
        $entity->setSortorder($data->sortOrder);
        $entity->setExternalid($data->externalId);
        $entity->setLastsyncedat($data->lastSyncedAt);
        $entity->setPermissions($data->permissions);
        $entity->setSettings($data->settings);

        // Map relationship properties
        // organization: ManyToOne
        if ($data->organization !== null) {
            if (is_string($data->organization)) {
                // IRI format: "/api/organizations/{id}"
                $organizationId = $this->extractIdFromIri($data->organization);
                $organization = $this->entityManager->getRepository(Organization::class)->find($organizationId);
                if (!$organization) {
                    throw new BadRequestHttpException('Organization not found: ' . $organizationId);
                }
                $entity->setOrganization($organization);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested organization creation not supported. Use IRI format.');
            }
        } else {
            throw new BadRequestHttpException('organization is required');
        }

        // user: ManyToOne
        if ($data->user !== null) {
            if (is_string($data->user)) {
                // IRI format: "/api/users/{id}"
                $userId = $this->extractIdFromIri($data->user);
                $user = $this->entityManager->getRepository(User::class)->find($userId);
                if (!$user) {
                    throw new BadRequestHttpException('User not found: ' . $userId);
                }
                $entity->setUser($user);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested user creation not supported. Use IRI format.');
            }
        }

        // calendarType: ManyToOne
        if ($data->calendarType !== null) {
            if (is_string($data->calendarType)) {
                // IRI format: "/api/calendartypes/{id}"
                $calendarTypeId = $this->extractIdFromIri($data->calendarType);
                $calendarType = $this->entityManager->getRepository(CalendarType::class)->find($calendarTypeId);
                if (!$calendarType) {
                    throw new BadRequestHttpException('CalendarType not found: ' . $calendarTypeId);
                }
                $entity->setCalendartype($calendarType);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested calendarType creation not supported. Use IRI format.');
            }
        }

        // externalLink: ManyToOne
        if ($data->externalLink !== null) {
            if (is_string($data->externalLink)) {
                // IRI format: "/api/calendarexternallinks/{id}"
                $externalLinkId = $this->extractIdFromIri($data->externalLink);
                $externalLink = $this->entityManager->getRepository(CalendarExternalLink::class)->find($externalLinkId);
                if (!$externalLink) {
                    throw new BadRequestHttpException('CalendarExternalLink not found: ' . $externalLinkId);
                }
                $entity->setExternallink($externalLink);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested externalLink creation not supported. Use IRI format.');
            }
        }

        // Persist and flush
        return $this->persistProcessor->process($entity, $operation, $uriVariables, $context);
    }

    /**
     * Extract UUID from IRI format
     */
    private function extractIdFromIri(string $iri): Uuid
    {
        $parts = explode('/', $iri);
        $id = end($parts);

        if (!Uuid::isValid($id)) {
            throw new BadRequestHttpException('Invalid UUID in IRI: ' . $iri);
        }

        return Uuid::fromString($id);
    }

}
