<?php

declare(strict_types=1);

namespace App\State;

use ApiPlatform\Metadata\Operation;
use ApiPlatform\State\ProcessorInterface;
use App\Entity\City;
use App\Dto\CityInputDto;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\DependencyInjection\Attribute\Autowire;
use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;
use Symfony\Component\Uid\Uuid;
use App\Entity\Organization;
use App\Entity\Country;
use App\Entity\EventResource;
use App\Entity\HolidayTemplate;

/**
 * City State Processor
 *
 * Handles Input DTO -> Entity transformation for POST, PUT, PATCH operations
 * with support for nested object creation and updates.
 *
 * This file is ALWAYS regenerated. DO NOT edit.
 * For custom processing logic, use Event Subscribers.
 *
 * @generated by Genmax Code Generator
 */
class CityProcessor implements ProcessorInterface
{
    public function __construct(
        private readonly EntityManagerInterface $entityManager,
        #[Autowire(service: 'App\MultiTenant\TenantEntityProcessor')]
        private readonly ProcessorInterface $persistProcessor
    ) {}

    /**
     * @param CityInputDto $data
     */
    public function process(mixed $data, Operation $operation, array $uriVariables = [], array $context = []): City
    {
        if (!$data instanceof CityInputDto) {
            throw new BadRequestHttpException('Invalid input data type');
        }

        // Determine if this is a create or update operation
        $entity = null;
        if (isset($uriVariables['id'])) {
            $entity = $this->entityManager->getRepository(City::class)->find($uriVariables['id']);
            if (!$entity) {
                throw new BadRequestHttpException('City not found');
            }
        }

        if (!$entity) {
            $entity = new City();
        }

        // Map scalar properties from DTO to Entity
        $entity->setName($data->name);
        $entity->setState($data->state);
        $entity->setLatitude($data->latitude);
        $entity->setLongitude($data->longitude);
        $entity->setTimezone($data->timezone);
        $entity->setPopulation($data->population);
        $entity->setCapital($data->capital);
        $entity->setIbgecode($data->ibgeCode);
        $entity->setActive($data->active);

        // Map relationship properties
        // organization: ManyToOne
        if ($data->organization !== null) {
            if (is_string($data->organization)) {
                // IRI format: "/api/organizations/{id}"
                $organizationId = $this->extractIdFromIri($data->organization);
                $organization = $this->entityManager->getRepository(Organization::class)->find($organizationId);
                if (!$organization) {
                    throw new BadRequestHttpException('Organization not found: ' . $organizationId);
                }
                $entity->setOrganization($organization);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested organization creation not supported. Use IRI format.');
            }
        } else {
            throw new BadRequestHttpException('organization is required');
        }

        // country: ManyToOne
        if ($data->country !== null) {
            if (is_string($data->country)) {
                // IRI format: "/api/countrys/{id}"
                $countryId = $this->extractIdFromIri($data->country);
                $country = $this->entityManager->getRepository(Country::class)->find($countryId);
                if (!$country) {
                    throw new BadRequestHttpException('Country not found: ' . $countryId);
                }
                $entity->setCountry($country);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested country creation not supported. Use IRI format.');
            }
        }

        // Persist and flush
        return $this->persistProcessor->process($entity, $operation, $uriVariables, $context);
    }

    /**
     * Extract UUID from IRI format
     */
    private function extractIdFromIri(string $iri): Uuid
    {
        $parts = explode('/', $iri);
        $id = end($parts);

        if (!Uuid::isValid($id)) {
            throw new BadRequestHttpException('Invalid UUID in IRI: ' . $iri);
        }

        return Uuid::fromString($id);
    }

}
