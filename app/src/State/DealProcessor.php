<?php

declare(strict_types=1);

namespace App\State;

use ApiPlatform\Metadata\Operation;
use ApiPlatform\State\ProcessorInterface;
use App\Entity\Deal;
use App\Dto\DealInputDto;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\DependencyInjection\Attribute\Autowire;
use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;
use Symfony\Component\Uid\Uuid;
use App\Entity\Organization;
use App\Entity\Company;
use App\Entity\PipelineStage;
use App\Entity\Pipeline;
use App\Entity\DealType;
use App\Entity\DealCategory;
use App\Entity\Product;
use App\Entity\User;
use App\Entity\Contact;
use App\Entity\LeadSource;
use App\Entity\Campaign;
use App\Entity\DealStage;
use App\Entity\Talk;
use App\Entity\Task;
use App\Entity\Competitor;
use App\Entity\Tag;
use App\Entity\LostReason;
use App\Entity\WinReason;

/**
 * Deal State Processor
 *
 * Handles Input DTO -> Entity transformation for POST, PUT, PATCH operations
 * with support for nested object creation and updates.
 *
 * This file is ALWAYS regenerated. DO NOT edit.
 * For custom processing logic, use Event Subscribers.
 *
 * @generated by Genmax Code Generator
 */
class DealProcessor implements ProcessorInterface
{
    public function __construct(
        private readonly EntityManagerInterface $entityManager,
        #[Autowire(service: 'App\MultiTenant\TenantEntityProcessor')]
        private readonly ProcessorInterface $persistProcessor
    ) {}

    /**
     * @param DealInputDto $data
     */
    public function process(mixed $data, Operation $operation, array $uriVariables = [], array $context = []): Deal
    {
        if (!$data instanceof DealInputDto) {
            throw new BadRequestHttpException('Invalid input data type');
        }

        // Determine if this is a create or update operation
        $entity = null;
        if (isset($uriVariables['id'])) {
            $entity = $this->entityManager->getRepository(Deal::class)->find($uriVariables['id']);
            if (!$entity) {
                throw new BadRequestHttpException('Deal not found');
            }
        }

        if (!$entity) {
            $entity = new Deal();
        }

        // Map scalar properties from DTO to Entity
        $entity->setName($data->name);
        $entity->setDescription($data->description);
        $entity->setDealstatus($data->dealStatus);
        $entity->setProbability($data->probability);
        $entity->setPriority($data->priority);
        $entity->setDealnumber($data->dealNumber);
        $entity->setExpectedamount($data->expectedAmount);
        $entity->setWeightedamount($data->weightedAmount);
        $entity->setClosureamount($data->closureAmount);
        $entity->setInitialamount($data->initialAmount);
        $entity->setCurrency($data->currency);
        $entity->setExchangerate($data->exchangeRate);
        $entity->setDiscountpercentage($data->discountPercentage);
        $entity->setDiscountamount($data->discountAmount);
        $entity->setCommissionrate($data->commissionRate);
        $entity->setCommissionamount($data->commissionAmount);
        $entity->setExpectedclosuredate($data->expectedClosureDate);
        $entity->setClosuredate($data->closureDate);
        $entity->setInitialdate($data->initialDate);
        $entity->setLastactivitydate($data->lastActivityDate);
        $entity->setNextfollowup($data->nextFollowUp);
        $entity->setDaysincurrentstage($data->daysInCurrentStage);
        $entity->setForecastcategory($data->forecastCategory);
        $entity->setSourcedetails($data->sourceDetails);
        $entity->setNotes($data->notes);
        $entity->setCustomfields($data->customFields);
        $entity->setActualclosuredate($data->actualClosureDate);

        // Map relationship properties
        // organization: ManyToOne
        if ($data->organization !== null) {
            if (is_string($data->organization)) {
                // IRI format: "/api/organizations/{id}"
                $organizationId = $this->extractIdFromIri($data->organization);
                $organization = $this->entityManager->getRepository(Organization::class)->find($organizationId);
                if (!$organization) {
                    throw new BadRequestHttpException('Organization not found: ' . $organizationId);
                }
                $entity->setOrganization($organization);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested organization creation not supported. Use IRI format.');
            }
        } else {
            throw new BadRequestHttpException('organization is required');
        }

        // company: ManyToOne
        if ($data->company !== null) {
            if (is_string($data->company)) {
                // IRI format: "/api/companys/{id}"
                $companyId = $this->extractIdFromIri($data->company);
                $company = $this->entityManager->getRepository(Company::class)->find($companyId);
                if (!$company) {
                    throw new BadRequestHttpException('Company not found: ' . $companyId);
                }
                $entity->setCompany($company);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested company creation not supported. Use IRI format.');
            }
        }

        // currentStage: ManyToOne
        if ($data->currentStage !== null) {
            if (is_string($data->currentStage)) {
                // IRI format: "/api/pipelinestages/{id}"
                $currentStageId = $this->extractIdFromIri($data->currentStage);
                $currentStage = $this->entityManager->getRepository(PipelineStage::class)->find($currentStageId);
                if (!$currentStage) {
                    throw new BadRequestHttpException('PipelineStage not found: ' . $currentStageId);
                }
                $entity->setCurrentstage($currentStage);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested currentStage creation not supported. Use IRI format.');
            }
        }

        // pipeline: ManyToOne
        if ($data->pipeline !== null) {
            if (is_string($data->pipeline)) {
                // IRI format: "/api/pipelines/{id}"
                $pipelineId = $this->extractIdFromIri($data->pipeline);
                $pipeline = $this->entityManager->getRepository(Pipeline::class)->find($pipelineId);
                if (!$pipeline) {
                    throw new BadRequestHttpException('Pipeline not found: ' . $pipelineId);
                }
                $entity->setPipeline($pipeline);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested pipeline creation not supported. Use IRI format.');
            }
        }

        // dealType: ManyToOne
        if ($data->dealType !== null) {
            if (is_string($data->dealType)) {
                // IRI format: "/api/dealtypes/{id}"
                $dealTypeId = $this->extractIdFromIri($data->dealType);
                $dealType = $this->entityManager->getRepository(DealType::class)->find($dealTypeId);
                if (!$dealType) {
                    throw new BadRequestHttpException('DealType not found: ' . $dealTypeId);
                }
                $entity->setDealtype($dealType);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested dealType creation not supported. Use IRI format.');
            }
        }

        // category: ManyToOne
        if ($data->category !== null) {
            if (is_string($data->category)) {
                // IRI format: "/api/dealcategorys/{id}"
                $categoryId = $this->extractIdFromIri($data->category);
                $category = $this->entityManager->getRepository(DealCategory::class)->find($categoryId);
                if (!$category) {
                    throw new BadRequestHttpException('DealCategory not found: ' . $categoryId);
                }
                $entity->setCategory($category);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested category creation not supported. Use IRI format.');
            }
        }

        // manager: ManyToOne
        if ($data->manager !== null) {
            if (is_string($data->manager)) {
                // IRI format: "/api/users/{id}"
                $managerId = $this->extractIdFromIri($data->manager);
                $manager = $this->entityManager->getRepository(User::class)->find($managerId);
                if (!$manager) {
                    throw new BadRequestHttpException('User not found: ' . $managerId);
                }
                $entity->setManager($manager);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested manager creation not supported. Use IRI format.');
            }
        }

        // owner: ManyToOne
        if ($data->owner !== null) {
            if (is_string($data->owner)) {
                // IRI format: "/api/users/{id}"
                $ownerId = $this->extractIdFromIri($data->owner);
                $owner = $this->entityManager->getRepository(User::class)->find($ownerId);
                if (!$owner) {
                    throw new BadRequestHttpException('User not found: ' . $ownerId);
                }
                $entity->setOwner($owner);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested owner creation not supported. Use IRI format.');
            }
        } else {
            throw new BadRequestHttpException('owner is required');
        }

        // primaryContact: ManyToOne
        if ($data->primaryContact !== null) {
            if (is_string($data->primaryContact)) {
                // IRI format: "/api/contacts/{id}"
                $primaryContactId = $this->extractIdFromIri($data->primaryContact);
                $primaryContact = $this->entityManager->getRepository(Contact::class)->find($primaryContactId);
                if (!$primaryContact) {
                    throw new BadRequestHttpException('Contact not found: ' . $primaryContactId);
                }
                $entity->setPrimarycontact($primaryContact);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested primaryContact creation not supported. Use IRI format.');
            }
        }

        // leadSource: ManyToOne
        if ($data->leadSource !== null) {
            if (is_string($data->leadSource)) {
                // IRI format: "/api/leadsources/{id}"
                $leadSourceId = $this->extractIdFromIri($data->leadSource);
                $leadSource = $this->entityManager->getRepository(LeadSource::class)->find($leadSourceId);
                if (!$leadSource) {
                    throw new BadRequestHttpException('LeadSource not found: ' . $leadSourceId);
                }
                $entity->setLeadsource($leadSource);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested leadSource creation not supported. Use IRI format.');
            }
        }

        // campaign: ManyToOne
        if ($data->campaign !== null) {
            if (is_string($data->campaign)) {
                // IRI format: "/api/campaigns/{id}"
                $campaignId = $this->extractIdFromIri($data->campaign);
                $campaign = $this->entityManager->getRepository(Campaign::class)->find($campaignId);
                if (!$campaign) {
                    throw new BadRequestHttpException('Campaign not found: ' . $campaignId);
                }
                $entity->setCampaign($campaign);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested campaign creation not supported. Use IRI format.');
            }
        }

        // lostReason: ManyToOne
        if ($data->lostReason !== null) {
            if (is_string($data->lostReason)) {
                // IRI format: "/api/lostreasons/{id}"
                $lostReasonId = $this->extractIdFromIri($data->lostReason);
                $lostReason = $this->entityManager->getRepository(LostReason::class)->find($lostReasonId);
                if (!$lostReason) {
                    throw new BadRequestHttpException('LostReason not found: ' . $lostReasonId);
                }
                $entity->setLostreason($lostReason);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested lostReason creation not supported. Use IRI format.');
            }
        }

        // winReason: ManyToOne
        if ($data->winReason !== null) {
            if (is_string($data->winReason)) {
                // IRI format: "/api/winreasons/{id}"
                $winReasonId = $this->extractIdFromIri($data->winReason);
                $winReason = $this->entityManager->getRepository(WinReason::class)->find($winReasonId);
                if (!$winReason) {
                    throw new BadRequestHttpException('WinReason not found: ' . $winReasonId);
                }
                $entity->setWinreason($winReason);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested winReason creation not supported. Use IRI format.');
            }
        }

        // Persist and flush
        return $this->persistProcessor->process($entity, $operation, $uriVariables, $context);
    }

    /**
     * Extract UUID from IRI format
     */
    private function extractIdFromIri(string $iri): Uuid
    {
        $parts = explode('/', $iri);
        $id = end($parts);

        if (!Uuid::isValid($id)) {
            throw new BadRequestHttpException('Invalid UUID in IRI: ' . $iri);
        }

        return Uuid::fromString($id);
    }

}
