<?php

declare(strict_types=1);

namespace App\State;

use ApiPlatform\Metadata\Operation;
use ApiPlatform\State\ProcessorInterface;
use App\Entity\User;
use App\Dto\UserInputDto;
use App\Service\Utils;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\DependencyInjection\Attribute\Autowire;
use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;
use Symfony\Component\Uid\Uuid;
use App\Entity\Organization;
use App\Entity\Agent;
use App\Entity\Calendar;
use App\Entity\Campaign;
use App\Entity\Contact;
use App\Entity\Deal;
use App\Entity\CalendarExternalLink;
use App\Entity\Role;
use App\Entity\EventResourceBooking;
use App\Entity\EventAttendee;
use App\Entity\Company;
use App\Entity\Event;
use App\Entity\Course;
use App\Entity\Profile;
use App\Entity\SocialMedia;
use App\Entity\StudentCourse;
use App\Entity\Talk;
use App\Entity\Task;
use App\Entity\Pipeline;

/**
 * User State Processor
 *
 * Handles Input DTO -> Entity transformation for POST, PUT, PATCH operations
 * with support for nested object creation and updates.
 *
 * This file is ALWAYS regenerated. DO NOT edit.
 * For custom processing logic, use Event Subscribers.
 *
 * @generated by Genmax Code Generator
 */
class UserProcessor implements ProcessorInterface
{
    public function __construct(
        private readonly EntityManagerInterface $entityManager,
        #[Autowire(service: 'App\MultiTenant\TenantEntityProcessor')]
        private readonly ProcessorInterface $persistProcessor
    ) {}

    /**
     * Normalize property name for matching (removes underscores, lowercase)
     * Uses centralized Utils methods instead of manual string manipulation
     */
    private function normalizePropertyName(string $property): string
    {
        // Convert to camelCase (handles snake_case, etc.) then lowercase
        return strtolower(Utils::toCamelCase($property));
    }

    /**
     * Extract property name from method name (e.g., 'addItem' -> 'item')
     */
    private function extractPropertyFromMethod(string $methodName, string $prefix): string
    {
        // Remove prefix (e.g., 'add', 'set') and convert to lowercase
        return strtolower(substr($methodName, strlen($prefix)));
    }

    /**
     * @param UserInputDto $data
     */
    public function process(mixed $data, Operation $operation, array $uriVariables = [], array $context = []): User
    {
        if (!$data instanceof UserInputDto) {
            throw new BadRequestHttpException('Invalid input data type');
        }

        // Determine if this is a create or update operation
        $entity = null;
        $isUpdate = isset($uriVariables['id']);
        $isPatch = $operation->getMethod() === 'PATCH';

        if ($isUpdate) {
            $entity = $this->entityManager->getRepository(User::class)->find($uriVariables['id']);
            if (!$entity) {
                throw new BadRequestHttpException('User not found');
            }
        }

        if (!$entity) {
            $entity = new User();
        }

        // Get original request data to check which fields were actually sent (for PATCH)
        $requestData = $context['request']->toArray() ?? [];

        // Map scalar properties from DTO to Entity
        // name
        if (!$isPatch || array_key_exists('name', $requestData)) {
            $entity->setName($data->name);
        }
        // active
        if (!$isPatch || array_key_exists('active', $requestData)) {
            $entity->setActive($data->active);
        }
        // avatarUrl
        if (!$isPatch || array_key_exists('avatarUrl', $requestData)) {
            $entity->setAvatarUrl($data->avatarUrl);
        }
        // birthDate
        if (!$isPatch || array_key_exists('birthDate', $requestData)) {
            $entity->setBirthDate($data->birthDate);
        }
        // celPhone
        if (!$isPatch || array_key_exists('celPhone', $requestData)) {
            $entity->setCelPhone($data->celPhone);
        }
        // email
        if (!$isPatch || array_key_exists('email', $requestData)) {
            $entity->setEmail($data->email);
        }
        // emailVerifiedAt
        if (!$isPatch || array_key_exists('emailVerifiedAt', $requestData)) {
            $entity->setEmailVerifiedAt($data->emailVerifiedAt);
        }
        // verified
        if (!$isPatch || array_key_exists('verified', $requestData)) {
            $entity->setVerified($data->verified);
        }
        // termsSigned
        if (!$isPatch || array_key_exists('termsSigned', $requestData)) {
            $entity->setTermsSigned($data->termsSigned);
        }
        // termsSignedAt
        if (!$isPatch || array_key_exists('termsSignedAt', $requestData)) {
            $entity->setTermsSignedAt($data->termsSignedAt);
        }
        // verificationToken
        if (!$isPatch || array_key_exists('verificationToken', $requestData)) {
            $entity->setVerificationToken($data->verificationToken);
        }
        // failedLoginAttempts
        if (!$isPatch || array_key_exists('failedLoginAttempts', $requestData)) {
            $entity->setFailedLoginAttempts($data->failedLoginAttempts);
        }
        // apiToken
        if (!$isPatch || array_key_exists('apiToken', $requestData)) {
            $entity->setApiToken($data->apiToken);
        }
        // apiTokenExpiresAt
        if (!$isPatch || array_key_exists('apiTokenExpiresAt', $requestData)) {
            $entity->setApiTokenExpiresAt($data->apiTokenExpiresAt);
        }
        // openAiApiKey
        if (!$isPatch || array_key_exists('openAiApiKey', $requestData)) {
            $entity->setOpenAiApiKey($data->openAiApiKey);
        }
        // gender
        if (!$isPatch || array_key_exists('gender', $requestData)) {
            $entity->setGender($data->gender);
        }
        // lastLoginAt
        if (!$isPatch || array_key_exists('lastLoginAt', $requestData)) {
            $entity->setLastLoginAt($data->lastLoginAt);
        }
        // lockedUntil
        if (!$isPatch || array_key_exists('lockedUntil', $requestData)) {
            $entity->setLockedUntil($data->lockedUntil);
        }
        // uiSettings
        if (!$isPatch || array_key_exists('uiSettings', $requestData)) {
            $entity->setUiSettings($data->uiSettings);
        }
        // listPreferences
        if (!$isPatch || array_key_exists('listPreferences', $requestData)) {
            $entity->setListPreferences($data->listPreferences);
        }
        // twoFactorEnabled
        if (!$isPatch || array_key_exists('twoFactorEnabled', $requestData)) {
            $entity->setTwoFactorEnabled($data->twoFactorEnabled);
        }
        // lastPasswordChange
        if (!$isPatch || array_key_exists('lastPasswordChange', $requestData)) {
            $entity->setLastPasswordChange($data->lastPasswordChange);
        }
        // twoFactorSecret
        if (!$isPatch || array_key_exists('twoFactorSecret', $requestData)) {
            $entity->setTwoFactorSecret($data->twoFactorSecret);
        }
        // twoFactorBackupCodes
        if (!$isPatch || array_key_exists('twoFactorBackupCodes', $requestData)) {
            $entity->setTwoFactorBackupCodes($data->twoFactorBackupCodes);
        }
        // passwordResetToken
        if (!$isPatch || array_key_exists('passwordResetToken', $requestData)) {
            $entity->setPasswordResetToken($data->passwordResetToken);
        }
        // passwordResetExpiry
        if (!$isPatch || array_key_exists('passwordResetExpiry', $requestData)) {
            $entity->setPasswordResetExpiry($data->passwordResetExpiry);
        }
        // sessionToken
        if (!$isPatch || array_key_exists('sessionToken', $requestData)) {
            $entity->setSessionToken($data->sessionToken);
        }
        // lastPasswordChangeAt
        if (!$isPatch || array_key_exists('lastPasswordChangeAt', $requestData)) {
            $entity->setLastPasswordChangeAt($data->lastPasswordChangeAt);
        }
        // passwordExpiresAt
        if (!$isPatch || array_key_exists('passwordExpiresAt', $requestData)) {
            $entity->setPasswordExpiresAt($data->passwordExpiresAt);
        }
        // mustChangePassword
        if (!$isPatch || array_key_exists('mustChangePassword', $requestData)) {
            $entity->setMustChangePassword($data->mustChangePassword);
        }
        // passkeyEnabled
        if (!$isPatch || array_key_exists('passkeyEnabled', $requestData)) {
            $entity->setPasskeyEnabled($data->passkeyEnabled);
        }
        // passkeyCredentials
        if (!$isPatch || array_key_exists('passkeyCredentials', $requestData)) {
            $entity->setPasskeyCredentials($data->passkeyCredentials);
        }
        // username
        if (!$isPatch || array_key_exists('username', $requestData)) {
            $entity->setUsername($data->username);
        }
        // phone
        if (!$isPatch || array_key_exists('phone', $requestData)) {
            $entity->setPhone($data->phone);
        }
        // mobilePhone
        if (!$isPatch || array_key_exists('mobilePhone', $requestData)) {
            $entity->setMobilePhone($data->mobilePhone);
        }
        // jobTitle
        if (!$isPatch || array_key_exists('jobTitle', $requestData)) {
            $entity->setJobTitle($data->jobTitle);
        }
        // department
        if (!$isPatch || array_key_exists('department', $requestData)) {
            $entity->setDepartment($data->department);
        }
        // timezone
        if (!$isPatch || array_key_exists('timezone', $requestData)) {
            $entity->setTimezone($data->timezone);
        }
        // locale
        if (!$isPatch || array_key_exists('locale', $requestData)) {
            $entity->setLocale($data->locale);
        }
        // preferredLanguage
        if (!$isPatch || array_key_exists('preferredLanguage', $requestData)) {
            $entity->setPreferredLanguage($data->preferredLanguage);
        }
        // emailSignature
        if (!$isPatch || array_key_exists('emailSignature', $requestData)) {
            $entity->setEmailSignature($data->emailSignature);
        }
        // emailNotificationsEnabled
        if (!$isPatch || array_key_exists('emailNotificationsEnabled', $requestData)) {
            $entity->setEmailNotificationsEnabled($data->emailNotificationsEnabled);
        }
        // smsNotificationsEnabled
        if (!$isPatch || array_key_exists('smsNotificationsEnabled', $requestData)) {
            $entity->setSmsNotificationsEnabled($data->smsNotificationsEnabled);
        }
        // calendarSyncEnabled
        if (!$isPatch || array_key_exists('calendarSyncEnabled', $requestData)) {
            $entity->setCalendarSyncEnabled($data->calendarSyncEnabled);
        }
        // workingHours
        if (!$isPatch || array_key_exists('workingHours', $requestData)) {
            $entity->setWorkingHours($data->workingHours);
        }
        // defaultCurrency
        if (!$isPatch || array_key_exists('defaultCurrency', $requestData)) {
            $entity->setDefaultCurrency($data->defaultCurrency);
        }
        // dateFormat
        if (!$isPatch || array_key_exists('dateFormat', $requestData)) {
            $entity->setDateFormat($data->dateFormat);
        }
        // salesTeam
        if (!$isPatch || array_key_exists('salesTeam', $requestData)) {
            $entity->setSalesTeam($data->salesTeam);
        }
        // quotaAmount
        if (!$isPatch || array_key_exists('quotaAmount', $requestData)) {
            $entity->setQuotaAmount($data->quotaAmount);
        }
        // commissionRate
        if (!$isPatch || array_key_exists('commissionRate', $requestData)) {
            $entity->setCommissionRate($data->commissionRate);
        }
        // agent
        if (!$isPatch || array_key_exists('agent', $requestData)) {
            $entity->setAgent($data->agent);
        }
        // agentType
        if (!$isPatch || array_key_exists('agentType', $requestData)) {
            $entity->setAgentType($data->agentType);
        }
        // deletedAt
        if (!$isPatch || array_key_exists('deletedAt', $requestData)) {
            $entity->setDeletedAt($data->deletedAt);
        }
        // avatar
        if (!$isPatch || array_key_exists('avatar', $requestData)) {
            $entity->setAvatar($data->avatar);
        }
        // password
        if (!$isPatch || array_key_exists('password', $requestData)) {
            $entity->setPassword($data->password);
        }
        // title
        if (!$isPatch || array_key_exists('title', $requestData)) {
            $entity->setTitle($data->title);
        }
        // firstName
        if (!$isPatch || array_key_exists('firstName', $requestData)) {
            $entity->setFirstName($data->firstName);
        }
        // lastName
        if (!$isPatch || array_key_exists('lastName', $requestData)) {
            $entity->setLastName($data->lastName);
        }
        // middleName
        if (!$isPatch || array_key_exists('middleName', $requestData)) {
            $entity->setMiddleName($data->middleName);
        }
        // suffix
        if (!$isPatch || array_key_exists('suffix', $requestData)) {
            $entity->setSuffix($data->suffix);
        }
        // nickname
        if (!$isPatch || array_key_exists('nickname', $requestData)) {
            $entity->setNickname($data->nickname);
        }
        // position
        if (!$isPatch || array_key_exists('position', $requestData)) {
            $entity->setPosition($data->position);
        }
        // secondaryEmail
        if (!$isPatch || array_key_exists('secondaryEmail', $requestData)) {
            $entity->setSecondaryEmail($data->secondaryEmail);
        }
        // workPhone
        if (!$isPatch || array_key_exists('workPhone', $requestData)) {
            $entity->setWorkPhone($data->workPhone);
        }
        // homePhone
        if (!$isPatch || array_key_exists('homePhone', $requestData)) {
            $entity->setHomePhone($data->homePhone);
        }
        // phoneExtension
        if (!$isPatch || array_key_exists('phoneExtension', $requestData)) {
            $entity->setPhoneExtension($data->phoneExtension);
        }
        // fax
        if (!$isPatch || array_key_exists('fax', $requestData)) {
            $entity->setFax($data->fax);
        }
        // website
        if (!$isPatch || array_key_exists('website', $requestData)) {
            $entity->setWebsite($data->website);
        }
        // linkedinUrl
        if (!$isPatch || array_key_exists('linkedinUrl', $requestData)) {
            $entity->setLinkedinUrl($data->linkedinUrl);
        }
        // twitterHandle
        if (!$isPatch || array_key_exists('twitterHandle', $requestData)) {
            $entity->setTwitterHandle($data->twitterHandle);
        }
        // address
        if (!$isPatch || array_key_exists('address', $requestData)) {
            $entity->setAddress($data->address);
        }
        // profilePictureUrl
        if (!$isPatch || array_key_exists('profilePictureUrl', $requestData)) {
            $entity->setProfilePictureUrl($data->profilePictureUrl);
        }
        // city
        if (!$isPatch || array_key_exists('city', $requestData)) {
            $entity->setCity($data->city);
        }
        // state
        if (!$isPatch || array_key_exists('state', $requestData)) {
            $entity->setState($data->state);
        }
        // postalCode
        if (!$isPatch || array_key_exists('postalCode', $requestData)) {
            $entity->setPostalCode($data->postalCode);
        }
        // country
        if (!$isPatch || array_key_exists('country', $requestData)) {
            $entity->setCountry($data->country);
        }
        // region
        if (!$isPatch || array_key_exists('region', $requestData)) {
            $entity->setRegion($data->region);
        }
        // officeLocation
        if (!$isPatch || array_key_exists('officeLocation', $requestData)) {
            $entity->setOfficeLocation($data->officeLocation);
        }
        // employeeId
        if (!$isPatch || array_key_exists('employeeId', $requestData)) {
            $entity->setEmployeeId($data->employeeId);
        }
        // hireDate
        if (!$isPatch || array_key_exists('hireDate', $requestData)) {
            $entity->setHireDate($data->hireDate);
        }
        // terminationDate
        if (!$isPatch || array_key_exists('terminationDate', $requestData)) {
            $entity->setTerminationDate($data->terminationDate);
        }
        // employmentStatus
        if (!$isPatch || array_key_exists('employmentStatus', $requestData)) {
            $entity->setEmploymentStatus($data->employmentStatus);
        }
        // costCenter
        if (!$isPatch || array_key_exists('costCenter', $requestData)) {
            $entity->setCostCenter($data->costCenter);
        }
        // division
        if (!$isPatch || array_key_exists('division', $requestData)) {
            $entity->setDivision($data->division);
        }
        // businessUnit
        if (!$isPatch || array_key_exists('businessUnit', $requestData)) {
            $entity->setBusinessUnit($data->businessUnit);
        }
        // salary
        if (!$isPatch || array_key_exists('salary', $requestData)) {
            $entity->setSalary($data->salary);
        }
        // salaryFrequency
        if (!$isPatch || array_key_exists('salaryFrequency', $requestData)) {
            $entity->setSalaryFrequency($data->salaryFrequency);
        }
        // skills
        if (!$isPatch || array_key_exists('skills', $requestData)) {
            $entity->setSkills($data->skills);
        }
        // certifications
        if (!$isPatch || array_key_exists('certifications', $requestData)) {
            $entity->setCertifications($data->certifications);
        }
        // languages
        if (!$isPatch || array_key_exists('languages', $requestData)) {
            $entity->setLanguages($data->languages);
        }
        // bio
        if (!$isPatch || array_key_exists('bio', $requestData)) {
            $entity->setBio($data->bio);
        }
        // notes
        if (!$isPatch || array_key_exists('notes', $requestData)) {
            $entity->setNotes($data->notes);
        }
        // tags
        if (!$isPatch || array_key_exists('tags', $requestData)) {
            $entity->setTags($data->tags);
        }
        // loginCount
        if (!$isPatch || array_key_exists('loginCount', $requestData)) {
            $entity->setLoginCount($data->loginCount);
        }
        // lastIpAddress
        if (!$isPatch || array_key_exists('lastIpAddress', $requestData)) {
            $entity->setLastIpAddress($data->lastIpAddress);
        }
        // lastUserAgent
        if (!$isPatch || array_key_exists('lastUserAgent', $requestData)) {
            $entity->setLastUserAgent($data->lastUserAgent);
        }
        // visible
        if (!$isPatch || array_key_exists('visible', $requestData)) {
            $entity->setVisible($data->visible);
        }
        // profileCompleteness
        if (!$isPatch || array_key_exists('profileCompleteness', $requestData)) {
            $entity->setProfileCompleteness($data->profileCompleteness);
        }
        // lastActivityAt
        if (!$isPatch || array_key_exists('lastActivityAt', $requestData)) {
            $entity->setLastActivityAt($data->lastActivityAt);
        }
        // status
        if (!$isPatch || array_key_exists('status', $requestData)) {
            $entity->setStatus($data->status);
        }
        // statusMessage
        if (!$isPatch || array_key_exists('statusMessage', $requestData)) {
            $entity->setStatusMessage($data->statusMessage);
        }
        // locked
        if (!$isPatch || array_key_exists('locked', $requestData)) {
            $entity->setLocked($data->locked);
        }
        // lockedReason
        if (!$isPatch || array_key_exists('lockedReason', $requestData)) {
            $entity->setLockedReason($data->lockedReason);
        }
        // lockedAt
        if (!$isPatch || array_key_exists('lockedAt', $requestData)) {
            $entity->setLockedAt($data->lockedAt);
        }
        // customFields
        if (!$isPatch || array_key_exists('customFields', $requestData)) {
            $entity->setCustomFields($data->customFields);
        }

        // Map relationship properties
        // organization: ManyToOne
        // organization is auto-assigned by TenantEntityProcessor if not provided
        if (!$isPatch || array_key_exists('organization', $requestData)) {
            if ($data->organization !== null) {
                if (is_string($data->organization)) {
                    // IRI format: "/api/organizatia/{id}"
                    $organizationId = $this->extractIdFromIri($data->organization);
                    $organization = $this->entityManager->getRepository(Organization::class)->find($organizationId);
                    if (!$organization) {
                        throw new BadRequestHttpException('Organization not found: ' . $organizationId);
                    }
                    $entity->setOrganization($organization);
                } else {
                    // Nested object creation (if supported)
                    throw new BadRequestHttpException('Nested organization creation not supported. Use IRI format.');
                }
            }
        }

        // manager: ManyToOne
        if (!$isPatch || array_key_exists('manager', $requestData)) {
            if ($data->manager !== null) {
                if (is_string($data->manager)) {
                    // IRI format: "/api/users/{id}"
                    $managerId = $this->extractIdFromIri($data->manager);
                    $manager = $this->entityManager->getRepository(User::class)->find($managerId);
                    if (!$manager) {
                        throw new BadRequestHttpException('User not found: ' . $managerId);
                    }
                    $entity->setManager($manager);
                } else {
                    // Nested object creation (if supported)
                    throw new BadRequestHttpException('Nested manager creation not supported. Use IRI format.');
                }
            }
        }

        // Persist and flush
        return $this->persistProcessor->process($entity, $operation, $uriVariables, $context);
    }

    /**
     * Extract UUID from IRI format
     */
    private function extractIdFromIri(string $iri): Uuid
    {
        $parts = explode('/', $iri);
        $id = end($parts);

        if (!Uuid::isValid($id)) {
            throw new BadRequestHttpException('Invalid UUID in IRI: ' . $iri);
        }

        return Uuid::fromString($id);
    }

    /**
     * Map array data to entity properties using setters
     * Handles nested collections recursively
     *
     * @param array $data Associative array of property => value
     * @param object $entity Target entity instance
     */
    private function mapArrayToEntity(array $data, object $entity): void
    {
        foreach ($data as $property => $value) {
            // Skip special keys like @id, @type, @context
            if (str_starts_with($property, '@')) {
                continue;
            }

            // Handle nested collections using reflection to find adder methods
            if (is_array($value) && !empty($value) && isset($value[0]) && is_array($value[0])) {
                // Find adder method using reflection - scan all methods starting with 'add'
                $reflectionClass = new \ReflectionClass($entity);
                foreach ($reflectionClass->getMethods(\ReflectionMethod::IS_PUBLIC) as $method) {
                    if (!str_starts_with($method->getName(), 'add')) {
                        continue;
                    }

                    // Check if this might be the right adder based on property name similarity
                    $normalizedProperty = $this->normalizePropertyName($property);
                    $extractedFromMethod = $this->extractPropertyFromMethod($method->getName(), 'add');

                    // Try to match: property name should be similar to method's entity name
                    // e.g., 'items' matches 'addItem', 'user_items' matches 'addUserItem'
                    if (!str_contains($normalizedProperty, $extractedFromMethod) &&
                        !str_contains($extractedFromMethod, $normalizedProperty)) {
                        continue;
                    }

                    $parameters = $method->getParameters();
                    if (count($parameters) > 0) {
                        $paramType = $parameters[0]->getType();
                        if ($paramType && $paramType instanceof \ReflectionNamedType) {
                            $className = $paramType->getName();
                            if (class_exists($className)) {
                                $addMethod = $method->getName();
                                $setParentMethods = array_filter(
                                    $reflectionClass->getMethods(\ReflectionMethod::IS_PUBLIC),
                                    fn($m) => str_starts_with($m->getName(), 'set')
                                );

                                foreach ($value as $itemData) {
                                    $item = new $className();
                                    $this->mapArrayToEntity($itemData, $item);

                                    // Try to set parent relationship using reflection
                                    $itemReflection = new \ReflectionClass($item);
                                    foreach ($itemReflection->getMethods(\ReflectionMethod::IS_PUBLIC) as $itemMethod) {
                                        if (str_starts_with($itemMethod->getName(), 'set')) {
                                            $params = $itemMethod->getParameters();
                                            if (count($params) > 0) {
                                                $paramType = $params[0]->getType();
                                                if ($paramType instanceof \ReflectionNamedType &&
                                                    $paramType->getName() === get_class($entity)) {
                                                    $item->{$itemMethod->getName()}($entity);
                                                    break;
                                                }
                                            }
                                        }
                                    }

                                    $entity->$addMethod($item);
                                    $this->entityManager->persist($item);
                                }
                                continue 2; // Skip to next property
                            }
                        }
                    }
                }
            }

            // Find setter method using reflection - no string manipulation guessing
            $reflectionClass = new \ReflectionClass($entity);
            $setter = null;
            foreach ($reflectionClass->getMethods(\ReflectionMethod::IS_PUBLIC) as $method) {
                if (!str_starts_with($method->getName(), 'set')) {
                    continue;
                }

                // Check if method name matches property (case-insensitive, normalized matching)
                $extractedFromMethod = $this->extractPropertyFromMethod($method->getName(), 'set');
                $normalizedProperty = $this->normalizePropertyName($property);

                if ($extractedFromMethod === $normalizedProperty) {
                    $setter = $method->getName();
                    break;
                }
            }

            if (method_exists($entity, $setter)) {
                // Handle different value types
                if ($value instanceof \DateTimeInterface || $value === null || is_scalar($value)) {
                    $entity->$setter($value);
                } elseif (is_array($value) && !empty($value)) {
                    // Handle JSON arrays (like metadata, tags) - not entity collections
                    $entity->$setter($value);
                } elseif (is_string($value) && str_starts_with($value, '/api/') && $setter) {
                    // Handle IRI references - use reflection to determine expected type
                    try {
                        $refId = $this->extractIdFromIri($value);

                        // Use reflection to get the expected parameter type for the setter
                        $reflectionMethod = new \ReflectionMethod($entity, $setter);
                        $parameters = $reflectionMethod->getParameters();

                        if (count($parameters) > 0) {
                            $paramType = $parameters[0]->getType();
                            if ($paramType && $paramType instanceof \ReflectionNamedType) {
                                $className = $paramType->getName();
                                if (class_exists($className)) {
                                    $refEntity = $this->entityManager->getRepository($className)->find($refId);
                                    if ($refEntity) {
                                        $entity->$setter($refEntity);
                                    }
                                }
                            }
                        }
                    } catch (\Exception $e) {
                        // Skip if IRI resolution fails
                        continue;
                    }
                }
            }
        }
    }
}
