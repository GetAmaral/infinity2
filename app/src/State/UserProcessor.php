<?php

declare(strict_types=1);

namespace App\State;

use ApiPlatform\Metadata\Operation;
use ApiPlatform\State\ProcessorInterface;
use App\Entity\User;
use App\Dto\UserInputDto;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\DependencyInjection\Attribute\Autowire;
use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;
use Symfony\Component\Uid\Uuid;
use App\Entity\Organization;
use App\Entity\Agent;
use App\Entity\Calendar;
use App\Entity\Campaign;
use App\Entity\Contact;
use App\Entity\Deal;
use App\Entity\CalendarExternalLink;
use App\Entity\Role;
use App\Entity\EventResourceBooking;
use App\Entity\EventAttendee;
use App\Entity\Company;
use App\Entity\Event;
use App\Entity\Course;
use App\Entity\Profile;
use App\Entity\SocialMedia;
use App\Entity\StudentCourse;
use App\Entity\Talk;
use App\Entity\Task;
use App\Entity\Pipeline;

/**
 * User State Processor
 *
 * Handles Input DTO -> Entity transformation for POST, PUT, PATCH operations
 * with support for nested object creation and updates.
 *
 * This file is ALWAYS regenerated. DO NOT edit.
 * For custom processing logic, use Event Subscribers.
 *
 * @generated by Genmax Code Generator
 */
class UserProcessor implements ProcessorInterface
{
    public function __construct(
        private readonly EntityManagerInterface $entityManager,
        #[Autowire(service: 'App\MultiTenant\TenantEntityProcessor')]
        private readonly ProcessorInterface $persistProcessor
    ) {}

    /**
     * @param UserInputDto $data
     */
    public function process(mixed $data, Operation $operation, array $uriVariables = [], array $context = []): User
    {
        if (!$data instanceof UserInputDto) {
            throw new BadRequestHttpException('Invalid input data type');
        }

        // Determine if this is a create or update operation
        $entity = null;
        if (isset($uriVariables['id'])) {
            $entity = $this->entityManager->getRepository(User::class)->find($uriVariables['id']);
            if (!$entity) {
                throw new BadRequestHttpException('User not found');
            }
        }

        if (!$entity) {
            $entity = new User();
        }

        // Map scalar properties from DTO to Entity
        $entity->setName($data->name);
        $entity->setActive($data->active);
        $entity->setAvatarurl($data->avatarUrl);
        $entity->setBirthdate($data->birthDate);
        $entity->setCelphone($data->celPhone);
        $entity->setEmail($data->email);
        $entity->setEmailverifiedat($data->emailVerifiedAt);
        $entity->setVerified($data->verified);
        $entity->setTermssigned($data->termsSigned);
        $entity->setTermssignedat($data->termsSignedAt);
        $entity->setVerificationtoken($data->verificationToken);
        $entity->setFailedloginattempts($data->failedLoginAttempts);
        $entity->setApitoken($data->apiToken);
        $entity->setApitokenexpiresat($data->apiTokenExpiresAt);
        $entity->setOpenaiapikey($data->openAiApiKey);
        $entity->setGender($data->gender);
        $entity->setLastloginat($data->lastLoginAt);
        $entity->setLockeduntil($data->lockedUntil);
        $entity->setUisettings($data->uiSettings);
        $entity->setListpreferences($data->listPreferences);
        $entity->setTwofactorenabled($data->twoFactorEnabled);
        $entity->setLastpasswordchange($data->lastPasswordChange);
        $entity->setTwofactorsecret($data->twoFactorSecret);
        $entity->setTwofactorbackupcodes($data->twoFactorBackupCodes);
        $entity->setPasswordresettoken($data->passwordResetToken);
        $entity->setPasswordresetexpiry($data->passwordResetExpiry);
        $entity->setSessiontoken($data->sessionToken);
        $entity->setLastpasswordchangeat($data->lastPasswordChangeAt);
        $entity->setPasswordexpiresat($data->passwordExpiresAt);
        $entity->setMustchangepassword($data->mustChangePassword);
        $entity->setPasskeyenabled($data->passkeyEnabled);
        $entity->setPasskeycredentials($data->passkeyCredentials);
        $entity->setUsername($data->username);
        $entity->setPhone($data->phone);
        $entity->setMobilephone($data->mobilePhone);
        $entity->setJobtitle($data->jobTitle);
        $entity->setDepartment($data->department);
        $entity->setTimezone($data->timezone);
        $entity->setLocale($data->locale);
        $entity->setPreferredlanguage($data->preferredLanguage);
        $entity->setEmailsignature($data->emailSignature);
        $entity->setEmailnotificationsenabled($data->emailNotificationsEnabled);
        $entity->setSmsnotificationsenabled($data->smsNotificationsEnabled);
        $entity->setCalendarsyncenabled($data->calendarSyncEnabled);
        $entity->setWorkinghours($data->workingHours);
        $entity->setDefaultcurrency($data->defaultCurrency);
        $entity->setDateformat($data->dateFormat);
        $entity->setSalesteam($data->salesTeam);
        $entity->setQuotaamount($data->quotaAmount);
        $entity->setCommissionrate($data->commissionRate);
        $entity->setAgent($data->agent);
        $entity->setAgenttype($data->agentType);
        $entity->setDeletedat($data->deletedAt);
        $entity->setAvatar($data->avatar);
        $entity->setPassword($data->password);
        $entity->setTitle($data->title);
        $entity->setFirstname($data->firstName);
        $entity->setLastname($data->lastName);
        $entity->setMiddlename($data->middleName);
        $entity->setSuffix($data->suffix);
        $entity->setNickname($data->nickname);
        $entity->setPosition($data->position);
        $entity->setSecondaryemail($data->secondaryEmail);
        $entity->setWorkphone($data->workPhone);
        $entity->setHomephone($data->homePhone);
        $entity->setPhoneextension($data->phoneExtension);
        $entity->setFax($data->fax);
        $entity->setWebsite($data->website);
        $entity->setLinkedinurl($data->linkedinUrl);
        $entity->setTwitterhandle($data->twitterHandle);
        $entity->setAddress($data->address);
        $entity->setProfilepictureurl($data->profilePictureUrl);
        $entity->setCity($data->city);
        $entity->setState($data->state);
        $entity->setPostalcode($data->postalCode);
        $entity->setCountry($data->country);
        $entity->setRegion($data->region);
        $entity->setOfficelocation($data->officeLocation);
        $entity->setEmployeeid($data->employeeId);
        $entity->setHiredate($data->hireDate);
        $entity->setTerminationdate($data->terminationDate);
        $entity->setEmploymentstatus($data->employmentStatus);
        $entity->setCostcenter($data->costCenter);
        $entity->setDivision($data->division);
        $entity->setBusinessunit($data->businessUnit);
        $entity->setSalary($data->salary);
        $entity->setSalaryfrequency($data->salaryFrequency);
        $entity->setSkills($data->skills);
        $entity->setCertifications($data->certifications);
        $entity->setLanguages($data->languages);
        $entity->setBio($data->bio);
        $entity->setNotes($data->notes);
        $entity->setTags($data->tags);
        $entity->setLogincount($data->loginCount);
        $entity->setLastipaddress($data->lastIpAddress);
        $entity->setLastuseragent($data->lastUserAgent);
        $entity->setVisible($data->visible);
        $entity->setProfilecompleteness($data->profileCompleteness);
        $entity->setLastactivityat($data->lastActivityAt);
        $entity->setStatus($data->status);
        $entity->setStatusmessage($data->statusMessage);
        $entity->setLocked($data->locked);
        $entity->setLockedreason($data->lockedReason);
        $entity->setLockedat($data->lockedAt);
        $entity->setCustomfields($data->customFields);

        // Map relationship properties
        // organization: ManyToOne
        if ($data->organization !== null) {
            if (is_string($data->organization)) {
                // IRI format: "/api/organizations/{id}"
                $organizationId = $this->extractIdFromIri($data->organization);
                $organization = $this->entityManager->getRepository(Organization::class)->find($organizationId);
                if (!$organization) {
                    throw new BadRequestHttpException('Organization not found: ' . $organizationId);
                }
                $entity->setOrganization($organization);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested organization creation not supported. Use IRI format.');
            }
        } else {
            throw new BadRequestHttpException('organization is required');
        }

        // manager: ManyToOne
        if ($data->manager !== null) {
            if (is_string($data->manager)) {
                // IRI format: "/api/users/{id}"
                $managerId = $this->extractIdFromIri($data->manager);
                $manager = $this->entityManager->getRepository(User::class)->find($managerId);
                if (!$manager) {
                    throw new BadRequestHttpException('User not found: ' . $managerId);
                }
                $entity->setManager($manager);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested manager creation not supported. Use IRI format.');
            }
        }

        // Persist and flush
        return $this->persistProcessor->process($entity, $operation, $uriVariables, $context);
    }

    /**
     * Extract UUID from IRI format
     */
    private function extractIdFromIri(string $iri): Uuid
    {
        $parts = explode('/', $iri);
        $id = end($parts);

        if (!Uuid::isValid($id)) {
            throw new BadRequestHttpException('Invalid UUID in IRI: ' . $iri);
        }

        return Uuid::fromString($id);
    }

}
