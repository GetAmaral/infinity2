<?php

declare(strict_types=1);

namespace App\State;

use ApiPlatform\Metadata\Operation;
use ApiPlatform\State\ProcessorInterface;
use App\Entity\StepConnection;
use App\Dto\StepConnectionInputDto;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\DependencyInjection\Attribute\Autowire;
use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;
use Symfony\Component\Uid\Uuid;
use App\Entity\StepOutput;
use App\Entity\StepInput;

/**
 * StepConnection State Processor
 *
 * Handles Input DTO -> Entity transformation for POST, PUT, PATCH operations
 * with support for nested object creation and updates.
 *
 * This file is ALWAYS regenerated. DO NOT edit.
 * For custom processing logic, use Event Subscribers.
 *
 * @generated by Genmax Code Generator
 */
class StepConnectionProcessor implements ProcessorInterface
{
    public function __construct(
        private readonly EntityManagerInterface $entityManager,
        #[Autowire(service: 'App\MultiTenant\TenantEntityProcessor')]
        private readonly ProcessorInterface $persistProcessor
    ) {}

    /**
     * @param StepConnectionInputDto $data
     */
    public function process(mixed $data, Operation $operation, array $uriVariables = [], array $context = []): StepConnection
    {
        if (!$data instanceof StepConnectionInputDto) {
            throw new BadRequestHttpException('Invalid input data type');
        }

        // Determine if this is a create or update operation
        $entity = null;
        if (isset($uriVariables['id'])) {
            $entity = $this->entityManager->getRepository(StepConnection::class)->find($uriVariables['id']);
            if (!$entity) {
                throw new BadRequestHttpException('StepConnection not found');
            }
        }

        if (!$entity) {
            $entity = new StepConnection();
        }

        // Map scalar properties from DTO to Entity

        // Map relationship properties
        // sourceOutput: OneToOne
        if ($data->sourceOutput !== null) {
            if (is_string($data->sourceOutput)) {
                // IRI format: "/api/stepoutputs/{id}"
                $sourceOutputId = $this->extractIdFromIri($data->sourceOutput);
                $sourceOutput = $this->entityManager->getRepository(StepOutput::class)->find($sourceOutputId);
                if (!$sourceOutput) {
                    throw new BadRequestHttpException('StepOutput not found: ' . $sourceOutputId);
                }
                $entity->setSourceoutput($sourceOutput);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested sourceOutput creation not supported. Use IRI format.');
            }
        } else {
            throw new BadRequestHttpException('sourceOutput is required');
        }

        // targetInput: ManyToOne
        if ($data->targetInput !== null) {
            if (is_string($data->targetInput)) {
                // IRI format: "/api/stepinputs/{id}"
                $targetInputId = $this->extractIdFromIri($data->targetInput);
                $targetInput = $this->entityManager->getRepository(StepInput::class)->find($targetInputId);
                if (!$targetInput) {
                    throw new BadRequestHttpException('StepInput not found: ' . $targetInputId);
                }
                $entity->setTargetinput($targetInput);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested targetInput creation not supported. Use IRI format.');
            }
        } else {
            throw new BadRequestHttpException('targetInput is required');
        }

        // Persist and flush
        return $this->persistProcessor->process($entity, $operation, $uriVariables, $context);
    }

    /**
     * Extract UUID from IRI format
     */
    private function extractIdFromIri(string $iri): Uuid
    {
        $parts = explode('/', $iri);
        $id = end($parts);

        if (!Uuid::isValid($id)) {
            throw new BadRequestHttpException('Invalid UUID in IRI: ' . $iri);
        }

        return Uuid::fromString($id);
    }

}
