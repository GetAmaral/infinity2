<?php

declare(strict_types=1);

namespace App\State;

use ApiPlatform\Metadata\Operation;
use ApiPlatform\State\ProcessorInterface;
use App\Entity\TaskTemplate;
use App\Dto\TaskTemplateInputDto;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\DependencyInjection\Attribute\Autowire;
use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;
use Symfony\Component\Uid\Uuid;
use App\Entity\Organization;
use App\Entity\PipelineStageTemplate;
use App\Entity\TaskType;

/**
 * TaskTemplate State Processor
 *
 * Handles Input DTO -> Entity transformation for POST, PUT, PATCH operations
 * with support for nested object creation and updates.
 *
 * This file is ALWAYS regenerated. DO NOT edit.
 * For custom processing logic, use Event Subscribers.
 *
 * @generated by Genmax Code Generator
 */
class TaskTemplateProcessor implements ProcessorInterface
{
    public function __construct(
        private readonly EntityManagerInterface $entityManager,
        #[Autowire(service: 'App\MultiTenant\TenantEntityProcessor')]
        private readonly ProcessorInterface $persistProcessor
    ) {}

    /**
     * @param TaskTemplateInputDto $data
     */
    public function process(mixed $data, Operation $operation, array $uriVariables = [], array $context = []): TaskTemplate
    {
        if (!$data instanceof TaskTemplateInputDto) {
            throw new BadRequestHttpException('Invalid input data type');
        }

        // Determine if this is a create or update operation
        $entity = null;
        if (isset($uriVariables['id'])) {
            $entity = $this->entityManager->getRepository(TaskTemplate::class)->find($uriVariables['id']);
            if (!$entity) {
                throw new BadRequestHttpException('TaskTemplate not found');
            }
        }

        if (!$entity) {
            $entity = new TaskTemplate();
        }

        // Map scalar properties from DTO to Entity
        $entity->setName($data->name);
        $entity->setDescription($data->description);
        $entity->setCommand($data->command);
        $entity->setActive($data->active);
        $entity->setDurationminutes($data->durationMinutes);
        $entity->setLocation($data->location);
        $entity->setPeriodicityinterval($data->periodicityInterval);
        $entity->setPeriodicitytimeframe($data->periodicityTimeframe);
        $entity->setPriority($data->priority);

        // Map relationship properties
        // organization: ManyToOne
        if ($data->organization !== null) {
            if (is_string($data->organization)) {
                // IRI format: "/api/organizations/{id}"
                $organizationId = $this->extractIdFromIri($data->organization);
                $organization = $this->entityManager->getRepository(Organization::class)->find($organizationId);
                if (!$organization) {
                    throw new BadRequestHttpException('Organization not found: ' . $organizationId);
                }
                $entity->setOrganization($organization);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested organization creation not supported. Use IRI format.');
            }
        } else {
            throw new BadRequestHttpException('organization is required');
        }

        // pipelineStageTemplate: ManyToOne
        if ($data->pipelineStageTemplate !== null) {
            if (is_string($data->pipelineStageTemplate)) {
                // IRI format: "/api/pipelinestagetemplates/{id}"
                $pipelineStageTemplateId = $this->extractIdFromIri($data->pipelineStageTemplate);
                $pipelineStageTemplate = $this->entityManager->getRepository(PipelineStageTemplate::class)->find($pipelineStageTemplateId);
                if (!$pipelineStageTemplate) {
                    throw new BadRequestHttpException('PipelineStageTemplate not found: ' . $pipelineStageTemplateId);
                }
                $entity->setPipelinestagetemplate($pipelineStageTemplate);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested pipelineStageTemplate creation not supported. Use IRI format.');
            }
        }

        // type: ManyToOne
        if ($data->type !== null) {
            if (is_string($data->type)) {
                // IRI format: "/api/tasktypes/{id}"
                $typeId = $this->extractIdFromIri($data->type);
                $type = $this->entityManager->getRepository(TaskType::class)->find($typeId);
                if (!$type) {
                    throw new BadRequestHttpException('TaskType not found: ' . $typeId);
                }
                $entity->setType($type);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested type creation not supported. Use IRI format.');
            }
        }

        // Persist and flush
        return $this->persistProcessor->process($entity, $operation, $uriVariables, $context);
    }

    /**
     * Extract UUID from IRI format
     */
    private function extractIdFromIri(string $iri): Uuid
    {
        $parts = explode('/', $iri);
        $id = end($parts);

        if (!Uuid::isValid($id)) {
            throw new BadRequestHttpException('Invalid UUID in IRI: ' . $iri);
        }

        return Uuid::fromString($id);
    }

}
