<?php

declare(strict_types=1);

namespace App\State;

use ApiPlatform\Metadata\Operation;
use ApiPlatform\State\ProcessorInterface;
use App\Entity\Organization;
use App\Dto\OrganizationInputDto;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\DependencyInjection\Attribute\Autowire;
use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;
use Symfony\Component\Uid\Uuid;
use App\Entity\StudentCourse;
use App\Entity\Agent;
use App\Entity\Product;
use App\Entity\BillingFrequency;
use App\Entity\Brand;
use App\Entity\Calendar;
use App\Entity\Campaign;
use App\Entity\PipelineStageTemplate;
use App\Entity\TaskTemplate;
use App\Entity\Reminder;
use App\Entity\PipelineTemplate;
use App\Entity\WinReason;
use App\Entity\TreeFlow;
use App\Entity\City;
use App\Entity\CalendarType;
use App\Entity\Attachment;
use App\Entity\DealCategory;
use App\Entity\DealType;
use App\Entity\EventAttendee;
use App\Entity\LostReason;
use App\Entity\MeetingData;
use App\Entity\Notification;
use App\Entity\Company;
use App\Entity\Competitor;
use App\Entity\Contact;
use App\Entity\Course;
use App\Entity\DealStage;
use App\Entity\Deal;
use App\Entity\EventCategory;
use App\Entity\EventResourceBooking;
use App\Entity\EventResourceType;
use App\Entity\EventResource;
use App\Entity\Event;
use App\Entity\Flag;
use App\Entity\Holiday;
use App\Entity\LeadSource;
use App\Entity\Module;
use App\Entity\NotificationType;
use App\Entity\PipelineStage;
use App\Entity\Pipeline;
use App\Entity\ProductBatch;
use App\Entity\ProductCategory;
use App\Entity\ProductLine;
use App\Entity\Profile;
use App\Entity\SocialMedia;
use App\Entity\Tag;
use App\Entity\TalkMessage;
use App\Entity\TalkType;
use App\Entity\Talk;
use App\Entity\TaskType;
use App\Entity\Task;
use App\Entity\TaxCategory;
use App\Entity\User;
use App\Entity\WorkingHour;

/**
 * Organization State Processor
 *
 * Handles Input DTO -> Entity transformation for POST, PUT, PATCH operations
 * with support for nested object creation and updates.
 *
 * This file is ALWAYS regenerated. DO NOT edit.
 * For custom processing logic, use Event Subscribers.
 *
 * @generated by Genmax Code Generator
 */
class OrganizationProcessor implements ProcessorInterface
{
    public function __construct(
        private readonly EntityManagerInterface $entityManager,
        #[Autowire(service: 'App\MultiTenant\TenantEntityProcessor')]
        private readonly ProcessorInterface $persistProcessor
    ) {}

    /**
     * @param OrganizationInputDto $data
     */
    public function process(mixed $data, Operation $operation, array $uriVariables = [], array $context = []): Organization
    {
        if (!$data instanceof OrganizationInputDto) {
            throw new BadRequestHttpException('Invalid input data type');
        }

        // Determine if this is a create or update operation
        $entity = null;
        $isUpdate = isset($uriVariables['id']);
        $isPatch = $operation->getMethod() === 'PATCH';

        if ($isUpdate) {
            $entity = $this->entityManager->getRepository(Organization::class)->find($uriVariables['id']);
            if (!$entity) {
                throw new BadRequestHttpException('Organization not found');
            }
        }

        if (!$entity) {
            $entity = new Organization();
        }

        // Get original request data to check which fields were actually sent (for PATCH)
        $requestData = $context['request']->toArray() ?? [];

        // Map scalar properties from DTO to Entity
        // logoPath
        if (!$isPatch || array_key_exists('logoPath', $requestData)) {
            $entity->setLogopath($data->logoPath);
        }
        // name
        if (!$isPatch || array_key_exists('name', $requestData)) {
            $entity->setName($data->name);
        }
        // logoPathDark
        if (!$isPatch || array_key_exists('logoPathDark', $requestData)) {
            $entity->setLogopathdark($data->logoPathDark);
        }
        // description
        if (!$isPatch || array_key_exists('description', $requestData)) {
            $entity->setDescription($data->description);
        }
        // logoUrl
        if (!$isPatch || array_key_exists('logoUrl', $requestData)) {
            $entity->setLogourl($data->logoUrl);
        }
        // industry
        if (!$isPatch || array_key_exists('industry', $requestData)) {
            $entity->setIndustry($data->industry);
        }
        // address
        if (!$isPatch || array_key_exists('address', $requestData)) {
            $entity->setAddress($data->address);
        }
        // website
        if (!$isPatch || array_key_exists('website', $requestData)) {
            $entity->setWebsite($data->website);
        }
        // active
        if (!$isPatch || array_key_exists('active', $requestData)) {
            $entity->setActive($data->active);
        }
        // branding
        if (!$isPatch || array_key_exists('branding', $requestData)) {
            $entity->setBranding($data->branding);
        }
        // businessPhone
        if (!$isPatch || array_key_exists('businessPhone', $requestData)) {
            $entity->setBusinessphone($data->businessPhone);
        }
        // businessSettings
        if (!$isPatch || array_key_exists('businessSettings', $requestData)) {
            $entity->setBusinesssettings($data->businessSettings);
        }
        // celPhone
        if (!$isPatch || array_key_exists('celPhone', $requestData)) {
            $entity->setCelphone($data->celPhone);
        }
        // companySize
        if (!$isPatch || array_key_exists('companySize', $requestData)) {
            $entity->setCompanysize($data->companySize);
        }
        // contactName
        if (!$isPatch || array_key_exists('contactName', $requestData)) {
            $entity->setContactname($data->contactName);
        }
        // currency
        if (!$isPatch || array_key_exists('currency', $requestData)) {
            $entity->setCurrency($data->currency);
        }
        // featureFlags
        if (!$isPatch || array_key_exists('featureFlags', $requestData)) {
            $entity->setFeatureflags($data->featureFlags);
        }
        // geo
        if (!$isPatch || array_key_exists('geo', $requestData)) {
            $entity->setGeo($data->geo);
        }
        // integrationConfig
        if (!$isPatch || array_key_exists('integrationConfig', $requestData)) {
            $entity->setIntegrationconfig($data->integrationConfig);
        }
        // navConfig
        if (!$isPatch || array_key_exists('navConfig', $requestData)) {
            $entity->setNavconfig($data->navConfig);
        }
        // postalCode
        if (!$isPatch || array_key_exists('postalCode', $requestData)) {
            $entity->setPostalcode($data->postalCode);
        }
        // securityConfig
        if (!$isPatch || array_key_exists('securityConfig', $requestData)) {
            $entity->setSecurityconfig($data->securityConfig);
        }
        // slug
        if (!$isPatch || array_key_exists('slug', $requestData)) {
            $entity->setSlug($data->slug);
        }
        // status
        if (!$isPatch || array_key_exists('status', $requestData)) {
            $entity->setStatus($data->status);
        }
        // timeZone
        if (!$isPatch || array_key_exists('timeZone', $requestData)) {
            $entity->setTimezone($data->timeZone);
        }
        // uiPreferences
        if (!$isPatch || array_key_exists('uiPreferences', $requestData)) {
            $entity->setUipreferences($data->uiPreferences);
        }

        // Map relationship properties
        // city: ManyToOne
        if (!$isPatch || array_key_exists('city', $requestData)) {
            if ($data->city !== null) {
                if (is_string($data->city)) {
                    // IRI format: "/api/citys/{id}"
                    $cityId = $this->extractIdFromIri($data->city);
                    $city = $this->entityManager->getRepository(City::class)->find($cityId);
                    if (!$city) {
                        throw new BadRequestHttpException('City not found: ' . $cityId);
                    }
                    $entity->setCity($city);
                } else {
                    // Nested object creation (if supported)
                    throw new BadRequestHttpException('Nested city creation not supported. Use IRI format.');
                }
            }
        }

        // Persist and flush
        return $this->persistProcessor->process($entity, $operation, $uriVariables, $context);
    }

    /**
     * Extract UUID from IRI format
     */
    private function extractIdFromIri(string $iri): Uuid
    {
        $parts = explode('/', $iri);
        $id = end($parts);

        if (!Uuid::isValid($id)) {
            throw new BadRequestHttpException('Invalid UUID in IRI: ' . $iri);
        }

        return Uuid::fromString($id);
    }

    /**
     * Map array data to entity properties using setters
     *
     * @param array $data Associative array of property => value
     * @param object $entity Target entity instance
     */
    private function mapArrayToEntity(array $data, object $entity): void
    {
        foreach ($data as $property => $value) {
            // Skip special keys like @id, @type, @context
            if (str_starts_with($property, '@')) {
                continue;
            }

            // Convert snake_case to camelCase for setter
            $setter = 'set' . str_replace('_', '', ucwords($property, '_'));

            if (method_exists($entity, $setter)) {
                // Handle different value types
                if ($value instanceof \DateTimeInterface || $value === null || is_scalar($value) || is_array($value)) {
                    $entity->$setter($value);
                } elseif (is_string($value) && str_starts_with($value, '/api/')) {
                    // Handle IRI references - resolve to actual entity
                    try {
                        $refId = $this->extractIdFromIri($value);
                        // Infer entity class from IRI pattern (e.g., /api/users/... -> User)
                        $parts = explode('/', trim($value, '/'));
                        if (count($parts) >= 3) {
                            $resourceName = $parts[1]; // e.g., "users"
                            $className = 'App\Entity\\' . ucfirst(rtrim($resourceName, 's'));
                            if (class_exists($className)) {
                                $refEntity = $this->entityManager->getRepository($className)->find($refId);
                                if ($refEntity) {
                                    $entity->$setter($refEntity);
                                }
                            }
                        }
                    } catch (\Exception $e) {
                        // Skip if IRI resolution fails
                        continue;
                    }
                }
            }
        }
    }
}
