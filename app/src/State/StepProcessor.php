<?php

declare(strict_types=1);

namespace App\State;

use ApiPlatform\Metadata\Operation;
use ApiPlatform\State\ProcessorInterface;
use App\Entity\Step;
use App\Dto\StepInputDto;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\DependencyInjection\Attribute\Autowire;
use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;
use Symfony\Component\Uid\Uuid;
use App\Entity\TreeFlow;
use App\Entity\StepQuestion;
use App\Entity\StepOutput;
use App\Entity\StepInput;

/**
 * Step State Processor
 *
 * Handles Input DTO -> Entity transformation for POST, PUT, PATCH operations
 * with support for nested object creation and updates.
 *
 * This file is ALWAYS regenerated. DO NOT edit.
 * For custom processing logic, use Event Subscribers.
 *
 * @generated by Genmax Code Generator
 */
class StepProcessor implements ProcessorInterface
{
    public function __construct(
        private readonly EntityManagerInterface $entityManager,
        #[Autowire(service: 'App\MultiTenant\TenantEntityProcessor')]
        private readonly ProcessorInterface $persistProcessor
    ) {}

    /**
     * @param StepInputDto $data
     */
    public function process(mixed $data, Operation $operation, array $uriVariables = [], array $context = []): Step
    {
        if (!$data instanceof StepInputDto) {
            throw new BadRequestHttpException('Invalid input data type');
        }

        // Determine if this is a create or update operation
        $entity = null;
        if (isset($uriVariables['id'])) {
            $entity = $this->entityManager->getRepository(Step::class)->find($uriVariables['id']);
            if (!$entity) {
                throw new BadRequestHttpException('Step not found');
            }
        }

        if (!$entity) {
            $entity = new Step();
        }

        // Map scalar properties from DTO to Entity
        $entity->setName($data->name);
        $entity->setFirst($data->first);
        $entity->setSlug($data->slug);
        $entity->setObjective($data->objective);
        $entity->setPrompt($data->prompt);
        $entity->setVieworder($data->viewOrder);
        $entity->setPositionx($data->positionX);
        $entity->setPositiony($data->positionY);

        // Map relationship properties
        // treeFlow: ManyToOne
        if ($data->treeFlow !== null) {
            if (is_string($data->treeFlow)) {
                // IRI format: "/api/treeflows/{id}"
                $treeFlowId = $this->extractIdFromIri($data->treeFlow);
                $treeFlow = $this->entityManager->getRepository(TreeFlow::class)->find($treeFlowId);
                if (!$treeFlow) {
                    throw new BadRequestHttpException('TreeFlow not found: ' . $treeFlowId);
                }
                $entity->setTreeflow($treeFlow);
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested treeFlow creation not supported. Use IRI format.');
            }
        } else {
            throw new BadRequestHttpException('treeFlow is required');
        }

        // questions: OneToMany with nested DTO support
        if (!empty($data->questions)) {
            $this->processQuestionsCollection(
                $entity,
                $data->questions,
                'create_and_update'
            );
        }

        // outputs: OneToMany with nested DTO support
        if (!empty($data->outputs)) {
            $this->processOutputsCollection(
                $entity,
                $data->outputs,
                'create_and_update'
            );
        }

        // inputs: OneToMany with nested DTO support
        if (!empty($data->inputs)) {
            $this->processInputsCollection(
                $entity,
                $data->inputs,
                'create_and_update'
            );
        }

        // Persist and flush
        return $this->persistProcessor->process($entity, $operation, $uriVariables, $context);
    }

    /**
     * Extract UUID from IRI format
     */
    private function extractIdFromIri(string $iri): Uuid
    {
        $parts = explode('/', $iri);
        $id = end($parts);

        if (!Uuid::isValid($id)) {
            throw new BadRequestHttpException('Invalid UUID in IRI: ' . $iri);
        }

        return Uuid::fromString($id);
    }

    /**
     * Process questions collection
     *
     * @param Step $entity
     * @param array $itemsData Array of StepQuestionInput or arrays with @id
     * @param string $strategy 'create_only', 'update_only', or 'create_and_update'
     * @param bool $orphanRemoval Remove items not in input array
     */
    private function processQuestionsCollection(
        Step $entity,
        array $itemsData,
        string $strategy = 'create_and_update',
        bool $orphanRemoval = false
    ): void {
        $existingItems = $entity->getQuestions()->toArray();
        $processedIds = [];

        foreach ($itemsData as $itemData) {
            // Check if this is an update (has @id) or create (no @id)
            $itemId = $itemData['@id'] ?? $itemData['id'] ?? null;

            if ($itemId) {
                // UPDATE existing item
                if ($strategy === 'create_only') {
                    throw new BadRequestHttpException('Cannot update questions: create_only strategy');
                }

                if (is_string($itemId)) {
                    $itemId = $this->extractIdFromIri($itemId);
                }

                $item = $this->entityManager->getRepository(StepQuestion::class)->find($itemId);
                if (!$item) {
                    throw new BadRequestHttpException('StepQuestion not found: ' . $itemId);
                }

                // Update item properties from DTO
                // TODO: Map properties from $itemData to $item

                $processedIds[] = $item->getId()->toString();
            } else {
                // CREATE new item
                if ($strategy === 'update_only') {
                    throw new BadRequestHttpException('Cannot create questions: update_only strategy');
                }

                $item = new StepQuestion();

                // Set properties from DTO
                // TODO: Map properties from $itemData to $item

                $entity->addQuestion($item);
                $this->entityManager->persist($item);
            }
        }

        // Handle orphan removal
        if ($orphanRemoval) {
            foreach ($existingItems as $existingItem) {
                if (!in_array($existingItem->getId()->toString(), $processedIds, true)) {
                    $entity->removeQuestion($existingItem);
                    $this->entityManager->remove($existingItem);
                }
            }
        }
    }

    /**
     * Process outputs collection
     *
     * @param Step $entity
     * @param array $itemsData Array of StepOutputInput or arrays with @id
     * @param string $strategy 'create_only', 'update_only', or 'create_and_update'
     * @param bool $orphanRemoval Remove items not in input array
     */
    private function processOutputsCollection(
        Step $entity,
        array $itemsData,
        string $strategy = 'create_and_update',
        bool $orphanRemoval = false
    ): void {
        $existingItems = $entity->getOutputs()->toArray();
        $processedIds = [];

        foreach ($itemsData as $itemData) {
            // Check if this is an update (has @id) or create (no @id)
            $itemId = $itemData['@id'] ?? $itemData['id'] ?? null;

            if ($itemId) {
                // UPDATE existing item
                if ($strategy === 'create_only') {
                    throw new BadRequestHttpException('Cannot update outputs: create_only strategy');
                }

                if (is_string($itemId)) {
                    $itemId = $this->extractIdFromIri($itemId);
                }

                $item = $this->entityManager->getRepository(StepOutput::class)->find($itemId);
                if (!$item) {
                    throw new BadRequestHttpException('StepOutput not found: ' . $itemId);
                }

                // Update item properties from DTO
                // TODO: Map properties from $itemData to $item

                $processedIds[] = $item->getId()->toString();
            } else {
                // CREATE new item
                if ($strategy === 'update_only') {
                    throw new BadRequestHttpException('Cannot create outputs: update_only strategy');
                }

                $item = new StepOutput();

                // Set properties from DTO
                // TODO: Map properties from $itemData to $item

                $entity->addOutput($item);
                $this->entityManager->persist($item);
            }
        }

        // Handle orphan removal
        if ($orphanRemoval) {
            foreach ($existingItems as $existingItem) {
                if (!in_array($existingItem->getId()->toString(), $processedIds, true)) {
                    $entity->removeOutput($existingItem);
                    $this->entityManager->remove($existingItem);
                }
            }
        }
    }

    /**
     * Process inputs collection
     *
     * @param Step $entity
     * @param array $itemsData Array of StepInputInput or arrays with @id
     * @param string $strategy 'create_only', 'update_only', or 'create_and_update'
     * @param bool $orphanRemoval Remove items not in input array
     */
    private function processInputsCollection(
        Step $entity,
        array $itemsData,
        string $strategy = 'create_and_update',
        bool $orphanRemoval = false
    ): void {
        $existingItems = $entity->getInputs()->toArray();
        $processedIds = [];

        foreach ($itemsData as $itemData) {
            // Check if this is an update (has @id) or create (no @id)
            $itemId = $itemData['@id'] ?? $itemData['id'] ?? null;

            if ($itemId) {
                // UPDATE existing item
                if ($strategy === 'create_only') {
                    throw new BadRequestHttpException('Cannot update inputs: create_only strategy');
                }

                if (is_string($itemId)) {
                    $itemId = $this->extractIdFromIri($itemId);
                }

                $item = $this->entityManager->getRepository(StepInput::class)->find($itemId);
                if (!$item) {
                    throw new BadRequestHttpException('StepInput not found: ' . $itemId);
                }

                // Update item properties from DTO
                // TODO: Map properties from $itemData to $item

                $processedIds[] = $item->getId()->toString();
            } else {
                // CREATE new item
                if ($strategy === 'update_only') {
                    throw new BadRequestHttpException('Cannot create inputs: update_only strategy');
                }

                $item = new StepInput();

                // Set properties from DTO
                // TODO: Map properties from $itemData to $item

                $entity->addInput($item);
                $this->entityManager->persist($item);
            }
        }

        // Handle orphan removal
        if ($orphanRemoval) {
            foreach ($existingItems as $existingItem) {
                if (!in_array($existingItem->getId()->toString(), $processedIds, true)) {
                    $entity->removeInput($existingItem);
                    $this->entityManager->remove($existingItem);
                }
            }
        }
    }

}
