<?php

declare(strict_types=1);

namespace App\Entity;

use App\Entity\EntityBase;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
use App\Entity\PipelineStage;
use App\Entity\TreeFlow;
use App\Entity\StepConnection;
use App\Entity\Pipeline;
use App\Entity\WorkingHour;
use App\Entity\EventAttendee;
use App\Entity\CalendarType;
use App\Entity\Competitor;
use App\Entity\DealType;
use App\Entity\DealStage;
use App\Entity\Contact;
use App\Entity\Talk;
use App\Entity\BillingFrequency;
use App\Entity\Brand;
use App\Entity\User;
use App\Entity\Company;
use App\Entity\DealCategory;
use App\Entity\EventCategory;
use App\Entity\EventResource;
use App\Entity\EventResourceBooking;
use App\Entity\Holiday;
use App\Entity\Attachment;
use App\Entity\WinReason;
use App\Entity\NotificationType;
use App\Entity\PipelineStageTemplate;
use App\Entity\PipelineTemplate;
use App\Entity\Profile;
use App\Entity\Agent;
use App\Entity\Deal;
use App\Entity\Task;
use App\Entity\Flag;
use App\Entity\TalkMessage;
use App\Entity\Product;
use App\Entity\TalkType;
use App\Entity\Calendar;
use App\Entity\Event;
use App\Entity\SocialMedia;
use App\Entity\Course;
use App\Entity\StudentCourse;
use App\Entity\ProductBatch;
use App\Entity\ProductCategory;
use App\Entity\Campaign;
use App\Entity\LeadSource;
use App\Entity\City;
use App\Entity\LostReason;
use App\Entity\ProductLine;
use App\Entity\Tag;
use App\Entity\TaskTemplate;
use App\Entity\TaskType;
use App\Entity\TaxCategory;
use App\Entity\Reminder;
use App\Entity\Notification;
use App\Entity\MeetingData;
use App\Repository\OrganizationRepository;

/**
 * Organization Entity (Generated Base Class)
 *
 *  *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to Organization.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\Entity(repositoryClass: OrganizationRepository::class)]
#[ORM\HasLifecycleCallbacks]
class Organization extends EntityBase
{
    #[Groups(['organization:read'])]
    #[ORM\OneToMany(targetEntity: PipelineStage::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $pipelinestages;

    #[Groups(['organization:read'])]
    #[ORM\OneToMany(targetEntity: TreeFlow::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $treeflows;

    #[Groups(['organization:read'])]
    #[ORM\OneToMany(targetEntity: StepConnection::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $stepconnections;

    #[Groups(['organization:read'])]
    #[ORM\OneToMany(targetEntity: Pipeline::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $pipelines;

    #[Groups(['organization:read'])]
    #[ORM\OneToMany(targetEntity: WorkingHour::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $workinghours;

    #[Groups(['organization:read'])]
    #[ORM\OneToMany(targetEntity: EventAttendee::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $eventattendees;

    #[Groups(['organization:read'])]
    #[ORM\OneToMany(targetEntity: CalendarType::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $calendartypes;

    #[Groups(['organization:read'])]
    #[ORM\OneToMany(targetEntity: Competitor::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $competitors;

    #[Groups(['organization:read'])]
    #[ORM\OneToMany(targetEntity: DealType::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $dealtypes;

    #[Groups(['organization:read'])]
    #[ORM\OneToMany(targetEntity: DealStage::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $dealstages;

    #[Groups(['organization:read'])]
    #[ORM\OneToMany(targetEntity: Contact::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $contacts;

    #[Groups(['organization:read'])]
    #[ORM\OneToMany(targetEntity: Talk::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $talks;

    #[Groups(['organization:read'])]
    #[ORM\OneToMany(targetEntity: BillingFrequency::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $billingfrequencys;

    #[Groups(['organization:read'])]
    #[ORM\OneToMany(targetEntity: Brand::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $brands;

    #[Groups(['organization:read'])]
    #[ORM\OneToMany(targetEntity: User::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $users;

    #[Groups(['organization:read'])]
    #[ORM\OneToMany(targetEntity: Company::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $companys;

    #[Groups(['organization:read'])]
    #[ORM\OneToMany(targetEntity: DealCategory::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $dealcategorys;

    #[Groups(['organization:read'])]
    #[ORM\OneToMany(targetEntity: EventCategory::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $eventcategorys;

    #[Groups(['organization:read'])]
    #[ORM\OneToMany(targetEntity: EventResource::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $eventresources;

    #[Groups(['organization:read'])]
    #[ORM\OneToMany(targetEntity: EventResourceBooking::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $eventresourcebookings;

    #[Groups(['organization:read'])]
    #[ORM\OneToMany(targetEntity: Holiday::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $holidays;

    #[Groups(['organization:read'])]
    #[ORM\OneToMany(targetEntity: Attachment::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $attachments;

    #[Groups(['organization:read'])]
    #[ORM\OneToMany(targetEntity: WinReason::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $winreasons;

    #[Groups(['organization:read'])]
    #[ORM\OneToMany(targetEntity: NotificationType::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $notificationtypes;

    #[Groups(['organization:read'])]
    #[ORM\OneToMany(targetEntity: PipelineStageTemplate::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $pipelinestagetemplates;

    #[Groups(['organization:read'])]
    #[ORM\OneToMany(targetEntity: PipelineTemplate::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $pipelinetemplates;

    #[Groups(['organization:read'])]
    #[ORM\OneToMany(targetEntity: Profile::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $profiles;

    #[Groups(['organization:read'])]
    #[ORM\OneToMany(targetEntity: Agent::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $agents;

    #[Groups(['organization:read'])]
    #[ORM\OneToMany(targetEntity: Deal::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $deals;

    #[Groups(['organization:read'])]
    #[ORM\OneToMany(targetEntity: Task::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $tasks;

    #[Groups(['organization:read'])]
    #[ORM\OneToMany(targetEntity: Flag::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $flags;

    #[Groups(['organization:read'])]
    #[ORM\OneToMany(targetEntity: TalkMessage::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $talkmessages;

    #[Groups(['organization:read'])]
    #[ORM\OneToMany(targetEntity: Product::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $products;

    #[Groups(['organization:read'])]
    #[ORM\OneToMany(targetEntity: TalkType::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $talktypes;

    #[Groups(['organization:read'])]
    #[ORM\OneToMany(targetEntity: Calendar::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $calendars;

    #[Groups(['organization:read'])]
    #[ORM\OneToMany(targetEntity: Event::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $events;

    #[Groups(['organization:read'])]
    #[ORM\OneToMany(targetEntity: SocialMedia::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $socialmedias;

    #[Groups(['organization:read'])]
    #[ORM\OneToMany(targetEntity: Course::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $courses;

    #[Groups(['organization:read'])]
    #[ORM\OneToMany(targetEntity: StudentCourse::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $studentcourses;

    #[Groups(['organization:read'])]
    #[ORM\OneToMany(targetEntity: ProductBatch::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $productbatchs;

    #[Groups(['organization:read'])]
    #[ORM\OneToMany(targetEntity: ProductCategory::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $productcategorys;

    #[Groups(['organization:read'])]
    #[ORM\OneToMany(targetEntity: Campaign::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $campaigns;

    #[Groups(['organization:read'])]
    #[ORM\OneToMany(targetEntity: LeadSource::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $leadsources;

    #[Groups(['organization:read'])]
    #[ORM\OneToMany(targetEntity: City::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $citys;

    #[Groups(['organization:read'])]
    #[ORM\OneToMany(targetEntity: LostReason::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $lostreasons;

    #[Groups(['organization:read'])]
    #[ORM\OneToMany(targetEntity: ProductLine::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $productlines;

    #[Groups(['organization:read'])]
    #[ORM\OneToMany(targetEntity: Tag::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $tags;

    #[Groups(['organization:read'])]
    #[ORM\OneToMany(targetEntity: TaskTemplate::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $tasktemplates;

    #[Groups(['organization:read'])]
    #[ORM\OneToMany(targetEntity: TaskType::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $tasktypes;

    #[Groups(['organization:read'])]
    #[ORM\OneToMany(targetEntity: TaxCategory::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $taxcategorys;

    #[Groups(['organization:read', 'organization:write'])]
    #[ORM\Column(type: 'string', length: 255)]
    protected string $name;

    #[Groups(['organization:read', 'organization:write'])]
    #[ORM\Column(type: 'string', length: 255, unique: true)]
    protected string $slug;

    #[Groups(['organization:read', 'organization:write'])]
    #[ORM\Column(type: 'boolean')]
    protected bool $active;

    #[Groups(['organization:read'])]
    #[ORM\OneToMany(targetEntity: Reminder::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $reminders;

    #[Groups(['organization:read'])]
    #[ORM\OneToMany(targetEntity: Notification::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $notifications;

    #[Groups(['organization:read'])]
    #[ORM\OneToMany(targetEntity: MeetingData::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $meetingdatas;


    public function __construct()
    {
        parent::__construct();
        $this->pipelinestages = new ArrayCollection();
        $this->treeflows = new ArrayCollection();
        $this->stepconnections = new ArrayCollection();
        $this->pipelines = new ArrayCollection();
        $this->workinghours = new ArrayCollection();
        $this->eventattendees = new ArrayCollection();
        $this->calendartypes = new ArrayCollection();
        $this->competitors = new ArrayCollection();
        $this->dealtypes = new ArrayCollection();
        $this->dealstages = new ArrayCollection();
        $this->contacts = new ArrayCollection();
        $this->talks = new ArrayCollection();
        $this->billingfrequencys = new ArrayCollection();
        $this->brands = new ArrayCollection();
        $this->users = new ArrayCollection();
        $this->companys = new ArrayCollection();
        $this->dealcategorys = new ArrayCollection();
        $this->eventcategorys = new ArrayCollection();
        $this->eventresources = new ArrayCollection();
        $this->eventresourcebookings = new ArrayCollection();
        $this->holidays = new ArrayCollection();
        $this->attachments = new ArrayCollection();
        $this->winreasons = new ArrayCollection();
        $this->notificationtypes = new ArrayCollection();
        $this->pipelinestagetemplates = new ArrayCollection();
        $this->pipelinetemplates = new ArrayCollection();
        $this->profiles = new ArrayCollection();
        $this->agents = new ArrayCollection();
        $this->deals = new ArrayCollection();
        $this->tasks = new ArrayCollection();
        $this->flags = new ArrayCollection();
        $this->talkmessages = new ArrayCollection();
        $this->products = new ArrayCollection();
        $this->talktypes = new ArrayCollection();
        $this->calendars = new ArrayCollection();
        $this->events = new ArrayCollection();
        $this->socialmedias = new ArrayCollection();
        $this->courses = new ArrayCollection();
        $this->studentcourses = new ArrayCollection();
        $this->productbatchs = new ArrayCollection();
        $this->productcategorys = new ArrayCollection();
        $this->campaigns = new ArrayCollection();
        $this->leadsources = new ArrayCollection();
        $this->citys = new ArrayCollection();
        $this->lostreasons = new ArrayCollection();
        $this->productlines = new ArrayCollection();
        $this->tags = new ArrayCollection();
        $this->tasktemplates = new ArrayCollection();
        $this->tasktypes = new ArrayCollection();
        $this->taxcategorys = new ArrayCollection();
        $this->reminders = new ArrayCollection();
        $this->notifications = new ArrayCollection();
        $this->meetingdatas = new ArrayCollection();
    }

    /**
     * @return Collection<int, App\Entity\PipelineStage>
     */
    public function getPipelinestages(): Collection
    {
        return $this->pipelinestages;
    }

    public function addPipelinestage(App\Entity\PipelineStage $pipelinestage): self
    {
        if (!$this->pipelinestages->contains($pipelinestage)) {
            $this->pipelinestages->add($pipelinestage);
            $pipelinestage->setOrganization($this);
        }
        return $this;
    }

    public function removePipelinestage(App\Entity\PipelineStage $pipelinestage): self
    {
        if ($this->pipelinestages->removeElement($pipelinestage)) {
            if ($pipelinestage->getOrganization() === $this) {
                $pipelinestage->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\TreeFlow>
     */
    public function getTreeflows(): Collection
    {
        return $this->treeflows;
    }

    public function addTreeflow(App\Entity\TreeFlow $treeflow): self
    {
        if (!$this->treeflows->contains($treeflow)) {
            $this->treeflows->add($treeflow);
            $treeflow->setOrganization($this);
        }
        return $this;
    }

    public function removeTreeflow(App\Entity\TreeFlow $treeflow): self
    {
        if ($this->treeflows->removeElement($treeflow)) {
            if ($treeflow->getOrganization() === $this) {
                $treeflow->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\StepConnection>
     */
    public function getStepconnections(): Collection
    {
        return $this->stepconnections;
    }

    public function addStepconnection(App\Entity\StepConnection $stepconnection): self
    {
        if (!$this->stepconnections->contains($stepconnection)) {
            $this->stepconnections->add($stepconnection);
            $stepconnection->setOrganization($this);
        }
        return $this;
    }

    public function removeStepconnection(App\Entity\StepConnection $stepconnection): self
    {
        if ($this->stepconnections->removeElement($stepconnection)) {
            if ($stepconnection->getOrganization() === $this) {
                $stepconnection->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Pipeline>
     */
    public function getPipelines(): Collection
    {
        return $this->pipelines;
    }

    public function addPipeline(App\Entity\Pipeline $pipeline): self
    {
        if (!$this->pipelines->contains($pipeline)) {
            $this->pipelines->add($pipeline);
            $pipeline->setOrganization($this);
        }
        return $this;
    }

    public function removePipeline(App\Entity\Pipeline $pipeline): self
    {
        if ($this->pipelines->removeElement($pipeline)) {
            if ($pipeline->getOrganization() === $this) {
                $pipeline->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\WorkingHour>
     */
    public function getWorkinghours(): Collection
    {
        return $this->workinghours;
    }

    public function addWorkinghour(App\Entity\WorkingHour $workinghour): self
    {
        if (!$this->workinghours->contains($workinghour)) {
            $this->workinghours->add($workinghour);
            $workinghour->setOrganization($this);
        }
        return $this;
    }

    public function removeWorkinghour(App\Entity\WorkingHour $workinghour): self
    {
        if ($this->workinghours->removeElement($workinghour)) {
            if ($workinghour->getOrganization() === $this) {
                $workinghour->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\EventAttendee>
     */
    public function getEventattendees(): Collection
    {
        return $this->eventattendees;
    }

    public function addEventattendee(App\Entity\EventAttendee $eventattendee): self
    {
        if (!$this->eventattendees->contains($eventattendee)) {
            $this->eventattendees->add($eventattendee);
            $eventattendee->setOrganization($this);
        }
        return $this;
    }

    public function removeEventattendee(App\Entity\EventAttendee $eventattendee): self
    {
        if ($this->eventattendees->removeElement($eventattendee)) {
            if ($eventattendee->getOrganization() === $this) {
                $eventattendee->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\CalendarType>
     */
    public function getCalendartypes(): Collection
    {
        return $this->calendartypes;
    }

    public function addCalendartype(App\Entity\CalendarType $calendartype): self
    {
        if (!$this->calendartypes->contains($calendartype)) {
            $this->calendartypes->add($calendartype);
            $calendartype->setOrganization($this);
        }
        return $this;
    }

    public function removeCalendartype(App\Entity\CalendarType $calendartype): self
    {
        if ($this->calendartypes->removeElement($calendartype)) {
            if ($calendartype->getOrganization() === $this) {
                $calendartype->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Competitor>
     */
    public function getCompetitors(): Collection
    {
        return $this->competitors;
    }

    public function addCompetitor(App\Entity\Competitor $competitor): self
    {
        if (!$this->competitors->contains($competitor)) {
            $this->competitors->add($competitor);
            $competitor->setOrganization($this);
        }
        return $this;
    }

    public function removeCompetitor(App\Entity\Competitor $competitor): self
    {
        if ($this->competitors->removeElement($competitor)) {
            if ($competitor->getOrganization() === $this) {
                $competitor->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\DealType>
     */
    public function getDealtypes(): Collection
    {
        return $this->dealtypes;
    }

    public function addDealtype(App\Entity\DealType $dealtype): self
    {
        if (!$this->dealtypes->contains($dealtype)) {
            $this->dealtypes->add($dealtype);
            $dealtype->setOrganization($this);
        }
        return $this;
    }

    public function removeDealtype(App\Entity\DealType $dealtype): self
    {
        if ($this->dealtypes->removeElement($dealtype)) {
            if ($dealtype->getOrganization() === $this) {
                $dealtype->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\DealStage>
     */
    public function getDealstages(): Collection
    {
        return $this->dealstages;
    }

    public function addDealstage(App\Entity\DealStage $dealstage): self
    {
        if (!$this->dealstages->contains($dealstage)) {
            $this->dealstages->add($dealstage);
            $dealstage->setOrganization($this);
        }
        return $this;
    }

    public function removeDealstage(App\Entity\DealStage $dealstage): self
    {
        if ($this->dealstages->removeElement($dealstage)) {
            if ($dealstage->getOrganization() === $this) {
                $dealstage->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Contact>
     */
    public function getContacts(): Collection
    {
        return $this->contacts;
    }

    public function addContact(App\Entity\Contact $contact): self
    {
        if (!$this->contacts->contains($contact)) {
            $this->contacts->add($contact);
            $contact->setOrganization($this);
        }
        return $this;
    }

    public function removeContact(App\Entity\Contact $contact): self
    {
        if ($this->contacts->removeElement($contact)) {
            if ($contact->getOrganization() === $this) {
                $contact->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Talk>
     */
    public function getTalks(): Collection
    {
        return $this->talks;
    }

    public function addTalk(App\Entity\Talk $talk): self
    {
        if (!$this->talks->contains($talk)) {
            $this->talks->add($talk);
            $talk->setOrganization($this);
        }
        return $this;
    }

    public function removeTalk(App\Entity\Talk $talk): self
    {
        if ($this->talks->removeElement($talk)) {
            if ($talk->getOrganization() === $this) {
                $talk->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\BillingFrequency>
     */
    public function getBillingfrequencys(): Collection
    {
        return $this->billingfrequencys;
    }

    public function addBillingfrequency(App\Entity\BillingFrequency $billingfrequency): self
    {
        if (!$this->billingfrequencys->contains($billingfrequency)) {
            $this->billingfrequencys->add($billingfrequency);
            $billingfrequency->setOrganization($this);
        }
        return $this;
    }

    public function removeBillingfrequency(App\Entity\BillingFrequency $billingfrequency): self
    {
        if ($this->billingfrequencys->removeElement($billingfrequency)) {
            if ($billingfrequency->getOrganization() === $this) {
                $billingfrequency->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Brand>
     */
    public function getBrands(): Collection
    {
        return $this->brands;
    }

    public function addBrand(App\Entity\Brand $brand): self
    {
        if (!$this->brands->contains($brand)) {
            $this->brands->add($brand);
            $brand->setOrganization($this);
        }
        return $this;
    }

    public function removeBrand(App\Entity\Brand $brand): self
    {
        if ($this->brands->removeElement($brand)) {
            if ($brand->getOrganization() === $this) {
                $brand->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\User>
     */
    public function getUsers(): Collection
    {
        return $this->users;
    }

    public function addUser(App\Entity\User $user): self
    {
        if (!$this->users->contains($user)) {
            $this->users->add($user);
            $user->setOrganization($this);
        }
        return $this;
    }

    public function removeUser(App\Entity\User $user): self
    {
        if ($this->users->removeElement($user)) {
            if ($user->getOrganization() === $this) {
                $user->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Company>
     */
    public function getCompanys(): Collection
    {
        return $this->companys;
    }

    public function addCompany(App\Entity\Company $company): self
    {
        if (!$this->companys->contains($company)) {
            $this->companys->add($company);
            $company->setOrganization($this);
        }
        return $this;
    }

    public function removeCompany(App\Entity\Company $company): self
    {
        if ($this->companys->removeElement($company)) {
            if ($company->getOrganization() === $this) {
                $company->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\DealCategory>
     */
    public function getDealcategorys(): Collection
    {
        return $this->dealcategorys;
    }

    public function addDealcategory(App\Entity\DealCategory $dealcategory): self
    {
        if (!$this->dealcategorys->contains($dealcategory)) {
            $this->dealcategorys->add($dealcategory);
            $dealcategory->setOrganization($this);
        }
        return $this;
    }

    public function removeDealcategory(App\Entity\DealCategory $dealcategory): self
    {
        if ($this->dealcategorys->removeElement($dealcategory)) {
            if ($dealcategory->getOrganization() === $this) {
                $dealcategory->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\EventCategory>
     */
    public function getEventcategorys(): Collection
    {
        return $this->eventcategorys;
    }

    public function addEventcategory(App\Entity\EventCategory $eventcategory): self
    {
        if (!$this->eventcategorys->contains($eventcategory)) {
            $this->eventcategorys->add($eventcategory);
            $eventcategory->setOrganization($this);
        }
        return $this;
    }

    public function removeEventcategory(App\Entity\EventCategory $eventcategory): self
    {
        if ($this->eventcategorys->removeElement($eventcategory)) {
            if ($eventcategory->getOrganization() === $this) {
                $eventcategory->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\EventResource>
     */
    public function getEventresources(): Collection
    {
        return $this->eventresources;
    }

    public function addEventresource(App\Entity\EventResource $eventresource): self
    {
        if (!$this->eventresources->contains($eventresource)) {
            $this->eventresources->add($eventresource);
            $eventresource->setOrganization($this);
        }
        return $this;
    }

    public function removeEventresource(App\Entity\EventResource $eventresource): self
    {
        if ($this->eventresources->removeElement($eventresource)) {
            if ($eventresource->getOrganization() === $this) {
                $eventresource->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\EventResourceBooking>
     */
    public function getEventresourcebookings(): Collection
    {
        return $this->eventresourcebookings;
    }

    public function addEventresourcebooking(App\Entity\EventResourceBooking $eventresourcebooking): self
    {
        if (!$this->eventresourcebookings->contains($eventresourcebooking)) {
            $this->eventresourcebookings->add($eventresourcebooking);
            $eventresourcebooking->setOrganization($this);
        }
        return $this;
    }

    public function removeEventresourcebooking(App\Entity\EventResourceBooking $eventresourcebooking): self
    {
        if ($this->eventresourcebookings->removeElement($eventresourcebooking)) {
            if ($eventresourcebooking->getOrganization() === $this) {
                $eventresourcebooking->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Holiday>
     */
    public function getHolidays(): Collection
    {
        return $this->holidays;
    }

    public function addHoliday(App\Entity\Holiday $holiday): self
    {
        if (!$this->holidays->contains($holiday)) {
            $this->holidays->add($holiday);
            $holiday->setOrganization($this);
        }
        return $this;
    }

    public function removeHoliday(App\Entity\Holiday $holiday): self
    {
        if ($this->holidays->removeElement($holiday)) {
            if ($holiday->getOrganization() === $this) {
                $holiday->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Attachment>
     */
    public function getAttachments(): Collection
    {
        return $this->attachments;
    }

    public function addAttachment(App\Entity\Attachment $attachment): self
    {
        if (!$this->attachments->contains($attachment)) {
            $this->attachments->add($attachment);
            $attachment->setOrganization($this);
        }
        return $this;
    }

    public function removeAttachment(App\Entity\Attachment $attachment): self
    {
        if ($this->attachments->removeElement($attachment)) {
            if ($attachment->getOrganization() === $this) {
                $attachment->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\WinReason>
     */
    public function getWinreasons(): Collection
    {
        return $this->winreasons;
    }

    public function addWinreason(App\Entity\WinReason $winreason): self
    {
        if (!$this->winreasons->contains($winreason)) {
            $this->winreasons->add($winreason);
            $winreason->setOrganization($this);
        }
        return $this;
    }

    public function removeWinreason(App\Entity\WinReason $winreason): self
    {
        if ($this->winreasons->removeElement($winreason)) {
            if ($winreason->getOrganization() === $this) {
                $winreason->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\NotificationType>
     */
    public function getNotificationtypes(): Collection
    {
        return $this->notificationtypes;
    }

    public function addNotificationtype(App\Entity\NotificationType $notificationtype): self
    {
        if (!$this->notificationtypes->contains($notificationtype)) {
            $this->notificationtypes->add($notificationtype);
            $notificationtype->setOrganization($this);
        }
        return $this;
    }

    public function removeNotificationtype(App\Entity\NotificationType $notificationtype): self
    {
        if ($this->notificationtypes->removeElement($notificationtype)) {
            if ($notificationtype->getOrganization() === $this) {
                $notificationtype->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\PipelineStageTemplate>
     */
    public function getPipelinestagetemplates(): Collection
    {
        return $this->pipelinestagetemplates;
    }

    public function addPipelinestagetemplate(App\Entity\PipelineStageTemplate $pipelinestagetemplate): self
    {
        if (!$this->pipelinestagetemplates->contains($pipelinestagetemplate)) {
            $this->pipelinestagetemplates->add($pipelinestagetemplate);
            $pipelinestagetemplate->setOrganization($this);
        }
        return $this;
    }

    public function removePipelinestagetemplate(App\Entity\PipelineStageTemplate $pipelinestagetemplate): self
    {
        if ($this->pipelinestagetemplates->removeElement($pipelinestagetemplate)) {
            if ($pipelinestagetemplate->getOrganization() === $this) {
                $pipelinestagetemplate->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\PipelineTemplate>
     */
    public function getPipelinetemplates(): Collection
    {
        return $this->pipelinetemplates;
    }

    public function addPipelinetemplate(App\Entity\PipelineTemplate $pipelinetemplate): self
    {
        if (!$this->pipelinetemplates->contains($pipelinetemplate)) {
            $this->pipelinetemplates->add($pipelinetemplate);
            $pipelinetemplate->setOrganization($this);
        }
        return $this;
    }

    public function removePipelinetemplate(App\Entity\PipelineTemplate $pipelinetemplate): self
    {
        if ($this->pipelinetemplates->removeElement($pipelinetemplate)) {
            if ($pipelinetemplate->getOrganization() === $this) {
                $pipelinetemplate->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Profile>
     */
    public function getProfiles(): Collection
    {
        return $this->profiles;
    }

    public function addProfile(App\Entity\Profile $profile): self
    {
        if (!$this->profiles->contains($profile)) {
            $this->profiles->add($profile);
            $profile->setOrganization($this);
        }
        return $this;
    }

    public function removeProfile(App\Entity\Profile $profile): self
    {
        if ($this->profiles->removeElement($profile)) {
            if ($profile->getOrganization() === $this) {
                $profile->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Agent>
     */
    public function getAgents(): Collection
    {
        return $this->agents;
    }

    public function addAgent(App\Entity\Agent $agent): self
    {
        if (!$this->agents->contains($agent)) {
            $this->agents->add($agent);
            $agent->setOrganization($this);
        }
        return $this;
    }

    public function removeAgent(App\Entity\Agent $agent): self
    {
        if ($this->agents->removeElement($agent)) {
            if ($agent->getOrganization() === $this) {
                $agent->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Deal>
     */
    public function getDeals(): Collection
    {
        return $this->deals;
    }

    public function addDeal(App\Entity\Deal $deal): self
    {
        if (!$this->deals->contains($deal)) {
            $this->deals->add($deal);
            $deal->setOrganization($this);
        }
        return $this;
    }

    public function removeDeal(App\Entity\Deal $deal): self
    {
        if ($this->deals->removeElement($deal)) {
            if ($deal->getOrganization() === $this) {
                $deal->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Task>
     */
    public function getTasks(): Collection
    {
        return $this->tasks;
    }

    public function addTask(App\Entity\Task $task): self
    {
        if (!$this->tasks->contains($task)) {
            $this->tasks->add($task);
            $task->setOrganization($this);
        }
        return $this;
    }

    public function removeTask(App\Entity\Task $task): self
    {
        if ($this->tasks->removeElement($task)) {
            if ($task->getOrganization() === $this) {
                $task->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Flag>
     */
    public function getFlags(): Collection
    {
        return $this->flags;
    }

    public function addFlag(App\Entity\Flag $flag): self
    {
        if (!$this->flags->contains($flag)) {
            $this->flags->add($flag);
            $flag->setOrganization($this);
        }
        return $this;
    }

    public function removeFlag(App\Entity\Flag $flag): self
    {
        if ($this->flags->removeElement($flag)) {
            if ($flag->getOrganization() === $this) {
                $flag->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\TalkMessage>
     */
    public function getTalkmessages(): Collection
    {
        return $this->talkmessages;
    }

    public function addTalkmessage(App\Entity\TalkMessage $talkmessage): self
    {
        if (!$this->talkmessages->contains($talkmessage)) {
            $this->talkmessages->add($talkmessage);
            $talkmessage->setOrganization($this);
        }
        return $this;
    }

    public function removeTalkmessage(App\Entity\TalkMessage $talkmessage): self
    {
        if ($this->talkmessages->removeElement($talkmessage)) {
            if ($talkmessage->getOrganization() === $this) {
                $talkmessage->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Product>
     */
    public function getProducts(): Collection
    {
        return $this->products;
    }

    public function addProduct(App\Entity\Product $product): self
    {
        if (!$this->products->contains($product)) {
            $this->products->add($product);
            $product->setOrganization($this);
        }
        return $this;
    }

    public function removeProduct(App\Entity\Product $product): self
    {
        if ($this->products->removeElement($product)) {
            if ($product->getOrganization() === $this) {
                $product->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\TalkType>
     */
    public function getTalktypes(): Collection
    {
        return $this->talktypes;
    }

    public function addTalktype(App\Entity\TalkType $talktype): self
    {
        if (!$this->talktypes->contains($talktype)) {
            $this->talktypes->add($talktype);
            $talktype->setOrganization($this);
        }
        return $this;
    }

    public function removeTalktype(App\Entity\TalkType $talktype): self
    {
        if ($this->talktypes->removeElement($talktype)) {
            if ($talktype->getOrganization() === $this) {
                $talktype->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Calendar>
     */
    public function getCalendars(): Collection
    {
        return $this->calendars;
    }

    public function addCalendar(App\Entity\Calendar $calendar): self
    {
        if (!$this->calendars->contains($calendar)) {
            $this->calendars->add($calendar);
            $calendar->setOrganization($this);
        }
        return $this;
    }

    public function removeCalendar(App\Entity\Calendar $calendar): self
    {
        if ($this->calendars->removeElement($calendar)) {
            if ($calendar->getOrganization() === $this) {
                $calendar->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Event>
     */
    public function getEvents(): Collection
    {
        return $this->events;
    }

    public function addEvent(App\Entity\Event $event): self
    {
        if (!$this->events->contains($event)) {
            $this->events->add($event);
            $event->setOrganization($this);
        }
        return $this;
    }

    public function removeEvent(App\Entity\Event $event): self
    {
        if ($this->events->removeElement($event)) {
            if ($event->getOrganization() === $this) {
                $event->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\SocialMedia>
     */
    public function getSocialmedias(): Collection
    {
        return $this->socialmedias;
    }

    public function addSocialmedia(App\Entity\SocialMedia $socialmedia): self
    {
        if (!$this->socialmedias->contains($socialmedia)) {
            $this->socialmedias->add($socialmedia);
            $socialmedia->setOrganization($this);
        }
        return $this;
    }

    public function removeSocialmedia(App\Entity\SocialMedia $socialmedia): self
    {
        if ($this->socialmedias->removeElement($socialmedia)) {
            if ($socialmedia->getOrganization() === $this) {
                $socialmedia->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Course>
     */
    public function getCourses(): Collection
    {
        return $this->courses;
    }

    public function addCours(App\Entity\Course $cours): self
    {
        if (!$this->courses->contains($cours)) {
            $this->courses->add($cours);
            $cours->setOrganization($this);
        }
        return $this;
    }

    public function removeCours(App\Entity\Course $cours): self
    {
        if ($this->courses->removeElement($cours)) {
            if ($cours->getOrganization() === $this) {
                $cours->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\StudentCourse>
     */
    public function getStudentcourses(): Collection
    {
        return $this->studentcourses;
    }

    public function addStudentcours(App\Entity\StudentCourse $studentcours): self
    {
        if (!$this->studentcourses->contains($studentcours)) {
            $this->studentcourses->add($studentcours);
            $studentcours->setOrganization($this);
        }
        return $this;
    }

    public function removeStudentcours(App\Entity\StudentCourse $studentcours): self
    {
        if ($this->studentcourses->removeElement($studentcours)) {
            if ($studentcours->getOrganization() === $this) {
                $studentcours->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\ProductBatch>
     */
    public function getProductbatchs(): Collection
    {
        return $this->productbatchs;
    }

    public function addProductbatch(App\Entity\ProductBatch $productbatch): self
    {
        if (!$this->productbatchs->contains($productbatch)) {
            $this->productbatchs->add($productbatch);
            $productbatch->setOrganization($this);
        }
        return $this;
    }

    public function removeProductbatch(App\Entity\ProductBatch $productbatch): self
    {
        if ($this->productbatchs->removeElement($productbatch)) {
            if ($productbatch->getOrganization() === $this) {
                $productbatch->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\ProductCategory>
     */
    public function getProductcategorys(): Collection
    {
        return $this->productcategorys;
    }

    public function addProductcategory(App\Entity\ProductCategory $productcategory): self
    {
        if (!$this->productcategorys->contains($productcategory)) {
            $this->productcategorys->add($productcategory);
            $productcategory->setOrganization($this);
        }
        return $this;
    }

    public function removeProductcategory(App\Entity\ProductCategory $productcategory): self
    {
        if ($this->productcategorys->removeElement($productcategory)) {
            if ($productcategory->getOrganization() === $this) {
                $productcategory->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Campaign>
     */
    public function getCampaigns(): Collection
    {
        return $this->campaigns;
    }

    public function addCampaign(App\Entity\Campaign $campaign): self
    {
        if (!$this->campaigns->contains($campaign)) {
            $this->campaigns->add($campaign);
            $campaign->setOrganization($this);
        }
        return $this;
    }

    public function removeCampaign(App\Entity\Campaign $campaign): self
    {
        if ($this->campaigns->removeElement($campaign)) {
            if ($campaign->getOrganization() === $this) {
                $campaign->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\LeadSource>
     */
    public function getLeadsources(): Collection
    {
        return $this->leadsources;
    }

    public function addLeadsource(App\Entity\LeadSource $leadsource): self
    {
        if (!$this->leadsources->contains($leadsource)) {
            $this->leadsources->add($leadsource);
            $leadsource->setOrganization($this);
        }
        return $this;
    }

    public function removeLeadsource(App\Entity\LeadSource $leadsource): self
    {
        if ($this->leadsources->removeElement($leadsource)) {
            if ($leadsource->getOrganization() === $this) {
                $leadsource->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\City>
     */
    public function getCitys(): Collection
    {
        return $this->citys;
    }

    public function addCity(App\Entity\City $city): self
    {
        if (!$this->citys->contains($city)) {
            $this->citys->add($city);
            $city->setOrganization($this);
        }
        return $this;
    }

    public function removeCity(App\Entity\City $city): self
    {
        if ($this->citys->removeElement($city)) {
            if ($city->getOrganization() === $this) {
                $city->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\LostReason>
     */
    public function getLostreasons(): Collection
    {
        return $this->lostreasons;
    }

    public function addLostreason(App\Entity\LostReason $lostreason): self
    {
        if (!$this->lostreasons->contains($lostreason)) {
            $this->lostreasons->add($lostreason);
            $lostreason->setOrganization($this);
        }
        return $this;
    }

    public function removeLostreason(App\Entity\LostReason $lostreason): self
    {
        if ($this->lostreasons->removeElement($lostreason)) {
            if ($lostreason->getOrganization() === $this) {
                $lostreason->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\ProductLine>
     */
    public function getProductlines(): Collection
    {
        return $this->productlines;
    }

    public function addProductline(App\Entity\ProductLine $productline): self
    {
        if (!$this->productlines->contains($productline)) {
            $this->productlines->add($productline);
            $productline->setOrganization($this);
        }
        return $this;
    }

    public function removeProductline(App\Entity\ProductLine $productline): self
    {
        if ($this->productlines->removeElement($productline)) {
            if ($productline->getOrganization() === $this) {
                $productline->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Tag>
     */
    public function getTags(): Collection
    {
        return $this->tags;
    }

    public function addTag(App\Entity\Tag $tag): self
    {
        if (!$this->tags->contains($tag)) {
            $this->tags->add($tag);
            $tag->setOrganization($this);
        }
        return $this;
    }

    public function removeTag(App\Entity\Tag $tag): self
    {
        if ($this->tags->removeElement($tag)) {
            if ($tag->getOrganization() === $this) {
                $tag->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\TaskTemplate>
     */
    public function getTasktemplates(): Collection
    {
        return $this->tasktemplates;
    }

    public function addTasktemplate(App\Entity\TaskTemplate $tasktemplate): self
    {
        if (!$this->tasktemplates->contains($tasktemplate)) {
            $this->tasktemplates->add($tasktemplate);
            $tasktemplate->setOrganization($this);
        }
        return $this;
    }

    public function removeTasktemplate(App\Entity\TaskTemplate $tasktemplate): self
    {
        if ($this->tasktemplates->removeElement($tasktemplate)) {
            if ($tasktemplate->getOrganization() === $this) {
                $tasktemplate->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\TaskType>
     */
    public function getTasktypes(): Collection
    {
        return $this->tasktypes;
    }

    public function addTasktype(App\Entity\TaskType $tasktype): self
    {
        if (!$this->tasktypes->contains($tasktype)) {
            $this->tasktypes->add($tasktype);
            $tasktype->setOrganization($this);
        }
        return $this;
    }

    public function removeTasktype(App\Entity\TaskType $tasktype): self
    {
        if ($this->tasktypes->removeElement($tasktype)) {
            if ($tasktype->getOrganization() === $this) {
                $tasktype->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\TaxCategory>
     */
    public function getTaxcategorys(): Collection
    {
        return $this->taxcategorys;
    }

    public function addTaxcategory(App\Entity\TaxCategory $taxcategory): self
    {
        if (!$this->taxcategorys->contains($taxcategory)) {
            $this->taxcategorys->add($taxcategory);
            $taxcategory->setOrganization($this);
        }
        return $this;
    }

    public function removeTaxcategory(App\Entity\TaxCategory $taxcategory): self
    {
        if ($this->taxcategorys->removeElement($taxcategory)) {
            if ($taxcategory->getOrganization() === $this) {
                $taxcategory->setOrganization(null);
            }
        }
        return $this;
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getSlug(): string    {
        return $this->slug;
    }

    public function setSlug(string $slug): self
    {
        $this->slug = $slug;
        return $this;
    }

    public function getActive(): bool    {
        return $this->active;
    }

    public function setActive(bool $active): self
    {
        $this->active = $active;
        return $this;
    }

    public function isActive(): bool
    {
        return $this->active === true;
    }

    /**
     * @return Collection<int, App\Entity\Reminder>
     */
    public function getReminders(): Collection
    {
        return $this->reminders;
    }

    public function addReminder(App\Entity\Reminder $reminder): self
    {
        if (!$this->reminders->contains($reminder)) {
            $this->reminders->add($reminder);
            $reminder->setOrganization($this);
        }
        return $this;
    }

    public function removeReminder(App\Entity\Reminder $reminder): self
    {
        if ($this->reminders->removeElement($reminder)) {
            if ($reminder->getOrganization() === $this) {
                $reminder->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Notification>
     */
    public function getNotifications(): Collection
    {
        return $this->notifications;
    }

    public function addNotification(App\Entity\Notification $notification): self
    {
        if (!$this->notifications->contains($notification)) {
            $this->notifications->add($notification);
            $notification->setOrganization($this);
        }
        return $this;
    }

    public function removeNotification(App\Entity\Notification $notification): self
    {
        if ($this->notifications->removeElement($notification)) {
            if ($notification->getOrganization() === $this) {
                $notification->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\MeetingData>
     */
    public function getMeetingdatas(): Collection
    {
        return $this->meetingdatas;
    }

    public function addMeetingdata(App\Entity\MeetingData $meetingdata): self
    {
        if (!$this->meetingdatas->contains($meetingdata)) {
            $this->meetingdatas->add($meetingdata);
            $meetingdata->setOrganization($this);
        }
        return $this;
    }

    public function removeMeetingdata(App\Entity\MeetingData $meetingdata): self
    {
        if ($this->meetingdatas->removeElement($meetingdata)) {
            if ($meetingdata->getOrganization() === $this) {
                $meetingdata->setOrganization(null);
            }
        }
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? ($this->getId()?->toRfc4122() ?? '');
    }
}
