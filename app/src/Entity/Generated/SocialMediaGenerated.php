<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use App\Entity\Trait\OrganizationTrait;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use App\Entity\Campaign;
use App\Entity\Company;
use App\Entity\Contact;
use App\Entity\SocialMediaType;
use App\Entity\User;

/**
 * SocialMedia Entity (Generated Base Class)
 *
 * Social media accounts linked to contacts and companies *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to SocialMedia.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class SocialMediaGenerated extends EntityBase
{
    use OrganizationTrait;

    #[ORM\Column(type: 'string', length: 255)]
    protected string $name;

    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $apiKey = null;

    #[ORM\ManyToMany(targetEntity: Campaign::class, inversedBy: 'socialMedias', fetch: 'LAZY')]
    protected Collection $campaigns;

    #[ORM\ManyToOne(targetEntity: Company::class, inversedBy: 'socialMedias')]
    protected ?Company $company = null;

    #[ORM\ManyToOne(targetEntity: Contact::class, inversedBy: 'socialMedias')]
    protected ?Contact $contact = null;

    #[ORM\ManyToOne(targetEntity: SocialMediaType::class)]
    protected ?SocialMediaType $socialMediaType = null;

    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $url = null;

    #[ORM\ManyToOne(targetEntity: User::class, inversedBy: 'socialMedias')]
    protected ?User $user = null;


    public function __construct()
    {
        parent::__construct();
        $this->campaigns = new ArrayCollection();
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getApikey(): ?string    {
        return $this->apiKey;
    }

    public function setApikey(?string $apiKey): self
    {
        $this->apiKey = $apiKey;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Campaign>
     */
    public function getCampaigns(): Collection
    {
        return $this->campaigns;
    }

    public function addCampaign(App\Entity\Campaign $campaign): self
    {
        if (!$this->campaigns->contains($campaign)) {
            $this->campaigns->add($campaign);
        }
        return $this;
    }

    public function removeCampaign(App\Entity\Campaign $campaign): self
    {
        if ($this->campaigns->removeElement($campaign)) {
        }
        return $this;
    }

    public function getCompany(): ?App\Entity\Company
    {
        return $this->company;
    }

    public function setCompany(?App\Entity\Company $company): self
    {
        $this->company = $company;
        return $this;
    }

    public function getContact(): ?App\Entity\Contact
    {
        return $this->contact;
    }

    public function setContact(?App\Entity\Contact $contact): self
    {
        $this->contact = $contact;
        return $this;
    }

    public function getSocialmediatype(): ?App\Entity\SocialMediaType
    {
        return $this->socialMediaType;
    }

    public function setSocialmediatype(?App\Entity\SocialMediaType $socialMediaType): self
    {
        $this->socialMediaType = $socialMediaType;
        return $this;
    }

    public function getUrl(): ?string    {
        return $this->url;
    }

    public function setUrl(?string $url): self
    {
        $this->url = $url;
        return $this;
    }

    public function getUser(): ?App\Entity\User
    {
        return $this->user;
    }

    public function setUser(?App\Entity\User $user): self
    {
        $this->user = $user;
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? ($this->getId()?->toRfc4122() ?? '');
    }
}
