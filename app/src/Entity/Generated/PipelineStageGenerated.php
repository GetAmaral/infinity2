<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use App\Entity\Trait\OrganizationTrait;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
                                                                                    use App\Entity\Pipeline;
use App\Entity\DealStage;
use App\Entity\Deal;
use App\Entity\PipelineStage;
use App\Entity\Task;

/**
 * PipelineStage Entity (Generated Base Class)
 *
 * 
 *
 * This class is ALWAYS regenerated from CSV. DO NOT edit this file.
 * Add custom logic to PipelineStage.php instead.
 *
 * @generated by Luminai Code Generator
 * @see /config/EntityNew.csv and /config/PropertyNew.csv
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class PipelineStageGenerated extends EntityBase
{
    use OrganizationTrait;

    #[ORM\Column(type: 'string')]
    #[Assert\NotBlank]
    #[Assert\Length(max: 255)]
    #[Groups(['pipelinestage:read', 'pipelinestage:write'])]
    protected string $name;

    #[ORM\ManyToOne(targetEntity: Pipeline::class, inversedBy: 'stages')]
    #[Groups(['pipelinestage:read', 'pipelinestage:write'])]
    protected ?Pipeline $pipeline = null;

    #[ORM\OneToMany(targetEntity: DealStage::class, mappedBy: 'pipelineStage', fetch: 'LAZY')]
    #[ORM\OrderBy(['lastUpdatedAt' => 'ASC'])]
    #[Groups(['pipelinestage:read', 'pipelinestage:write'])]
    protected Collection $dealStages;

    #[ORM\OneToMany(targetEntity: Deal::class, mappedBy: 'currentStage', fetch: 'EXTRA_LAZY')]
    #[ORM\OrderBy(['name' => 'ASC'])]
    #[Groups(['pipelinestage:read', 'pipelinestage:write'])]
    protected Collection $deals;

    #[ORM\Column(type: 'string', nullable: true)]
    #[Assert\Length(max: 255)]
    #[Groups(['pipelinestage:read', 'pipelinestage:write'])]
    protected ?string $description = null;

    #[ORM\Column(type: 'string', nullable: true)]
    #[Assert\Length(max: 255)]
    #[Groups(['pipelinestage:read', 'pipelinestage:write'])]
    protected ?string $migrationCriteria = null;

    #[ORM\Column(type: 'integer', nullable: true)]
    #[Groups(['pipelinestage:read', 'pipelinestage:write'])]
    protected ?int $order = null;

    #[ORM\OneToOne(targetEntity: PipelineStage::class, inversedBy: 'previous')]
    #[Groups(['pipelinestage:read', 'pipelinestage:write'])]
    protected ?PipelineStage $next = null;

    #[ORM\OneToOne(targetEntity: PipelineStage::class, inversedBy: 'next')]
    #[Groups(['pipelinestage:read', 'pipelinestage:write'])]
    protected ?PipelineStage $previous = null;

    #[ORM\OneToMany(targetEntity: Task::class, mappedBy: 'pipelineStage', fetch: 'EXTRA_LAZY')]
    #[ORM\OrderBy(['name' => 'ASC'])]
    #[Groups(['pipelinestage:read', 'pipelinestage:write'])]
    protected Collection $tasks;


    public function __construct()
    {
        parent::__construct();
        $this->dealStages = new ArrayCollection();
        $this->deals = new ArrayCollection();
        $this->tasks = new ArrayCollection();
    }

    public function getName(): string
    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    
    public function getPipeline(): ?Pipeline
    {
        return $this->pipeline;
    }

    public function setPipeline(?Pipeline $pipeline): self
    {
        $this->pipeline = $pipeline;
        return $this;
    }

    /**
     * @return Collection<int, DealStage>
     */
    public function getDealstages(): Collection
    {
        return $this->dealStages;
    }

    public function addDealstage(DealStage $dealStage): self
    {
        if (!$this->dealStages->contains($dealStage)) {
            $this->dealStages->add($dealStage);
        }
        return $this;
    }

    public function removeDealstage(DealStage $dealStage): self
    {
        if ($this->dealStages->removeElement($dealStage)) {
        }
        return $this;
    }

    /**
     * @return Collection<int, Deal>
     */
    public function getDeals(): Collection
    {
        return $this->deals;
    }

    public function addDeal(Deal $deal): self
    {
        if (!$this->deals->contains($deal)) {
            $this->deals->add($deal);
        }
        return $this;
    }

    public function removeDeal(Deal $deal): self
    {
        if ($this->deals->removeElement($deal)) {
        }
        return $this;
    }

    public function getDescription(): ?string
    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    
    public function getMigrationcriteria(): ?string
    {
        return $this->migrationCriteria;
    }

    public function setMigrationcriteria(?string $migrationCriteria): self
    {
        $this->migrationCriteria = $migrationCriteria;
        return $this;
    }

    
    public function getOrder(): ?int
    {
        return $this->order;
    }

    public function setOrder(?int $order): self
    {
        $this->order = $order;
        return $this;
    }

    
    public function getNext(): ?PipelineStage
    {
        return $this->next;
    }

    public function setNext(?PipelineStage $next): self
    {
        $this->next = $next;
        return $this;
    }

    public function getPrevious(): ?PipelineStage
    {
        return $this->previous;
    }

    public function setPrevious(?PipelineStage $previous): self
    {
        $this->previous = $previous;
        return $this;
    }

    /**
     * @return Collection<int, Task>
     */
    public function getTasks(): Collection
    {
        return $this->tasks;
    }

    public function addTask(Task $task): self
    {
        if (!$this->tasks->contains($task)) {
            $this->tasks->add($task);
        }
        return $this;
    }

    public function removeTask(Task $task): self
    {
        if ($this->tasks->removeElement($task)) {
        }
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? '';
    }
}
