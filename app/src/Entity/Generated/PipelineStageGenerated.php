<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
use App\Entity\Organization;
use App\Entity\DealStage;
use App\Entity\Deal;
use App\Entity\PipelineStage;
use App\Entity\Pipeline;
use App\Entity\Task;

/**
 * PipelineStage Entity (Generated Base Class)
 *
 * Pipeline stage configurations *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to PipelineStage.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class PipelineStageGenerated extends EntityBase
{
    #[Groups(['pipelinestage:read', 'pipelinestage:write'])]
    #[ORM\ManyToOne(targetEntity: Organization::class, inversedBy: 'pipelineStages')]
    #[ORM\JoinColumn(nullable: false)]
    protected Organization $organization;

    #[Groups(['pipelinestage:read', 'pipelinestage:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $description = null;

    #[Groups(['pipelinestage:read'])]
    #[ORM\OneToMany(targetEntity: DealStage::class, mappedBy: 'pipelineStage', fetch: 'LAZY')]
    protected Collection $dealStages;

    #[Groups(['pipelinestage:read', 'pipelinestage:write'])]
    #[ORM\Column(type: 'integer')]
    protected int $probability;

    #[Groups(['pipelinestage:read', 'pipelinestage:write'])]
    #[ORM\Column(name: 'final_prop', type: 'boolean')]
    protected bool $final = false;

    #[Groups(['pipelinestage:read', 'pipelinestage:write'])]
    #[ORM\Column(type: 'boolean')]
    protected bool $won = false;

    #[Groups(['pipelinestage:read', 'pipelinestage:write'])]
    #[ORM\Column(type: 'boolean')]
    protected bool $active = true;

    #[Groups(['pipelinestage:read', 'pipelinestage:write'])]
    #[ORM\Column(type: 'boolean')]
    protected bool $lost = false;

    #[Groups(['pipelinestage:read', 'pipelinestage:write'])]
    #[ORM\Column(type: 'string', length: 7)]
    protected string $color = '#0dcaf0';

    #[Groups(['pipelinestage:read'])]
    #[ORM\OneToMany(targetEntity: Deal::class, mappedBy: 'currentStage', fetch: 'LAZY')]
    protected Collection $deals;

    #[Groups(['pipelinestage:read', 'pipelinestage:write'])]
    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $displayOrder = null;

    #[Groups(['pipelinestage:read', 'pipelinestage:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $migrationCriteria = null;

    #[Groups(['pipelinestage:read', 'pipelinestage:write'])]
    #[ORM\OneToOne(targetEntity: PipelineStage::class, inversedBy: 'previous')]
    protected ?PipelineStage $next = null;

    #[Groups(['pipelinestage:read', 'pipelinestage:write'])]
    #[ORM\ManyToOne(targetEntity: Pipeline::class, inversedBy: 'stages')]
    protected ?Pipeline $pipeline = null;

    #[Groups(['pipelinestage:read', 'pipelinestage:write'])]
    #[ORM\OneToOne(targetEntity: PipelineStage::class, mappedBy: 'next')]
    protected ?PipelineStage $previous = null;

    #[Groups(['pipelinestage:read', 'pipelinestage:write'])]
    #[ORM\Column(type: 'string', length: 255)]
    protected string $stageName;

    #[Groups(['pipelinestage:read'])]
    #[ORM\OneToMany(targetEntity: Task::class, mappedBy: 'pipelineStage', fetch: 'LAZY')]
    protected Collection $tasks;


    public function __construct()
    {
        parent::__construct();
        $this->dealStages = new ArrayCollection();
        $this->deals = new ArrayCollection();
        $this->tasks = new ArrayCollection();
    }

    public function getOrganization(): Organization
    {
        return $this->organization;
    }

    public function setOrganization(Organization $organization): self
    {
        $this->organization = $organization;
        return $this;
    }

    public function getDescription(): ?string    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    /**
     * @return Collection<int, DealStage>
     */
    public function getDealStages(): Collection
    {
        return $this->dealStages;
    }

    public function addDealStage(DealStage $dealStage): self
    {
        if (!$this->dealStages->contains($dealStage)) {
            $this->dealStages->add($dealStage);
            $dealStage->setPipelineStage($this);
        }
        return $this;
    }

    public function removeDealStage(DealStage $dealStage): self
    {
        if ($this->dealStages->removeElement($dealStage)) {
            if ($dealStage->getPipelineStage() === $this) {
                $dealStage->setPipelineStage(null);
            }
        }
        return $this;
    }

    public function getProbability(): int    {
        return $this->probability;
    }

    public function setProbability(int $probability): self
    {
        $this->probability = $probability;
        return $this;
    }

    public function getFinal(): bool    {
        return $this->final;
    }

    public function setFinal(bool $final): self
    {
        $this->final = $final;
        return $this;
    }

    public function isFinal(): bool
    {
        return $this->final === true;
    }

    public function getWon(): bool    {
        return $this->won;
    }

    public function setWon(bool $won): self
    {
        $this->won = $won;
        return $this;
    }

    public function isWon(): bool
    {
        return $this->won === true;
    }

    public function getActive(): bool    {
        return $this->active;
    }

    public function setActive(bool $active): self
    {
        $this->active = $active;
        return $this;
    }

    public function isActive(): bool
    {
        return $this->active === true;
    }

    public function getLost(): bool    {
        return $this->lost;
    }

    public function setLost(bool $lost): self
    {
        $this->lost = $lost;
        return $this;
    }

    public function isLost(): bool
    {
        return $this->lost === true;
    }

    public function getColor(): string    {
        return $this->color;
    }

    public function setColor(string $color): self
    {
        $this->color = $color;
        return $this;
    }

    /**
     * @return Collection<int, Deal>
     */
    public function getDeals(): Collection
    {
        return $this->deals;
    }

    public function addDeal(Deal $deal): self
    {
        if (!$this->deals->contains($deal)) {
            $this->deals->add($deal);
            $deal->setCurrentStage($this);
        }
        return $this;
    }

    public function removeDeal(Deal $deal): self
    {
        if ($this->deals->removeElement($deal)) {
            if ($deal->getCurrentStage() === $this) {
                $deal->setCurrentStage(null);
            }
        }
        return $this;
    }

    public function getDisplayOrder(): ?int    {
        return $this->displayOrder;
    }

    public function setDisplayOrder(?int $displayOrder): self
    {
        $this->displayOrder = $displayOrder;
        return $this;
    }

    public function getMigrationCriteria(): ?string    {
        return $this->migrationCriteria;
    }

    public function setMigrationCriteria(?string $migrationCriteria): self
    {
        $this->migrationCriteria = $migrationCriteria;
        return $this;
    }

    public function getNext(): ?PipelineStage
    {
        return $this->next;
    }

    public function setNext(?PipelineStage $next): self
    {
        $this->next = $next;
        return $this;
    }

    public function getPipeline(): ?Pipeline
    {
        return $this->pipeline;
    }

    public function setPipeline(?Pipeline $pipeline): self
    {
        $this->pipeline = $pipeline;
        return $this;
    }

    public function getPrevious(): ?PipelineStage
    {
        return $this->previous;
    }

    public function setPrevious(?PipelineStage $previous): self
    {
        $this->previous = $previous;
        return $this;
    }

    public function getStageName(): string    {
        return $this->stageName;
    }

    public function setStageName(string $stageName): self
    {
        $this->stageName = $stageName;
        return $this;
    }

    /**
     * @return Collection<int, Task>
     */
    public function getTasks(): Collection
    {
        return $this->tasks;
    }

    public function addTask(Task $task): self
    {
        if (!$this->tasks->contains($task)) {
            $this->tasks->add($task);
            $task->setPipelineStage($this);
        }
        return $this;
    }

    public function removeTask(Task $task): self
    {
        if ($this->tasks->removeElement($task)) {
            if ($task->getPipelineStage() === $this) {
                $task->setPipelineStage(null);
            }
        }
        return $this;
    }


    public function __toString(): string
    {
        return $this->getId()?->toRfc4122() ?? '';
    }
}
