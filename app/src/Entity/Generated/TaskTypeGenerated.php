<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
use App\Entity\Organization;
use App\Entity\TaskTemplate;
use App\Entity\Task;

/**
 * TaskType Entity (Generated Base Class)
 *
 * Task types for categorization (Call, Email, Meeting, etc.) *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to TaskType.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class TaskTypeGenerated extends EntityBase
{
    #[Groups(['tasktype:read', 'tasktype:write'])]
    #[ORM\ManyToOne(targetEntity: Organization::class, inversedBy: 'taskTypes')]
    #[ORM\JoinColumn(nullable: false)]
    protected Organization $organization;

    #[Groups(['tasktype:read', 'tasktype:write'])]
    #[ORM\Column(type: 'string', length: 255)]
    protected string $name;

    #[Groups(['tasktype:read', 'tasktype:write'])]
    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $taskFunction = null;

    #[Groups(['tasktype:read', 'tasktype:write'])]
    #[ORM\OneToMany(targetEntity: TaskTemplate::class, mappedBy: 'type', fetch: 'LAZY')]
    protected Collection $taskTemplates;

    #[Groups(['tasktype:read', 'tasktype:write'])]
    #[ORM\OneToMany(targetEntity: Task::class, mappedBy: 'type', fetch: 'LAZY')]
    protected Collection $tasks;


    public function __construct()
    {
        parent::__construct();
        $this->taskTemplates = new ArrayCollection();
        $this->tasks = new ArrayCollection();
    }

    public function getOrganization(): Organization
    {
        return $this->organization;
    }

    public function setOrganization(Organization $organization): self
    {
        $this->organization = $organization;
        return $this;
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getTaskFunction(): ?int    {
        return $this->taskFunction;
    }

    public function setTaskFunction(?int $taskFunction): self
    {
        $this->taskFunction = $taskFunction;
        return $this;
    }

    /**
     * @return Collection<int, TaskTemplate>
     */
    public function getTaskTemplates(): Collection
    {
        return $this->taskTemplates;
    }

    public function addTaskTemplate(TaskTemplate $taskTemplate): self
    {
        if (!$this->taskTemplates->contains($taskTemplate)) {
            $this->taskTemplates->add($taskTemplate);
            $taskTemplate->setType($this);
        }
        return $this;
    }

    public function removeTaskTemplate(TaskTemplate $taskTemplate): self
    {
        if ($this->taskTemplates->removeElement($taskTemplate)) {
            if ($taskTemplate->getType() === $this) {
                $taskTemplate->setType(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, Task>
     */
    public function getTasks(): Collection
    {
        return $this->tasks;
    }

    public function addTask(Task $task): self
    {
        if (!$this->tasks->contains($task)) {
            $this->tasks->add($task);
            $task->setType($this);
        }
        return $this;
    }

    public function removeTask(Task $task): self
    {
        if ($this->tasks->removeElement($task)) {
            if ($task->getType() === $this) {
                $task->setType(null);
            }
        }
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? ($this->getId()?->toRfc4122() ?? '');
    }
}
