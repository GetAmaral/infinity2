<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use App\Entity\Trait\OrganizationTrait;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use App\Entity\TaskTemplate;
use App\Entity\Task;

/**
 * TaskType Entity (Generated Base Class)
 *
 * Task types for categorization (Call, Email, Meeting, etc.) *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to TaskType.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class TaskTypeGenerated extends EntityBase
{
    use OrganizationTrait;

    #[ORM\Column(type: 'string', length: 255)]
    protected string $name;

    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $taskFunction = null;

    #[ORM\OneToMany(targetEntity: TaskTemplate::class, mappedBy: 'type', fetch: 'LAZY')]
    protected Collection $taskTemplates;

    #[ORM\OneToMany(targetEntity: Task::class, mappedBy: 'type', fetch: 'LAZY')]
    protected Collection $tasks;


    public function __construct()
    {
        parent::__construct();
        $this->taskTemplates = new ArrayCollection();
        $this->tasks = new ArrayCollection();
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getTaskfunction(): ?int    {
        return $this->taskFunction;
    }

    public function setTaskfunction(?int $taskFunction): self
    {
        $this->taskFunction = $taskFunction;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\TaskTemplate>
     */
    public function getTasktemplates(): Collection
    {
        return $this->taskTemplates;
    }

    public function addTaktemplate(App\Entity\TaskTemplate $takTemplate): self
    {
        if (!$this->taskTemplates->contains($takTemplate)) {
            $this->taskTemplates->add($takTemplate);
            $takTemplate->setType($this);
        }
        return $this;
    }

    public function removeTaktemplate(App\Entity\TaskTemplate $takTemplate): self
    {
        if ($this->taskTemplates->removeElement($takTemplate)) {
            if ($takTemplate->getType() === $this) {
                $takTemplate->setType(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Task>
     */
    public function getTasks(): Collection
    {
        return $this->tasks;
    }

    public function addTak(App\Entity\Task $tak): self
    {
        if (!$this->tasks->contains($tak)) {
            $this->tasks->add($tak);
            $tak->setType($this);
        }
        return $this;
    }

    public function removeTak(App\Entity\Task $tak): self
    {
        if ($this->tasks->removeElement($tak)) {
            if ($tak->getType() === $this) {
                $tak->setType(null);
            }
        }
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? ($this->getId()?->toRfc4122() ?? '');
    }
}
