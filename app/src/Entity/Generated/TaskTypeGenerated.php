<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use App\Entity\Trait\OrganizationTrait;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
                                use App\Entity\Task;
use App\Entity\TaskTemplate;

/**
 * TaskType Entity (Generated Base Class)
 *
 * 
 *
 * This class is ALWAYS regenerated from CSV. DO NOT edit this file.
 * Add custom logic to TaskType.php instead.
 *
 * @generated by Luminai Code Generator
 * @see /config/EntityNew.csv and /config/PropertyNew.csv
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class TaskTypeGenerated extends EntityBase
{
    use OrganizationTrait;

    #[ORM\Column(type: 'string')]
    #[Assert\NotBlank]
    #[Assert\Length(max: 255)]
    #[Groups(['tasktype:read', 'tasktype:write'])]
    protected string $name;

    #[ORM\Column(type: 'integer', nullable: true)]
    #[Groups(['tasktype:read', 'tasktype:write'])]
    protected ?int $taskFunction = null;

    #[ORM\OneToMany(targetEntity: Task::class, mappedBy: 'type', fetch: 'EXTRA_LAZY')]
    #[Groups(['tasktype:read', 'tasktype:write'])]
    protected Collection $tasks;

    #[ORM\OneToMany(targetEntity: TaskTemplate::class, mappedBy: 'type', fetch: 'LAZY')]
    #[Groups(['tasktype:read', 'tasktype:write'])]
    protected Collection $taskTemplates;


    public function __construct()
    {
        parent::__construct();
        $this->tasks = new ArrayCollection();
        $this->taskTemplates = new ArrayCollection();
    }

    public function getName(): string
    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    
    public function getTaskfunction(): ?int
    {
        return $this->taskFunction;
    }

    public function setTaskfunction(?int $taskFunction): self
    {
        $this->taskFunction = $taskFunction;
        return $this;
    }

    
    /**
     * @return Collection<int, Task>
     */
    public function getTasks(): Collection
    {
        return $this->tasks;
    }

    public function addTask(Task $task): self
    {
        if (!$this->tasks->contains($task)) {
            $this->tasks->add($task);
        }
        return $this;
    }

    public function removeTask(Task $task): self
    {
        if ($this->tasks->removeElement($task)) {
        }
        return $this;
    }

    /**
     * @return Collection<int, TaskTemplate>
     */
    public function getTasktemplates(): Collection
    {
        return $this->taskTemplates;
    }

    public function addTasktemplate(TaskTemplate $taskTemplate): self
    {
        if (!$this->taskTemplates->contains($taskTemplate)) {
            $this->taskTemplates->add($taskTemplate);
        }
        return $this;
    }

    public function removeTasktemplate(TaskTemplate $taskTemplate): self
    {
        if ($this->taskTemplates->removeElement($taskTemplate)) {
        }
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? '';
    }
}
