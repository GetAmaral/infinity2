<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use App\Entity\Trait\OrganizationTrait;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
                                                                                                    use App\Entity\SocialMedia;
use App\Entity\User;
use App\Entity\Contact;
use App\Entity\Company;
use App\Entity\Deal;
use App\Entity\Talk;

/**
 * Campaign Entity (Generated Base Class)
 *
 * 
 *
 * This class is ALWAYS regenerated from CSV. DO NOT edit this file.
 * Add custom logic to Campaign.php instead.
 *
 * @generated by Luminai Code Generator
 * @see /config/EntityNew.csv and /config/PropertyNew.csv
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class CampaignGenerated extends EntityBase
{
    use OrganizationTrait;

    #[ORM\Column(type: 'string')]
    #[Assert\NotBlank]
    #[Assert\Length(max: 255)]
    #[Groups(['campaign:read', 'campaign:write'])]
    protected string $name;

    #[ORM\Column(type: 'text', nullable: true)]
    #[Groups(['campaign:read', 'campaign:write'])]
    protected ?string $description = null;

    #[ORM\ManyToMany(targetEntity: SocialMedia::class, inversedBy: 'campaigns', fetch: 'LAZY')]
    #[Groups(['campaign:read', 'campaign:write'])]
    protected Collection $socialMedias;

    #[ORM\Column(type: 'integer', nullable: true)]
    #[Groups(['campaign:read', 'campaign:write'])]
    protected ?int $campaignStatus = null;

    #[ORM\Column(type: 'datetime', nullable: true)]
    #[Groups(['campaign:read', 'campaign:write'])]
    protected ?\DateTimeInterface $plannedStartDate = null;

    #[ORM\Column(type: 'datetime', nullable: true)]
    #[Groups(['campaign:read', 'campaign:write'])]
    protected ?\DateTimeInterface $startDate = null;

    #[ORM\Column(type: 'datetime', nullable: true)]
    #[Groups(['campaign:read', 'campaign:write'])]
    protected ?\DateTimeInterface $plannedEndDate = null;

    #[ORM\Column(type: 'datetime', nullable: true)]
    #[Groups(['campaign:read', 'campaign:write'])]
    protected ?\DateTimeInterface $endDate = null;

    #[ORM\Column(type: 'integer', nullable: true)]
    #[Groups(['campaign:read', 'campaign:write'])]
    protected ?int $plannedDuration = null;

    #[ORM\Column(type: 'integer', nullable: true)]
    #[Groups(['campaign:read', 'campaign:write'])]
    protected ?int $duration = null;

    #[ORM\ManyToOne(targetEntity: User::class, inversedBy: 'managedCampaigns')]
    #[Groups(['campaign:read', 'campaign:write'])]
    protected ?User $manager = null;

    #[ORM\ManyToMany(targetEntity: User::class, inversedBy: 'campaigns', fetch: 'LAZY')]
    #[Groups(['campaign:read', 'campaign:write'])]
    protected Collection $team;

    #[ORM\ManyToMany(targetEntity: Contact::class, inversedBy: 'campaigns', fetch: 'LAZY')]
    #[Groups(['campaign:read', 'campaign:write'])]
    protected Collection $contacts;

    #[ORM\ManyToMany(targetEntity: Company::class, inversedBy: 'campaigns', fetch: 'LAZY')]
    #[Groups(['campaign:read', 'campaign:write'])]
    protected Collection $companies;

    #[ORM\OneToMany(targetEntity: Deal::class, mappedBy: 'campaign', fetch: 'EXTRA_LAZY')]
    #[ORM\OrderBy(['name' => 'ASC'])]
    #[Groups(['campaign:read', 'campaign:write'])]
    protected Collection $deals;

    #[ORM\ManyToMany(targetEntity: Talk::class, inversedBy: 'campaigns', fetch: 'LAZY')]
    #[Groups(['campaign:read', 'campaign:write'])]
    protected Collection $talks;

    #[ORM\Column(type: 'float', nullable: true)]
    #[Groups(['campaign:read', 'campaign:write'])]
    protected ?float $plannedBudget = null;

    #[ORM\Column(type: 'float', nullable: true)]
    #[Groups(['campaign:read', 'campaign:write'])]
    protected ?float $actualBudget = null;

    #[ORM\Column(type: 'float', nullable: true)]
    #[Groups(['campaign:read', 'campaign:write'])]
    protected ?float $plannedReturn = null;

    #[ORM\Column(type: 'float', nullable: true)]
    #[Groups(['campaign:read', 'campaign:write'])]
    protected ?float $actualReturn = null;

    #[ORM\Column(type: 'float', nullable: true)]
    #[Groups(['campaign:read', 'campaign:write'])]
    protected ?float $roi = null;


    public function __construct()
    {
        parent::__construct();
        $this->socialMedias = new ArrayCollection();
        $this->team = new ArrayCollection();
        $this->contacts = new ArrayCollection();
        $this->companies = new ArrayCollection();
        $this->deals = new ArrayCollection();
        $this->talks = new ArrayCollection();
    }

    public function getName(): string
    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    
    public function getDescription(): ?string
    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    
    /**
     * @return Collection<int, SocialMedia>
     */
    public function getSocialmedias(): Collection
    {
        return $this->socialMedias;
    }

    public function addSocialmedia(SocialMedia $socialMedia): self
    {
        if (!$this->socialMedias->contains($socialMedia)) {
            $this->socialMedias->add($socialMedia);
        }
        return $this;
    }

    public function removeSocialmedia(SocialMedia $socialMedia): self
    {
        if ($this->socialMedias->removeElement($socialMedia)) {
        }
        return $this;
    }

    public function getCampaignstatus(): ?int
    {
        return $this->campaignStatus;
    }

    public function setCampaignstatus(?int $campaignStatus): self
    {
        $this->campaignStatus = $campaignStatus;
        return $this;
    }

    
    public function getPlannedstartdate(): ?\DateTimeInterface
    {
        return $this->plannedStartDate;
    }

    public function setPlannedstartdate(?\DateTimeInterface $plannedStartDate): self
    {
        $this->plannedStartDate = $plannedStartDate;
        return $this;
    }

    
    public function getStartdate(): ?\DateTimeInterface
    {
        return $this->startDate;
    }

    public function setStartdate(?\DateTimeInterface $startDate): self
    {
        $this->startDate = $startDate;
        return $this;
    }

    
    public function getPlannedenddate(): ?\DateTimeInterface
    {
        return $this->plannedEndDate;
    }

    public function setPlannedenddate(?\DateTimeInterface $plannedEndDate): self
    {
        $this->plannedEndDate = $plannedEndDate;
        return $this;
    }

    
    public function getEnddate(): ?\DateTimeInterface
    {
        return $this->endDate;
    }

    public function setEnddate(?\DateTimeInterface $endDate): self
    {
        $this->endDate = $endDate;
        return $this;
    }

    
    public function getPlannedduration(): ?int
    {
        return $this->plannedDuration;
    }

    public function setPlannedduration(?int $plannedDuration): self
    {
        $this->plannedDuration = $plannedDuration;
        return $this;
    }

    
    public function getDuration(): ?int
    {
        return $this->duration;
    }

    public function setDuration(?int $duration): self
    {
        $this->duration = $duration;
        return $this;
    }

    
    public function getManager(): ?User
    {
        return $this->manager;
    }

    public function setManager(?User $manager): self
    {
        $this->manager = $manager;
        return $this;
    }

    /**
     * @return Collection<int, User>
     */
    public function getTeam(): Collection
    {
        return $this->team;
    }

    public function addTea(User $tea): self
    {
        if (!$this->team->contains($tea)) {
            $this->team->add($tea);
        }
        return $this;
    }

    public function removeTea(User $tea): self
    {
        if ($this->team->removeElement($tea)) {
        }
        return $this;
    }

    /**
     * @return Collection<int, Contact>
     */
    public function getContacts(): Collection
    {
        return $this->contacts;
    }

    public function addContact(Contact $contact): self
    {
        if (!$this->contacts->contains($contact)) {
            $this->contacts->add($contact);
        }
        return $this;
    }

    public function removeContact(Contact $contact): self
    {
        if ($this->contacts->removeElement($contact)) {
        }
        return $this;
    }

    /**
     * @return Collection<int, Company>
     */
    public function getCompanies(): Collection
    {
        return $this->companies;
    }

    public function addCompanie(Company $companie): self
    {
        if (!$this->companies->contains($companie)) {
            $this->companies->add($companie);
        }
        return $this;
    }

    public function removeCompanie(Company $companie): self
    {
        if ($this->companies->removeElement($companie)) {
        }
        return $this;
    }

    /**
     * @return Collection<int, Deal>
     */
    public function getDeals(): Collection
    {
        return $this->deals;
    }

    public function addDeal(Deal $deal): self
    {
        if (!$this->deals->contains($deal)) {
            $this->deals->add($deal);
        }
        return $this;
    }

    public function removeDeal(Deal $deal): self
    {
        if ($this->deals->removeElement($deal)) {
        }
        return $this;
    }

    /**
     * @return Collection<int, Talk>
     */
    public function getTalks(): Collection
    {
        return $this->talks;
    }

    public function addTalk(Talk $talk): self
    {
        if (!$this->talks->contains($talk)) {
            $this->talks->add($talk);
        }
        return $this;
    }

    public function removeTalk(Talk $talk): self
    {
        if ($this->talks->removeElement($talk)) {
        }
        return $this;
    }

    public function getPlannedbudget(): ?float
    {
        return $this->plannedBudget;
    }

    public function setPlannedbudget(?float $plannedBudget): self
    {
        $this->plannedBudget = $plannedBudget;
        return $this;
    }

    
    public function getActualbudget(): ?float
    {
        return $this->actualBudget;
    }

    public function setActualbudget(?float $actualBudget): self
    {
        $this->actualBudget = $actualBudget;
        return $this;
    }

    
    public function getPlannedreturn(): ?float
    {
        return $this->plannedReturn;
    }

    public function setPlannedreturn(?float $plannedReturn): self
    {
        $this->plannedReturn = $plannedReturn;
        return $this;
    }

    
    public function getActualreturn(): ?float
    {
        return $this->actualReturn;
    }

    public function setActualreturn(?float $actualReturn): self
    {
        $this->actualReturn = $actualReturn;
        return $this;
    }

    
    public function getRoi(): ?float
    {
        return $this->roi;
    }

    public function setRoi(?float $roi): self
    {
        $this->roi = $roi;
        return $this;
    }

    

    public function __toString(): string
    {
        return $this->name ?? '';
    }
}
