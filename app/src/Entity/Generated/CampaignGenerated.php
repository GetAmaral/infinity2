<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
use App\Entity\Organization;
use App\Entity\Company;
use App\Entity\Contact;
use App\Entity\Deal;
use App\Entity\User;
use App\Entity\Campaign;
use App\Entity\SocialMedia;
use App\Entity\Talk;

/**
 * Campaign Entity (Generated Base Class)
 *
 * Marketing campaigns for lead generation and customer engagement *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to Campaign.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class CampaignGenerated extends EntityBase
{
    #[Groups(['campaign:read', 'campaign:write'])]
    #[ORM\ManyToOne(targetEntity: Organization::class, inversedBy: 'campaigns')]
    #[ORM\JoinColumn(nullable: false)]
    protected Organization $organization;

    #[Groups(['campaign:read', 'campaign:write'])]
    #[ORM\Column(type: 'string', length: 255)]
    protected string $name;

    #[Groups(['campaign:read', 'campaign:write'])]
    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $description = null;

    #[Groups(['campaign:read', 'campaign:write'])]
    #[ORM\Column(type: 'decimal', precision: 10, scale: 2, nullable: true)]
    protected ?string $actualBudget = null;

    #[Groups(['campaign:read', 'campaign:write'])]
    #[ORM\Column(type: 'boolean')]
    protected bool $active;

    #[Groups(['campaign:read', 'campaign:write'])]
    #[ORM\Column(type: 'decimal', precision: 10, scale: 2, nullable: true)]
    protected ?string $actualCost = null;

    #[Groups(['campaign:read', 'campaign:write'])]
    #[ORM\Column(type: 'decimal', precision: 10, scale: 2, nullable: true)]
    protected ?string $actualReturn = null;

    #[Groups(['campaign:read', 'campaign:write'])]
    #[ORM\Column(type: 'decimal', precision: 10, scale: 2, nullable: true)]
    protected ?string $actualRevenue = null;

    #[Groups(['campaign:read', 'campaign:write'])]
    #[ORM\Column(type: 'boolean')]
    protected bool $archived;

    #[Groups(['campaign:read', 'campaign:write'])]
    #[ORM\Column(type: 'decimal', precision: 10, scale: 2, nullable: true)]
    protected ?string $budgetedCost = null;

    #[Groups(['campaign:read', 'campaign:write'])]
    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $campaignStatus = null;

    #[Groups(['campaign:read', 'campaign:write'])]
    #[ORM\Column(type: 'string', length: 255)]
    protected string $campaignType;

    #[Groups(['campaign:read', 'campaign:write'])]
    #[ORM\Column(type: 'string', length: 100, nullable: true)]
    #[Assert\Length(max: 100)]
    protected ?string $codeName = null;

    #[Groups(['campaign:read'])]
    #[ORM\ManyToMany(targetEntity: Company::class, inversedBy: 'campaigns', fetch: 'LAZY')]
    #[ORM\JoinTable(name: 'campaign_companies')]
    protected Collection $companies;

    #[Groups(['campaign:read'])]
    #[ORM\ManyToMany(targetEntity: Contact::class, inversedBy: 'campaigns', fetch: 'LAZY')]
    #[ORM\JoinTable(name: 'campaign_contacts')]
    protected Collection $contacts;

    #[Groups(['campaign:read'])]
    #[ORM\OneToMany(targetEntity: Deal::class, mappedBy: 'campaign', fetch: 'LAZY')]
    protected Collection $deals;

    #[Groups(['campaign:read', 'campaign:write'])]
    #[ORM\Column(type: 'boolean')]
    protected bool $draft;

    #[Groups(['campaign:read', 'campaign:write'])]
    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $duration = null;

    #[Groups(['campaign:read', 'campaign:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    #[Assert\Length(max: 255)]
    protected ?string $emailAddress = null;

    #[Groups(['campaign:read', 'campaign:write'])]
    #[ORM\Column(type: 'datetime', nullable: true)]
    protected ?\DateTimeImmutable $endDate = null;

    #[Groups(['campaign:read', 'campaign:write'])]
    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $expectedResponse = null;

    #[Groups(['campaign:read', 'campaign:write'])]
    #[ORM\Column(type: 'decimal', precision: 10, scale: 2, nullable: true)]
    protected ?string $expectedRevenue = null;

    #[Groups(['campaign:read', 'campaign:write'])]
    #[ORM\ManyToOne(targetEntity: User::class, inversedBy: 'managedCampaigns')]
    protected ?User $manager = null;

    #[Groups(['campaign:read', 'campaign:write'])]
    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $message = null;

    #[Groups(['campaign:read', 'campaign:write'])]
    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $numberOfContacts = null;

    #[Groups(['campaign:read', 'campaign:write'])]
    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $numberOfConverted = null;

    #[Groups(['campaign:read', 'campaign:write'])]
    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $numberOfLeads = null;

    #[Groups(['campaign:read', 'campaign:write'])]
    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $numberOfResponses = null;

    #[Groups(['campaign:read', 'campaign:write'])]
    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $objective = null;

    #[Groups(['campaign:read', 'campaign:write'])]
    #[ORM\Column(type: 'decimal', precision: 10, scale: 2, nullable: true)]
    protected ?string $otherCost = null;

    #[Groups(['campaign:read', 'campaign:write'])]
    #[ORM\ManyToOne(targetEntity: User::class, inversedBy: 'ownedCampaigns')]
    #[ORM\JoinColumn(nullable: false)]
    protected User $owner;

    #[Groups(['campaign:read', 'campaign:write'])]
    #[ORM\ManyToOne(targetEntity: Campaign::class, inversedBy: 'childCampaigns')]
    protected ?Campaign $parentCampaign = null;

    #[Groups(['campaign:read', 'campaign:write'])]
    #[ORM\Column(type: 'decimal', precision: 10, scale: 2, nullable: true)]
    protected ?string $plannedBudget = null;

    #[Groups(['campaign:read', 'campaign:write'])]
    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $plannedDuration = null;

    #[Groups(['campaign:read', 'campaign:write'])]
    #[ORM\Column(type: 'datetime', nullable: true)]
    protected ?\DateTimeImmutable $plannedEndDate = null;

    #[Groups(['campaign:read', 'campaign:write'])]
    #[ORM\Column(type: 'decimal', precision: 10, scale: 2, nullable: true)]
    protected ?string $plannedReturn = null;

    #[Groups(['campaign:read', 'campaign:write'])]
    #[ORM\Column(type: 'datetime', nullable: true)]
    protected ?\DateTimeImmutable $plannedStartDate = null;

    #[Groups(['campaign:read', 'campaign:write'])]
    #[ORM\Column(type: 'decimal', precision: 10, scale: 2, nullable: true)]
    protected ?string $roi = null;

    #[Groups(['campaign:read'])]
    #[ORM\ManyToMany(targetEntity: SocialMedia::class, inversedBy: 'campaigns', fetch: 'LAZY')]
    #[ORM\JoinTable(name: 'campaign_socialMedias')]
    protected Collection $socialMedias;

    #[Groups(['campaign:read', 'campaign:write'])]
    #[ORM\Column(type: 'datetime', nullable: true)]
    protected ?\DateTimeImmutable $startDate = null;

    #[Groups(['campaign:read', 'campaign:write'])]
    #[ORM\Column(type: 'string', length: 255)]
    protected string $status;

    #[Groups(['campaign:read'])]
    #[ORM\ManyToMany(targetEntity: Talk::class, inversedBy: 'campaigns', fetch: 'LAZY')]
    #[ORM\JoinTable(name: 'campaign_talks')]
    protected Collection $talks;

    #[Groups(['campaign:read', 'campaign:write'])]
    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $targetAudience = null;

    #[Groups(['campaign:read'])]
    #[ORM\ManyToMany(targetEntity: User::class, inversedBy: 'campaigns', fetch: 'LAZY')]
    #[ORM\JoinTable(name: 'campaign_team')]
    protected Collection $team;

    #[Groups(['campaign:read', 'campaign:write'])]
    #[ORM\Column(type: 'boolean')]
    protected bool $template;


    public function __construct()
    {
        parent::__construct();
        $this->companies = new ArrayCollection();
        $this->contacts = new ArrayCollection();
        $this->deals = new ArrayCollection();
        $this->socialMedias = new ArrayCollection();
        $this->talks = new ArrayCollection();
        $this->team = new ArrayCollection();
    }

    public function getOrganization(): App\Entity\Organization
    {
        return $this->organization;
    }

    public function setOrganization(App\Entity\Organization $organization): self
    {
        $this->organization = $organization;
        return $this;
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getDescription(): ?string    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    public function getActualBudget(): ?string    {
        return $this->actualBudget;
    }

    public function setActualBudget(?string $actualBudget): self
    {
        $this->actualBudget = $actualBudget;
        return $this;
    }

    public function getActive(): bool    {
        return $this->active;
    }

    public function setActive(bool $active): self
    {
        $this->active = $active;
        return $this;
    }

    public function isActive(): bool
    {
        return $this->active === true;
    }

    public function getActualCost(): ?string    {
        return $this->actualCost;
    }

    public function setActualCost(?string $actualCost): self
    {
        $this->actualCost = $actualCost;
        return $this;
    }

    public function getActualReturn(): ?string    {
        return $this->actualReturn;
    }

    public function setActualReturn(?string $actualReturn): self
    {
        $this->actualReturn = $actualReturn;
        return $this;
    }

    public function getActualRevenue(): ?string    {
        return $this->actualRevenue;
    }

    public function setActualRevenue(?string $actualRevenue): self
    {
        $this->actualRevenue = $actualRevenue;
        return $this;
    }

    public function getArchived(): bool    {
        return $this->archived;
    }

    public function setArchived(bool $archived): self
    {
        $this->archived = $archived;
        return $this;
    }

    public function isArchived(): bool
    {
        return $this->archived === true;
    }

    public function getBudgetedCost(): ?string    {
        return $this->budgetedCost;
    }

    public function setBudgetedCost(?string $budgetedCost): self
    {
        $this->budgetedCost = $budgetedCost;
        return $this;
    }

    public function getCampaignStatus(): ?int    {
        return $this->campaignStatus;
    }

    public function setCampaignStatus(?int $campaignStatus): self
    {
        $this->campaignStatus = $campaignStatus;
        return $this;
    }

    public function getCampaignType(): string    {
        return $this->campaignType;
    }

    public function setCampaignType(string $campaignType): self
    {
        $this->campaignType = $campaignType;
        return $this;
    }

    public function getCodeName(): ?string    {
        return $this->codeName;
    }

    public function setCodeName(?string $codeName): self
    {
        $this->codeName = $codeName;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Company>
     */
    public function getCompanies(): Collection
    {
        return $this->companies;
    }

    public function addCompany(App\Entity\Company $company): self
    {
        if (!$this->companies->contains($company)) {
            $this->companies->add($company);
        }
        return $this;
    }

    public function removeCompany(App\Entity\Company $company): self
    {
        if ($this->companies->removeElement($company)) {
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Contact>
     */
    public function getContacts(): Collection
    {
        return $this->contacts;
    }

    public function addContact(App\Entity\Contact $contact): self
    {
        if (!$this->contacts->contains($contact)) {
            $this->contacts->add($contact);
        }
        return $this;
    }

    public function removeContact(App\Entity\Contact $contact): self
    {
        if ($this->contacts->removeElement($contact)) {
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Deal>
     */
    public function getDeals(): Collection
    {
        return $this->deals;
    }

    public function addDeal(App\Entity\Deal $deal): self
    {
        if (!$this->deals->contains($deal)) {
            $this->deals->add($deal);
            $deal->setCampaign($this);
        }
        return $this;
    }

    public function removeDeal(App\Entity\Deal $deal): self
    {
        if ($this->deals->removeElement($deal)) {
            if ($deal->getCampaign() === $this) {
                $deal->setCampaign(null);
            }
        }
        return $this;
    }

    public function getDraft(): bool    {
        return $this->draft;
    }

    public function setDraft(bool $draft): self
    {
        $this->draft = $draft;
        return $this;
    }

    public function isDraft(): bool
    {
        return $this->draft === true;
    }

    public function getDuration(): ?int    {
        return $this->duration;
    }

    public function setDuration(?int $duration): self
    {
        $this->duration = $duration;
        return $this;
    }

    public function getEmailAddress(): ?string    {
        return $this->emailAddress;
    }

    public function setEmailAddress(?string $emailAddress): self
    {
        $this->emailAddress = $emailAddress;
        return $this;
    }

    public function getEndDate(): ?\DateTimeImmutable    {
        return $this->endDate;
    }

    public function setEndDate(?\DateTimeImmutable $endDate): self
    {
        $this->endDate = $endDate;
        return $this;
    }

    public function getExpectedResponse(): ?int    {
        return $this->expectedResponse;
    }

    public function setExpectedResponse(?int $expectedResponse): self
    {
        $this->expectedResponse = $expectedResponse;
        return $this;
    }

    public function getExpectedRevenue(): ?string    {
        return $this->expectedRevenue;
    }

    public function setExpectedRevenue(?string $expectedRevenue): self
    {
        $this->expectedRevenue = $expectedRevenue;
        return $this;
    }

    public function getManager(): ?App\Entity\User
    {
        return $this->manager;
    }

    public function setManager(?App\Entity\User $manager): self
    {
        $this->manager = $manager;
        return $this;
    }

    public function getMessage(): ?string    {
        return $this->message;
    }

    public function setMessage(?string $message): self
    {
        $this->message = $message;
        return $this;
    }

    public function getNumberOfContacts(): ?int    {
        return $this->numberOfContacts;
    }

    public function setNumberOfContacts(?int $numberOfContacts): self
    {
        $this->numberOfContacts = $numberOfContacts;
        return $this;
    }

    public function getNumberOfConverted(): ?int    {
        return $this->numberOfConverted;
    }

    public function setNumberOfConverted(?int $numberOfConverted): self
    {
        $this->numberOfConverted = $numberOfConverted;
        return $this;
    }

    public function getNumberOfLeads(): ?int    {
        return $this->numberOfLeads;
    }

    public function setNumberOfLeads(?int $numberOfLeads): self
    {
        $this->numberOfLeads = $numberOfLeads;
        return $this;
    }

    public function getNumberOfResponses(): ?int    {
        return $this->numberOfResponses;
    }

    public function setNumberOfResponses(?int $numberOfResponses): self
    {
        $this->numberOfResponses = $numberOfResponses;
        return $this;
    }

    public function getObjective(): ?string    {
        return $this->objective;
    }

    public function setObjective(?string $objective): self
    {
        $this->objective = $objective;
        return $this;
    }

    public function getOtherCost(): ?string    {
        return $this->otherCost;
    }

    public function setOtherCost(?string $otherCost): self
    {
        $this->otherCost = $otherCost;
        return $this;
    }

    public function getOwner(): App\Entity\User
    {
        return $this->owner;
    }

    public function setOwner(App\Entity\User $owner): self
    {
        $this->owner = $owner;
        return $this;
    }

    public function getParentCampaign(): ?App\Entity\Campaign
    {
        return $this->parentCampaign;
    }

    public function setParentCampaign(?App\Entity\Campaign $parentCampaign): self
    {
        $this->parentCampaign = $parentCampaign;
        return $this;
    }

    public function getPlannedBudget(): ?string    {
        return $this->plannedBudget;
    }

    public function setPlannedBudget(?string $plannedBudget): self
    {
        $this->plannedBudget = $plannedBudget;
        return $this;
    }

    public function getPlannedDuration(): ?int    {
        return $this->plannedDuration;
    }

    public function setPlannedDuration(?int $plannedDuration): self
    {
        $this->plannedDuration = $plannedDuration;
        return $this;
    }

    public function getPlannedEndDate(): ?\DateTimeImmutable    {
        return $this->plannedEndDate;
    }

    public function setPlannedEndDate(?\DateTimeImmutable $plannedEndDate): self
    {
        $this->plannedEndDate = $plannedEndDate;
        return $this;
    }

    public function getPlannedReturn(): ?string    {
        return $this->plannedReturn;
    }

    public function setPlannedReturn(?string $plannedReturn): self
    {
        $this->plannedReturn = $plannedReturn;
        return $this;
    }

    public function getPlannedStartDate(): ?\DateTimeImmutable    {
        return $this->plannedStartDate;
    }

    public function setPlannedStartDate(?\DateTimeImmutable $plannedStartDate): self
    {
        $this->plannedStartDate = $plannedStartDate;
        return $this;
    }

    public function getRoi(): ?string    {
        return $this->roi;
    }

    public function setRoi(?string $roi): self
    {
        $this->roi = $roi;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\SocialMedia>
     */
    public function getSocialMedias(): Collection
    {
        return $this->socialMedias;
    }

    public function addSocialMedia(App\Entity\SocialMedia $socialMedia): self
    {
        if (!$this->socialMedias->contains($socialMedia)) {
            $this->socialMedias->add($socialMedia);
        }
        return $this;
    }

    public function removeSocialMedia(App\Entity\SocialMedia $socialMedia): self
    {
        if ($this->socialMedias->removeElement($socialMedia)) {
        }
        return $this;
    }

    public function getStartDate(): ?\DateTimeImmutable    {
        return $this->startDate;
    }

    public function setStartDate(?\DateTimeImmutable $startDate): self
    {
        $this->startDate = $startDate;
        return $this;
    }

    public function getStatus(): string    {
        return $this->status;
    }

    public function setStatus(string $status): self
    {
        $this->status = $status;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Talk>
     */
    public function getTalks(): Collection
    {
        return $this->talks;
    }

    public function addTalk(App\Entity\Talk $talk): self
    {
        if (!$this->talks->contains($talk)) {
            $this->talks->add($talk);
        }
        return $this;
    }

    public function removeTalk(App\Entity\Talk $talk): self
    {
        if ($this->talks->removeElement($talk)) {
        }
        return $this;
    }

    public function getTargetAudience(): ?string    {
        return $this->targetAudience;
    }

    public function setTargetAudience(?string $targetAudience): self
    {
        $this->targetAudience = $targetAudience;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\User>
     */
    public function getTeam(): Collection
    {
        return $this->team;
    }

    public function addTeam(App\Entity\User $team): self
    {
        if (!$this->team->contains($team)) {
            $this->team->add($team);
        }
        return $this;
    }

    public function removeTeam(App\Entity\User $team): self
    {
        if ($this->team->removeElement($team)) {
        }
        return $this;
    }

    public function getTemplate(): bool    {
        return $this->template;
    }

    public function setTemplate(bool $template): self
    {
        $this->template = $template;
        return $this;
    }

    public function isTemplate(): bool
    {
        return $this->template === true;
    }


    public function __toString(): string
    {
        return $this->name ?? ($this->getId()?->toRfc4122() ?? '');
    }
}
