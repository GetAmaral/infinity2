<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
use App\Entity\Organization;
use App\Entity\City;
use App\Entity\EventResourceBooking;
use App\Entity\EventResourceType;

/**
 * EventResource Entity (Generated Base Class)
 *
 * Bookable resources (Rooms, Equipment, etc.) *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to EventResource.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class EventResourceGenerated extends EntityBase
{
    #[Groups(['eventresource:read', 'eventresource:write'])]
    #[ORM\ManyToOne(targetEntity: Organization::class, inversedBy: 'eventResources')]
    #[ORM\JoinColumn(nullable: false)]
    protected Organization $organization;

    #[Groups(['eventresource:read', 'eventresource:write'])]
    #[ORM\Column(type: 'string', length: 255)]
    protected string $name;

    #[Groups(['eventresource:read', 'eventresource:write'])]
    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $description = null;

    #[Groups(['eventresource:read', 'eventresource:write'])]
    #[ORM\Column(type: 'json', nullable: true)]
    protected ?array $availabilitySchedule = null;

    #[Groups(['eventresource:read', 'eventresource:write'])]
    #[ORM\Column(type: 'boolean')]
    protected bool $available = true;

    #[Groups(['eventresource:read', 'eventresource:write'])]
    #[ORM\Column(type: 'boolean')]
    protected bool $active = true;

    #[Groups(['eventresource:read', 'eventresource:write'])]
    #[ORM\Column(type: 'boolean')]
    protected bool $bookable = true;

    #[Groups(['eventresource:read', 'eventresource:write'])]
    #[ORM\Column(type: 'string', length: 64, nullable: true)]
    protected ?string $timezone = null;

    #[Groups(['eventresource:read', 'eventresource:write'])]
    #[ORM\Column(type: 'boolean')]
    protected bool $requiresApproval = false;

    #[Groups(['eventresource:read', 'eventresource:write'])]
    #[ORM\Column(type: 'boolean')]
    protected bool $autoConfirm = true;

    #[Groups(['eventresource:read', 'eventresource:write'])]
    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $minimumBookingDuration = 30;

    #[Groups(['eventresource:read', 'eventresource:write'])]
    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $maximumBookingDuration = null;

    #[Groups(['eventresource:read', 'eventresource:write'])]
    #[ORM\Column(type: 'json', nullable: true)]
    protected ?array $bookingRules = null;

    #[Groups(['eventresource:read', 'eventresource:write'])]
    #[ORM\Column(type: 'decimal', precision: 10, scale: 2, nullable: true)]
    protected ?string $pricePerHour = null;

    #[Groups(['eventresource:read', 'eventresource:write'])]
    #[ORM\Column(type: 'decimal', precision: 10, scale: 2, nullable: true)]
    protected ?string $pricePerDay = null;

    #[Groups(['eventresource:read', 'eventresource:write'])]
    #[ORM\Column(type: 'string', length: 2048, nullable: true)]
    protected ?string $imageUrl = null;

    #[Groups(['eventresource:read', 'eventresource:write'])]
    #[ORM\Column(type: 'string', length: 2048, nullable: true)]
    protected ?string $thumbnailUrl = null;

    #[Groups(['eventresource:read', 'eventresource:write'])]
    #[ORM\Column(type: 'json', nullable: true)]
    protected ?array $tags = null;

    #[Groups(['eventresource:read', 'eventresource:write'])]
    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $capacity = null;

    #[Groups(['eventresource:read', 'eventresource:write'])]
    #[ORM\ManyToOne(targetEntity: City::class, inversedBy: 'eventResources')]
    protected ?City $city = null;

    #[Groups(['eventresource:read', 'eventresource:write'])]
    #[ORM\Column(type: 'json', nullable: true)]
    protected ?array $equipment = null;

    #[Groups(['eventresource:read'])]
    #[ORM\OneToMany(targetEntity: EventResourceBooking::class, mappedBy: 'resource', fetch: 'LAZY')]
    protected Collection $eventBookings;

    #[Groups(['eventresource:read', 'eventresource:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $geoCoordinates = null;

    #[Groups(['eventresource:read', 'eventresource:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $location = null;

    #[Groups(['eventresource:read', 'eventresource:write'])]
    #[ORM\ManyToOne(targetEntity: EventResourceType::class)]
    #[ORM\JoinColumn(nullable: false)]
    protected EventResourceType $type;


    public function __construct()
    {
        parent::__construct();
        $this->eventBookings = new ArrayCollection();
    }

    public function getOrganization(): App\Entity\Organization
    {
        return $this->organization;
    }

    public function setOrganization(App\Entity\Organization $organization): self
    {
        $this->organization = $organization;
        return $this;
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getDescription(): ?string    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    public function getAvailabilitySchedule(): ?array    {
        return $this->availabilitySchedule;
    }

    public function setAvailabilitySchedule(?array $availabilitySchedule): self
    {
        $this->availabilitySchedule = $availabilitySchedule;
        return $this;
    }

    public function getAvailable(): bool    {
        return $this->available;
    }

    public function setAvailable(bool $available): self
    {
        $this->available = $available;
        return $this;
    }

    public function isAvailable(): bool
    {
        return $this->available === true;
    }

    public function getActive(): bool    {
        return $this->active;
    }

    public function setActive(bool $active): self
    {
        $this->active = $active;
        return $this;
    }

    public function isActive(): bool
    {
        return $this->active === true;
    }

    public function getBookable(): bool    {
        return $this->bookable;
    }

    public function setBookable(bool $bookable): self
    {
        $this->bookable = $bookable;
        return $this;
    }

    public function isBookable(): bool
    {
        return $this->bookable === true;
    }

    public function getTimezone(): ?string    {
        return $this->timezone;
    }

    public function setTimezone(?string $timezone): self
    {
        $this->timezone = $timezone;
        return $this;
    }

    public function getRequiresApproval(): bool    {
        return $this->requiresApproval;
    }

    public function setRequiresApproval(bool $requiresApproval): self
    {
        $this->requiresApproval = $requiresApproval;
        return $this;
    }

    public function isRequiresApproval(): bool
    {
        return $this->requiresApproval === true;
    }

    public function getAutoConfirm(): bool    {
        return $this->autoConfirm;
    }

    public function setAutoConfirm(bool $autoConfirm): self
    {
        $this->autoConfirm = $autoConfirm;
        return $this;
    }

    public function isAutoConfirm(): bool
    {
        return $this->autoConfirm === true;
    }

    public function getMinimumBookingDuration(): ?int    {
        return $this->minimumBookingDuration;
    }

    public function setMinimumBookingDuration(?int $minimumBookingDuration): self
    {
        $this->minimumBookingDuration = $minimumBookingDuration;
        return $this;
    }

    public function getMaximumBookingDuration(): ?int    {
        return $this->maximumBookingDuration;
    }

    public function setMaximumBookingDuration(?int $maximumBookingDuration): self
    {
        $this->maximumBookingDuration = $maximumBookingDuration;
        return $this;
    }

    public function getBookingRules(): ?array    {
        return $this->bookingRules;
    }

    public function setBookingRules(?array $bookingRules): self
    {
        $this->bookingRules = $bookingRules;
        return $this;
    }

    public function getPricePerHour(): ?string    {
        return $this->pricePerHour;
    }

    public function setPricePerHour(?string $pricePerHour): self
    {
        $this->pricePerHour = $pricePerHour;
        return $this;
    }

    public function getPricePerDay(): ?string    {
        return $this->pricePerDay;
    }

    public function setPricePerDay(?string $pricePerDay): self
    {
        $this->pricePerDay = $pricePerDay;
        return $this;
    }

    public function getImageUrl(): ?string    {
        return $this->imageUrl;
    }

    public function setImageUrl(?string $imageUrl): self
    {
        $this->imageUrl = $imageUrl;
        return $this;
    }

    public function getThumbnailUrl(): ?string    {
        return $this->thumbnailUrl;
    }

    public function setThumbnailUrl(?string $thumbnailUrl): self
    {
        $this->thumbnailUrl = $thumbnailUrl;
        return $this;
    }

    public function getTags(): ?array    {
        return $this->tags;
    }

    public function setTags(?array $tags): self
    {
        $this->tags = $tags;
        return $this;
    }

    public function getCapacity(): ?int    {
        return $this->capacity;
    }

    public function setCapacity(?int $capacity): self
    {
        $this->capacity = $capacity;
        return $this;
    }

    public function getCity(): ?App\Entity\City
    {
        return $this->city;
    }

    public function setCity(?App\Entity\City $city): self
    {
        $this->city = $city;
        return $this;
    }

    public function getEquipment(): ?array    {
        return $this->equipment;
    }

    public function setEquipment(?array $equipment): self
    {
        $this->equipment = $equipment;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\EventResourceBooking>
     */
    public function getEventBookings(): Collection
    {
        return $this->eventBookings;
    }

    public function addEventBooking(App\Entity\EventResourceBooking $eventBooking): self
    {
        if (!$this->eventBookings->contains($eventBooking)) {
            $this->eventBookings->add($eventBooking);
            $eventBooking->setResource($this);
        }
        return $this;
    }

    public function removeEventBooking(App\Entity\EventResourceBooking $eventBooking): self
    {
        if ($this->eventBookings->removeElement($eventBooking)) {
            if ($eventBooking->getResource() === $this) {
                $eventBooking->setResource(null);
            }
        }
        return $this;
    }

    public function getGeoCoordinates(): ?string    {
        return $this->geoCoordinates;
    }

    public function setGeoCoordinates(?string $geoCoordinates): self
    {
        $this->geoCoordinates = $geoCoordinates;
        return $this;
    }

    public function getLocation(): ?string    {
        return $this->location;
    }

    public function setLocation(?string $location): self
    {
        $this->location = $location;
        return $this;
    }

    public function getType(): App\Entity\EventResourceType
    {
        return $this->type;
    }

    public function setType(App\Entity\EventResourceType $type): self
    {
        $this->type = $type;
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? ($this->getId()?->toRfc4122() ?? '');
    }
}
