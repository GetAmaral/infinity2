<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use App\Entity\Trait\OrganizationTrait;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
                                                use App\Entity\EventResourceType;
use App\Entity\City;
use App\Entity\EventResourceBooking;

/**
 * EventResource Entity (Generated Base Class)
 *
 * 
 *
 * This class is ALWAYS regenerated from CSV. DO NOT edit this file.
 * Add custom logic to EventResource.php instead.
 *
 * @generated by Luminai Code Generator
 * @see /config/EntityNew.csv and /config/PropertyNew.csv
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class EventResourceGenerated extends EntityBase
{
    use OrganizationTrait;

    #[ORM\Column(type: 'string')]
    #[Assert\NotBlank]
    #[Assert\Length(max: 255)]
    #[Groups(['eventresource:read', 'eventresource:write'])]
    protected string $name;

    #[ORM\Column(type: 'text', nullable: true)]
    #[Groups(['eventresource:read', 'eventresource:write'])]
    protected ?string $description = null;

    #[ORM\ManyToOne(targetEntity: EventResourceType::class)]
    #[Groups(['eventresource:read', 'eventresource:write'])]
    protected ?EventResourceType $type = null;

    #[ORM\Column(type: 'string', nullable: true)]
    #[Assert\Length(max: 255)]
    #[Groups(['eventresource:read', 'eventresource:write'])]
    protected ?string $location = null;

    #[ORM\ManyToOne(targetEntity: City::class, inversedBy: 'eventResources')]
    #[Groups(['eventresource:read', 'eventresource:write'])]
    protected ?City $city = null;

    #[ORM\Column(type: 'string', nullable: true)]
    #[Assert\Length(max: 255)]
    #[Groups(['eventresource:read', 'eventresource:write'])]
    protected ?string $geo = null;

    #[ORM\Column(type: 'integer', nullable: true)]
    #[Groups(['eventresource:read', 'eventresource:write'])]
    protected ?int $capacity = null;

    #[ORM\Column(type: 'json', nullable: true)]
    #[Groups(['eventresource:read', 'eventresource:write'])]
    protected ?array $equipment = null;

    #[ORM\Column(type: 'json', nullable: true)]
    #[Groups(['eventresource:read', 'eventresource:write'])]
    protected ?array $bookingRules = null;

    #[ORM\Column(type: 'json', nullable: true)]
    #[Groups(['eventresource:read', 'eventresource:write'])]
    protected ?array $availabilitySchedule = null;

    #[ORM\Column(type: 'boolean', nullable: true)]
    #[Groups(['eventresource:read', 'eventresource:write'])]
    protected ?bool $active = null;

    #[ORM\OneToMany(targetEntity: EventResourceBooking::class, mappedBy: 'resource', fetch: 'LAZY')]
    #[Groups(['eventresource:read', 'eventresource:write'])]
    protected Collection $eventBookings;


    public function __construct()
    {
        parent::__construct();
        $this->eventBookings = new ArrayCollection();
    }

    public function getName(): string
    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    
    public function getDescription(): ?string
    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    
    public function getType(): ?EventResourceType
    {
        return $this->type;
    }

    public function setType(?EventResourceType $type): self
    {
        $this->type = $type;
        return $this;
    }

    public function getLocation(): ?string
    {
        return $this->location;
    }

    public function setLocation(?string $location): self
    {
        $this->location = $location;
        return $this;
    }

    
    public function getCity(): ?City
    {
        return $this->city;
    }

    public function setCity(?City $city): self
    {
        $this->city = $city;
        return $this;
    }

    public function getGeo(): ?string
    {
        return $this->geo;
    }

    public function setGeo(?string $geo): self
    {
        $this->geo = $geo;
        return $this;
    }

    
    public function getCapacity(): ?int
    {
        return $this->capacity;
    }

    public function setCapacity(?int $capacity): self
    {
        $this->capacity = $capacity;
        return $this;
    }

    
    public function getEquipment(): ?array
    {
        return $this->equipment;
    }

    public function setEquipment(?array $equipment): self
    {
        $this->equipment = $equipment;
        return $this;
    }

    
    public function getBookingrules(): ?array
    {
        return $this->bookingRules;
    }

    public function setBookingrules(?array $bookingRules): self
    {
        $this->bookingRules = $bookingRules;
        return $this;
    }

    
    public function getAvailabilityschedule(): ?array
    {
        return $this->availabilitySchedule;
    }

    public function setAvailabilityschedule(?array $availabilitySchedule): self
    {
        $this->availabilitySchedule = $availabilitySchedule;
        return $this;
    }

    
    public function getActive(): ?bool
    {
        return $this->active;
    }

    public function setActive(?bool $active): self
    {
        $this->active = $active;
        return $this;
    }

    
    /**
     * @return Collection<int, EventResourceBooking>
     */
    public function getEventbookings(): Collection
    {
        return $this->eventBookings;
    }

    public function addEventbooking(EventResourceBooking $eventBooking): self
    {
        if (!$this->eventBookings->contains($eventBooking)) {
            $this->eventBookings->add($eventBooking);
        }
        return $this;
    }

    public function removeEventbooking(EventResourceBooking $eventBooking): self
    {
        if ($this->eventBookings->removeElement($eventBooking)) {
        }
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? '';
    }
}
