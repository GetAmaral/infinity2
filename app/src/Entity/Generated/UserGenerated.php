<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use App\Entity\Trait\OrganizationTrait;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use App\Entity\Agent;
use App\Entity\Calendar;
use App\Entity\Campaign;
use App\Entity\Contact;
use App\Entity\Deal;
use App\Entity\EventAttendee;
use App\Entity\Flag;
use App\Entity\Role;
use App\Entity\Company;
use App\Entity\Pipeline;
use App\Entity\Event;
use App\Entity\Course;
use App\Entity\Profile;
use App\Entity\SocialMedia;
use App\Entity\StudentCourse;
use App\Entity\Talk;
use App\Entity\Task;

/**
 * User Entity (Generated Base Class)
 *
 * System users and authentication *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to User.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class UserGenerated extends EntityBase
{
    use OrganizationTrait;

    #[ORM\Column(type: 'string', length: 255)]
    protected string $name;

    #[ORM\OneToMany(targetEntity: Agent::class, mappedBy: 'user', fetch: 'LAZY')]
    protected Collection $agents;

    #[ORM\Column(type: 'boolean', nullable: true)]
    protected ?bool $active = null;

    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $avatarUrl = null;

    #[ORM\Column(type: 'date', nullable: true)]
    protected ?\DateTimeImmutable $birthDate = null;

    #[ORM\OneToMany(targetEntity: Calendar::class, mappedBy: 'user', fetch: 'LAZY')]
    protected Collection $calendars;

    #[ORM\ManyToMany(targetEntity: Campaign::class, inversedBy: 'team', fetch: 'LAZY')]
    protected Collection $campaigns;

    #[ORM\Column(type: 'string', length: 20, nullable: true)]
    protected ?string $celPhone = null;

    #[ORM\ManyToMany(targetEntity: Contact::class, inversedBy: 'accountTeam', fetch: 'LAZY')]
    protected Collection $contacts;

    #[ORM\ManyToMany(targetEntity: Deal::class, inversedBy: 'team', fetch: 'LAZY')]
    protected Collection $deals;

    #[ORM\Column(type: 'string', length: 255, unique: true)]
    protected string $email;

    #[ORM\Column(type: 'datetime', nullable: true)]
    protected ?\DateTimeImmutable $emailVerifiedAt = null;

    #[ORM\OneToMany(targetEntity: EventAttendee::class, mappedBy: 'user', fetch: 'LAZY')]
    protected Collection $eventAttendances;

    #[ORM\Column(type: 'integer')]
    protected int $failedLoginAttempts = 0;

    #[ORM\OneToMany(targetEntity: Flag::class, mappedBy: 'user', fetch: 'LAZY')]
    protected Collection $flags;

    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $gender = null;

    #[ORM\ManyToMany(targetEntity: Role::class, fetch: 'LAZY')]
    protected Collection $grantedRoles;

    #[ORM\Column(type: 'datetime', nullable: true)]
    protected ?\DateTimeImmutable $lastPasswordChange = null;

    #[ORM\OneToMany(targetEntity: Campaign::class, mappedBy: 'manager', fetch: 'LAZY')]
    protected Collection $managedCampaigns;

    #[ORM\OneToMany(targetEntity: Company::class, mappedBy: 'accountManager', fetch: 'LAZY')]
    protected Collection $managedCompanies;

    #[ORM\OneToMany(targetEntity: Contact::class, mappedBy: 'accountManager', fetch: 'LAZY')]
    protected Collection $managedContacts;

    #[ORM\OneToMany(targetEntity: Deal::class, mappedBy: 'manager', fetch: 'LAZY')]
    protected Collection $managedDeals;

    #[ORM\OneToMany(targetEntity: Pipeline::class, mappedBy: 'manager', fetch: 'LAZY')]
    protected Collection $managedPipelines;

    #[ORM\OneToMany(targetEntity: Event::class, mappedBy: 'organizer', fetch: 'LAZY')]
    protected Collection $organizedEvents;

    #[ORM\OneToMany(targetEntity: Course::class, mappedBy: 'owner', fetch: 'LAZY')]
    protected Collection $ownedCourses;

    #[ORM\Column(type: 'string', length: 255)]
    protected string $password;

    #[ORM\Column(name: 'position_prop', type: 'string', length: 255, nullable: true)]
    protected ?string $position = null;

    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $profilePictureUrl = null;

    #[ORM\ManyToMany(targetEntity: Profile::class, inversedBy: 'users', fetch: 'LAZY')]
    protected Collection $profiles;

    #[ORM\OneToMany(targetEntity: SocialMedia::class, mappedBy: 'user', fetch: 'LAZY')]
    protected Collection $socialMedias;

    #[ORM\OneToMany(targetEntity: StudentCourse::class, mappedBy: 'student', fetch: 'LAZY')]
    protected Collection $studentCourses;

    #[ORM\ManyToMany(targetEntity: Talk::class, inversedBy: 'users', fetch: 'LAZY')]
    protected Collection $talks;

    #[ORM\OneToMany(targetEntity: Task::class, mappedBy: 'user', fetch: 'LAZY')]
    protected Collection $tasks;


    public function __construct()
    {
        parent::__construct();
        $this->agents = new ArrayCollection();
        $this->calendars = new ArrayCollection();
        $this->campaigns = new ArrayCollection();
        $this->contacts = new ArrayCollection();
        $this->deals = new ArrayCollection();
        $this->eventAttendances = new ArrayCollection();
        $this->flags = new ArrayCollection();
        $this->grantedRoles = new ArrayCollection();
        $this->managedCampaigns = new ArrayCollection();
        $this->managedCompanies = new ArrayCollection();
        $this->managedContacts = new ArrayCollection();
        $this->managedDeals = new ArrayCollection();
        $this->managedPipelines = new ArrayCollection();
        $this->organizedEvents = new ArrayCollection();
        $this->ownedCourses = new ArrayCollection();
        $this->profiles = new ArrayCollection();
        $this->socialMedias = new ArrayCollection();
        $this->studentCourses = new ArrayCollection();
        $this->talks = new ArrayCollection();
        $this->tasks = new ArrayCollection();
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Agent>
     */
    public function getAgents(): Collection
    {
        return $this->agents;
    }

    public function addAgent(App\Entity\Agent $agent): self
    {
        if (!$this->agents->contains($agent)) {
            $this->agents->add($agent);
            $agent->setUser($this);
        }
        return $this;
    }

    public function removeAgent(App\Entity\Agent $agent): self
    {
        if ($this->agents->removeElement($agent)) {
            if ($agent->getUser() === $this) {
                $agent->setUser(null);
            }
        }
        return $this;
    }

    public function getActive(): ?bool    {
        return $this->active;
    }

    public function setActive(?bool $active): self
    {
        $this->active = $active;
        return $this;
    }

    public function isActive(): bool
    {
        return $this->active === true;
    }

    public function getAvatarurl(): ?string    {
        return $this->avatarUrl;
    }

    public function setAvatarurl(?string $avatarUrl): self
    {
        $this->avatarUrl = $avatarUrl;
        return $this;
    }

    public function getBirthdate(): ?\DateTimeImmutable    {
        return $this->birthDate;
    }

    public function setBirthdate(?\DateTimeImmutable $birthDate): self
    {
        $this->birthDate = $birthDate;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Calendar>
     */
    public function getCalendars(): Collection
    {
        return $this->calendars;
    }

    public function addCalendar(App\Entity\Calendar $calendar): self
    {
        if (!$this->calendars->contains($calendar)) {
            $this->calendars->add($calendar);
            $calendar->setUser($this);
        }
        return $this;
    }

    public function removeCalendar(App\Entity\Calendar $calendar): self
    {
        if ($this->calendars->removeElement($calendar)) {
            if ($calendar->getUser() === $this) {
                $calendar->setUser(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Campaign>
     */
    public function getCampaigns(): Collection
    {
        return $this->campaigns;
    }

    public function addCampaign(App\Entity\Campaign $campaign): self
    {
        if (!$this->campaigns->contains($campaign)) {
            $this->campaigns->add($campaign);
        }
        return $this;
    }

    public function removeCampaign(App\Entity\Campaign $campaign): self
    {
        if ($this->campaigns->removeElement($campaign)) {
        }
        return $this;
    }

    public function getCelphone(): ?string    {
        return $this->celPhone;
    }

    public function setCelphone(?string $celPhone): self
    {
        $this->celPhone = $celPhone;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Contact>
     */
    public function getContacts(): Collection
    {
        return $this->contacts;
    }

    public function addContact(App\Entity\Contact $contact): self
    {
        if (!$this->contacts->contains($contact)) {
            $this->contacts->add($contact);
        }
        return $this;
    }

    public function removeContact(App\Entity\Contact $contact): self
    {
        if ($this->contacts->removeElement($contact)) {
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Deal>
     */
    public function getDeals(): Collection
    {
        return $this->deals;
    }

    public function addDeal(App\Entity\Deal $deal): self
    {
        if (!$this->deals->contains($deal)) {
            $this->deals->add($deal);
        }
        return $this;
    }

    public function removeDeal(App\Entity\Deal $deal): self
    {
        if ($this->deals->removeElement($deal)) {
        }
        return $this;
    }

    public function getEmail(): string    {
        return $this->email;
    }

    public function setEmail(string $email): self
    {
        $this->email = $email;
        return $this;
    }

    public function getEmailverifiedat(): ?\DateTimeImmutable    {
        return $this->emailVerifiedAt;
    }

    public function setEmailverifiedat(?\DateTimeImmutable $emailVerifiedAt): self
    {
        $this->emailVerifiedAt = $emailVerifiedAt;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\EventAttendee>
     */
    public function getEventattendances(): Collection
    {
        return $this->eventAttendances;
    }

    public function addEventattendance(App\Entity\EventAttendee $eventAttendance): self
    {
        if (!$this->eventAttendances->contains($eventAttendance)) {
            $this->eventAttendances->add($eventAttendance);
            $eventAttendance->setUser($this);
        }
        return $this;
    }

    public function removeEventattendance(App\Entity\EventAttendee $eventAttendance): self
    {
        if ($this->eventAttendances->removeElement($eventAttendance)) {
            if ($eventAttendance->getUser() === $this) {
                $eventAttendance->setUser(null);
            }
        }
        return $this;
    }

    public function getFailedloginattempts(): int    {
        return $this->failedLoginAttempts;
    }

    public function setFailedloginattempts(int $failedLoginAttempts): self
    {
        $this->failedLoginAttempts = $failedLoginAttempts;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Flag>
     */
    public function getFlags(): Collection
    {
        return $this->flags;
    }

    public function addFlag(App\Entity\Flag $flag): self
    {
        if (!$this->flags->contains($flag)) {
            $this->flags->add($flag);
            $flag->setUser($this);
        }
        return $this;
    }

    public function removeFlag(App\Entity\Flag $flag): self
    {
        if ($this->flags->removeElement($flag)) {
            if ($flag->getUser() === $this) {
                $flag->setUser(null);
            }
        }
        return $this;
    }

    public function getGender(): ?int    {
        return $this->gender;
    }

    public function setGender(?int $gender): self
    {
        $this->gender = $gender;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Role>
     */
    public function getGrantedroles(): Collection
    {
        return $this->grantedRoles;
    }

    public function addGrantedrole(App\Entity\Role $grantedRole): self
    {
        if (!$this->grantedRoles->contains($grantedRole)) {
            $this->grantedRoles->add($grantedRole);
        }
        return $this;
    }

    public function removeGrantedrole(App\Entity\Role $grantedRole): self
    {
        if ($this->grantedRoles->removeElement($grantedRole)) {
        }
        return $this;
    }

    public function getLastpasswordchange(): ?\DateTimeImmutable    {
        return $this->lastPasswordChange;
    }

    public function setLastpasswordchange(?\DateTimeImmutable $lastPasswordChange): self
    {
        $this->lastPasswordChange = $lastPasswordChange;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Campaign>
     */
    public function getManagedcampaigns(): Collection
    {
        return $this->managedCampaigns;
    }

    public function addManagedcampaign(App\Entity\Campaign $managedCampaign): self
    {
        if (!$this->managedCampaigns->contains($managedCampaign)) {
            $this->managedCampaigns->add($managedCampaign);
            $managedCampaign->setManager($this);
        }
        return $this;
    }

    public function removeManagedcampaign(App\Entity\Campaign $managedCampaign): self
    {
        if ($this->managedCampaigns->removeElement($managedCampaign)) {
            if ($managedCampaign->getManager() === $this) {
                $managedCampaign->setManager(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Company>
     */
    public function getManagedcompanies(): Collection
    {
        return $this->managedCompanies;
    }

    public function addManagedcompany(App\Entity\Company $managedCompany): self
    {
        if (!$this->managedCompanies->contains($managedCompany)) {
            $this->managedCompanies->add($managedCompany);
            $managedCompany->setAccountmanager($this);
        }
        return $this;
    }

    public function removeManagedcompany(App\Entity\Company $managedCompany): self
    {
        if ($this->managedCompanies->removeElement($managedCompany)) {
            if ($managedCompany->getAccountmanager() === $this) {
                $managedCompany->setAccountmanager(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Contact>
     */
    public function getManagedcontacts(): Collection
    {
        return $this->managedContacts;
    }

    public function addManagedcontact(App\Entity\Contact $managedContact): self
    {
        if (!$this->managedContacts->contains($managedContact)) {
            $this->managedContacts->add($managedContact);
            $managedContact->setAccountmanager($this);
        }
        return $this;
    }

    public function removeManagedcontact(App\Entity\Contact $managedContact): self
    {
        if ($this->managedContacts->removeElement($managedContact)) {
            if ($managedContact->getAccountmanager() === $this) {
                $managedContact->setAccountmanager(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Deal>
     */
    public function getManageddeals(): Collection
    {
        return $this->managedDeals;
    }

    public function addManageddeal(App\Entity\Deal $managedDeal): self
    {
        if (!$this->managedDeals->contains($managedDeal)) {
            $this->managedDeals->add($managedDeal);
            $managedDeal->setManager($this);
        }
        return $this;
    }

    public function removeManageddeal(App\Entity\Deal $managedDeal): self
    {
        if ($this->managedDeals->removeElement($managedDeal)) {
            if ($managedDeal->getManager() === $this) {
                $managedDeal->setManager(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Pipeline>
     */
    public function getManagedpipelines(): Collection
    {
        return $this->managedPipelines;
    }

    public function addManagedpipeline(App\Entity\Pipeline $managedPipeline): self
    {
        if (!$this->managedPipelines->contains($managedPipeline)) {
            $this->managedPipelines->add($managedPipeline);
            $managedPipeline->setManager($this);
        }
        return $this;
    }

    public function removeManagedpipeline(App\Entity\Pipeline $managedPipeline): self
    {
        if ($this->managedPipelines->removeElement($managedPipeline)) {
            if ($managedPipeline->getManager() === $this) {
                $managedPipeline->setManager(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Event>
     */
    public function getOrganizedevents(): Collection
    {
        return $this->organizedEvents;
    }

    public function addOrganizedevent(App\Entity\Event $organizedEvent): self
    {
        if (!$this->organizedEvents->contains($organizedEvent)) {
            $this->organizedEvents->add($organizedEvent);
            $organizedEvent->setOrganizer($this);
        }
        return $this;
    }

    public function removeOrganizedevent(App\Entity\Event $organizedEvent): self
    {
        if ($this->organizedEvents->removeElement($organizedEvent)) {
            if ($organizedEvent->getOrganizer() === $this) {
                $organizedEvent->setOrganizer(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Course>
     */
    public function getOwnedcourses(): Collection
    {
        return $this->ownedCourses;
    }

    public function addOwnedcoure(App\Entity\Course $ownedCoure): self
    {
        if (!$this->ownedCourses->contains($ownedCoure)) {
            $this->ownedCourses->add($ownedCoure);
            $ownedCoure->setOwner($this);
        }
        return $this;
    }

    public function removeOwnedcoure(App\Entity\Course $ownedCoure): self
    {
        if ($this->ownedCourses->removeElement($ownedCoure)) {
            if ($ownedCoure->getOwner() === $this) {
                $ownedCoure->setOwner(null);
            }
        }
        return $this;
    }

    public function getPassword(): string    {
        return $this->password;
    }

    public function setPassword(string $password): self
    {
        $this->password = $password;
        return $this;
    }

    public function getPosition(): ?string    {
        return $this->position;
    }

    public function setPosition(?string $position): self
    {
        $this->position = $position;
        return $this;
    }

    public function getProfilepictureurl(): ?string    {
        return $this->profilePictureUrl;
    }

    public function setProfilepictureurl(?string $profilePictureUrl): self
    {
        $this->profilePictureUrl = $profilePictureUrl;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Profile>
     */
    public function getProfiles(): Collection
    {
        return $this->profiles;
    }

    public function addProfile(App\Entity\Profile $profile): self
    {
        if (!$this->profiles->contains($profile)) {
            $this->profiles->add($profile);
        }
        return $this;
    }

    public function removeProfile(App\Entity\Profile $profile): self
    {
        if ($this->profiles->removeElement($profile)) {
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\SocialMedia>
     */
    public function getSocialmedias(): Collection
    {
        return $this->socialMedias;
    }

    public function addSocialmedia(App\Entity\SocialMedia $ocialMedia): self
    {
        if (!$this->socialMedias->contains($ocialMedia)) {
            $this->socialMedias->add($ocialMedia);
            $ocialMedia->setUser($this);
        }
        return $this;
    }

    public function removeSocialmedia(App\Entity\SocialMedia $ocialMedia): self
    {
        if ($this->socialMedias->removeElement($ocialMedia)) {
            if ($ocialMedia->getUser() === $this) {
                $ocialMedia->setUser(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\StudentCourse>
     */
    public function getStudentcourses(): Collection
    {
        return $this->studentCourses;
    }

    public function addStudentcoure(App\Entity\StudentCourse $tudentCoure): self
    {
        if (!$this->studentCourses->contains($tudentCoure)) {
            $this->studentCourses->add($tudentCoure);
            $tudentCoure->setStudent($this);
        }
        return $this;
    }

    public function removeStudentcoure(App\Entity\StudentCourse $tudentCoure): self
    {
        if ($this->studentCourses->removeElement($tudentCoure)) {
            if ($tudentCoure->getStudent() === $this) {
                $tudentCoure->setStudent(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Talk>
     */
    public function getTalks(): Collection
    {
        return $this->talks;
    }

    public function addTalk(App\Entity\Talk $talk): self
    {
        if (!$this->talks->contains($talk)) {
            $this->talks->add($talk);
        }
        return $this;
    }

    public function removeTalk(App\Entity\Talk $talk): self
    {
        if ($this->talks->removeElement($talk)) {
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Task>
     */
    public function getTasks(): Collection
    {
        return $this->tasks;
    }

    public function addTak(App\Entity\Task $tak): self
    {
        if (!$this->tasks->contains($tak)) {
            $this->tasks->add($tak);
            $tak->setUser($this);
        }
        return $this;
    }

    public function removeTak(App\Entity\Task $tak): self
    {
        if ($this->tasks->removeElement($tak)) {
            if ($tak->getUser() === $this) {
                $tak->setUser(null);
            }
        }
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? ($this->getId()?->toRfc4122() ?? '');
    }
}
