<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
use App\Entity\Organization;
use App\Entity\Agent;
use App\Entity\Calendar;
use App\Entity\Campaign;
use App\Entity\Contact;
use App\Entity\Deal;
use App\Entity\CalendarExternalLink;
use App\Entity\EventResourceBooking;
use App\Entity\EventAttendee;
use App\Entity\Flag;
use App\Entity\Company;
use App\Entity\Pipeline;
use App\Entity\Event;
use App\Entity\Course;
use App\Entity\Profile;
use App\Entity\SocialMedia;
use App\Entity\StudentCourse;
use App\Entity\Talk;
use App\Entity\Task;

/**
 * User Entity (Generated Base Class)
 *
 * System users and authentication *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to User.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class UserGenerated extends EntityBase
{
    #[Groups(['user:read', 'user:write'])]
    #[ORM\ManyToOne(targetEntity: Organization::class, inversedBy: 'users')]
    #[ORM\JoinColumn(nullable: false)]
    protected Organization $organization;

    #[Groups(['user:read', 'user:write'])]
    #[ORM\Column(type: 'string', length: 255)]
    protected string $name;

    #[Groups(['user:read'])]
    #[ORM\OneToMany(targetEntity: Agent::class, mappedBy: 'user', fetch: 'LAZY')]
    protected Collection $agents;

    #[Groups(['user:read', 'user:write'])]
    #[ORM\Column(type: 'boolean', nullable: true)]
    protected ?bool $active = null;

    #[Groups(['user:read', 'user:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $avatarUrl = null;

    #[Groups(['user:read', 'user:write'])]
    #[ORM\Column(type: 'date', nullable: true)]
    protected ?\DateTimeImmutable $birthDate = null;

    #[Groups(['user:read'])]
    #[ORM\OneToMany(targetEntity: Calendar::class, mappedBy: 'user', fetch: 'LAZY')]
    protected Collection $calendars;

    #[Groups(['user:read'])]
    #[ORM\ManyToMany(targetEntity: Campaign::class, mappedBy: 'team', fetch: 'LAZY')]
    protected Collection $campaigns;

    #[Groups(['user:read', 'user:write'])]
    #[ORM\Column(type: 'string', length: 20, nullable: true)]
    #[Assert\Length(max: 20)]
    protected ?string $celPhone = null;

    #[Groups(['user:read'])]
    #[ORM\ManyToMany(targetEntity: Contact::class, mappedBy: 'accountTeam', fetch: 'LAZY')]
    protected Collection $contacts;

    #[Groups(['user:read'])]
    #[ORM\ManyToMany(targetEntity: Deal::class, mappedBy: 'team', fetch: 'LAZY')]
    protected Collection $deals;

    #[Groups(['user:read', 'user:write'])]
    #[ORM\Column(type: 'string', length: 255, unique: true)]
    #[Assert\Length(max: 255)]
    protected string $email;

    #[Groups(['user:read'])]
    #[ORM\OneToMany(targetEntity: Deal::class, mappedBy: 'owner', fetch: 'LAZY')]
    protected Collection $ownedDeals;

    #[Groups(['user:read', 'user:write'])]
    #[ORM\Column(type: 'datetime', nullable: true)]
    protected ?\DateTimeImmutable $emailVerifiedAt = null;

    #[Groups(['user:read'])]
    #[ORM\OneToMany(targetEntity: CalendarExternalLink::class, mappedBy: 'user', fetch: 'LAZY')]
    protected Collection $calendarExternalLinks;

    #[Groups(['user:read'])]
    #[ORM\OneToMany(targetEntity: EventResourceBooking::class, mappedBy: 'bookedBy', fetch: 'LAZY')]
    protected Collection $resourceBookings;

    #[Groups(['user:read'])]
    #[ORM\OneToMany(targetEntity: EventAttendee::class, mappedBy: 'user', fetch: 'LAZY')]
    protected Collection $eventAttendances;

    #[Groups(['user:read', 'user:write'])]
    #[ORM\Column(type: 'integer')]
    protected int $failedLoginAttempts = 0;

    #[Groups(['user:read'])]
    #[ORM\OneToMany(targetEntity: Flag::class, mappedBy: 'user', fetch: 'LAZY')]
    protected Collection $flags;

    #[Groups(['user:read', 'user:write'])]
    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $gender = null;

    #[Groups(['user:read', 'user:write'])]
    #[ORM\Column(type: 'datetime', nullable: true)]
    protected ?\DateTimeImmutable $lastPasswordChange = null;

    #[Groups(['user:read'])]
    #[ORM\OneToMany(targetEntity: Campaign::class, mappedBy: 'manager', fetch: 'LAZY')]
    protected Collection $managedCampaigns;

    #[Groups(['user:read'])]
    #[ORM\OneToMany(targetEntity: Campaign::class, mappedBy: 'owner', fetch: 'LAZY')]
    protected Collection $ownedCampaigns;

    #[Groups(['user:read'])]
    #[ORM\OneToMany(targetEntity: Company::class, mappedBy: 'accountManager', fetch: 'LAZY')]
    protected Collection $managedCompanies;

    #[Groups(['user:read'])]
    #[ORM\OneToMany(targetEntity: Contact::class, mappedBy: 'accountManager', fetch: 'LAZY')]
    protected Collection $managedContacts;

    #[Groups(['user:read'])]
    #[ORM\OneToMany(targetEntity: Deal::class, mappedBy: 'manager', fetch: 'LAZY')]
    protected Collection $managedDeals;

    #[Groups(['user:read'])]
    #[ORM\OneToMany(targetEntity: Pipeline::class, mappedBy: 'manager', fetch: 'LAZY')]
    protected Collection $managedPipelines;

    #[Groups(['user:read'])]
    #[ORM\OneToMany(targetEntity: Event::class, mappedBy: 'organizer', fetch: 'LAZY')]
    protected Collection $organizedEvents;

    #[Groups(['user:read'])]
    #[ORM\OneToMany(targetEntity: Course::class, mappedBy: 'owner', fetch: 'LAZY')]
    protected Collection $ownedCourses;

    #[Groups(['user:read', 'user:write'])]
    #[ORM\Column(type: 'string', length: 255)]
    #[Assert\Length(max: 255)]
    protected string $password;

    #[Groups(['user:read', 'user:write'])]
    #[ORM\Column(name: 'position_prop', type: 'string', length: 255, nullable: true)]
    protected ?string $position = null;

    #[Groups(['user:read', 'user:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $profilePictureUrl = null;

    #[Groups(['user:read'])]
    #[ORM\ManyToMany(targetEntity: Profile::class, mappedBy: 'users', fetch: 'LAZY')]
    protected Collection $profiles;

    #[Groups(['user:read'])]
    #[ORM\OneToMany(targetEntity: SocialMedia::class, mappedBy: 'user', fetch: 'LAZY')]
    protected Collection $socialMedias;

    #[Groups(['user:read'])]
    #[ORM\OneToMany(targetEntity: StudentCourse::class, mappedBy: 'student', fetch: 'LAZY')]
    protected Collection $studentCourses;

    #[Groups(['user:read'])]
    #[ORM\ManyToMany(targetEntity: Talk::class, mappedBy: 'users', fetch: 'LAZY')]
    protected Collection $talks;

    #[Groups(['user:read'])]
    #[ORM\OneToMany(targetEntity: Task::class, mappedBy: 'user', fetch: 'LAZY')]
    protected Collection $tasks;


    public function __construct()
    {
        parent::__construct();
        $this->agents = new ArrayCollection();
        $this->calendars = new ArrayCollection();
        $this->campaigns = new ArrayCollection();
        $this->contacts = new ArrayCollection();
        $this->deals = new ArrayCollection();
        $this->ownedDeals = new ArrayCollection();
        $this->calendarExternalLinks = new ArrayCollection();
        $this->resourceBookings = new ArrayCollection();
        $this->eventAttendances = new ArrayCollection();
        $this->flags = new ArrayCollection();
        $this->managedCampaigns = new ArrayCollection();
        $this->ownedCampaigns = new ArrayCollection();
        $this->managedCompanies = new ArrayCollection();
        $this->managedContacts = new ArrayCollection();
        $this->managedDeals = new ArrayCollection();
        $this->managedPipelines = new ArrayCollection();
        $this->organizedEvents = new ArrayCollection();
        $this->ownedCourses = new ArrayCollection();
        $this->profiles = new ArrayCollection();
        $this->socialMedias = new ArrayCollection();
        $this->studentCourses = new ArrayCollection();
        $this->talks = new ArrayCollection();
        $this->tasks = new ArrayCollection();
    }

    public function getOrganization(): App\Entity\Organization
    {
        return $this->organization;
    }

    public function setOrganization(App\Entity\Organization $organization): self
    {
        $this->organization = $organization;
        return $this;
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Agent>
     */
    public function getAgents(): Collection
    {
        return $this->agents;
    }

    public function addAgent(App\Entity\Agent $agent): self
    {
        if (!$this->agents->contains($agent)) {
            $this->agents->add($agent);
            $agent->setUser($this);
        }
        return $this;
    }

    public function removeAgent(App\Entity\Agent $agent): self
    {
        if ($this->agents->removeElement($agent)) {
            if ($agent->getUser() === $this) {
                $agent->setUser(null);
            }
        }
        return $this;
    }

    public function getActive(): ?bool    {
        return $this->active;
    }

    public function setActive(?bool $active): self
    {
        $this->active = $active;
        return $this;
    }

    public function isActive(): bool
    {
        return $this->active === true;
    }

    public function getAvatarUrl(): ?string    {
        return $this->avatarUrl;
    }

    public function setAvatarUrl(?string $avatarUrl): self
    {
        $this->avatarUrl = $avatarUrl;
        return $this;
    }

    public function getBirthDate(): ?\DateTimeImmutable    {
        return $this->birthDate;
    }

    public function setBirthDate(?\DateTimeImmutable $birthDate): self
    {
        $this->birthDate = $birthDate;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Calendar>
     */
    public function getCalendars(): Collection
    {
        return $this->calendars;
    }

    public function addCalendar(App\Entity\Calendar $calendar): self
    {
        if (!$this->calendars->contains($calendar)) {
            $this->calendars->add($calendar);
            $calendar->setUser($this);
        }
        return $this;
    }

    public function removeCalendar(App\Entity\Calendar $calendar): self
    {
        if ($this->calendars->removeElement($calendar)) {
            if ($calendar->getUser() === $this) {
                $calendar->setUser(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Campaign>
     */
    public function getCampaigns(): Collection
    {
        return $this->campaigns;
    }

    public function addCampaign(App\Entity\Campaign $campaign): self
    {
        if (!$this->campaigns->contains($campaign)) {
            $this->campaigns->add($campaign);
            $campaign->setTeam($this);
        }
        return $this;
    }

    public function removeCampaign(App\Entity\Campaign $campaign): self
    {
        if ($this->campaigns->removeElement($campaign)) {
            if ($campaign->getTeam() === $this) {
                $campaign->setTeam(null);
            }
        }
        return $this;
    }

    public function getCelPhone(): ?string    {
        return $this->celPhone;
    }

    public function setCelPhone(?string $celPhone): self
    {
        $this->celPhone = $celPhone;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Contact>
     */
    public function getContacts(): Collection
    {
        return $this->contacts;
    }

    public function addContact(App\Entity\Contact $contact): self
    {
        if (!$this->contacts->contains($contact)) {
            $this->contacts->add($contact);
            $contact->setAccountTeam($this);
        }
        return $this;
    }

    public function removeContact(App\Entity\Contact $contact): self
    {
        if ($this->contacts->removeElement($contact)) {
            if ($contact->getAccountTeam() === $this) {
                $contact->setAccountTeam(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Deal>
     */
    public function getDeals(): Collection
    {
        return $this->deals;
    }

    public function addDeal(App\Entity\Deal $deal): self
    {
        if (!$this->deals->contains($deal)) {
            $this->deals->add($deal);
            $deal->setTeam($this);
        }
        return $this;
    }

    public function removeDeal(App\Entity\Deal $deal): self
    {
        if ($this->deals->removeElement($deal)) {
            if ($deal->getTeam() === $this) {
                $deal->setTeam(null);
            }
        }
        return $this;
    }

    public function getEmail(): string    {
        return $this->email;
    }

    public function setEmail(string $email): self
    {
        $this->email = $email;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Deal>
     */
    public function getOwnedDeals(): Collection
    {
        return $this->ownedDeals;
    }

    public function addOwnedDeal(App\Entity\Deal $ownedDeal): self
    {
        if (!$this->ownedDeals->contains($ownedDeal)) {
            $this->ownedDeals->add($ownedDeal);
            $ownedDeal->setOwner($this);
        }
        return $this;
    }

    public function removeOwnedDeal(App\Entity\Deal $ownedDeal): self
    {
        if ($this->ownedDeals->removeElement($ownedDeal)) {
            if ($ownedDeal->getOwner() === $this) {
                $ownedDeal->setOwner(null);
            }
        }
        return $this;
    }

    public function getEmailVerifiedAt(): ?\DateTimeImmutable    {
        return $this->emailVerifiedAt;
    }

    public function setEmailVerifiedAt(?\DateTimeImmutable $emailVerifiedAt): self
    {
        $this->emailVerifiedAt = $emailVerifiedAt;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\CalendarExternalLink>
     */
    public function getCalendarExternalLinks(): Collection
    {
        return $this->calendarExternalLinks;
    }

    public function addCalendarExternalLink(App\Entity\CalendarExternalLink $calendarExternalLink): self
    {
        if (!$this->calendarExternalLinks->contains($calendarExternalLink)) {
            $this->calendarExternalLinks->add($calendarExternalLink);
            $calendarExternalLink->setUser($this);
        }
        return $this;
    }

    public function removeCalendarExternalLink(App\Entity\CalendarExternalLink $calendarExternalLink): self
    {
        if ($this->calendarExternalLinks->removeElement($calendarExternalLink)) {
            if ($calendarExternalLink->getUser() === $this) {
                $calendarExternalLink->setUser(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\EventResourceBooking>
     */
    public function getResourceBookings(): Collection
    {
        return $this->resourceBookings;
    }

    public function addResourceBooking(App\Entity\EventResourceBooking $resourceBooking): self
    {
        if (!$this->resourceBookings->contains($resourceBooking)) {
            $this->resourceBookings->add($resourceBooking);
            $resourceBooking->setBookedBy($this);
        }
        return $this;
    }

    public function removeResourceBooking(App\Entity\EventResourceBooking $resourceBooking): self
    {
        if ($this->resourceBookings->removeElement($resourceBooking)) {
            if ($resourceBooking->getBookedBy() === $this) {
                $resourceBooking->setBookedBy(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\EventAttendee>
     */
    public function getEventAttendances(): Collection
    {
        return $this->eventAttendances;
    }

    public function addEventAttendance(App\Entity\EventAttendee $eventAttendance): self
    {
        if (!$this->eventAttendances->contains($eventAttendance)) {
            $this->eventAttendances->add($eventAttendance);
            $eventAttendance->setUser($this);
        }
        return $this;
    }

    public function removeEventAttendance(App\Entity\EventAttendee $eventAttendance): self
    {
        if ($this->eventAttendances->removeElement($eventAttendance)) {
            if ($eventAttendance->getUser() === $this) {
                $eventAttendance->setUser(null);
            }
        }
        return $this;
    }

    public function getFailedLoginAttempts(): int    {
        return $this->failedLoginAttempts;
    }

    public function setFailedLoginAttempts(int $failedLoginAttempts): self
    {
        $this->failedLoginAttempts = $failedLoginAttempts;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Flag>
     */
    public function getFlags(): Collection
    {
        return $this->flags;
    }

    public function addFlag(App\Entity\Flag $flag): self
    {
        if (!$this->flags->contains($flag)) {
            $this->flags->add($flag);
            $flag->setUser($this);
        }
        return $this;
    }

    public function removeFlag(App\Entity\Flag $flag): self
    {
        if ($this->flags->removeElement($flag)) {
            if ($flag->getUser() === $this) {
                $flag->setUser(null);
            }
        }
        return $this;
    }

    public function getGender(): ?int    {
        return $this->gender;
    }

    public function setGender(?int $gender): self
    {
        $this->gender = $gender;
        return $this;
    }

    public function getLastPasswordChange(): ?\DateTimeImmutable    {
        return $this->lastPasswordChange;
    }

    public function setLastPasswordChange(?\DateTimeImmutable $lastPasswordChange): self
    {
        $this->lastPasswordChange = $lastPasswordChange;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Campaign>
     */
    public function getManagedCampaigns(): Collection
    {
        return $this->managedCampaigns;
    }

    public function addManagedCampaign(App\Entity\Campaign $managedCampaign): self
    {
        if (!$this->managedCampaigns->contains($managedCampaign)) {
            $this->managedCampaigns->add($managedCampaign);
            $managedCampaign->setManager($this);
        }
        return $this;
    }

    public function removeManagedCampaign(App\Entity\Campaign $managedCampaign): self
    {
        if ($this->managedCampaigns->removeElement($managedCampaign)) {
            if ($managedCampaign->getManager() === $this) {
                $managedCampaign->setManager(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Campaign>
     */
    public function getOwnedCampaigns(): Collection
    {
        return $this->ownedCampaigns;
    }

    public function addOwnedCampaign(App\Entity\Campaign $ownedCampaign): self
    {
        if (!$this->ownedCampaigns->contains($ownedCampaign)) {
            $this->ownedCampaigns->add($ownedCampaign);
            $ownedCampaign->setOwner($this);
        }
        return $this;
    }

    public function removeOwnedCampaign(App\Entity\Campaign $ownedCampaign): self
    {
        if ($this->ownedCampaigns->removeElement($ownedCampaign)) {
            if ($ownedCampaign->getOwner() === $this) {
                $ownedCampaign->setOwner(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Company>
     */
    public function getManagedCompanies(): Collection
    {
        return $this->managedCompanies;
    }

    public function addManagedCompany(App\Entity\Company $managedCompany): self
    {
        if (!$this->managedCompanies->contains($managedCompany)) {
            $this->managedCompanies->add($managedCompany);
            $managedCompany->setAccountManager($this);
        }
        return $this;
    }

    public function removeManagedCompany(App\Entity\Company $managedCompany): self
    {
        if ($this->managedCompanies->removeElement($managedCompany)) {
            if ($managedCompany->getAccountManager() === $this) {
                $managedCompany->setAccountManager(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Contact>
     */
    public function getManagedContacts(): Collection
    {
        return $this->managedContacts;
    }

    public function addManagedContact(App\Entity\Contact $managedContact): self
    {
        if (!$this->managedContacts->contains($managedContact)) {
            $this->managedContacts->add($managedContact);
            $managedContact->setAccountManager($this);
        }
        return $this;
    }

    public function removeManagedContact(App\Entity\Contact $managedContact): self
    {
        if ($this->managedContacts->removeElement($managedContact)) {
            if ($managedContact->getAccountManager() === $this) {
                $managedContact->setAccountManager(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Deal>
     */
    public function getManagedDeals(): Collection
    {
        return $this->managedDeals;
    }

    public function addManagedDeal(App\Entity\Deal $managedDeal): self
    {
        if (!$this->managedDeals->contains($managedDeal)) {
            $this->managedDeals->add($managedDeal);
            $managedDeal->setManager($this);
        }
        return $this;
    }

    public function removeManagedDeal(App\Entity\Deal $managedDeal): self
    {
        if ($this->managedDeals->removeElement($managedDeal)) {
            if ($managedDeal->getManager() === $this) {
                $managedDeal->setManager(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Pipeline>
     */
    public function getManagedPipelines(): Collection
    {
        return $this->managedPipelines;
    }

    public function addManagedPipeline(App\Entity\Pipeline $managedPipeline): self
    {
        if (!$this->managedPipelines->contains($managedPipeline)) {
            $this->managedPipelines->add($managedPipeline);
            $managedPipeline->setManager($this);
        }
        return $this;
    }

    public function removeManagedPipeline(App\Entity\Pipeline $managedPipeline): self
    {
        if ($this->managedPipelines->removeElement($managedPipeline)) {
            if ($managedPipeline->getManager() === $this) {
                $managedPipeline->setManager(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Event>
     */
    public function getOrganizedEvents(): Collection
    {
        return $this->organizedEvents;
    }

    public function addOrganizedEvent(App\Entity\Event $organizedEvent): self
    {
        if (!$this->organizedEvents->contains($organizedEvent)) {
            $this->organizedEvents->add($organizedEvent);
            $organizedEvent->setOrganizer($this);
        }
        return $this;
    }

    public function removeOrganizedEvent(App\Entity\Event $organizedEvent): self
    {
        if ($this->organizedEvents->removeElement($organizedEvent)) {
            if ($organizedEvent->getOrganizer() === $this) {
                $organizedEvent->setOrganizer(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Course>
     */
    public function getOwnedCourses(): Collection
    {
        return $this->ownedCourses;
    }

    public function addOwnedCours(App\Entity\Course $ownedCours): self
    {
        if (!$this->ownedCourses->contains($ownedCours)) {
            $this->ownedCourses->add($ownedCours);
            $ownedCours->setOwner($this);
        }
        return $this;
    }

    public function removeOwnedCours(App\Entity\Course $ownedCours): self
    {
        if ($this->ownedCourses->removeElement($ownedCours)) {
            if ($ownedCours->getOwner() === $this) {
                $ownedCours->setOwner(null);
            }
        }
        return $this;
    }

    public function getPassword(): string    {
        return $this->password;
    }

    public function setPassword(string $password): self
    {
        $this->password = $password;
        return $this;
    }

    public function getPosition(): ?string    {
        return $this->position;
    }

    public function setPosition(?string $position): self
    {
        $this->position = $position;
        return $this;
    }

    public function getProfilePictureUrl(): ?string    {
        return $this->profilePictureUrl;
    }

    public function setProfilePictureUrl(?string $profilePictureUrl): self
    {
        $this->profilePictureUrl = $profilePictureUrl;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Profile>
     */
    public function getProfiles(): Collection
    {
        return $this->profiles;
    }

    public function addProfile(App\Entity\Profile $profile): self
    {
        if (!$this->profiles->contains($profile)) {
            $this->profiles->add($profile);
            $profile->setUsers($this);
        }
        return $this;
    }

    public function removeProfile(App\Entity\Profile $profile): self
    {
        if ($this->profiles->removeElement($profile)) {
            if ($profile->getUsers() === $this) {
                $profile->setUsers(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\SocialMedia>
     */
    public function getSocialMedias(): Collection
    {
        return $this->socialMedias;
    }

    public function addSocialMedia(App\Entity\SocialMedia $socialMedia): self
    {
        if (!$this->socialMedias->contains($socialMedia)) {
            $this->socialMedias->add($socialMedia);
            $socialMedia->setUser($this);
        }
        return $this;
    }

    public function removeSocialMedia(App\Entity\SocialMedia $socialMedia): self
    {
        if ($this->socialMedias->removeElement($socialMedia)) {
            if ($socialMedia->getUser() === $this) {
                $socialMedia->setUser(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\StudentCourse>
     */
    public function getStudentCourses(): Collection
    {
        return $this->studentCourses;
    }

    public function addStudentCours(App\Entity\StudentCourse $studentCours): self
    {
        if (!$this->studentCourses->contains($studentCours)) {
            $this->studentCourses->add($studentCours);
            $studentCours->setStudent($this);
        }
        return $this;
    }

    public function removeStudentCours(App\Entity\StudentCourse $studentCours): self
    {
        if ($this->studentCourses->removeElement($studentCours)) {
            if ($studentCours->getStudent() === $this) {
                $studentCours->setStudent(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Talk>
     */
    public function getTalks(): Collection
    {
        return $this->talks;
    }

    public function addTalk(App\Entity\Talk $talk): self
    {
        if (!$this->talks->contains($talk)) {
            $this->talks->add($talk);
            $talk->setUsers($this);
        }
        return $this;
    }

    public function removeTalk(App\Entity\Talk $talk): self
    {
        if ($this->talks->removeElement($talk)) {
            if ($talk->getUsers() === $this) {
                $talk->setUsers(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Task>
     */
    public function getTasks(): Collection
    {
        return $this->tasks;
    }

    public function addTask(App\Entity\Task $task): self
    {
        if (!$this->tasks->contains($task)) {
            $this->tasks->add($task);
            $task->setUser($this);
        }
        return $this;
    }

    public function removeTask(App\Entity\Task $task): self
    {
        if ($this->tasks->removeElement($task)) {
            if ($task->getUser() === $this) {
                $task->setUser(null);
            }
        }
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? ($this->getId()?->toRfc4122() ?? '');
    }
}
