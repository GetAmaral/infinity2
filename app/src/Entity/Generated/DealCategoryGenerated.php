<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
use App\Entity\Organization;
use App\Entity\DealCategory;
use App\Entity\Deal;

/**
 * DealCategory Entity (Generated Base Class)
 *
 * Deal categories for reporting and analysis *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to DealCategory.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class DealCategoryGenerated extends EntityBase
{
    #[Groups(['dealcategory:read', 'dealcategory:write'])]
    #[ORM\ManyToOne(targetEntity: Organization::class, inversedBy: 'dealCategories')]
    #[ORM\JoinColumn(nullable: false)]
    protected Organization $organization;

    #[Groups(['dealcategory:read', 'dealcategory:write'])]
    #[ORM\Column(type: 'string', length: 7, nullable: true)]
    protected ?string $color = '#0dcaf0';

    #[Groups(['dealcategory:read', 'dealcategory:write'])]
    #[ORM\Column(type: 'string', length: 255)]
    protected string $name;

    #[Groups(['dealcategory:read', 'dealcategory:write'])]
    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $description = null;

    #[Groups(['dealcategory:read', 'dealcategory:write'])]
    #[ORM\Column(type: 'string', length: 50, nullable: true)]
    protected ?string $icon = null;

    #[Groups(['dealcategory:read', 'dealcategory:write'])]
    #[ORM\Column(name: 'default_prop', type: 'boolean')]
    protected bool $default = false;

    #[Groups(['dealcategory:read', 'dealcategory:write'])]
    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $displayOrder = 10;

    #[Groups(['dealcategory:read', 'dealcategory:write'])]
    #[ORM\ManyToOne(targetEntity: DealCategory::class, inversedBy: 'subcategories')]
    protected ?DealCategory $parentCategory = null;

    #[Groups(['dealcategory:read'])]
    #[ORM\OneToMany(targetEntity: DealCategory::class, mappedBy: 'parentCategory', fetch: 'LAZY')]
    protected Collection $subcategories;

    #[Groups(['dealcategory:read'])]
    #[ORM\OneToMany(targetEntity: Deal::class, mappedBy: 'category', fetch: 'LAZY')]
    protected Collection $deals;

    #[Groups(['dealcategory:read', 'dealcategory:write'])]
    #[ORM\Column(type: 'boolean')]
    protected bool $active = true;

    #[Groups(['dealcategory:read', 'dealcategory:write'])]
    #[ORM\Column(name: 'group_prop', type: 'string', length: 255, nullable: true)]
    protected ?string $group = null;


    public function __construct()
    {
        parent::__construct();
        $this->subcategories = new ArrayCollection();
        $this->deals = new ArrayCollection();
    }

    public function getOrganization(): Organization
    {
        return $this->organization;
    }

    public function setOrganization(Organization $organization): self
    {
        $this->organization = $organization;
        return $this;
    }

    public function getColor(): ?string    {
        return $this->color;
    }

    public function setColor(?string $color): self
    {
        $this->color = $color;
        return $this;
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getDescription(): ?string    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    public function getIcon(): ?string    {
        return $this->icon;
    }

    public function setIcon(?string $icon): self
    {
        $this->icon = $icon;
        return $this;
    }

    public function getDefault(): bool    {
        return $this->default;
    }

    public function setDefault(bool $default): self
    {
        $this->default = $default;
        return $this;
    }

    public function isDefault(): bool
    {
        return $this->default === true;
    }

    public function getDisplayOrder(): ?int    {
        return $this->displayOrder;
    }

    public function setDisplayOrder(?int $displayOrder): self
    {
        $this->displayOrder = $displayOrder;
        return $this;
    }

    public function getParentCategory(): ?DealCategory
    {
        return $this->parentCategory;
    }

    public function setParentCategory(?DealCategory $parentCategory): self
    {
        $this->parentCategory = $parentCategory;
        return $this;
    }

    /**
     * @return Collection<int, DealCategory>
     */
    public function getSubcategories(): Collection
    {
        return $this->subcategories;
    }

    public function addSubcategory(DealCategory $subcategory): self
    {
        if (!$this->subcategories->contains($subcategory)) {
            $this->subcategories->add($subcategory);
            $subcategory->setParentCategory($this);
        }
        return $this;
    }

    public function removeSubcategory(DealCategory $subcategory): self
    {
        if ($this->subcategories->removeElement($subcategory)) {
            if ($subcategory->getParentCategory() === $this) {
                $subcategory->setParentCategory(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, Deal>
     */
    public function getDeals(): Collection
    {
        return $this->deals;
    }

    public function addDeal(Deal $deal): self
    {
        if (!$this->deals->contains($deal)) {
            $this->deals->add($deal);
            $deal->setCategory($this);
        }
        return $this;
    }

    public function removeDeal(Deal $deal): self
    {
        if ($this->deals->removeElement($deal)) {
            if ($deal->getCategory() === $this) {
                $deal->setCategory(null);
            }
        }
        return $this;
    }

    public function getActive(): bool    {
        return $this->active;
    }

    public function setActive(bool $active): self
    {
        $this->active = $active;
        return $this;
    }

    public function isActive(): bool
    {
        return $this->active === true;
    }

    public function getGroup(): ?string    {
        return $this->group;
    }

    public function setGroup(?string $group): self
    {
        $this->group = $group;
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? ($this->getId()?->toRfc4122() ?? '');
    }
}
