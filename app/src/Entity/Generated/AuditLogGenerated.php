<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
use App\Entity\User;

/**
 * Audit Log Entity (Generated Base Class)
 *
 * Audit log for tracking all system changes and user actions *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to AuditLog.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class AuditLogGenerated extends EntityBase
{
    #[Groups(['auditlog:read', 'auditlog:write'])]
    #[ORM\Column(type: 'json')]
    protected array $changes;

    #[Groups(['audit:read', 'audit:write'])]
    #[ORM\Column(name: 'action_prop', type: 'string', length: 255)]
    #[Assert\Length(max: 255)]
    protected string $action;

    #[Groups(['audit:read', 'audit:write'])]
    #[ORM\Column(type: 'string', length: 64, nullable: true)]
    #[Assert\Length(max: 64)]
    protected ?string $checksum = null;

    #[Groups(['auditlog:read', 'auditlog:write'])]
    #[ORM\Column(type: 'string', length: 255)]
    #[Assert\Length(max: 255)]
    protected string $entityClass;

    #[Groups(['auditlog:read', 'auditlog:write'])]
    #[ORM\Column(type: 'uuid')]
    protected string $entityId;

    #[Groups(['audit:read', 'audit:write'])]
    #[ORM\Column(type: 'json', nullable: true)]
    protected ?array $metadata = null;

    #[Groups(['auditlog:read', 'auditlog:write'])]
    #[ORM\ManyToOne(targetEntity: User::class)]
    protected ?User $user = null;


    public function __construct()
    {
        parent::__construct();
    }

    public function getChanges(): array    {
        return $this->changes;
    }

    public function setChanges(array $changes): self
    {
        $this->changes = $changes;
        return $this;
    }

    public function getAction(): string    {
        return $this->action;
    }

    public function setAction(string $action): self
    {
        $this->action = $action;
        return $this;
    }

    public function getChecksum(): ?string    {
        return $this->checksum;
    }

    public function setChecksum(?string $checksum): self
    {
        $this->checksum = $checksum;
        return $this;
    }

    public function getEntityClass(): string    {
        return $this->entityClass;
    }

    public function setEntityClass(string $entityClass): self
    {
        $this->entityClass = $entityClass;
        return $this;
    }

    public function getEntityId(): string    {
        return $this->entityId;
    }

    public function setEntityId(string $entityId): self
    {
        $this->entityId = $entityId;
        return $this;
    }

    public function getMetadata(): ?array    {
        return $this->metadata;
    }

    public function setMetadata(?array $metadata): self
    {
        $this->metadata = $metadata;
        return $this;
    }

    public function getUser(): ?User
    {
        return $this->user;
    }

    public function setUser(?User $user): self
    {
        $this->user = $user;
        return $this;
    }


    public function __toString(): string
    {
        return $this->getId()?->toRfc4122() ?? '';
    }
}
