<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
use App\Entity\Organization;
use App\Entity\Deal;

/**
 * Competitor Entity (Generated Base Class)
 *
 * Competitor tracking for sales and market analysis *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to Competitor.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class CompetitorGenerated extends EntityBase
{
    #[Groups(['competitor:read', 'competitor:write'])]
    #[ORM\ManyToOne(targetEntity: Organization::class, inversedBy: 'competitors')]
    #[ORM\JoinColumn(nullable: false)]
    protected Organization $organization;

    #[Groups(['competitor:read', 'competitor:write'])]
    #[ORM\Column(type: 'string', length: 255)]
    protected string $name;

    #[Groups(['competitor:read', 'competitor:write'])]
    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $description = null;

    #[Groups(['competitor:read', 'competitor:write'])]
    #[ORM\Column(type: 'string', length: 100, nullable: true)]
    protected ?string $industry = null;

    #[Groups(['competitor:read', 'competitor:write'])]
    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $targetMarket = null;

    #[Groups(['competitor:read'])]
    #[ORM\ManyToMany(targetEntity: Deal::class, mappedBy: 'competitors', fetch: 'LAZY')]
    protected Collection $deals;

    #[Groups(['competitor:read', 'competitor:write'])]
    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $foundedYear = null;

    #[Groups(['competitor:read', 'competitor:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $website = null;

    #[Groups(['competitor:read', 'competitor:write'])]
    #[ORM\Column(type: 'boolean')]
    protected bool $active = true;

    #[Groups(['competitor:read', 'competitor:write'])]
    #[ORM\Column(type: 'string', length: 100, nullable: true)]
    protected ?string $marketPosition = null;

    #[Groups(['competitor:read', 'competitor:write'])]
    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $strengths = null;

    #[Groups(['competitor:read', 'competitor:write'])]
    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $products = null;

    #[Groups(['competitor:read', 'competitor:write'])]
    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $weaknesses = null;

    #[Groups(['competitor:read', 'competitor:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $revenue = null;

    #[Groups(['competitor:read', 'competitor:write'])]
    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $employeeCount = null;

    #[Groups(['competitor:read', 'competitor:write'])]
    #[ORM\Column(type: 'decimal', precision: 5, scale: 2, nullable: true)]
    protected ?string $winRate = null;

    #[Groups(['competitor:read', 'competitor:write'])]
    #[ORM\Column(type: 'decimal', precision: 5, scale: 2, nullable: true)]
    protected ?string $lossRate = null;

    #[Groups(['competitor:read', 'competitor:write'])]
    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $pricingModel = null;

    #[Groups(['competitor:read', 'competitor:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $headquarters = null;

    #[Groups(['competitor:read', 'competitor:write'])]
    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $opportunities = null;

    #[Groups(['competitor:read', 'competitor:write'])]
    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $threats = null;

    #[Groups(['competitor:read', 'competitor:write'])]
    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $notes = null;

    #[Groups(['competitor:read', 'competitor:write'])]
    #[ORM\Column(type: 'datetime', nullable: true)]
    protected ?\DateTimeImmutable $lastAnalyzedAt = null;

    #[Groups(['competitor:read', 'competitor:write'])]
    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $keyDifferentiators = null;


    public function __construct()
    {
        parent::__construct();
        $this->deals = new ArrayCollection();
    }

    public function getOrganization(): App\Entity\Organization
    {
        return $this->organization;
    }

    public function setOrganization(App\Entity\Organization $organization): self
    {
        $this->organization = $organization;
        return $this;
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getDescription(): ?string    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    public function getIndustry(): ?string    {
        return $this->industry;
    }

    public function setIndustry(?string $industry): self
    {
        $this->industry = $industry;
        return $this;
    }

    public function getTargetMarket(): ?string    {
        return $this->targetMarket;
    }

    public function setTargetMarket(?string $targetMarket): self
    {
        $this->targetMarket = $targetMarket;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Deal>
     */
    public function getDeals(): Collection
    {
        return $this->deals;
    }

    public function addDeal(App\Entity\Deal $deal): self
    {
        if (!$this->deals->contains($deal)) {
            $this->deals->add($deal);
            $deal->setCompetitors($this);
        }
        return $this;
    }

    public function removeDeal(App\Entity\Deal $deal): self
    {
        if ($this->deals->removeElement($deal)) {
            if ($deal->getCompetitors() === $this) {
                $deal->setCompetitors(null);
            }
        }
        return $this;
    }

    public function getFoundedYear(): ?int    {
        return $this->foundedYear;
    }

    public function setFoundedYear(?int $foundedYear): self
    {
        $this->foundedYear = $foundedYear;
        return $this;
    }

    public function getWebsite(): ?string    {
        return $this->website;
    }

    public function setWebsite(?string $website): self
    {
        $this->website = $website;
        return $this;
    }

    public function getActive(): bool    {
        return $this->active;
    }

    public function setActive(bool $active): self
    {
        $this->active = $active;
        return $this;
    }

    public function isActive(): bool
    {
        return $this->active === true;
    }

    public function getMarketPosition(): ?string    {
        return $this->marketPosition;
    }

    public function setMarketPosition(?string $marketPosition): self
    {
        $this->marketPosition = $marketPosition;
        return $this;
    }

    public function getStrengths(): ?string    {
        return $this->strengths;
    }

    public function setStrengths(?string $strengths): self
    {
        $this->strengths = $strengths;
        return $this;
    }

    public function getProducts(): ?string    {
        return $this->products;
    }

    public function setProducts(?string $products): self
    {
        $this->products = $products;
        return $this;
    }

    public function getWeaknesses(): ?string    {
        return $this->weaknesses;
    }

    public function setWeaknesses(?string $weaknesses): self
    {
        $this->weaknesses = $weaknesses;
        return $this;
    }

    public function getRevenue(): ?string    {
        return $this->revenue;
    }

    public function setRevenue(?string $revenue): self
    {
        $this->revenue = $revenue;
        return $this;
    }

    public function getEmployeeCount(): ?int    {
        return $this->employeeCount;
    }

    public function setEmployeeCount(?int $employeeCount): self
    {
        $this->employeeCount = $employeeCount;
        return $this;
    }

    public function getWinRate(): ?string    {
        return $this->winRate;
    }

    public function setWinRate(?string $winRate): self
    {
        $this->winRate = $winRate;
        return $this;
    }

    public function getLossRate(): ?string    {
        return $this->lossRate;
    }

    public function setLossRate(?string $lossRate): self
    {
        $this->lossRate = $lossRate;
        return $this;
    }

    public function getPricingModel(): ?string    {
        return $this->pricingModel;
    }

    public function setPricingModel(?string $pricingModel): self
    {
        $this->pricingModel = $pricingModel;
        return $this;
    }

    public function getHeadquarters(): ?string    {
        return $this->headquarters;
    }

    public function setHeadquarters(?string $headquarters): self
    {
        $this->headquarters = $headquarters;
        return $this;
    }

    public function getOpportunities(): ?string    {
        return $this->opportunities;
    }

    public function setOpportunities(?string $opportunities): self
    {
        $this->opportunities = $opportunities;
        return $this;
    }

    public function getThreats(): ?string    {
        return $this->threats;
    }

    public function setThreats(?string $threats): self
    {
        $this->threats = $threats;
        return $this;
    }

    public function getNotes(): ?string    {
        return $this->notes;
    }

    public function setNotes(?string $notes): self
    {
        $this->notes = $notes;
        return $this;
    }

    public function getLastAnalyzedAt(): ?\DateTimeImmutable    {
        return $this->lastAnalyzedAt;
    }

    public function setLastAnalyzedAt(?\DateTimeImmutable $lastAnalyzedAt): self
    {
        $this->lastAnalyzedAt = $lastAnalyzedAt;
        return $this;
    }

    public function getKeyDifferentiators(): ?string    {
        return $this->keyDifferentiators;
    }

    public function setKeyDifferentiators(?string $keyDifferentiators): self
    {
        $this->keyDifferentiators = $keyDifferentiators;
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? ($this->getId()?->toRfc4122() ?? '');
    }
}
