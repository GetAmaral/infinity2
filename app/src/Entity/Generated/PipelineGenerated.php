<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use App\Entity\Trait\OrganizationTrait;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use App\Entity\User;
use App\Entity\PipelineStage;
use App\Entity\Deal;

/**
 * Pipeline Entity (Generated Base Class)
 *
 * Sales pipelines for managing deal flow *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to Pipeline.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class PipelineGenerated extends EntityBase
{
    use OrganizationTrait;

    #[ORM\Column(type: 'string', length: 255)]
    protected string $name;

    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $description = null;

    #[ORM\Column(type: 'boolean')]
    protected bool $active = true;

    #[ORM\Column(type: 'string', length: 255)]
    protected string $pipelineType = 'Sales';

    #[ORM\Column(name: 'default_prop', type: 'boolean')]
    protected bool $default = false;

    #[ORM\ManyToOne(targetEntity: User::class, inversedBy: 'managedPipelines')]
    protected ?User $owner = null;

    #[ORM\OneToMany(targetEntity: PipelineStage::class, mappedBy: 'pipeline', cascade: ['persist', 'remove'], orphanRemoval: true, fetch: 'LAZY')]
    #[ORM\OrderBy(['order' => 'ASC'])]
    protected Collection $stages;

    #[ORM\Column(type: 'integer')]
    protected int $displayOrder = 0;

    #[ORM\Column(type: 'string', length: 7)]
    protected string $color = '#0dcaf0';

    #[ORM\Column(type: 'string', length: 50)]
    protected string $icon = 'bi-diagram-3';

    #[ORM\Column(type: 'boolean')]
    protected bool $forecastEnabled = true;

    #[ORM\Column(type: 'boolean')]
    protected bool $autoAdvanceStages = false;

    #[ORM\Column(type: 'integer')]
    protected int $rottenDealThreshold = 30;

    #[ORM\Column(type: 'string', length: 3)]
    protected string $currency = 'USD';

    #[ORM\Column(type: 'decimal', precision: 15, scale: 2, nullable: true)]
    protected ?float $avgDealSize = 0;

    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $avgCycleTime = null;

    #[ORM\Column(type: 'decimal', precision: 5, scale: 2, nullable: true)]
    protected ?float $winRate = null;

    #[ORM\Column(type: 'decimal', precision: 5, scale: 2, nullable: true)]
    protected ?float $conversionRate = null;

    #[ORM\Column(type: 'integer')]
    protected int $totalDealsCount = 0;

    #[ORM\Column(type: 'integer')]
    protected int $activeDealsCount = 0;

    #[ORM\Column(type: 'decimal', precision: 15, scale: 2)]
    protected float $totalPipelineValue = 0;

    #[ORM\OneToMany(targetEntity: Deal::class, mappedBy: 'pipeline', cascade: ['persist'], fetch: 'LAZY')]
    #[ORM\OrderBy(['createdAt' => 'DESC'])]
    protected Collection $deals;

    #[ORM\Column(type: 'datetime', nullable: true)]
    protected ?\DateTimeImmutable $archivedAt = null;


    public function __construct()
    {
        parent::__construct();
        $this->stages = new ArrayCollection();
        $this->deals = new ArrayCollection();
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getDescription(): ?string    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    public function getActive(): bool    {
        return $this->active;
    }

    public function setActive(bool $active): self
    {
        $this->active = $active;
        return $this;
    }

    public function isActive(): bool
    {
        return $this->active === true;
    }

    public function getPipelinetype(): string    {
        return $this->pipelineType;
    }

    public function setPipelinetype(string $pipelineType): self
    {
        $this->pipelineType = $pipelineType;
        return $this;
    }

    public function getDefault(): bool    {
        return $this->default;
    }

    public function setDefault(bool $default): self
    {
        $this->default = $default;
        return $this;
    }

    public function isDefault(): bool
    {
        return $this->default === true;
    }

    public function getOwner(): ?App\Entity\User
    {
        return $this->owner;
    }

    public function setOwner(?App\Entity\User $owner): self
    {
        $this->owner = $owner;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\PipelineStage>
     */
    public function getStages(): Collection
    {
        return $this->stages;
    }

    public function addStage(App\Entity\PipelineStage $tage): self
    {
        if (!$this->stages->contains($tage)) {
            $this->stages->add($tage);
            $tage->setPipeline($this);
        }
        return $this;
    }

    public function removeStage(App\Entity\PipelineStage $tage): self
    {
        if ($this->stages->removeElement($tage)) {
            if ($tage->getPipeline() === $this) {
                $tage->setPipeline(null);
            }
        }
        return $this;
    }

    public function getDisplayorder(): int    {
        return $this->displayOrder;
    }

    public function setDisplayorder(int $displayOrder): self
    {
        $this->displayOrder = $displayOrder;
        return $this;
    }

    public function getColor(): string    {
        return $this->color;
    }

    public function setColor(string $color): self
    {
        $this->color = $color;
        return $this;
    }

    public function getIcon(): string    {
        return $this->icon;
    }

    public function setIcon(string $icon): self
    {
        $this->icon = $icon;
        return $this;
    }

    public function getForecastenabled(): bool    {
        return $this->forecastEnabled;
    }

    public function setForecastenabled(bool $forecastEnabled): self
    {
        $this->forecastEnabled = $forecastEnabled;
        return $this;
    }

    public function isForecastenabled(): bool
    {
        return $this->forecastEnabled === true;
    }

    public function getAutoadvancestages(): bool    {
        return $this->autoAdvanceStages;
    }

    public function setAutoadvancestages(bool $autoAdvanceStages): self
    {
        $this->autoAdvanceStages = $autoAdvanceStages;
        return $this;
    }

    public function isAutoadvancestages(): bool
    {
        return $this->autoAdvanceStages === true;
    }

    public function getRottendealthreshold(): int    {
        return $this->rottenDealThreshold;
    }

    public function setRottendealthreshold(int $rottenDealThreshold): self
    {
        $this->rottenDealThreshold = $rottenDealThreshold;
        return $this;
    }

    public function getCurrency(): string    {
        return $this->currency;
    }

    public function setCurrency(string $currency): self
    {
        $this->currency = $currency;
        return $this;
    }

    public function getAvgdealsize(): ?float    {
        return $this->avgDealSize;
    }

    public function setAvgdealsize(?float $avgDealSize): self
    {
        $this->avgDealSize = $avgDealSize;
        return $this;
    }

    public function getAvgcycletime(): ?int    {
        return $this->avgCycleTime;
    }

    public function setAvgcycletime(?int $avgCycleTime): self
    {
        $this->avgCycleTime = $avgCycleTime;
        return $this;
    }

    public function getWinrate(): ?float    {
        return $this->winRate;
    }

    public function setWinrate(?float $winRate): self
    {
        $this->winRate = $winRate;
        return $this;
    }

    public function getConversionrate(): ?float    {
        return $this->conversionRate;
    }

    public function setConversionrate(?float $conversionRate): self
    {
        $this->conversionRate = $conversionRate;
        return $this;
    }

    public function getTotaldealscount(): int    {
        return $this->totalDealsCount;
    }

    public function setTotaldealscount(int $totalDealsCount): self
    {
        $this->totalDealsCount = $totalDealsCount;
        return $this;
    }

    public function getActivedealscount(): int    {
        return $this->activeDealsCount;
    }

    public function setActivedealscount(int $activeDealsCount): self
    {
        $this->activeDealsCount = $activeDealsCount;
        return $this;
    }

    public function getTotalpipelinevalue(): float    {
        return $this->totalPipelineValue;
    }

    public function setTotalpipelinevalue(float $totalPipelineValue): self
    {
        $this->totalPipelineValue = $totalPipelineValue;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Deal>
     */
    public function getDeals(): Collection
    {
        return $this->deals;
    }

    public function addDeal(App\Entity\Deal $deal): self
    {
        if (!$this->deals->contains($deal)) {
            $this->deals->add($deal);
            $deal->setPipeline($this);
        }
        return $this;
    }

    public function removeDeal(App\Entity\Deal $deal): self
    {
        if ($this->deals->removeElement($deal)) {
            if ($deal->getPipeline() === $this) {
                $deal->setPipeline(null);
            }
        }
        return $this;
    }

    public function getArchivedat(): ?\DateTimeImmutable    {
        return $this->archivedAt;
    }

    public function setArchivedat(?\DateTimeImmutable $archivedAt): self
    {
        $this->archivedAt = $archivedAt;
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? ($this->getId()?->toRfc4122() ?? '');
    }
}
