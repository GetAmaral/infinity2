<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
use App\Entity\Organization;
use App\Entity\ProductCategory;
use App\Entity\Product;

/**
 * ProductCategory Entity (Generated Base Class)
 *
 * Product categories for catalog organization *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to ProductCategory.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class ProductCategoryGenerated extends EntityBase
{
    #[Groups(['productcategory:read', 'productcategory:write'])]
    #[ORM\ManyToOne(targetEntity: Organization::class, inversedBy: 'productCategories')]
    #[ORM\JoinColumn(nullable: false)]
    protected Organization $organization;

    #[Groups(['productcategory:read', 'productcategory:write'])]
    #[ORM\Column(type: 'string', length: 255)]
    protected string $name;

    #[Groups(['productcategory:read', 'productcategory:write'])]
    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $description = null;

    #[Groups(['productcategory:read', 'productcategory:write'])]
    #[ORM\ManyToOne(targetEntity: ProductCategory::class, inversedBy: 'subcategories')]
    protected ?ProductCategory $parentCategory = null;

    #[Groups(['productcategory:read'])]
    #[ORM\OneToMany(targetEntity: ProductCategory::class, mappedBy: 'parentCategory', fetch: 'LAZY')]
    protected Collection $subcategories;

    #[Groups(['productcategory:read'])]
    #[ORM\OneToMany(targetEntity: Product::class, mappedBy: 'category', fetch: 'LAZY')]
    protected Collection $products;


    public function __construct()
    {
        parent::__construct();
        $this->subcategories = new ArrayCollection();
        $this->products = new ArrayCollection();
    }

    public function getOrganization(): App\Entity\Organization
    {
        return $this->organization;
    }

    public function setOrganization(App\Entity\Organization $organization): self
    {
        $this->organization = $organization;
        return $this;
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getDescription(): ?string    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    public function getParentCategory(): ?App\Entity\ProductCategory
    {
        return $this->parentCategory;
    }

    public function setParentCategory(?App\Entity\ProductCategory $parentCategory): self
    {
        $this->parentCategory = $parentCategory;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\ProductCategory>
     */
    public function getSubcategories(): Collection
    {
        return $this->subcategories;
    }

    public function addSubcategory(App\Entity\ProductCategory $subcategory): self
    {
        if (!$this->subcategories->contains($subcategory)) {
            $this->subcategories->add($subcategory);
            $subcategory->setParentCategory($this);
        }
        return $this;
    }

    public function removeSubcategory(App\Entity\ProductCategory $subcategory): self
    {
        if ($this->subcategories->removeElement($subcategory)) {
            if ($subcategory->getParentCategory() === $this) {
                $subcategory->setParentCategory(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Product>
     */
    public function getProducts(): Collection
    {
        return $this->products;
    }

    public function addProduct(App\Entity\Product $product): self
    {
        if (!$this->products->contains($product)) {
            $this->products->add($product);
            $product->setCategory($this);
        }
        return $this;
    }

    public function removeProduct(App\Entity\Product $product): self
    {
        if ($this->products->removeElement($product)) {
            if ($product->getCategory() === $this) {
                $product->setCategory(null);
            }
        }
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? ($this->getId()?->toRfc4122() ?? '');
    }
}
