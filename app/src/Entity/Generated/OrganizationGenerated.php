<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use App\Entity\Trait\OrganizationTrait;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use App\Entity\StudentCourse;
use App\Entity\Agent;
use App\Entity\Product;
use App\Entity\BillingFrequency;
use App\Entity\Brand;
use App\Entity\Calendar;
use App\Entity\Campaign;
use App\Entity\City;
use App\Entity\Company;
use App\Entity\Competitor;
use App\Entity\Contact;
use App\Entity\Course;
use App\Entity\DealStage;
use App\Entity\Deal;
use App\Entity\EventCategory;
use App\Entity\EventResourceBooking;
use App\Entity\EventResourceType;
use App\Entity\EventResource;
use App\Entity\Event;
use App\Entity\Flag;
use App\Entity\Holiday;
use App\Entity\LeadSource;
use App\Entity\Lecture;
use App\Entity\Module;
use App\Entity\NotificationType;
use App\Entity\PipelineStage;
use App\Entity\Pipeline;
use App\Entity\ProductBatch;
use App\Entity\ProductCategory;
use App\Entity\ProductLine;
use App\Entity\Profile;
use App\Entity\SocialMedia;
use App\Entity\Tag;
use App\Entity\TalkMessage;
use App\Entity\TalkType;
use App\Entity\Talk;
use App\Entity\TaskType;
use App\Entity\Task;
use App\Entity\TaxCategory;
use App\Entity\User;
use App\Entity\WorkingHour;

/**
 * Organization Entity (Generated Base Class)
 *
 * Multi-tenant organization entity that isolates data by organization *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to Organization.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class OrganizationGenerated extends EntityBase
{
    use OrganizationTrait;

    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $logoPath = null;

    #[ORM\Column(type: 'string', length: 255)]
    protected string $name;

    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $logoPathDark = null;

    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $description = null;

    #[ORM\OneToMany(targetEntity: StudentCourse::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $studentCourses;

    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $logoUrl = null;

    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $industry = null;

    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $address = null;

    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $website = null;

    #[ORM\Column(type: 'boolean')]
    protected bool $active = true;

    #[ORM\OneToMany(targetEntity: Agent::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $agents;

    #[ORM\OneToMany(targetEntity: Product::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $products;

    #[ORM\OneToMany(targetEntity: BillingFrequency::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $billingFrequencies;

    #[ORM\Column(type: 'json', nullable: true)]
    protected ?array $branding = null;

    #[ORM\OneToMany(targetEntity: Brand::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $brands;

    #[ORM\Column(type: 'string', length: 20, nullable: true)]
    protected ?string $businessPhone = null;

    #[ORM\Column(type: 'json', nullable: true)]
    protected ?array $businessSettings = null;

    #[ORM\OneToMany(targetEntity: Calendar::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $calendars;

    #[ORM\OneToMany(targetEntity: Campaign::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $campaigns;

    #[ORM\Column(type: 'string', length: 20, nullable: true)]
    protected ?string $celPhone = null;

    #[ORM\ManyToOne(targetEntity: City::class)]
    protected ?City $city = null;

    #[ORM\OneToMany(targetEntity: Company::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $companies;

    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $companySize = null;

    #[ORM\OneToMany(targetEntity: Competitor::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $competitors;

    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $contactName = null;

    #[ORM\OneToMany(targetEntity: Contact::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $contacts;

    #[ORM\OneToMany(targetEntity: Course::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $courses;

    #[ORM\Column(type: 'string', length: 20, nullable: true)]
    protected ?string $currency = null;

    #[ORM\OneToMany(targetEntity: DealStage::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $dealStages;

    #[ORM\OneToMany(targetEntity: Deal::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $deals;

    #[ORM\OneToMany(targetEntity: EventCategory::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $eventCategories;

    #[ORM\OneToMany(targetEntity: EventResourceBooking::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $eventResourceBookings;

    #[ORM\OneToMany(targetEntity: EventResourceType::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $eventResourceTypes;

    #[ORM\OneToMany(targetEntity: EventResource::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $eventResources;

    #[ORM\OneToMany(targetEntity: Event::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $events;

    #[ORM\Column(type: 'json', nullable: true)]
    protected ?array $featureFlags = null;

    #[ORM\OneToMany(targetEntity: Flag::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $flags;

    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $geo = null;

    #[ORM\OneToMany(targetEntity: Holiday::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $holidays;

    #[ORM\Column(type: 'json', nullable: true)]
    protected ?array $integrationConfig = null;

    #[ORM\OneToMany(targetEntity: LeadSource::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $leadSources;

    #[ORM\OneToMany(targetEntity: Lecture::class, mappedBy: 'organization', orphanRemoval: true, fetch: 'LAZY')]
    protected Collection $lectures;

    #[ORM\ManyToMany(targetEntity: Module::class, fetch: 'LAZY')]
    protected Collection $modules;

    #[ORM\Column(type: 'json', nullable: true)]
    protected ?array $navConfig = null;

    #[ORM\OneToMany(targetEntity: NotificationType::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $notificationTypes;

    #[ORM\OneToMany(targetEntity: PipelineStage::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $pipelineStages;

    #[ORM\OneToMany(targetEntity: Pipeline::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $pipelines;

    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $postalCode = null;

    #[ORM\OneToMany(targetEntity: ProductBatch::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $productBatches;

    #[ORM\OneToMany(targetEntity: ProductCategory::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $productCategories;

    #[ORM\OneToMany(targetEntity: ProductLine::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $productLines;

    #[ORM\OneToMany(targetEntity: Profile::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $profiles;

    #[ORM\Column(type: 'json', nullable: true)]
    protected ?array $securityConfig = null;

    #[ORM\Column(type: 'string', length: 50, unique: true)]
    #[Assert\Length(max: 50)]
    protected string $slug;

    #[ORM\OneToMany(targetEntity: SocialMedia::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $socialMedias;

    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $status = null;

    #[ORM\OneToMany(targetEntity: Tag::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $tags;

    #[ORM\OneToMany(targetEntity: TalkMessage::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $talkMessages;

    #[ORM\OneToMany(targetEntity: TalkType::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $talkTypes;

    #[ORM\OneToMany(targetEntity: Talk::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $talks;

    #[ORM\OneToMany(targetEntity: TaskType::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $taskTypes;

    #[ORM\OneToMany(targetEntity: Task::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $tasks;

    #[ORM\OneToMany(targetEntity: TaxCategory::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $taxCategories;

    #[ORM\Column(type: 'string', length: 255)]
    protected string $timeZone = 'UTC';

    #[ORM\Column(type: 'json', nullable: true)]
    protected ?array $uiPreferences = null;

    #[ORM\OneToMany(targetEntity: User::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $users;

    #[ORM\OneToMany(targetEntity: WorkingHour::class, mappedBy: 'organization', fetch: 'LAZY')]
    protected Collection $workingHours;


    public function __construct()
    {
        parent::__construct();
        $this->studentCourses = new ArrayCollection();
        $this->agents = new ArrayCollection();
        $this->products = new ArrayCollection();
        $this->billingFrequencies = new ArrayCollection();
        $this->brands = new ArrayCollection();
        $this->calendars = new ArrayCollection();
        $this->campaigns = new ArrayCollection();
        $this->companies = new ArrayCollection();
        $this->competitors = new ArrayCollection();
        $this->contacts = new ArrayCollection();
        $this->courses = new ArrayCollection();
        $this->dealStages = new ArrayCollection();
        $this->deals = new ArrayCollection();
        $this->eventCategories = new ArrayCollection();
        $this->eventResourceBookings = new ArrayCollection();
        $this->eventResourceTypes = new ArrayCollection();
        $this->eventResources = new ArrayCollection();
        $this->events = new ArrayCollection();
        $this->flags = new ArrayCollection();
        $this->holidays = new ArrayCollection();
        $this->leadSources = new ArrayCollection();
        $this->lectures = new ArrayCollection();
        $this->modules = new ArrayCollection();
        $this->notificationTypes = new ArrayCollection();
        $this->pipelineStages = new ArrayCollection();
        $this->pipelines = new ArrayCollection();
        $this->productBatches = new ArrayCollection();
        $this->productCategories = new ArrayCollection();
        $this->productLines = new ArrayCollection();
        $this->profiles = new ArrayCollection();
        $this->socialMedias = new ArrayCollection();
        $this->tags = new ArrayCollection();
        $this->talkMessages = new ArrayCollection();
        $this->talkTypes = new ArrayCollection();
        $this->talks = new ArrayCollection();
        $this->taskTypes = new ArrayCollection();
        $this->tasks = new ArrayCollection();
        $this->taxCategories = new ArrayCollection();
        $this->users = new ArrayCollection();
        $this->workingHours = new ArrayCollection();
    }

    public function getLogopath(): ?string    {
        return $this->logoPath;
    }

    public function setLogopath(?string $logoPath): self
    {
        $this->logoPath = $logoPath;
        return $this;
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getLogopathdark(): ?string    {
        return $this->logoPathDark;
    }

    public function setLogopathdark(?string $logoPathDark): self
    {
        $this->logoPathDark = $logoPathDark;
        return $this;
    }

    public function getDescription(): ?string    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\StudentCourse>
     */
    public function getStudentcourses(): Collection
    {
        return $this->studentCourses;
    }

    public function addStudentcoure(App\Entity\StudentCourse $tudentCoure): self
    {
        if (!$this->studentCourses->contains($tudentCoure)) {
            $this->studentCourses->add($tudentCoure);
            $tudentCoure->setOrganization($this);
        }
        return $this;
    }

    public function removeStudentcoure(App\Entity\StudentCourse $tudentCoure): self
    {
        if ($this->studentCourses->removeElement($tudentCoure)) {
            if ($tudentCoure->getOrganization() === $this) {
                $tudentCoure->setOrganization(null);
            }
        }
        return $this;
    }

    public function getLogourl(): ?string    {
        return $this->logoUrl;
    }

    public function setLogourl(?string $logoUrl): self
    {
        $this->logoUrl = $logoUrl;
        return $this;
    }

    public function getIndustry(): ?string    {
        return $this->industry;
    }

    public function setIndustry(?string $industry): self
    {
        $this->industry = $industry;
        return $this;
    }

    public function getAddress(): ?string    {
        return $this->address;
    }

    public function setAddress(?string $address): self
    {
        $this->address = $address;
        return $this;
    }

    public function getWebsite(): ?string    {
        return $this->website;
    }

    public function setWebsite(?string $website): self
    {
        $this->website = $website;
        return $this;
    }

    public function getActive(): bool    {
        return $this->active;
    }

    public function setActive(bool $active): self
    {
        $this->active = $active;
        return $this;
    }

    public function isActive(): bool
    {
        return $this->active === true;
    }

    /**
     * @return Collection<int, App\Entity\Agent>
     */
    public function getAgents(): Collection
    {
        return $this->agents;
    }

    public function addAgent(App\Entity\Agent $agent): self
    {
        if (!$this->agents->contains($agent)) {
            $this->agents->add($agent);
            $agent->setOrganization($this);
        }
        return $this;
    }

    public function removeAgent(App\Entity\Agent $agent): self
    {
        if ($this->agents->removeElement($agent)) {
            if ($agent->getOrganization() === $this) {
                $agent->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Product>
     */
    public function getProducts(): Collection
    {
        return $this->products;
    }

    public function addProduct(App\Entity\Product $product): self
    {
        if (!$this->products->contains($product)) {
            $this->products->add($product);
            $product->setOrganization($this);
        }
        return $this;
    }

    public function removeProduct(App\Entity\Product $product): self
    {
        if ($this->products->removeElement($product)) {
            if ($product->getOrganization() === $this) {
                $product->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\BillingFrequency>
     */
    public function getBillingfrequencies(): Collection
    {
        return $this->billingFrequencies;
    }

    public function addBillingfrequency(App\Entity\BillingFrequency $billingFrequency): self
    {
        if (!$this->billingFrequencies->contains($billingFrequency)) {
            $this->billingFrequencies->add($billingFrequency);
            $billingFrequency->setOrganization($this);
        }
        return $this;
    }

    public function removeBillingfrequency(App\Entity\BillingFrequency $billingFrequency): self
    {
        if ($this->billingFrequencies->removeElement($billingFrequency)) {
            if ($billingFrequency->getOrganization() === $this) {
                $billingFrequency->setOrganization(null);
            }
        }
        return $this;
    }

    public function getBranding(): ?array    {
        return $this->branding;
    }

    public function setBranding(?array $branding): self
    {
        $this->branding = $branding;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Brand>
     */
    public function getBrands(): Collection
    {
        return $this->brands;
    }

    public function addBrand(App\Entity\Brand $brand): self
    {
        if (!$this->brands->contains($brand)) {
            $this->brands->add($brand);
            $brand->setOrganization($this);
        }
        return $this;
    }

    public function removeBrand(App\Entity\Brand $brand): self
    {
        if ($this->brands->removeElement($brand)) {
            if ($brand->getOrganization() === $this) {
                $brand->setOrganization(null);
            }
        }
        return $this;
    }

    public function getBusinessphone(): ?string    {
        return $this->businessPhone;
    }

    public function setBusinessphone(?string $businessPhone): self
    {
        $this->businessPhone = $businessPhone;
        return $this;
    }

    public function getBusinesssettings(): ?array    {
        return $this->businessSettings;
    }

    public function setBusinesssettings(?array $businessSettings): self
    {
        $this->businessSettings = $businessSettings;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Calendar>
     */
    public function getCalendars(): Collection
    {
        return $this->calendars;
    }

    public function addCalendar(App\Entity\Calendar $calendar): self
    {
        if (!$this->calendars->contains($calendar)) {
            $this->calendars->add($calendar);
            $calendar->setOrganization($this);
        }
        return $this;
    }

    public function removeCalendar(App\Entity\Calendar $calendar): self
    {
        if ($this->calendars->removeElement($calendar)) {
            if ($calendar->getOrganization() === $this) {
                $calendar->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Campaign>
     */
    public function getCampaigns(): Collection
    {
        return $this->campaigns;
    }

    public function addCampaign(App\Entity\Campaign $campaign): self
    {
        if (!$this->campaigns->contains($campaign)) {
            $this->campaigns->add($campaign);
            $campaign->setOrganization($this);
        }
        return $this;
    }

    public function removeCampaign(App\Entity\Campaign $campaign): self
    {
        if ($this->campaigns->removeElement($campaign)) {
            if ($campaign->getOrganization() === $this) {
                $campaign->setOrganization(null);
            }
        }
        return $this;
    }

    public function getCelphone(): ?string    {
        return $this->celPhone;
    }

    public function setCelphone(?string $celPhone): self
    {
        $this->celPhone = $celPhone;
        return $this;
    }

    public function getCity(): ?App\Entity\City
    {
        return $this->city;
    }

    public function setCity(?App\Entity\City $city): self
    {
        $this->city = $city;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Company>
     */
    public function getCompanies(): Collection
    {
        return $this->companies;
    }

    public function addCompany(App\Entity\Company $company): self
    {
        if (!$this->companies->contains($company)) {
            $this->companies->add($company);
            $company->setOrganization($this);
        }
        return $this;
    }

    public function removeCompany(App\Entity\Company $company): self
    {
        if ($this->companies->removeElement($company)) {
            if ($company->getOrganization() === $this) {
                $company->setOrganization(null);
            }
        }
        return $this;
    }

    public function getCompanysize(): ?int    {
        return $this->companySize;
    }

    public function setCompanysize(?int $companySize): self
    {
        $this->companySize = $companySize;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Competitor>
     */
    public function getCompetitors(): Collection
    {
        return $this->competitors;
    }

    public function addCompetitor(App\Entity\Competitor $competitor): self
    {
        if (!$this->competitors->contains($competitor)) {
            $this->competitors->add($competitor);
            $competitor->setOrganization($this);
        }
        return $this;
    }

    public function removeCompetitor(App\Entity\Competitor $competitor): self
    {
        if ($this->competitors->removeElement($competitor)) {
            if ($competitor->getOrganization() === $this) {
                $competitor->setOrganization(null);
            }
        }
        return $this;
    }

    public function getContactname(): ?string    {
        return $this->contactName;
    }

    public function setContactname(?string $contactName): self
    {
        $this->contactName = $contactName;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Contact>
     */
    public function getContacts(): Collection
    {
        return $this->contacts;
    }

    public function addContact(App\Entity\Contact $contact): self
    {
        if (!$this->contacts->contains($contact)) {
            $this->contacts->add($contact);
            $contact->setOrganization($this);
        }
        return $this;
    }

    public function removeContact(App\Entity\Contact $contact): self
    {
        if ($this->contacts->removeElement($contact)) {
            if ($contact->getOrganization() === $this) {
                $contact->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Course>
     */
    public function getCourses(): Collection
    {
        return $this->courses;
    }

    public function addCoure(App\Entity\Course $coure): self
    {
        if (!$this->courses->contains($coure)) {
            $this->courses->add($coure);
            $coure->setOrganization($this);
        }
        return $this;
    }

    public function removeCoure(App\Entity\Course $coure): self
    {
        if ($this->courses->removeElement($coure)) {
            if ($coure->getOrganization() === $this) {
                $coure->setOrganization(null);
            }
        }
        return $this;
    }

    public function getCurrency(): ?string    {
        return $this->currency;
    }

    public function setCurrency(?string $currency): self
    {
        $this->currency = $currency;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\DealStage>
     */
    public function getDealstages(): Collection
    {
        return $this->dealStages;
    }

    public function addDealtage(App\Entity\DealStage $dealStage): self
    {
        if (!$this->dealStages->contains($dealStage)) {
            $this->dealStages->add($dealStage);
            $dealStage->setOrganization($this);
        }
        return $this;
    }

    public function removeDealtage(App\Entity\DealStage $dealStage): self
    {
        if ($this->dealStages->removeElement($dealStage)) {
            if ($dealStage->getOrganization() === $this) {
                $dealStage->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Deal>
     */
    public function getDeals(): Collection
    {
        return $this->deals;
    }

    public function addDeal(App\Entity\Deal $deal): self
    {
        if (!$this->deals->contains($deal)) {
            $this->deals->add($deal);
            $deal->setOrganization($this);
        }
        return $this;
    }

    public function removeDeal(App\Entity\Deal $deal): self
    {
        if ($this->deals->removeElement($deal)) {
            if ($deal->getOrganization() === $this) {
                $deal->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\EventCategory>
     */
    public function getEventcategories(): Collection
    {
        return $this->eventCategories;
    }

    public function addEventcategory(App\Entity\EventCategory $eventCategory): self
    {
        if (!$this->eventCategories->contains($eventCategory)) {
            $this->eventCategories->add($eventCategory);
            $eventCategory->setOrganization($this);
        }
        return $this;
    }

    public function removeEventcategory(App\Entity\EventCategory $eventCategory): self
    {
        if ($this->eventCategories->removeElement($eventCategory)) {
            if ($eventCategory->getOrganization() === $this) {
                $eventCategory->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\EventResourceBooking>
     */
    public function getEventresourcebookings(): Collection
    {
        return $this->eventResourceBookings;
    }

    public function addEventreourcebooking(App\Entity\EventResourceBooking $eventReourceBooking): self
    {
        if (!$this->eventResourceBookings->contains($eventReourceBooking)) {
            $this->eventResourceBookings->add($eventReourceBooking);
            $eventReourceBooking->setOrganization($this);
        }
        return $this;
    }

    public function removeEventreourcebooking(App\Entity\EventResourceBooking $eventReourceBooking): self
    {
        if ($this->eventResourceBookings->removeElement($eventReourceBooking)) {
            if ($eventReourceBooking->getOrganization() === $this) {
                $eventReourceBooking->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\EventResourceType>
     */
    public function getEventresourcetypes(): Collection
    {
        return $this->eventResourceTypes;
    }

    public function addEventreourcetype(App\Entity\EventResourceType $eventReourceType): self
    {
        if (!$this->eventResourceTypes->contains($eventReourceType)) {
            $this->eventResourceTypes->add($eventReourceType);
            $eventReourceType->setOrganization($this);
        }
        return $this;
    }

    public function removeEventreourcetype(App\Entity\EventResourceType $eventReourceType): self
    {
        if ($this->eventResourceTypes->removeElement($eventReourceType)) {
            if ($eventReourceType->getOrganization() === $this) {
                $eventReourceType->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\EventResource>
     */
    public function getEventresources(): Collection
    {
        return $this->eventResources;
    }

    public function addEventreource(App\Entity\EventResource $eventReource): self
    {
        if (!$this->eventResources->contains($eventReource)) {
            $this->eventResources->add($eventReource);
            $eventReource->setOrganization($this);
        }
        return $this;
    }

    public function removeEventreource(App\Entity\EventResource $eventReource): self
    {
        if ($this->eventResources->removeElement($eventReource)) {
            if ($eventReource->getOrganization() === $this) {
                $eventReource->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Event>
     */
    public function getEvents(): Collection
    {
        return $this->events;
    }

    public function addEvent(App\Entity\Event $event): self
    {
        if (!$this->events->contains($event)) {
            $this->events->add($event);
            $event->setOrganization($this);
        }
        return $this;
    }

    public function removeEvent(App\Entity\Event $event): self
    {
        if ($this->events->removeElement($event)) {
            if ($event->getOrganization() === $this) {
                $event->setOrganization(null);
            }
        }
        return $this;
    }

    public function getFeatureflags(): ?array    {
        return $this->featureFlags;
    }

    public function setFeatureflags(?array $featureFlags): self
    {
        $this->featureFlags = $featureFlags;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Flag>
     */
    public function getFlags(): Collection
    {
        return $this->flags;
    }

    public function addFlag(App\Entity\Flag $flag): self
    {
        if (!$this->flags->contains($flag)) {
            $this->flags->add($flag);
            $flag->setOrganization($this);
        }
        return $this;
    }

    public function removeFlag(App\Entity\Flag $flag): self
    {
        if ($this->flags->removeElement($flag)) {
            if ($flag->getOrganization() === $this) {
                $flag->setOrganization(null);
            }
        }
        return $this;
    }

    public function getGeo(): ?string    {
        return $this->geo;
    }

    public function setGeo(?string $geo): self
    {
        $this->geo = $geo;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Holiday>
     */
    public function getHolidays(): Collection
    {
        return $this->holidays;
    }

    public function addHoliday(App\Entity\Holiday $holiday): self
    {
        if (!$this->holidays->contains($holiday)) {
            $this->holidays->add($holiday);
            $holiday->setOrganization($this);
        }
        return $this;
    }

    public function removeHoliday(App\Entity\Holiday $holiday): self
    {
        if ($this->holidays->removeElement($holiday)) {
            if ($holiday->getOrganization() === $this) {
                $holiday->setOrganization(null);
            }
        }
        return $this;
    }

    public function getIntegrationconfig(): ?array    {
        return $this->integrationConfig;
    }

    public function setIntegrationconfig(?array $integrationConfig): self
    {
        $this->integrationConfig = $integrationConfig;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\LeadSource>
     */
    public function getLeadsources(): Collection
    {
        return $this->leadSources;
    }

    public function addLeadource(App\Entity\LeadSource $leadSource): self
    {
        if (!$this->leadSources->contains($leadSource)) {
            $this->leadSources->add($leadSource);
            $leadSource->setOrganization($this);
        }
        return $this;
    }

    public function removeLeadource(App\Entity\LeadSource $leadSource): self
    {
        if ($this->leadSources->removeElement($leadSource)) {
            if ($leadSource->getOrganization() === $this) {
                $leadSource->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Lecture>
     */
    public function getLectures(): Collection
    {
        return $this->lectures;
    }

    public function addLecture(App\Entity\Lecture $lecture): self
    {
        if (!$this->lectures->contains($lecture)) {
            $this->lectures->add($lecture);
            $lecture->setOrganization($this);
        }
        return $this;
    }

    public function removeLecture(App\Entity\Lecture $lecture): self
    {
        if ($this->lectures->removeElement($lecture)) {
            if ($lecture->getOrganization() === $this) {
                $lecture->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Module>
     */
    public function getModules(): Collection
    {
        return $this->modules;
    }

    public function addModule(App\Entity\Module $module): self
    {
        if (!$this->modules->contains($module)) {
            $this->modules->add($module);
        }
        return $this;
    }

    public function removeModule(App\Entity\Module $module): self
    {
        if ($this->modules->removeElement($module)) {
        }
        return $this;
    }

    public function getNavconfig(): ?array    {
        return $this->navConfig;
    }

    public function setNavconfig(?array $navConfig): self
    {
        $this->navConfig = $navConfig;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\NotificationType>
     */
    public function getNotificationtypes(): Collection
    {
        return $this->notificationTypes;
    }

    public function addNotificationtype(App\Entity\NotificationType $notificationType): self
    {
        if (!$this->notificationTypes->contains($notificationType)) {
            $this->notificationTypes->add($notificationType);
            $notificationType->setOrganization($this);
        }
        return $this;
    }

    public function removeNotificationtype(App\Entity\NotificationType $notificationType): self
    {
        if ($this->notificationTypes->removeElement($notificationType)) {
            if ($notificationType->getOrganization() === $this) {
                $notificationType->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\PipelineStage>
     */
    public function getPipelinestages(): Collection
    {
        return $this->pipelineStages;
    }

    public function addPipelinetage(App\Entity\PipelineStage $pipelineStage): self
    {
        if (!$this->pipelineStages->contains($pipelineStage)) {
            $this->pipelineStages->add($pipelineStage);
            $pipelineStage->setOrganization($this);
        }
        return $this;
    }

    public function removePipelinetage(App\Entity\PipelineStage $pipelineStage): self
    {
        if ($this->pipelineStages->removeElement($pipelineStage)) {
            if ($pipelineStage->getOrganization() === $this) {
                $pipelineStage->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Pipeline>
     */
    public function getPipelines(): Collection
    {
        return $this->pipelines;
    }

    public function addPipeline(App\Entity\Pipeline $pipeline): self
    {
        if (!$this->pipelines->contains($pipeline)) {
            $this->pipelines->add($pipeline);
            $pipeline->setOrganization($this);
        }
        return $this;
    }

    public function removePipeline(App\Entity\Pipeline $pipeline): self
    {
        if ($this->pipelines->removeElement($pipeline)) {
            if ($pipeline->getOrganization() === $this) {
                $pipeline->setOrganization(null);
            }
        }
        return $this;
    }

    public function getPostalcode(): ?string    {
        return $this->postalCode;
    }

    public function setPostalcode(?string $postalCode): self
    {
        $this->postalCode = $postalCode;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\ProductBatch>
     */
    public function getProductbatches(): Collection
    {
        return $this->productBatches;
    }

    public function addProductbatche(App\Entity\ProductBatch $productBatche): self
    {
        if (!$this->productBatches->contains($productBatche)) {
            $this->productBatches->add($productBatche);
            $productBatche->setOrganization($this);
        }
        return $this;
    }

    public function removeProductbatche(App\Entity\ProductBatch $productBatche): self
    {
        if ($this->productBatches->removeElement($productBatche)) {
            if ($productBatche->getOrganization() === $this) {
                $productBatche->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\ProductCategory>
     */
    public function getProductcategories(): Collection
    {
        return $this->productCategories;
    }

    public function addProductcategory(App\Entity\ProductCategory $productCategory): self
    {
        if (!$this->productCategories->contains($productCategory)) {
            $this->productCategories->add($productCategory);
            $productCategory->setOrganization($this);
        }
        return $this;
    }

    public function removeProductcategory(App\Entity\ProductCategory $productCategory): self
    {
        if ($this->productCategories->removeElement($productCategory)) {
            if ($productCategory->getOrganization() === $this) {
                $productCategory->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\ProductLine>
     */
    public function getProductlines(): Collection
    {
        return $this->productLines;
    }

    public function addProductline(App\Entity\ProductLine $productLine): self
    {
        if (!$this->productLines->contains($productLine)) {
            $this->productLines->add($productLine);
            $productLine->setOrganization($this);
        }
        return $this;
    }

    public function removeProductline(App\Entity\ProductLine $productLine): self
    {
        if ($this->productLines->removeElement($productLine)) {
            if ($productLine->getOrganization() === $this) {
                $productLine->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Profile>
     */
    public function getProfiles(): Collection
    {
        return $this->profiles;
    }

    public function addProfile(App\Entity\Profile $profile): self
    {
        if (!$this->profiles->contains($profile)) {
            $this->profiles->add($profile);
            $profile->setOrganization($this);
        }
        return $this;
    }

    public function removeProfile(App\Entity\Profile $profile): self
    {
        if ($this->profiles->removeElement($profile)) {
            if ($profile->getOrganization() === $this) {
                $profile->setOrganization(null);
            }
        }
        return $this;
    }

    public function getSecurityconfig(): ?array    {
        return $this->securityConfig;
    }

    public function setSecurityconfig(?array $securityConfig): self
    {
        $this->securityConfig = $securityConfig;
        return $this;
    }

    public function getSlug(): string    {
        return $this->slug;
    }

    public function setSlug(string $slug): self
    {
        $this->slug = $slug;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\SocialMedia>
     */
    public function getSocialmedias(): Collection
    {
        return $this->socialMedias;
    }

    public function addSocialmedia(App\Entity\SocialMedia $ocialMedia): self
    {
        if (!$this->socialMedias->contains($ocialMedia)) {
            $this->socialMedias->add($ocialMedia);
            $ocialMedia->setOrganization($this);
        }
        return $this;
    }

    public function removeSocialmedia(App\Entity\SocialMedia $ocialMedia): self
    {
        if ($this->socialMedias->removeElement($ocialMedia)) {
            if ($ocialMedia->getOrganization() === $this) {
                $ocialMedia->setOrganization(null);
            }
        }
        return $this;
    }

    public function getStatus(): ?int    {
        return $this->status;
    }

    public function setStatus(?int $status): self
    {
        $this->status = $status;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Tag>
     */
    public function getTags(): Collection
    {
        return $this->tags;
    }

    public function addTag(App\Entity\Tag $tag): self
    {
        if (!$this->tags->contains($tag)) {
            $this->tags->add($tag);
            $tag->setOrganization($this);
        }
        return $this;
    }

    public function removeTag(App\Entity\Tag $tag): self
    {
        if ($this->tags->removeElement($tag)) {
            if ($tag->getOrganization() === $this) {
                $tag->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\TalkMessage>
     */
    public function getTalkmessages(): Collection
    {
        return $this->talkMessages;
    }

    public function addTalkmeage(App\Entity\TalkMessage $talkMeage): self
    {
        if (!$this->talkMessages->contains($talkMeage)) {
            $this->talkMessages->add($talkMeage);
            $talkMeage->setOrganization($this);
        }
        return $this;
    }

    public function removeTalkmeage(App\Entity\TalkMessage $talkMeage): self
    {
        if ($this->talkMessages->removeElement($talkMeage)) {
            if ($talkMeage->getOrganization() === $this) {
                $talkMeage->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\TalkType>
     */
    public function getTalktypes(): Collection
    {
        return $this->talkTypes;
    }

    public function addTalktype(App\Entity\TalkType $talkType): self
    {
        if (!$this->talkTypes->contains($talkType)) {
            $this->talkTypes->add($talkType);
            $talkType->setOrganization($this);
        }
        return $this;
    }

    public function removeTalktype(App\Entity\TalkType $talkType): self
    {
        if ($this->talkTypes->removeElement($talkType)) {
            if ($talkType->getOrganization() === $this) {
                $talkType->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Talk>
     */
    public function getTalks(): Collection
    {
        return $this->talks;
    }

    public function addTalk(App\Entity\Talk $talk): self
    {
        if (!$this->talks->contains($talk)) {
            $this->talks->add($talk);
            $talk->setOrganization($this);
        }
        return $this;
    }

    public function removeTalk(App\Entity\Talk $talk): self
    {
        if ($this->talks->removeElement($talk)) {
            if ($talk->getOrganization() === $this) {
                $talk->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\TaskType>
     */
    public function getTasktypes(): Collection
    {
        return $this->taskTypes;
    }

    public function addTaktype(App\Entity\TaskType $takType): self
    {
        if (!$this->taskTypes->contains($takType)) {
            $this->taskTypes->add($takType);
            $takType->setOrganization($this);
        }
        return $this;
    }

    public function removeTaktype(App\Entity\TaskType $takType): self
    {
        if ($this->taskTypes->removeElement($takType)) {
            if ($takType->getOrganization() === $this) {
                $takType->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Task>
     */
    public function getTasks(): Collection
    {
        return $this->tasks;
    }

    public function addTak(App\Entity\Task $tak): self
    {
        if (!$this->tasks->contains($tak)) {
            $this->tasks->add($tak);
            $tak->setOrganization($this);
        }
        return $this;
    }

    public function removeTak(App\Entity\Task $tak): self
    {
        if ($this->tasks->removeElement($tak)) {
            if ($tak->getOrganization() === $this) {
                $tak->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\TaxCategory>
     */
    public function getTaxcategories(): Collection
    {
        return $this->taxCategories;
    }

    public function addTaxcategory(App\Entity\TaxCategory $taxCategory): self
    {
        if (!$this->taxCategories->contains($taxCategory)) {
            $this->taxCategories->add($taxCategory);
            $taxCategory->setOrganization($this);
        }
        return $this;
    }

    public function removeTaxcategory(App\Entity\TaxCategory $taxCategory): self
    {
        if ($this->taxCategories->removeElement($taxCategory)) {
            if ($taxCategory->getOrganization() === $this) {
                $taxCategory->setOrganization(null);
            }
        }
        return $this;
    }

    public function getTimezone(): string    {
        return $this->timeZone;
    }

    public function setTimezone(string $timeZone): self
    {
        $this->timeZone = $timeZone;
        return $this;
    }

    public function getUipreferences(): ?array    {
        return $this->uiPreferences;
    }

    public function setUipreferences(?array $uiPreferences): self
    {
        $this->uiPreferences = $uiPreferences;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\User>
     */
    public function getUsers(): Collection
    {
        return $this->users;
    }

    public function addUer(App\Entity\User $uer): self
    {
        if (!$this->users->contains($uer)) {
            $this->users->add($uer);
            $uer->setOrganization($this);
        }
        return $this;
    }

    public function removeUer(App\Entity\User $uer): self
    {
        if ($this->users->removeElement($uer)) {
            if ($uer->getOrganization() === $this) {
                $uer->setOrganization(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\WorkingHour>
     */
    public function getWorkinghours(): Collection
    {
        return $this->workingHours;
    }

    public function addWorkinghour(App\Entity\WorkingHour $workingHour): self
    {
        if (!$this->workingHours->contains($workingHour)) {
            $this->workingHours->add($workingHour);
            $workingHour->setOrganization($this);
        }
        return $this;
    }

    public function removeWorkinghour(App\Entity\WorkingHour $workingHour): self
    {
        if ($this->workingHours->removeElement($workingHour)) {
            if ($workingHour->getOrganization() === $this) {
                $workingHour->setOrganization(null);
            }
        }
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? ($this->getId()?->toRfc4122() ?? '');
    }
}
