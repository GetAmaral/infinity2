<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use App\Entity\Trait\OrganizationTrait;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
                                                                                                                use App\Entity\Contact;
use App\Entity\User;
use App\Entity\Agent;
use App\Entity\Deal;
use App\Entity\TalkType;
use App\Entity\Campaign;
use App\Entity\TalkMessage;

/**
 * Talk Entity (Generated Base Class)
 *
 * 
 *
 * This class is ALWAYS regenerated from CSV. DO NOT edit this file.
 * Add custom logic to Talk.php instead.
 *
 * @generated by Luminai Code Generator
 * @see /config/EntityNew.csv and /config/PropertyNew.csv
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class TalkGenerated extends EntityBase
{
    use OrganizationTrait;

    #[ORM\ManyToOne(targetEntity: Contact::class, inversedBy: 'talks')]
    #[Groups(['talk:read', 'talk:write'])]
    protected ?Contact $contact = null;

    #[ORM\ManyToMany(targetEntity: User::class, inversedBy: 'talks', fetch: 'LAZY')]
    #[Groups(['talk:read', 'talk:write'])]
    protected Collection $users;

    #[ORM\ManyToMany(targetEntity: Agent::class, inversedBy: 'talks', fetch: 'LAZY')]
    #[Groups(['talk:read', 'talk:write'])]
    protected Collection $agents;

    #[ORM\ManyToOne(targetEntity: Deal::class, inversedBy: 'talks')]
    #[Groups(['talk:read', 'talk:write'])]
    protected ?Deal $deal = null;

    #[ORM\ManyToOne(targetEntity: TalkType::class, inversedBy: 'talks')]
    #[Groups(['talk:read', 'talk:write'])]
    protected ?TalkType $talkType = null;

    #[ORM\ManyToMany(targetEntity: Campaign::class, inversedBy: 'talks', fetch: 'LAZY')]
    #[Groups(['talk:read', 'talk:write'])]
    protected Collection $campaigns;

    #[ORM\Column(type: 'datetime', nullable: true)]
    #[Groups(['talk:read', 'talk:write'])]
    protected ?\DateTimeInterface $dateStart = null;

    #[ORM\Column(type: 'datetime', nullable: true)]
    #[Groups(['talk:read', 'talk:write'])]
    protected ?\DateTimeInterface $dateLastMessage = null;

    #[ORM\Column(type: 'integer', nullable: true)]
    #[Groups(['talk:read', 'talk:write'])]
    protected ?int $status = null;

    #[ORM\Column(type: 'text', nullable: true)]
    #[Groups(['talk:read', 'talk:write'])]
    protected ?string $summary = null;

    #[ORM\Column(type: 'string', nullable: true)]
    #[Assert\Length(max: 255)]
    #[Groups(['talk:read', 'talk:write'])]
    protected ?string $subject = null;

    #[ORM\OneToMany(targetEntity: TalkMessage::class, mappedBy: 'talk', cascade: ['persist', 'remove'], orphanRemoval: true, fetch: 'LAZY')]
    #[Groups(['talk:read', 'talk:write'])]
    protected Collection $messages;

    #[ORM\Column(type: 'integer', nullable: true)]
    #[Groups(['talk:read', 'talk:write'])]
    protected ?int $outcome = null;

    #[ORM\Column(type: 'integer', nullable: true)]
    #[Groups(['talk:read', 'talk:write'])]
    protected ?int $priority = null;

    #[ORM\Column(type: 'integer', nullable: true)]
    #[Groups(['talk:read', 'talk:write'])]
    protected ?int $channel = null;

    #[ORM\Column(type: 'integer', nullable: true)]
    #[Groups(['talk:read', 'talk:write'])]
    protected ?int $durationSeconds = null;

    #[ORM\Column(type: 'integer', nullable: true)]
    #[Groups(['talk:read', 'talk:write'])]
    protected ?int $recordingUrl = null;

    #[ORM\Column(type: 'boolean', nullable: true)]
    #[Groups(['talk:read', 'talk:write'])]
    protected ?bool $isArchived = null;


    public function __construct()
    {
        parent::__construct();
        $this->users = new ArrayCollection();
        $this->agents = new ArrayCollection();
        $this->campaigns = new ArrayCollection();
        $this->messages = new ArrayCollection();
    }

    public function getContact(): ?Contact
    {
        return $this->contact;
    }

    public function setContact(?Contact $contact): self
    {
        $this->contact = $contact;
        return $this;
    }

    /**
     * @return Collection<int, User>
     */
    public function getUsers(): Collection
    {
        return $this->users;
    }

    public function addUser(User $user): self
    {
        if (!$this->users->contains($user)) {
            $this->users->add($user);
        }
        return $this;
    }

    public function removeUser(User $user): self
    {
        if ($this->users->removeElement($user)) {
        }
        return $this;
    }

    /**
     * @return Collection<int, Agent>
     */
    public function getAgents(): Collection
    {
        return $this->agents;
    }

    public function addAgent(Agent $agent): self
    {
        if (!$this->agents->contains($agent)) {
            $this->agents->add($agent);
        }
        return $this;
    }

    public function removeAgent(Agent $agent): self
    {
        if ($this->agents->removeElement($agent)) {
        }
        return $this;
    }

    public function getDeal(): ?Deal
    {
        return $this->deal;
    }

    public function setDeal(?Deal $deal): self
    {
        $this->deal = $deal;
        return $this;
    }

    public function getTalktype(): ?TalkType
    {
        return $this->talkType;
    }

    public function setTalktype(?TalkType $talkType): self
    {
        $this->talkType = $talkType;
        return $this;
    }

    /**
     * @return Collection<int, Campaign>
     */
    public function getCampaigns(): Collection
    {
        return $this->campaigns;
    }

    public function addCampaign(Campaign $campaign): self
    {
        if (!$this->campaigns->contains($campaign)) {
            $this->campaigns->add($campaign);
        }
        return $this;
    }

    public function removeCampaign(Campaign $campaign): self
    {
        if ($this->campaigns->removeElement($campaign)) {
        }
        return $this;
    }

    public function getDatestart(): ?\DateTimeInterface
    {
        return $this->dateStart;
    }

    public function setDatestart(?\DateTimeInterface $dateStart): self
    {
        $this->dateStart = $dateStart;
        return $this;
    }

    
    public function getDatelastmessage(): ?\DateTimeInterface
    {
        return $this->dateLastMessage;
    }

    public function setDatelastmessage(?\DateTimeInterface $dateLastMessage): self
    {
        $this->dateLastMessage = $dateLastMessage;
        return $this;
    }

    
    public function getStatus(): ?int
    {
        return $this->status;
    }

    public function setStatus(?int $status): self
    {
        $this->status = $status;
        return $this;
    }

    
    public function getSummary(): ?string
    {
        return $this->summary;
    }

    public function setSummary(?string $summary): self
    {
        $this->summary = $summary;
        return $this;
    }

    
    public function getSubject(): ?string
    {
        return $this->subject;
    }

    public function setSubject(?string $subject): self
    {
        $this->subject = $subject;
        return $this;
    }

    
    /**
     * @return Collection<int, TalkMessage>
     */
    public function getMessages(): Collection
    {
        return $this->messages;
    }

    public function addMessage(TalkMessage $message): self
    {
        if (!$this->messages->contains($message)) {
            $this->messages->add($message);
        }
        return $this;
    }

    public function removeMessage(TalkMessage $message): self
    {
        if ($this->messages->removeElement($message)) {
        }
        return $this;
    }

    public function getOutcome(): ?int
    {
        return $this->outcome;
    }

    public function setOutcome(?int $outcome): self
    {
        $this->outcome = $outcome;
        return $this;
    }

    
    public function getPriority(): ?int
    {
        return $this->priority;
    }

    public function setPriority(?int $priority): self
    {
        $this->priority = $priority;
        return $this;
    }

    
    public function getChannel(): ?int
    {
        return $this->channel;
    }

    public function setChannel(?int $channel): self
    {
        $this->channel = $channel;
        return $this;
    }

    
    public function getDurationseconds(): ?int
    {
        return $this->durationSeconds;
    }

    public function setDurationseconds(?int $durationSeconds): self
    {
        $this->durationSeconds = $durationSeconds;
        return $this;
    }

    
    public function getRecordingurl(): ?int
    {
        return $this->recordingUrl;
    }

    public function setRecordingurl(?int $recordingUrl): self
    {
        $this->recordingUrl = $recordingUrl;
        return $this;
    }

    
    public function getIsarchived(): ?bool
    {
        return $this->isArchived;
    }

    public function setIsarchived(?bool $isArchived): self
    {
        $this->isArchived = $isArchived;
        return $this;
    }

    

    public function __toString(): string
    {
        return (string) $this->getId()->toRfc4122();
    }
}
