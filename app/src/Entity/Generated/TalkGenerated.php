<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
use App\Entity\Organization;
use App\Entity\Company;
use App\Entity\Deal;
use App\Entity\TalkType;
use App\Entity\User;
use App\Entity\Agent;
use App\Entity\Campaign;
use App\Entity\TalkMessage;

/**
 * Talk Entity (Generated Base Class)
 *
 * Communication threads with customers and prospects *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to Talk.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class TalkGenerated extends EntityBase
{
    #[Groups(['talk:read', 'talk:write'])]
    #[ORM\ManyToOne(targetEntity: Organization::class, inversedBy: 'talks')]
    #[ORM\JoinColumn(nullable: false)]
    protected Organization $organization;

    #[Groups(['talk:read', 'talk:write'])]
    #[ORM\Column(type: 'string', length: 255)]
    protected string $subject;

    #[Groups(['talk:read', 'talk:write'])]
    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $summary = null;

    #[Groups(['talk:read', 'talk:write'])]
    #[ORM\ManyToOne(targetEntity: Company::class, inversedBy: 'talks')]
    protected ?Company $company = null;

    #[Groups(['talk:read', 'talk:write'])]
    #[ORM\ManyToOne(targetEntity: Deal::class, inversedBy: 'talks')]
    protected ?Deal $deal = null;

    #[Groups(['talk:read', 'talk:write'])]
    #[ORM\ManyToOne(targetEntity: TalkType::class, inversedBy: 'talks')]
    #[ORM\JoinColumn(nullable: false)]
    protected TalkType $talkType;

    #[Groups(['talk:read', 'talk:write'])]
    #[ORM\Column(type: 'integer')]
    protected int $channel = 0;

    #[Groups(['talk:read', 'talk:write'])]
    #[ORM\Column(type: 'integer')]
    protected int $status = 0;

    #[Groups(['talk:read', 'talk:write'])]
    #[ORM\Column(type: 'integer', nullable: true)]
    #[Assert\Range(max: 5, min: 1)]
    protected ?int $priority = null;

    #[Groups(['talk:read', 'talk:write'])]
    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $outcome = null;

    #[Groups(['talk:read', 'talk:write'])]
    #[ORM\Column(type: 'string', length: 50, nullable: true)]
    #[Assert\Length(max: 50)]
    protected ?string $sentiment = null;

    #[Groups(['talk:read', 'talk:write'])]
    #[ORM\Column(type: 'datetime', nullable: true)]
    protected ?\DateTimeImmutable $dateStart = null;

    #[Groups(['talk:read', 'talk:write'])]
    #[ORM\Column(type: 'datetime', nullable: true)]
    protected ?\DateTimeImmutable $dateLastMessage = null;

    #[Groups(['talk:read', 'talk:write'])]
    #[ORM\Column(type: 'datetime', nullable: true)]
    protected ?\DateTimeImmutable $closedAt = null;

    #[Groups(['talk:read', 'talk:write'])]
    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $durationSeconds = null;

    #[Groups(['talk:read', 'talk:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $recordingUrl = null;

    #[Groups(['talk:read'])]
    #[ORM\ManyToMany(targetEntity: User::class, inversedBy: 'talks', fetch: 'LAZY')]
    #[ORM\JoinTable(name: 'talk_users')]
    protected Collection $users;

    #[Groups(['talk:read', 'talk:write'])]
    #[ORM\ManyToOne(targetEntity: User::class)]
    #[ORM\JoinColumn(nullable: false)]
    protected User $owner;

    #[Groups(['talk:read', 'talk:write'])]
    #[ORM\ManyToOne(targetEntity: User::class)]
    protected ?User $assignedTo = null;

    #[Groups(['talk:read'])]
    #[ORM\ManyToMany(targetEntity: Agent::class, inversedBy: 'talks', fetch: 'LAZY')]
    #[ORM\JoinTable(name: 'talk_agents')]
    protected Collection $agents;

    #[Groups(['talk:read'])]
    #[ORM\ManyToMany(targetEntity: Campaign::class, mappedBy: 'talks', fetch: 'LAZY')]
    protected Collection $campaigns;

    #[Groups(['talk:read'])]
    #[ORM\OneToMany(targetEntity: TalkMessage::class, mappedBy: 'talk', orphanRemoval: true, fetch: 'LAZY')]
    protected Collection $messages;

    #[Groups(['talk:read', 'talk:write'])]
    #[ORM\Column(type: 'integer')]
    #[Assert\Range(max: 150, min: 0)]
    protected int $messageCount = 0;

    #[Groups(['talk:read', 'talk:write'])]
    #[ORM\Column(type: 'boolean')]
    protected bool $archived = false;

    #[Groups(['talk:read', 'talk:write'])]
    #[ORM\Column(type: 'boolean')]
    protected bool $internal = false;

    #[Groups(['talk:read', 'talk:write'])]
    #[ORM\Column(type: 'json', nullable: true)]
    protected ?array $tags = null;


    public function __construct()
    {
        parent::__construct();
        $this->users = new ArrayCollection();
        $this->agents = new ArrayCollection();
        $this->campaigns = new ArrayCollection();
        $this->messages = new ArrayCollection();
    }

    public function getOrganization(): App\Entity\Organization
    {
        return $this->organization;
    }

    public function setOrganization(App\Entity\Organization $organization): self
    {
        $this->organization = $organization;
        return $this;
    }

    public function getSubject(): string    {
        return $this->subject;
    }

    public function setSubject(string $subject): self
    {
        $this->subject = $subject;
        return $this;
    }

    public function getSummary(): ?string    {
        return $this->summary;
    }

    public function setSummary(?string $summary): self
    {
        $this->summary = $summary;
        return $this;
    }

    public function getCompany(): ?App\Entity\Company
    {
        return $this->company;
    }

    public function setCompany(?App\Entity\Company $company): self
    {
        $this->company = $company;
        return $this;
    }

    public function getDeal(): ?App\Entity\Deal
    {
        return $this->deal;
    }

    public function setDeal(?App\Entity\Deal $deal): self
    {
        $this->deal = $deal;
        return $this;
    }

    public function getTalkType(): App\Entity\TalkType
    {
        return $this->talkType;
    }

    public function setTalkType(App\Entity\TalkType $talkType): self
    {
        $this->talkType = $talkType;
        return $this;
    }

    public function getChannel(): int    {
        return $this->channel;
    }

    public function setChannel(int $channel): self
    {
        $this->channel = $channel;
        return $this;
    }

    public function getStatus(): int    {
        return $this->status;
    }

    public function setStatus(int $status): self
    {
        $this->status = $status;
        return $this;
    }

    public function getPriority(): ?int    {
        return $this->priority;
    }

    public function setPriority(?int $priority): self
    {
        $this->priority = $priority;
        return $this;
    }

    public function getOutcome(): ?int    {
        return $this->outcome;
    }

    public function setOutcome(?int $outcome): self
    {
        $this->outcome = $outcome;
        return $this;
    }

    public function getSentiment(): ?string    {
        return $this->sentiment;
    }

    public function setSentiment(?string $sentiment): self
    {
        $this->sentiment = $sentiment;
        return $this;
    }

    public function getDateStart(): ?\DateTimeImmutable    {
        return $this->dateStart;
    }

    public function setDateStart(?\DateTimeImmutable $dateStart): self
    {
        $this->dateStart = $dateStart;
        return $this;
    }

    public function getDateLastMessage(): ?\DateTimeImmutable    {
        return $this->dateLastMessage;
    }

    public function setDateLastMessage(?\DateTimeImmutable $dateLastMessage): self
    {
        $this->dateLastMessage = $dateLastMessage;
        return $this;
    }

    public function getClosedAt(): ?\DateTimeImmutable    {
        return $this->closedAt;
    }

    public function setClosedAt(?\DateTimeImmutable $closedAt): self
    {
        $this->closedAt = $closedAt;
        return $this;
    }

    public function getDurationSeconds(): ?int    {
        return $this->durationSeconds;
    }

    public function setDurationSeconds(?int $durationSeconds): self
    {
        $this->durationSeconds = $durationSeconds;
        return $this;
    }

    public function getRecordingUrl(): ?string    {
        return $this->recordingUrl;
    }

    public function setRecordingUrl(?string $recordingUrl): self
    {
        $this->recordingUrl = $recordingUrl;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\User>
     */
    public function getUsers(): Collection
    {
        return $this->users;
    }

    public function addUser(App\Entity\User $user): self
    {
        if (!$this->users->contains($user)) {
            $this->users->add($user);
        }
        return $this;
    }

    public function removeUser(App\Entity\User $user): self
    {
        if ($this->users->removeElement($user)) {
        }
        return $this;
    }

    public function getOwner(): App\Entity\User
    {
        return $this->owner;
    }

    public function setOwner(App\Entity\User $owner): self
    {
        $this->owner = $owner;
        return $this;
    }

    public function getAssignedTo(): ?App\Entity\User
    {
        return $this->assignedTo;
    }

    public function setAssignedTo(?App\Entity\User $assignedTo): self
    {
        $this->assignedTo = $assignedTo;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Agent>
     */
    public function getAgents(): Collection
    {
        return $this->agents;
    }

    public function addAgent(App\Entity\Agent $agent): self
    {
        if (!$this->agents->contains($agent)) {
            $this->agents->add($agent);
        }
        return $this;
    }

    public function removeAgent(App\Entity\Agent $agent): self
    {
        if ($this->agents->removeElement($agent)) {
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Campaign>
     */
    public function getCampaigns(): Collection
    {
        return $this->campaigns;
    }

    public function addCampaign(App\Entity\Campaign $campaign): self
    {
        if (!$this->campaigns->contains($campaign)) {
            $this->campaigns->add($campaign);
            $campaign->setTalks($this);
        }
        return $this;
    }

    public function removeCampaign(App\Entity\Campaign $campaign): self
    {
        if ($this->campaigns->removeElement($campaign)) {
            if ($campaign->getTalks() === $this) {
                $campaign->setTalks(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\TalkMessage>
     */
    public function getMessages(): Collection
    {
        return $this->messages;
    }

    public function addMessage(App\Entity\TalkMessage $message): self
    {
        if (!$this->messages->contains($message)) {
            $this->messages->add($message);
            $message->setTalk($this);
        }
        return $this;
    }

    public function removeMessage(App\Entity\TalkMessage $message): self
    {
        if ($this->messages->removeElement($message)) {
            if ($message->getTalk() === $this) {
                $message->setTalk(null);
            }
        }
        return $this;
    }

    public function getMessageCount(): int    {
        return $this->messageCount;
    }

    public function setMessageCount(int $messageCount): self
    {
        $this->messageCount = $messageCount;
        return $this;
    }

    public function getArchived(): bool    {
        return $this->archived;
    }

    public function setArchived(bool $archived): self
    {
        $this->archived = $archived;
        return $this;
    }

    public function isArchived(): bool
    {
        return $this->archived === true;
    }

    public function getInternal(): bool    {
        return $this->internal;
    }

    public function setInternal(bool $internal): self
    {
        $this->internal = $internal;
        return $this;
    }

    public function isInternal(): bool
    {
        return $this->internal === true;
    }

    public function getTags(): ?array    {
        return $this->tags;
    }

    public function setTags(?array $tags): self
    {
        $this->tags = $tags;
        return $this;
    }


    public function __toString(): string
    {
        return $this->getId()?->toRfc4122() ?? '';
    }
}
