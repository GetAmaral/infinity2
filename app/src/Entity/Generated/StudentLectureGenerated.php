<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
use App\Entity\User;
use App\Entity\CourseLecture;
use App\Entity\StudentCourse;

/**
 * StudentLecture Entity (Generated Base Class)
 *
 * Student lecture progress and completion tracking *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to StudentLecture.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class StudentLectureGenerated extends EntityBase
{
    #[Groups(['student_lecture:read', 'student_lecture:write'])]
    #[ORM\ManyToOne(targetEntity: User::class)]
    #[ORM\JoinColumn(nullable: false)]
    protected User $student;

    #[Groups(['student_lecture:read', 'student_lecture:write'])]
    #[ORM\ManyToOne(targetEntity: CourseLecture::class, inversedBy: 'studentLectures')]
    #[ORM\JoinColumn(nullable: false)]
    protected CourseLecture $lecture;

    #[Groups(['student_lecture:read', 'student_lecture:write'])]
    #[ORM\ManyToOne(targetEntity: StudentCourse::class, inversedBy: 'studentLectures')]
    protected ?StudentCourse $studentCourse = null;

    #[Groups(['student_lecture:read', 'student_lecture:write'])]
    #[ORM\Column(type: 'integer')]
    protected int $watchedSeconds = 0;

    #[Groups(['student_lecture:read', 'student_lecture:write'])]
    #[ORM\Column(type: 'integer')]
    protected int $lastPositionSeconds = 0;

    #[Groups(['student_lecture:read', 'student_lecture:write'])]
    #[ORM\Column(type: 'decimal', precision: 5, scale: 2)]
    #[Assert\Range(max: 100, min: 0)]
    protected string $completionPercentage = '0';

    #[Groups(['student_lecture:read', 'student_lecture:write'])]
    #[ORM\Column(type: 'boolean')]
    protected bool $completed = false;

    #[Groups(['student_lecture:read', 'student_lecture:write'])]
    #[ORM\Column(type: 'datetime_immutable', nullable: true)]
    protected ?\DateTimeImmutable $lastWatchedAt = null;

    #[Groups(['student_lecture:read', 'student_lecture:write'])]
    #[ORM\Column(type: 'datetime_immutable', nullable: true)]
    protected ?\DateTimeImmutable $completedAt = null;


    public function __construct()
    {
        parent::__construct();
    }

    public function getStudent(): User
    {
        return $this->student;
    }

    public function setStudent(User $student): self
    {
        $this->student = $student;
        return $this;
    }

    public function getLecture(): CourseLecture
    {
        return $this->lecture;
    }

    public function setLecture(CourseLecture $lecture): self
    {
        $this->lecture = $lecture;
        return $this;
    }

    public function getStudentCourse(): ?StudentCourse
    {
        return $this->studentCourse;
    }

    public function setStudentCourse(?StudentCourse $studentCourse): self
    {
        $this->studentCourse = $studentCourse;
        return $this;
    }

    public function getWatchedSeconds(): int    {
        return $this->watchedSeconds;
    }

    public function setWatchedSeconds(int $watchedSeconds): self
    {
        $this->watchedSeconds = $watchedSeconds;
        return $this;
    }

    public function getLastPositionSeconds(): int    {
        return $this->lastPositionSeconds;
    }

    public function setLastPositionSeconds(int $lastPositionSeconds): self
    {
        $this->lastPositionSeconds = $lastPositionSeconds;
        return $this;
    }

    public function getCompletionPercentage(): string    {
        return $this->completionPercentage;
    }

    public function setCompletionPercentage(string $completionPercentage): self
    {
        $this->completionPercentage = $completionPercentage;
        return $this;
    }

    public function getCompleted(): bool    {
        return $this->completed;
    }

    public function setCompleted(bool $completed): self
    {
        $this->completed = $completed;
        return $this;
    }

    public function isCompleted(): bool
    {
        return $this->completed === true;
    }

    public function getLastWatchedAt(): ?\DateTimeImmutable    {
        return $this->lastWatchedAt;
    }

    public function setLastWatchedAt(?\DateTimeImmutable $lastWatchedAt): self
    {
        $this->lastWatchedAt = $lastWatchedAt;
        return $this;
    }

    public function getCompletedAt(): ?\DateTimeImmutable    {
        return $this->completedAt;
    }

    public function setCompletedAt(?\DateTimeImmutable $completedAt): self
    {
        $this->completedAt = $completedAt;
        return $this;
    }


    public function __toString(): string
    {
        return $this->getId()?->toRfc4122() ?? '';
    }
}
