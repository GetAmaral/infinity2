<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;
use App\Entity\User;
use App\Entity\CourseLecture;
use App\Entity\StudentCourse;

/**
 * StudentLecture Entity (Generated Base Class)
 *
 * Student lecture progress and completion tracking *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to StudentLecture.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class StudentLectureGenerated extends EntityBase
{
    #[ORM\ManyToOne(targetEntity: User::class)]
    #[ORM\JoinColumn(nullable: false)]
    protected User $student;

    #[ORM\ManyToOne(targetEntity: CourseLecture::class, inversedBy: 'studentLectures')]
    #[ORM\JoinColumn(nullable: false)]
    protected CourseLecture $lecture;

    #[ORM\ManyToOne(targetEntity: StudentCourse::class, inversedBy: 'studentLectures')]
    protected ?StudentCourse $studentCourse = null;

    #[ORM\Column(type: 'integer')]
    protected int $watchedSeconds = 0;

    #[ORM\Column(type: 'integer')]
    protected int $lastPositionSeconds = 0;

    #[ORM\Column(type: 'decimal', precision: 5, scale: 2)]
    protected float $completionPercentage = 0;

    #[ORM\Column(type: 'boolean')]
    protected bool $completed = false;

    #[ORM\Column(type: 'datetime_immutable', nullable: true)]
    protected ?\DateTimeImmutable $lastWatchedAt = null;

    #[ORM\Column(type: 'datetime_immutable', nullable: true)]
    protected ?\DateTimeImmutable $completedAt = null;


    public function __construct()
    {
        parent::__construct();
    }

    public function getStudent(): App\Entity\User
    {
        return $this->student;
    }

    public function setStudent(App\Entity\User $student): self
    {
        $this->student = $student;
        return $this;
    }

    public function getLecture(): App\Entity\CourseLecture
    {
        return $this->lecture;
    }

    public function setLecture(App\Entity\CourseLecture $lecture): self
    {
        $this->lecture = $lecture;
        return $this;
    }

    public function getStudentcourse(): ?App\Entity\StudentCourse
    {
        return $this->studentCourse;
    }

    public function setStudentcourse(?App\Entity\StudentCourse $studentCourse): self
    {
        $this->studentCourse = $studentCourse;
        return $this;
    }

    public function getWatchedseconds(): int    {
        return $this->watchedSeconds;
    }

    public function setWatchedseconds(int $watchedSeconds): self
    {
        $this->watchedSeconds = $watchedSeconds;
        return $this;
    }

    public function getLastpositionseconds(): int    {
        return $this->lastPositionSeconds;
    }

    public function setLastpositionseconds(int $lastPositionSeconds): self
    {
        $this->lastPositionSeconds = $lastPositionSeconds;
        return $this;
    }

    public function getCompletionpercentage(): float    {
        return $this->completionPercentage;
    }

    public function setCompletionpercentage(float $completionPercentage): self
    {
        $this->completionPercentage = $completionPercentage;
        return $this;
    }

    public function getCompleted(): bool    {
        return $this->completed;
    }

    public function setCompleted(bool $completed): self
    {
        $this->completed = $completed;
        return $this;
    }

    public function isCompleted(): bool
    {
        return $this->completed === true;
    }

    public function getLastwatchedat(): ?\DateTimeImmutable    {
        return $this->lastWatchedAt;
    }

    public function setLastwatchedat(?\DateTimeImmutable $lastWatchedAt): self
    {
        $this->lastWatchedAt = $lastWatchedAt;
        return $this;
    }

    public function getCompletedat(): ?\DateTimeImmutable    {
        return $this->completedAt;
    }

    public function setCompletedat(?\DateTimeImmutable $completedAt): self
    {
        $this->completedAt = $completedAt;
        return $this;
    }


    public function __toString(): string
    {
        return $this->getId()?->toRfc4122() ?? '';
    }
}
