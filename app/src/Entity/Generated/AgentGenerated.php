<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
use App\Entity\Organization;
use App\Entity\User;
use App\Entity\AgentType;
use App\Entity\Talk;

/**
 * Agent Entity (Generated Base Class)
 *
 * Customer service and sales agents *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to Agent.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class AgentGenerated extends EntityBase
{
    #[Groups(['agent:read', 'agent:write'])]
    #[ORM\ManyToOne(targetEntity: Organization::class, inversedBy: 'agents')]
    #[ORM\JoinColumn(nullable: false)]
    protected Organization $organization;

    #[Groups(['agent:read', 'agent:write'])]
    #[ORM\Column(type: 'string', length: 255)]
    protected string $name;

    #[Groups(['agent:read', 'agent:write'])]
    #[ORM\Column(type: 'string', length: 20, nullable: true)]
    protected ?string $phone = null;

    #[Groups(['agent:read', 'agent:write'])]
    #[ORM\Column(type: 'string', length: 100, nullable: true)]
    protected ?string $title = null;

    #[Groups(['agent:read', 'agent:write'])]
    #[ORM\Column(type: 'boolean')]
    protected bool $active = true;

    #[Groups(['agent:read', 'agent:write'])]
    #[ORM\Column(type: 'boolean')]
    protected bool $available = true;

    #[Groups(['agent:read', 'agent:write'])]
    #[ORM\Column(type: 'string', length: 100, nullable: true)]
    protected ?string $territory = null;

    #[Groups(['agent:read', 'agent:write'])]
    #[ORM\Column(type: 'decimal', precision: 12, scale: 2, nullable: true)]
    protected ?string $quota = null;

    #[Groups(['agent:read', 'agent:write'])]
    #[ORM\ManyToOne(targetEntity: User::class, inversedBy: 'agents')]
    protected ?User $user = null;

    #[Groups(['agent:read', 'agent:write'])]
    #[ORM\ManyToOne(targetEntity: AgentType::class, inversedBy: 'agents')]
    protected ?AgentType $agentType = null;

    #[Groups(['agent:read', 'agent:write'])]
    #[ORM\Column(type: 'decimal', precision: 5, scale: 2, nullable: true)]
    protected ?string $commissionRate = '0';

    #[Groups(['agent:read', 'agent:write'])]
    #[ORM\Column(type: 'date', nullable: true)]
    protected ?\DateTimeImmutable $startDate = null;

    #[Groups(['agent:read', 'agent:write'])]
    #[ORM\Column(type: 'date', nullable: true)]
    protected ?\DateTimeImmutable $endDate = null;

    #[Groups(['agent:read', 'agent:write'])]
    #[ORM\Column(type: 'string', length: 100, nullable: true)]
    protected ?string $specialization = null;

    #[Groups(['agent:read', 'agent:write'])]
    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $languages = null;

    #[Groups(['agent:read', 'agent:write'])]
    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $certifications = null;

    #[Groups(['agent:read', 'agent:write'])]
    #[ORM\Column(type: 'decimal', precision: 12, scale: 2, nullable: true)]
    protected ?string $totalSales = '0';

    #[Groups(['agent:read', 'agent:write'])]
    #[ORM\Column(type: 'decimal', precision: 12, scale: 2, nullable: true)]
    protected ?string $currentMonthSales = '0';

    #[Groups(['agent:read', 'agent:write'])]
    #[ORM\Column(type: 'decimal', precision: 5, scale: 2, nullable: true)]
    protected ?string $conversionRate = '0';

    #[Groups(['agent:read', 'agent:write'])]
    #[ORM\Column(type: 'decimal', precision: 3, scale: 2, nullable: true)]
    protected ?string $customerSatisfactionScore = null;

    #[Groups(['agent:read', 'agent:write'])]
    #[ORM\Column(type: 'integer')]
    protected int $maxConcurrentCustomers = 10;

    #[Groups(['agent:read', 'agent:write'])]
    #[ORM\Column(type: 'integer')]
    protected int $currentCustomerCount = 0;

    #[Groups(['agent:read', 'agent:write'])]
    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $averageResponseTime = null;

    #[Groups(['agent:read', 'agent:write'])]
    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $skills = null;

    #[Groups(['agent:read', 'agent:write'])]
    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $prompt = null;

    #[Groups(['agent:read'])]
    #[ORM\ManyToMany(targetEntity: Talk::class, mappedBy: 'agents', fetch: 'LAZY')]
    protected Collection $talks;


    public function __construct()
    {
        parent::__construct();
        $this->talks = new ArrayCollection();
    }

    public function getOrganization(): Organization
    {
        return $this->organization;
    }

    public function setOrganization(Organization $organization): self
    {
        $this->organization = $organization;
        return $this;
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getPhone(): ?string    {
        return $this->phone;
    }

    public function setPhone(?string $phone): self
    {
        $this->phone = $phone;
        return $this;
    }

    public function getTitle(): ?string    {
        return $this->title;
    }

    public function setTitle(?string $title): self
    {
        $this->title = $title;
        return $this;
    }

    public function getActive(): bool    {
        return $this->active;
    }

    public function setActive(bool $active): self
    {
        $this->active = $active;
        return $this;
    }

    public function isActive(): bool
    {
        return $this->active === true;
    }

    public function getAvailable(): bool    {
        return $this->available;
    }

    public function setAvailable(bool $available): self
    {
        $this->available = $available;
        return $this;
    }

    public function isAvailable(): bool
    {
        return $this->available === true;
    }

    public function getTerritory(): ?string    {
        return $this->territory;
    }

    public function setTerritory(?string $territory): self
    {
        $this->territory = $territory;
        return $this;
    }

    public function getQuota(): ?string    {
        return $this->quota;
    }

    public function setQuota(?string $quota): self
    {
        $this->quota = $quota;
        return $this;
    }

    public function getUser(): ?User
    {
        return $this->user;
    }

    public function setUser(?User $user): self
    {
        $this->user = $user;
        return $this;
    }

    public function getAgentType(): ?AgentType
    {
        return $this->agentType;
    }

    public function setAgentType(?AgentType $agentType): self
    {
        $this->agentType = $agentType;
        return $this;
    }

    public function getCommissionRate(): ?string    {
        return $this->commissionRate;
    }

    public function setCommissionRate(?string $commissionRate): self
    {
        $this->commissionRate = $commissionRate;
        return $this;
    }

    public function getStartDate(): ?\DateTimeImmutable    {
        return $this->startDate;
    }

    public function setStartDate(?\DateTimeImmutable $startDate): self
    {
        $this->startDate = $startDate;
        return $this;
    }

    public function getEndDate(): ?\DateTimeImmutable    {
        return $this->endDate;
    }

    public function setEndDate(?\DateTimeImmutable $endDate): self
    {
        $this->endDate = $endDate;
        return $this;
    }

    public function getSpecialization(): ?string    {
        return $this->specialization;
    }

    public function setSpecialization(?string $specialization): self
    {
        $this->specialization = $specialization;
        return $this;
    }

    public function getLanguages(): ?string    {
        return $this->languages;
    }

    public function setLanguages(?string $languages): self
    {
        $this->languages = $languages;
        return $this;
    }

    public function getCertifications(): ?string    {
        return $this->certifications;
    }

    public function setCertifications(?string $certifications): self
    {
        $this->certifications = $certifications;
        return $this;
    }

    public function getTotalSales(): ?string    {
        return $this->totalSales;
    }

    public function setTotalSales(?string $totalSales): self
    {
        $this->totalSales = $totalSales;
        return $this;
    }

    public function getCurrentMonthSales(): ?string    {
        return $this->currentMonthSales;
    }

    public function setCurrentMonthSales(?string $currentMonthSales): self
    {
        $this->currentMonthSales = $currentMonthSales;
        return $this;
    }

    public function getConversionRate(): ?string    {
        return $this->conversionRate;
    }

    public function setConversionRate(?string $conversionRate): self
    {
        $this->conversionRate = $conversionRate;
        return $this;
    }

    public function getCustomerSatisfactionScore(): ?string    {
        return $this->customerSatisfactionScore;
    }

    public function setCustomerSatisfactionScore(?string $customerSatisfactionScore): self
    {
        $this->customerSatisfactionScore = $customerSatisfactionScore;
        return $this;
    }

    public function getMaxConcurrentCustomers(): int    {
        return $this->maxConcurrentCustomers;
    }

    public function setMaxConcurrentCustomers(int $maxConcurrentCustomers): self
    {
        $this->maxConcurrentCustomers = $maxConcurrentCustomers;
        return $this;
    }

    public function getCurrentCustomerCount(): int    {
        return $this->currentCustomerCount;
    }

    public function setCurrentCustomerCount(int $currentCustomerCount): self
    {
        $this->currentCustomerCount = $currentCustomerCount;
        return $this;
    }

    public function getAverageResponseTime(): ?int    {
        return $this->averageResponseTime;
    }

    public function setAverageResponseTime(?int $averageResponseTime): self
    {
        $this->averageResponseTime = $averageResponseTime;
        return $this;
    }

    public function getSkills(): ?string    {
        return $this->skills;
    }

    public function setSkills(?string $skills): self
    {
        $this->skills = $skills;
        return $this;
    }

    public function getPrompt(): ?string    {
        return $this->prompt;
    }

    public function setPrompt(?string $prompt): self
    {
        $this->prompt = $prompt;
        return $this;
    }

    /**
     * @return Collection<int, Talk>
     */
    public function getTalks(): Collection
    {
        return $this->talks;
    }

    public function addTalk(Talk $talk): self
    {
        if (!$this->talks->contains($talk)) {
            $this->talks->add($talk);
            $talk->setAgents($this);
        }
        return $this;
    }

    public function removeTalk(Talk $talk): self
    {
        if ($this->talks->removeElement($talk)) {
            if ($talk->getAgents() === $this) {
                $talk->setAgents(null);
            }
        }
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? $this->title ?? ($this->getId()?->toRfc4122() ?? '');
    }
}
