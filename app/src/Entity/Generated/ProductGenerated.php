<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use App\Entity\Trait\OrganizationTrait;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
                                                                                                                                                                                                use App\Entity\ProductCategory;
use App\Entity\ProductLine;
use App\Entity\Brand;
use App\Entity\Company;
use App\Entity\Deal;
use App\Entity\TaxCategory;
use App\Entity\BillingFrequency;
use App\Entity\Product;
use App\Entity\Attachment;
use App\Entity\Tag;
use App\Entity\ProductBatch;

/**
 * Product Entity (Generated Base Class)
 *
 * 
 *
 * This class is ALWAYS regenerated from CSV. DO NOT edit this file.
 * Add custom logic to Product.php instead.
 *
 * @generated by Luminai Code Generator
 * @see /config/EntityNew.csv and /config/PropertyNew.csv
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class ProductGenerated extends EntityBase
{
    use OrganizationTrait;

    #[ORM\Column(type: 'string', nullable: true)]
    #[Assert\Length(max: 255)]
    #[Groups(['product:read', 'product:write'])]
    protected ?string $productCode = null;

    #[ORM\Column(type: 'string')]
    #[Assert\NotBlank]
    #[Assert\Length(max: 255)]
    #[Groups(['product:read', 'product:write'])]
    protected string $name;

    #[ORM\Column(type: 'text', nullable: true)]
    #[Groups(['product:read', 'product:write'])]
    protected ?string $description = null;

    #[ORM\Column(type: 'text', nullable: true)]
    #[Groups(['product:read', 'product:write'])]
    protected ?string $shortDescription = null;

    #[ORM\ManyToOne(targetEntity: ProductCategory::class, inversedBy: 'products')]
    #[Groups(['product:read', 'product:write'])]
    protected ?ProductCategory $category = null;

    #[ORM\ManyToOne(targetEntity: ProductLine::class, inversedBy: 'products')]
    #[Groups(['product:read', 'product:write'])]
    protected ?ProductLine $productLine = null;

    #[ORM\Column(type: 'integer', nullable: true)]
    #[Groups(['product:read', 'product:write'])]
    protected ?int $productType = null;

    #[ORM\ManyToOne(targetEntity: Brand::class, inversedBy: 'products')]
    #[Groups(['product:read', 'product:write'])]
    protected ?Brand $brand = null;

    #[ORM\ManyToMany(targetEntity: Company::class, inversedBy: 'manufacturedProducts', fetch: 'LAZY')]
    #[Groups(['product:read', 'product:write'])]
    protected Collection $manufacturer;

    #[ORM\ManyToMany(targetEntity: Company::class, inversedBy: 'suppliedProducts', fetch: 'LAZY')]
    #[Groups(['product:read', 'product:write'])]
    protected Collection $supplier;

    #[ORM\ManyToMany(targetEntity: Deal::class, inversedBy: 'products', fetch: 'LAZY')]
    #[Groups(['product:read', 'product:write'])]
    protected Collection $deals;

    #[ORM\Column(type: 'float', nullable: true)]
    #[Groups(['product:read', 'product:write'])]
    protected ?float $listPrice = null;

    #[ORM\Column(type: 'float', nullable: true)]
    #[Groups(['product:read', 'product:write'])]
    protected ?float $costPrice = null;

    #[ORM\Column(type: 'float', nullable: true)]
    #[Groups(['product:read', 'product:write'])]
    protected ?float $minimumPrice = null;

    #[ORM\Column(type: 'float', nullable: true)]
    #[Groups(['product:read', 'product:write'])]
    protected ?float $maximumDiscount = null;

    #[ORM\Column(type: 'float', nullable: true)]
    #[Groups(['product:read', 'product:write'])]
    protected ?float $discountAmount = null;

    #[ORM\Column(type: 'float', nullable: true)]
    #[Groups(['product:read', 'product:write'])]
    protected ?float $discountPercentage = null;

    #[ORM\Column(type: 'float', nullable: true)]
    #[Groups(['product:read', 'product:write'])]
    protected ?float $commissionRate = null;

    #[ORM\Column(type: 'float', nullable: true)]
    #[Groups(['product:read', 'product:write'])]
    protected ?float $commissionAmount = null;

    #[ORM\Column(type: 'string', nullable: true)]
    #[Assert\Length(max: 255)]
    #[Groups(['product:read', 'product:write'])]
    protected ?string $currency = null;

    #[ORM\Column(type: 'float', nullable: true)]
    #[Groups(['product:read', 'product:write'])]
    protected ?float $exchangeRate = null;

    #[ORM\Column(type: 'string', nullable: true)]
    #[Assert\Length(max: 255)]
    #[Groups(['product:read', 'product:write'])]
    protected ?string $unitOfMeasure = null;

    #[ORM\Column(type: 'float', nullable: true)]
    #[Groups(['product:read', 'product:write'])]
    protected ?float $weight = null;

    #[ORM\Column(type: 'string', nullable: true)]
    #[Assert\Length(max: 255)]
    #[Groups(['product:read', 'product:write'])]
    protected ?string $dimensions = null;

    #[ORM\ManyToOne(targetEntity: TaxCategory::class, inversedBy: 'products')]
    #[Groups(['product:read', 'product:write'])]
    protected ?TaxCategory $taxCategory = null;

    #[ORM\Column(type: 'float', nullable: true)]
    #[Groups(['product:read', 'product:write'])]
    protected ?float $marginPercentage = null;

    #[ORM\Column(type: 'integer', nullable: true)]
    #[Groups(['product:read', 'product:write'])]
    protected ?int $stockQuantity = null;

    #[ORM\Column(type: 'integer', nullable: true)]
    #[Groups(['product:read', 'product:write'])]
    protected ?int $reservedQuantity = null;

    #[ORM\Column(type: 'integer', nullable: true)]
    #[Groups(['product:read', 'product:write'])]
    protected ?int $availableQuantity = null;

    #[ORM\Column(type: 'integer', nullable: true)]
    #[Groups(['product:read', 'product:write'])]
    protected ?int $warrantyPeriod = null;

    #[ORM\Column(type: 'integer', nullable: true)]
    #[Groups(['product:read', 'product:write'])]
    protected ?int $supportPeriod = null;

    #[ORM\Column(type: 'string', nullable: true)]
    #[Assert\Length(max: 255)]
    #[Groups(['product:read', 'product:write'])]
    protected ?string $lifecycleStage = null;

    #[ORM\Column(type: 'date', nullable: true)]
    #[Groups(['product:read', 'product:write'])]
    protected ?\DateTimeInterface $launchDate = null;

    #[ORM\Column(type: 'date', nullable: true)]
    #[Groups(['product:read', 'product:write'])]
    protected ?\DateTimeInterface $endOfLifeDate = null;

    #[ORM\Column(type: 'boolean', nullable: true)]
    #[Groups(['product:read', 'product:write'])]
    protected ?bool $active = null;

    #[ORM\Column(type: 'boolean', nullable: true)]
    #[Groups(['product:read', 'product:write'])]
    protected ?bool $sellable = null;

    #[ORM\Column(type: 'boolean', nullable: true)]
    #[Groups(['product:read', 'product:write'])]
    protected ?bool $purchasable = null;

    #[ORM\Column(type: 'boolean', nullable: true)]
    #[Groups(['product:read', 'product:write'])]
    protected ?bool $requiresApproval = null;

    #[ORM\Column(type: 'boolean', nullable: true)]
    #[Groups(['product:read', 'product:write'])]
    protected ?bool $subscription = null;

    #[ORM\Column(type: 'string', nullable: true)]
    #[Assert\Length(max: 255)]
    #[Groups(['product:read', 'product:write'])]
    protected ?string $subscriptionPeriod = null;

    #[ORM\ManyToOne(targetEntity: BillingFrequency::class, inversedBy: 'products')]
    #[Groups(['product:read', 'product:write'])]
    protected ?BillingFrequency $billingFrequency = null;

    #[ORM\Column(type: 'float', nullable: true)]
    #[Groups(['product:read', 'product:write'])]
    protected ?float $setupFee = null;

    #[ORM\Column(type: 'float', nullable: true)]
    #[Groups(['product:read', 'product:write'])]
    protected ?float $recurringFee = null;

    #[ORM\Column(type: 'float', nullable: true)]
    #[Groups(['product:read', 'product:write'])]
    protected ?float $cancellationFee = null;

    #[ORM\ManyToMany(targetEntity: Product::class, inversedBy: 'relatedFrom', fetch: 'LAZY')]
    #[Groups(['product:read', 'product:write'])]
    protected Collection $relatedTo;

    #[ORM\ManyToMany(targetEntity: Product::class, inversedBy: 'relatedTo', fetch: 'LAZY')]
    #[Groups(['product:read', 'product:write'])]
    protected Collection $relatedFrom;

    #[ORM\ManyToMany(targetEntity: Product::class, inversedBy: 'substituteFrom', fetch: 'LAZY')]
    #[Groups(['product:read', 'product:write'])]
    protected Collection $substituteTo;

    #[ORM\ManyToMany(targetEntity: Product::class, inversedBy: 'substituteTo', fetch: 'LAZY')]
    #[Groups(['product:read', 'product:write'])]
    protected Collection $substituteFrom;

    #[ORM\OneToMany(targetEntity: Attachment::class, mappedBy: 'product', fetch: 'LAZY')]
    #[Groups(['product:read', 'product:write'])]
    protected Collection $attachments;

    #[ORM\Column(type: 'json', nullable: true)]
    #[Groups(['product:read', 'product:write'])]
    protected ?array $specifications = null;

    #[ORM\Column(type: 'json', nullable: true)]
    #[Groups(['product:read', 'product:write'])]
    protected ?array $features = null;

    #[ORM\Column(type: 'json', nullable: true)]
    #[Groups(['product:read', 'product:write'])]
    protected ?array $customFields = null;

    #[ORM\ManyToMany(targetEntity: Tag::class, inversedBy: 'products', fetch: 'LAZY')]
    #[Groups(['product:read', 'product:write'])]
    protected Collection $tags;

    #[ORM\OneToMany(targetEntity: ProductBatch::class, mappedBy: 'product', fetch: 'LAZY')]
    #[Groups(['product:read', 'product:write'])]
    protected Collection $batches;


    public function __construct()
    {
        parent::__construct();
        $this->manufacturer = new ArrayCollection();
        $this->supplier = new ArrayCollection();
        $this->deals = new ArrayCollection();
        $this->relatedTo = new ArrayCollection();
        $this->relatedFrom = new ArrayCollection();
        $this->substituteTo = new ArrayCollection();
        $this->substituteFrom = new ArrayCollection();
        $this->attachments = new ArrayCollection();
        $this->tags = new ArrayCollection();
        $this->batches = new ArrayCollection();
    }

    public function getProductcode(): ?string
    {
        return $this->productCode;
    }

    public function setProductcode(?string $productCode): self
    {
        $this->productCode = $productCode;
        return $this;
    }

    
    public function getName(): string
    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    
    public function getDescription(): ?string
    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    
    public function getShortdescription(): ?string
    {
        return $this->shortDescription;
    }

    public function setShortdescription(?string $shortDescription): self
    {
        $this->shortDescription = $shortDescription;
        return $this;
    }

    
    public function getCategory(): ?ProductCategory
    {
        return $this->category;
    }

    public function setCategory(?ProductCategory $category): self
    {
        $this->category = $category;
        return $this;
    }

    public function getProductline(): ?ProductLine
    {
        return $this->productLine;
    }

    public function setProductline(?ProductLine $productLine): self
    {
        $this->productLine = $productLine;
        return $this;
    }

    public function getProducttype(): ?int
    {
        return $this->productType;
    }

    public function setProducttype(?int $productType): self
    {
        $this->productType = $productType;
        return $this;
    }

    
    public function getBrand(): ?Brand
    {
        return $this->brand;
    }

    public function setBrand(?Brand $brand): self
    {
        $this->brand = $brand;
        return $this;
    }

    /**
     * @return Collection<int, Company>
     */
    public function getManufacturer(): Collection
    {
        return $this->manufacturer;
    }

    public function addManufacture(Company $manufacture): self
    {
        if (!$this->manufacturer->contains($manufacture)) {
            $this->manufacturer->add($manufacture);
        }
        return $this;
    }

    public function removeManufacture(Company $manufacture): self
    {
        if ($this->manufacturer->removeElement($manufacture)) {
        }
        return $this;
    }

    /**
     * @return Collection<int, Company>
     */
    public function getSupplier(): Collection
    {
        return $this->supplier;
    }

    public function addSupplie(Company $supplie): self
    {
        if (!$this->supplier->contains($supplie)) {
            $this->supplier->add($supplie);
        }
        return $this;
    }

    public function removeSupplie(Company $supplie): self
    {
        if ($this->supplier->removeElement($supplie)) {
        }
        return $this;
    }

    /**
     * @return Collection<int, Deal>
     */
    public function getDeals(): Collection
    {
        return $this->deals;
    }

    public function addDeal(Deal $deal): self
    {
        if (!$this->deals->contains($deal)) {
            $this->deals->add($deal);
        }
        return $this;
    }

    public function removeDeal(Deal $deal): self
    {
        if ($this->deals->removeElement($deal)) {
        }
        return $this;
    }

    public function getListprice(): ?float
    {
        return $this->listPrice;
    }

    public function setListprice(?float $listPrice): self
    {
        $this->listPrice = $listPrice;
        return $this;
    }

    
    public function getCostprice(): ?float
    {
        return $this->costPrice;
    }

    public function setCostprice(?float $costPrice): self
    {
        $this->costPrice = $costPrice;
        return $this;
    }

    
    public function getMinimumprice(): ?float
    {
        return $this->minimumPrice;
    }

    public function setMinimumprice(?float $minimumPrice): self
    {
        $this->minimumPrice = $minimumPrice;
        return $this;
    }

    
    public function getMaximumdiscount(): ?float
    {
        return $this->maximumDiscount;
    }

    public function setMaximumdiscount(?float $maximumDiscount): self
    {
        $this->maximumDiscount = $maximumDiscount;
        return $this;
    }

    
    public function getDiscountamount(): ?float
    {
        return $this->discountAmount;
    }

    public function setDiscountamount(?float $discountAmount): self
    {
        $this->discountAmount = $discountAmount;
        return $this;
    }

    
    public function getDiscountpercentage(): ?float
    {
        return $this->discountPercentage;
    }

    public function setDiscountpercentage(?float $discountPercentage): self
    {
        $this->discountPercentage = $discountPercentage;
        return $this;
    }

    
    public function getCommissionrate(): ?float
    {
        return $this->commissionRate;
    }

    public function setCommissionrate(?float $commissionRate): self
    {
        $this->commissionRate = $commissionRate;
        return $this;
    }

    
    public function getCommissionamount(): ?float
    {
        return $this->commissionAmount;
    }

    public function setCommissionamount(?float $commissionAmount): self
    {
        $this->commissionAmount = $commissionAmount;
        return $this;
    }

    
    public function getCurrency(): ?string
    {
        return $this->currency;
    }

    public function setCurrency(?string $currency): self
    {
        $this->currency = $currency;
        return $this;
    }

    
    public function getExchangerate(): ?float
    {
        return $this->exchangeRate;
    }

    public function setExchangerate(?float $exchangeRate): self
    {
        $this->exchangeRate = $exchangeRate;
        return $this;
    }

    
    public function getUnitofmeasure(): ?string
    {
        return $this->unitOfMeasure;
    }

    public function setUnitofmeasure(?string $unitOfMeasure): self
    {
        $this->unitOfMeasure = $unitOfMeasure;
        return $this;
    }

    
    public function getWeight(): ?float
    {
        return $this->weight;
    }

    public function setWeight(?float $weight): self
    {
        $this->weight = $weight;
        return $this;
    }

    
    public function getDimensions(): ?string
    {
        return $this->dimensions;
    }

    public function setDimensions(?string $dimensions): self
    {
        $this->dimensions = $dimensions;
        return $this;
    }

    
    public function getTaxcategory(): ?TaxCategory
    {
        return $this->taxCategory;
    }

    public function setTaxcategory(?TaxCategory $taxCategory): self
    {
        $this->taxCategory = $taxCategory;
        return $this;
    }

    public function getMarginpercentage(): ?float
    {
        return $this->marginPercentage;
    }

    public function setMarginpercentage(?float $marginPercentage): self
    {
        $this->marginPercentage = $marginPercentage;
        return $this;
    }

    
    public function getStockquantity(): ?int
    {
        return $this->stockQuantity;
    }

    public function setStockquantity(?int $stockQuantity): self
    {
        $this->stockQuantity = $stockQuantity;
        return $this;
    }

    
    public function getReservedquantity(): ?int
    {
        return $this->reservedQuantity;
    }

    public function setReservedquantity(?int $reservedQuantity): self
    {
        $this->reservedQuantity = $reservedQuantity;
        return $this;
    }

    
    public function getAvailablequantity(): ?int
    {
        return $this->availableQuantity;
    }

    public function setAvailablequantity(?int $availableQuantity): self
    {
        $this->availableQuantity = $availableQuantity;
        return $this;
    }

    
    public function getWarrantyperiod(): ?int
    {
        return $this->warrantyPeriod;
    }

    public function setWarrantyperiod(?int $warrantyPeriod): self
    {
        $this->warrantyPeriod = $warrantyPeriod;
        return $this;
    }

    
    public function getSupportperiod(): ?int
    {
        return $this->supportPeriod;
    }

    public function setSupportperiod(?int $supportPeriod): self
    {
        $this->supportPeriod = $supportPeriod;
        return $this;
    }

    
    public function getLifecyclestage(): ?string
    {
        return $this->lifecycleStage;
    }

    public function setLifecyclestage(?string $lifecycleStage): self
    {
        $this->lifecycleStage = $lifecycleStage;
        return $this;
    }

    
    public function getLaunchdate(): ?\DateTimeInterface
    {
        return $this->launchDate;
    }

    public function setLaunchdate(?\DateTimeInterface $launchDate): self
    {
        $this->launchDate = $launchDate;
        return $this;
    }

    
    public function getEndoflifedate(): ?\DateTimeInterface
    {
        return $this->endOfLifeDate;
    }

    public function setEndoflifedate(?\DateTimeInterface $endOfLifeDate): self
    {
        $this->endOfLifeDate = $endOfLifeDate;
        return $this;
    }

    
    public function getActive(): ?bool
    {
        return $this->active;
    }

    public function setActive(?bool $active): self
    {
        $this->active = $active;
        return $this;
    }

    
    public function getSellable(): ?bool
    {
        return $this->sellable;
    }

    public function setSellable(?bool $sellable): self
    {
        $this->sellable = $sellable;
        return $this;
    }

    
    public function getPurchasable(): ?bool
    {
        return $this->purchasable;
    }

    public function setPurchasable(?bool $purchasable): self
    {
        $this->purchasable = $purchasable;
        return $this;
    }

    
    public function getRequiresapproval(): ?bool
    {
        return $this->requiresApproval;
    }

    public function setRequiresapproval(?bool $requiresApproval): self
    {
        $this->requiresApproval = $requiresApproval;
        return $this;
    }

    
    public function getSubscription(): ?bool
    {
        return $this->subscription;
    }

    public function setSubscription(?bool $subscription): self
    {
        $this->subscription = $subscription;
        return $this;
    }

    
    public function getSubscriptionperiod(): ?string
    {
        return $this->subscriptionPeriod;
    }

    public function setSubscriptionperiod(?string $subscriptionPeriod): self
    {
        $this->subscriptionPeriod = $subscriptionPeriod;
        return $this;
    }

    
    public function getBillingfrequency(): ?BillingFrequency
    {
        return $this->billingFrequency;
    }

    public function setBillingfrequency(?BillingFrequency $billingFrequency): self
    {
        $this->billingFrequency = $billingFrequency;
        return $this;
    }

    public function getSetupfee(): ?float
    {
        return $this->setupFee;
    }

    public function setSetupfee(?float $setupFee): self
    {
        $this->setupFee = $setupFee;
        return $this;
    }

    
    public function getRecurringfee(): ?float
    {
        return $this->recurringFee;
    }

    public function setRecurringfee(?float $recurringFee): self
    {
        $this->recurringFee = $recurringFee;
        return $this;
    }

    
    public function getCancellationfee(): ?float
    {
        return $this->cancellationFee;
    }

    public function setCancellationfee(?float $cancellationFee): self
    {
        $this->cancellationFee = $cancellationFee;
        return $this;
    }

    
    /**
     * @return Collection<int, Product>
     */
    public function getRelatedto(): Collection
    {
        return $this->relatedTo;
    }

    public function addRelatedt(Product $relatedT): self
    {
        if (!$this->relatedTo->contains($relatedT)) {
            $this->relatedTo->add($relatedT);
        }
        return $this;
    }

    public function removeRelatedt(Product $relatedT): self
    {
        if ($this->relatedTo->removeElement($relatedT)) {
        }
        return $this;
    }

    /**
     * @return Collection<int, Product>
     */
    public function getRelatedfrom(): Collection
    {
        return $this->relatedFrom;
    }

    public function addRelatedfro(Product $relatedFro): self
    {
        if (!$this->relatedFrom->contains($relatedFro)) {
            $this->relatedFrom->add($relatedFro);
        }
        return $this;
    }

    public function removeRelatedfro(Product $relatedFro): self
    {
        if ($this->relatedFrom->removeElement($relatedFro)) {
        }
        return $this;
    }

    /**
     * @return Collection<int, Product>
     */
    public function getSubstituteto(): Collection
    {
        return $this->substituteTo;
    }

    public function addSubstitutet(Product $substituteT): self
    {
        if (!$this->substituteTo->contains($substituteT)) {
            $this->substituteTo->add($substituteT);
        }
        return $this;
    }

    public function removeSubstitutet(Product $substituteT): self
    {
        if ($this->substituteTo->removeElement($substituteT)) {
        }
        return $this;
    }

    /**
     * @return Collection<int, Product>
     */
    public function getSubstitutefrom(): Collection
    {
        return $this->substituteFrom;
    }

    public function addSubstitutefro(Product $substituteFro): self
    {
        if (!$this->substituteFrom->contains($substituteFro)) {
            $this->substituteFrom->add($substituteFro);
        }
        return $this;
    }

    public function removeSubstitutefro(Product $substituteFro): self
    {
        if ($this->substituteFrom->removeElement($substituteFro)) {
        }
        return $this;
    }

    /**
     * @return Collection<int, Attachment>
     */
    public function getAttachments(): Collection
    {
        return $this->attachments;
    }

    public function addAttachment(Attachment $attachment): self
    {
        if (!$this->attachments->contains($attachment)) {
            $this->attachments->add($attachment);
        }
        return $this;
    }

    public function removeAttachment(Attachment $attachment): self
    {
        if ($this->attachments->removeElement($attachment)) {
        }
        return $this;
    }

    public function getSpecifications(): ?array
    {
        return $this->specifications;
    }

    public function setSpecifications(?array $specifications): self
    {
        $this->specifications = $specifications;
        return $this;
    }

    
    public function getFeatures(): ?array
    {
        return $this->features;
    }

    public function setFeatures(?array $features): self
    {
        $this->features = $features;
        return $this;
    }

    
    public function getCustomfields(): ?array
    {
        return $this->customFields;
    }

    public function setCustomfields(?array $customFields): self
    {
        $this->customFields = $customFields;
        return $this;
    }

    
    /**
     * @return Collection<int, Tag>
     */
    public function getTags(): Collection
    {
        return $this->tags;
    }

    public function addTag(Tag $tag): self
    {
        if (!$this->tags->contains($tag)) {
            $this->tags->add($tag);
        }
        return $this;
    }

    public function removeTag(Tag $tag): self
    {
        if ($this->tags->removeElement($tag)) {
        }
        return $this;
    }

    /**
     * @return Collection<int, ProductBatch>
     */
    public function getBatches(): Collection
    {
        return $this->batches;
    }

    public function addBatche(ProductBatch $batche): self
    {
        if (!$this->batches->contains($batche)) {
            $this->batches->add($batche);
        }
        return $this;
    }

    public function removeBatche(ProductBatch $batche): self
    {
        if ($this->batches->removeElement($batche)) {
        }
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? '';
    }
}
