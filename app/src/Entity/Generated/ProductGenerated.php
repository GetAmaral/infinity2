<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
use App\Entity\Organization;
use App\Entity\Attachment;
use App\Entity\ProductBatch;
use App\Entity\BillingFrequency;
use App\Entity\Brand;
use App\Entity\ProductCategory;
use App\Entity\Deal;
use App\Entity\Company;
use App\Entity\ProductLine;
use App\Entity\Product;
use App\Entity\Tag;
use App\Entity\TaxCategory;

/**
 * Product Entity (Generated Base Class)
 *
 * Products and services catalog *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to Product.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class ProductGenerated extends EntityBase
{
    #[Groups(['product:read', 'product:write'])]
    #[ORM\ManyToOne(targetEntity: Organization::class, inversedBy: 'products')]
    #[ORM\JoinColumn(nullable: false)]
    protected Organization $organization;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\Column(type: 'string', length: 100, nullable: true)]
    #[Assert\Length(max: 100)]
    protected ?string $sku = null;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\Column(type: 'string', length: 255)]
    protected string $name;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $description = null;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\Column(type: 'string', length: 14, nullable: true)]
    #[Assert\Length(max: 14)]
    protected ?string $gtin = null;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\Column(type: 'string', length: 12, nullable: true)]
    #[Assert\Length(max: 12)]
    protected ?string $upc = null;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\Column(type: 'string', length: 13, nullable: true)]
    #[Assert\Length(max: 13)]
    protected ?string $ean = null;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\Column(type: 'string', length: 100, nullable: true)]
    #[Assert\Length(max: 100)]
    protected ?string $mpn = null;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\Column(type: 'string', length: 100, nullable: true)]
    #[Assert\Length(max: 100)]
    protected ?string $barcode = null;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\Column(type: 'boolean', nullable: true)]
    protected ?bool $available = null;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\Column(type: 'decimal', precision: 15, scale: 2, nullable: true)]
    #[Assert\PositiveOrZero]
    protected ?string $price = null;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\Column(type: 'decimal', precision: 15, scale: 2, nullable: true)]
    #[Assert\PositiveOrZero]
    protected ?string $compareAtPrice = null;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\Column(type: 'string', length: 50, nullable: true)]
    #[Assert\Choice(choices: ['draft', 'active', 'archived', 'discontinued'])]
    protected ?string $status = null;

    #[Groups(['product:read'])]
    #[ORM\OneToMany(targetEntity: Attachment::class, mappedBy: 'product', fetch: 'LAZY')]
    protected Collection $attachments;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\Column(type: 'integer', nullable: true)]
    #[Assert\PositiveOrZero]
    protected ?int $reorderLevel = null;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\Column(type: 'integer', nullable: true)]
    #[Assert\PositiveOrZero]
    protected ?int $reorderQuantity = null;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\Column(type: 'integer', nullable: true)]
    #[Assert\PositiveOrZero]
    protected ?int $leadTime = null;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\Column(type: 'integer', nullable: true)]
    #[Assert\Positive]
    protected ?int $minOrderQuantity = null;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\Column(type: 'boolean', nullable: true)]
    protected ?bool $active = null;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\Column(type: 'integer', nullable: true)]
    #[Assert\Positive]
    protected ?int $maxOrderQuantity = null;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $availableQuantity = null;

    #[Groups(['product:read'])]
    #[ORM\OneToMany(targetEntity: ProductBatch::class, mappedBy: 'product', fetch: 'LAZY')]
    protected Collection $batches;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\ManyToOne(targetEntity: BillingFrequency::class, inversedBy: 'products')]
    protected ?BillingFrequency $billingFrequency = null;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\ManyToOne(targetEntity: Brand::class, inversedBy: 'products')]
    protected ?Brand $brand = null;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\Column(type: 'decimal', precision: 15, scale: 2, nullable: true)]
    protected ?string $cancellationFee = null;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\ManyToOne(targetEntity: ProductCategory::class, inversedBy: 'products')]
    protected ?ProductCategory $category = null;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\Column(type: 'decimal', precision: 15, scale: 2, nullable: true)]
    protected ?string $commissionAmount = null;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\Column(type: 'decimal', precision: 5, scale: 2, nullable: true)]
    #[Assert\Range(max: 100, min: 0)]
    protected ?string $commissionRate = null;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\Column(type: 'decimal', precision: 15, scale: 2, nullable: true)]
    protected ?string $costPrice = null;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $currency = null;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\Column(type: 'json', nullable: true)]
    protected ?array $customFields = null;

    #[Groups(['product:read'])]
    #[ORM\ManyToMany(targetEntity: Deal::class, mappedBy: 'products', fetch: 'LAZY')]
    protected Collection $deals;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $dimensions = null;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\Column(type: 'decimal', precision: 15, scale: 2, nullable: true)]
    protected ?string $discountAmount = null;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\Column(type: 'decimal', precision: 5, scale: 2, nullable: true)]
    #[Assert\Range(max: 100, min: 0)]
    protected ?string $discountPercentage = null;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\Column(type: 'date', nullable: true)]
    protected ?\DateTimeImmutable $endOfLifeDate = null;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\Column(type: 'float', precision: 10, scale: 2, nullable: true)]
    protected ?float $exchangeRate = null;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\Column(type: 'json', nullable: true)]
    protected ?array $features = null;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\Column(type: 'date', nullable: true)]
    protected ?\DateTimeImmutable $launchDate = null;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $lifecycleStage = null;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\Column(type: 'decimal', precision: 15, scale: 2, nullable: true)]
    protected ?string $listPrice = null;

    #[Groups(['product:read'])]
    #[ORM\ManyToMany(targetEntity: Company::class, mappedBy: 'manufacturedProducts', fetch: 'LAZY')]
    protected Collection $manufacturer;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\Column(type: 'decimal', precision: 5, scale: 2, nullable: true)]
    #[Assert\Range(max: 100, min: 0)]
    protected ?string $marginPercentage = null;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\Column(type: 'decimal', precision: 15, scale: 2, nullable: true)]
    protected ?string $maximumDiscount = null;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\Column(type: 'decimal', precision: 15, scale: 2, nullable: true)]
    protected ?string $minimumPrice = null;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $productCode = null;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\ManyToOne(targetEntity: ProductLine::class, inversedBy: 'products')]
    protected ?ProductLine $productLine = null;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $productType = null;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\Column(type: 'boolean', nullable: true)]
    protected ?bool $purchasable = null;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\Column(type: 'decimal', precision: 15, scale: 2, nullable: true)]
    protected ?string $recurringFee = null;

    #[Groups(['product:read'])]
    #[ORM\ManyToMany(targetEntity: Product::class, mappedBy: 'relatedTo', fetch: 'LAZY')]
    protected Collection $relatedFrom;

    #[Groups(['product:read'])]
    #[ORM\ManyToMany(targetEntity: Product::class, inversedBy: 'relatedFrom', fetch: 'LAZY')]
    #[ORM\JoinTable(name: 'product_relatedTo')]
    protected Collection $relatedTo;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\Column(type: 'boolean', nullable: true)]
    protected ?bool $requiresApproval = null;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $reservedQuantity = null;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\Column(type: 'boolean', nullable: true)]
    protected ?bool $sellable = null;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\Column(type: 'decimal', precision: 15, scale: 2, nullable: true)]
    protected ?string $setupFee = null;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $shortDescription = null;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\Column(type: 'json', nullable: true)]
    protected ?array $specifications = null;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $stockQuantity = null;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\Column(type: 'boolean', nullable: true)]
    protected ?bool $subscription = null;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $subscriptionPeriod = null;

    #[Groups(['product:read'])]
    #[ORM\ManyToMany(targetEntity: Product::class, mappedBy: 'substituteTo', fetch: 'LAZY')]
    protected Collection $substituteFrom;

    #[Groups(['product:read'])]
    #[ORM\ManyToMany(targetEntity: Product::class, inversedBy: 'substituteFrom', fetch: 'LAZY')]
    #[ORM\JoinTable(name: 'product_substituteTo')]
    protected Collection $substituteTo;

    #[Groups(['product:read'])]
    #[ORM\ManyToMany(targetEntity: Company::class, mappedBy: 'suppliedProducts', fetch: 'LAZY')]
    protected Collection $supplier;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $supportPeriod = null;

    #[Groups(['product:read'])]
    #[ORM\ManyToMany(targetEntity: Tag::class, inversedBy: 'products', fetch: 'LAZY')]
    #[ORM\JoinTable(name: 'product_tags')]
    protected Collection $tags;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\ManyToOne(targetEntity: TaxCategory::class, inversedBy: 'products')]
    protected ?TaxCategory $taxCategory = null;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $unitOfMeasure = null;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $warrantyPeriod = null;

    #[Groups(['product:read', 'product:write'])]
    #[ORM\Column(type: 'float', precision: 10, scale: 2, nullable: true)]
    protected ?float $weight = null;


    public function __construct()
    {
        parent::__construct();
        $this->attachments = new ArrayCollection();
        $this->batches = new ArrayCollection();
        $this->deals = new ArrayCollection();
        $this->manufacturer = new ArrayCollection();
        $this->relatedFrom = new ArrayCollection();
        $this->relatedTo = new ArrayCollection();
        $this->substituteFrom = new ArrayCollection();
        $this->substituteTo = new ArrayCollection();
        $this->supplier = new ArrayCollection();
        $this->tags = new ArrayCollection();
    }

    public function getOrganization(): Organization
    {
        return $this->organization;
    }

    public function setOrganization(Organization $organization): self
    {
        $this->organization = $organization;
        return $this;
    }

    public function getSku(): ?string    {
        return $this->sku;
    }

    public function setSku(?string $sku): self
    {
        $this->sku = $sku;
        return $this;
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getDescription(): ?string    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    public function getGtin(): ?string    {
        return $this->gtin;
    }

    public function setGtin(?string $gtin): self
    {
        $this->gtin = $gtin;
        return $this;
    }

    public function getUpc(): ?string    {
        return $this->upc;
    }

    public function setUpc(?string $upc): self
    {
        $this->upc = $upc;
        return $this;
    }

    public function getEan(): ?string    {
        return $this->ean;
    }

    public function setEan(?string $ean): self
    {
        $this->ean = $ean;
        return $this;
    }

    public function getMpn(): ?string    {
        return $this->mpn;
    }

    public function setMpn(?string $mpn): self
    {
        $this->mpn = $mpn;
        return $this;
    }

    public function getBarcode(): ?string    {
        return $this->barcode;
    }

    public function setBarcode(?string $barcode): self
    {
        $this->barcode = $barcode;
        return $this;
    }

    public function getAvailable(): ?bool    {
        return $this->available;
    }

    public function setAvailable(?bool $available): self
    {
        $this->available = $available;
        return $this;
    }

    public function isAvailable(): bool
    {
        return $this->available === true;
    }

    public function getPrice(): ?string    {
        return $this->price;
    }

    public function setPrice(?string $price): self
    {
        $this->price = $price;
        return $this;
    }

    public function getCompareAtPrice(): ?string    {
        return $this->compareAtPrice;
    }

    public function setCompareAtPrice(?string $compareAtPrice): self
    {
        $this->compareAtPrice = $compareAtPrice;
        return $this;
    }

    public function getStatus(): ?string    {
        return $this->status;
    }

    public function setStatus(?string $status): self
    {
        $this->status = $status;
        return $this;
    }

    /**
     * @return Collection<int, Attachment>
     */
    public function getAttachments(): Collection
    {
        return $this->attachments;
    }

    public function addAttachment(Attachment $attachment): self
    {
        if (!$this->attachments->contains($attachment)) {
            $this->attachments->add($attachment);
            $attachment->setProduct($this);
        }
        return $this;
    }

    public function removeAttachment(Attachment $attachment): self
    {
        if ($this->attachments->removeElement($attachment)) {
            if ($attachment->getProduct() === $this) {
                $attachment->setProduct(null);
            }
        }
        return $this;
    }

    public function getReorderLevel(): ?int    {
        return $this->reorderLevel;
    }

    public function setReorderLevel(?int $reorderLevel): self
    {
        $this->reorderLevel = $reorderLevel;
        return $this;
    }

    public function getReorderQuantity(): ?int    {
        return $this->reorderQuantity;
    }

    public function setReorderQuantity(?int $reorderQuantity): self
    {
        $this->reorderQuantity = $reorderQuantity;
        return $this;
    }

    public function getLeadTime(): ?int    {
        return $this->leadTime;
    }

    public function setLeadTime(?int $leadTime): self
    {
        $this->leadTime = $leadTime;
        return $this;
    }

    public function getMinOrderQuantity(): ?int    {
        return $this->minOrderQuantity;
    }

    public function setMinOrderQuantity(?int $minOrderQuantity): self
    {
        $this->minOrderQuantity = $minOrderQuantity;
        return $this;
    }

    public function getActive(): ?bool    {
        return $this->active;
    }

    public function setActive(?bool $active): self
    {
        $this->active = $active;
        return $this;
    }

    public function isActive(): bool
    {
        return $this->active === true;
    }

    public function getMaxOrderQuantity(): ?int    {
        return $this->maxOrderQuantity;
    }

    public function setMaxOrderQuantity(?int $maxOrderQuantity): self
    {
        $this->maxOrderQuantity = $maxOrderQuantity;
        return $this;
    }

    public function getAvailableQuantity(): ?int    {
        return $this->availableQuantity;
    }

    public function setAvailableQuantity(?int $availableQuantity): self
    {
        $this->availableQuantity = $availableQuantity;
        return $this;
    }

    /**
     * @return Collection<int, ProductBatch>
     */
    public function getBatches(): Collection
    {
        return $this->batches;
    }

    public function addBatch(ProductBatch $batch): self
    {
        if (!$this->batches->contains($batch)) {
            $this->batches->add($batch);
            $batch->setProduct($this);
        }
        return $this;
    }

    public function removeBatch(ProductBatch $batch): self
    {
        if ($this->batches->removeElement($batch)) {
            if ($batch->getProduct() === $this) {
                $batch->setProduct(null);
            }
        }
        return $this;
    }

    public function getBillingFrequency(): ?BillingFrequency
    {
        return $this->billingFrequency;
    }

    public function setBillingFrequency(?BillingFrequency $billingFrequency): self
    {
        $this->billingFrequency = $billingFrequency;
        return $this;
    }

    public function getBrand(): ?Brand
    {
        return $this->brand;
    }

    public function setBrand(?Brand $brand): self
    {
        $this->brand = $brand;
        return $this;
    }

    public function getCancellationFee(): ?string    {
        return $this->cancellationFee;
    }

    public function setCancellationFee(?string $cancellationFee): self
    {
        $this->cancellationFee = $cancellationFee;
        return $this;
    }

    public function getCategory(): ?ProductCategory
    {
        return $this->category;
    }

    public function setCategory(?ProductCategory $category): self
    {
        $this->category = $category;
        return $this;
    }

    public function getCommissionAmount(): ?string    {
        return $this->commissionAmount;
    }

    public function setCommissionAmount(?string $commissionAmount): self
    {
        $this->commissionAmount = $commissionAmount;
        return $this;
    }

    public function getCommissionRate(): ?string    {
        return $this->commissionRate;
    }

    public function setCommissionRate(?string $commissionRate): self
    {
        $this->commissionRate = $commissionRate;
        return $this;
    }

    public function getCostPrice(): ?string    {
        return $this->costPrice;
    }

    public function setCostPrice(?string $costPrice): self
    {
        $this->costPrice = $costPrice;
        return $this;
    }

    public function getCurrency(): ?string    {
        return $this->currency;
    }

    public function setCurrency(?string $currency): self
    {
        $this->currency = $currency;
        return $this;
    }

    public function getCustomFields(): ?array    {
        return $this->customFields;
    }

    public function setCustomFields(?array $customFields): self
    {
        $this->customFields = $customFields;
        return $this;
    }

    /**
     * @return Collection<int, Deal>
     */
    public function getDeals(): Collection
    {
        return $this->deals;
    }

    public function addDeal(Deal $deal): self
    {
        if (!$this->deals->contains($deal)) {
            $this->deals->add($deal);
            $deal->setProducts($this);
        }
        return $this;
    }

    public function removeDeal(Deal $deal): self
    {
        if ($this->deals->removeElement($deal)) {
            if ($deal->getProducts() === $this) {
                $deal->setProducts(null);
            }
        }
        return $this;
    }

    public function getDimensions(): ?string    {
        return $this->dimensions;
    }

    public function setDimensions(?string $dimensions): self
    {
        $this->dimensions = $dimensions;
        return $this;
    }

    public function getDiscountAmount(): ?string    {
        return $this->discountAmount;
    }

    public function setDiscountAmount(?string $discountAmount): self
    {
        $this->discountAmount = $discountAmount;
        return $this;
    }

    public function getDiscountPercentage(): ?string    {
        return $this->discountPercentage;
    }

    public function setDiscountPercentage(?string $discountPercentage): self
    {
        $this->discountPercentage = $discountPercentage;
        return $this;
    }

    public function getEndOfLifeDate(): ?\DateTimeImmutable    {
        return $this->endOfLifeDate;
    }

    public function setEndOfLifeDate(?\DateTimeImmutable $endOfLifeDate): self
    {
        $this->endOfLifeDate = $endOfLifeDate;
        return $this;
    }

    public function getExchangeRate(): ?float    {
        return $this->exchangeRate;
    }

    public function setExchangeRate(?float $exchangeRate): self
    {
        $this->exchangeRate = $exchangeRate;
        return $this;
    }

    public function getFeatures(): ?array    {
        return $this->features;
    }

    public function setFeatures(?array $features): self
    {
        $this->features = $features;
        return $this;
    }

    public function getLaunchDate(): ?\DateTimeImmutable    {
        return $this->launchDate;
    }

    public function setLaunchDate(?\DateTimeImmutable $launchDate): self
    {
        $this->launchDate = $launchDate;
        return $this;
    }

    public function getLifecycleStage(): ?string    {
        return $this->lifecycleStage;
    }

    public function setLifecycleStage(?string $lifecycleStage): self
    {
        $this->lifecycleStage = $lifecycleStage;
        return $this;
    }

    public function getListPrice(): ?string    {
        return $this->listPrice;
    }

    public function setListPrice(?string $listPrice): self
    {
        $this->listPrice = $listPrice;
        return $this;
    }

    /**
     * @return Collection<int, Company>
     */
    public function getManufacturer(): Collection
    {
        return $this->manufacturer;
    }

    public function addManufacturer(Company $manufacturer): self
    {
        if (!$this->manufacturer->contains($manufacturer)) {
            $this->manufacturer->add($manufacturer);
            $manufacturer->setManufacturedProducts($this);
        }
        return $this;
    }

    public function removeManufacturer(Company $manufacturer): self
    {
        if ($this->manufacturer->removeElement($manufacturer)) {
            if ($manufacturer->getManufacturedProducts() === $this) {
                $manufacturer->setManufacturedProducts(null);
            }
        }
        return $this;
    }

    public function getMarginPercentage(): ?string    {
        return $this->marginPercentage;
    }

    public function setMarginPercentage(?string $marginPercentage): self
    {
        $this->marginPercentage = $marginPercentage;
        return $this;
    }

    public function getMaximumDiscount(): ?string    {
        return $this->maximumDiscount;
    }

    public function setMaximumDiscount(?string $maximumDiscount): self
    {
        $this->maximumDiscount = $maximumDiscount;
        return $this;
    }

    public function getMinimumPrice(): ?string    {
        return $this->minimumPrice;
    }

    public function setMinimumPrice(?string $minimumPrice): self
    {
        $this->minimumPrice = $minimumPrice;
        return $this;
    }

    public function getProductCode(): ?string    {
        return $this->productCode;
    }

    public function setProductCode(?string $productCode): self
    {
        $this->productCode = $productCode;
        return $this;
    }

    public function getProductLine(): ?ProductLine
    {
        return $this->productLine;
    }

    public function setProductLine(?ProductLine $productLine): self
    {
        $this->productLine = $productLine;
        return $this;
    }

    public function getProductType(): ?int    {
        return $this->productType;
    }

    public function setProductType(?int $productType): self
    {
        $this->productType = $productType;
        return $this;
    }

    public function getPurchasable(): ?bool    {
        return $this->purchasable;
    }

    public function setPurchasable(?bool $purchasable): self
    {
        $this->purchasable = $purchasable;
        return $this;
    }

    public function isPurchasable(): bool
    {
        return $this->purchasable === true;
    }

    public function getRecurringFee(): ?string    {
        return $this->recurringFee;
    }

    public function setRecurringFee(?string $recurringFee): self
    {
        $this->recurringFee = $recurringFee;
        return $this;
    }

    /**
     * @return Collection<int, Product>
     */
    public function getRelatedFrom(): Collection
    {
        return $this->relatedFrom;
    }

    public function addRelatedFrom(Product $relatedFrom): self
    {
        if (!$this->relatedFrom->contains($relatedFrom)) {
            $this->relatedFrom->add($relatedFrom);
            $relatedFrom->setRelatedTo($this);
        }
        return $this;
    }

    public function removeRelatedFrom(Product $relatedFrom): self
    {
        if ($this->relatedFrom->removeElement($relatedFrom)) {
            if ($relatedFrom->getRelatedTo() === $this) {
                $relatedFrom->setRelatedTo(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, Product>
     */
    public function getRelatedTo(): Collection
    {
        return $this->relatedTo;
    }

    public function addRelatedTo(Product $relatedTo): self
    {
        if (!$this->relatedTo->contains($relatedTo)) {
            $this->relatedTo->add($relatedTo);
        }
        return $this;
    }

    public function removeRelatedTo(Product $relatedTo): self
    {
        if ($this->relatedTo->removeElement($relatedTo)) {
        }
        return $this;
    }

    public function getRequiresApproval(): ?bool    {
        return $this->requiresApproval;
    }

    public function setRequiresApproval(?bool $requiresApproval): self
    {
        $this->requiresApproval = $requiresApproval;
        return $this;
    }

    public function isRequiresApproval(): bool
    {
        return $this->requiresApproval === true;
    }

    public function getReservedQuantity(): ?int    {
        return $this->reservedQuantity;
    }

    public function setReservedQuantity(?int $reservedQuantity): self
    {
        $this->reservedQuantity = $reservedQuantity;
        return $this;
    }

    public function getSellable(): ?bool    {
        return $this->sellable;
    }

    public function setSellable(?bool $sellable): self
    {
        $this->sellable = $sellable;
        return $this;
    }

    public function isSellable(): bool
    {
        return $this->sellable === true;
    }

    public function getSetupFee(): ?string    {
        return $this->setupFee;
    }

    public function setSetupFee(?string $setupFee): self
    {
        $this->setupFee = $setupFee;
        return $this;
    }

    public function getShortDescription(): ?string    {
        return $this->shortDescription;
    }

    public function setShortDescription(?string $shortDescription): self
    {
        $this->shortDescription = $shortDescription;
        return $this;
    }

    public function getSpecifications(): ?array    {
        return $this->specifications;
    }

    public function setSpecifications(?array $specifications): self
    {
        $this->specifications = $specifications;
        return $this;
    }

    public function getStockQuantity(): ?int    {
        return $this->stockQuantity;
    }

    public function setStockQuantity(?int $stockQuantity): self
    {
        $this->stockQuantity = $stockQuantity;
        return $this;
    }

    public function getSubscription(): ?bool    {
        return $this->subscription;
    }

    public function setSubscription(?bool $subscription): self
    {
        $this->subscription = $subscription;
        return $this;
    }

    public function isSubscription(): bool
    {
        return $this->subscription === true;
    }

    public function getSubscriptionPeriod(): ?string    {
        return $this->subscriptionPeriod;
    }

    public function setSubscriptionPeriod(?string $subscriptionPeriod): self
    {
        $this->subscriptionPeriod = $subscriptionPeriod;
        return $this;
    }

    /**
     * @return Collection<int, Product>
     */
    public function getSubstituteFrom(): Collection
    {
        return $this->substituteFrom;
    }

    public function addSubstituteFrom(Product $substituteFrom): self
    {
        if (!$this->substituteFrom->contains($substituteFrom)) {
            $this->substituteFrom->add($substituteFrom);
            $substituteFrom->setSubstituteTo($this);
        }
        return $this;
    }

    public function removeSubstituteFrom(Product $substituteFrom): self
    {
        if ($this->substituteFrom->removeElement($substituteFrom)) {
            if ($substituteFrom->getSubstituteTo() === $this) {
                $substituteFrom->setSubstituteTo(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, Product>
     */
    public function getSubstituteTo(): Collection
    {
        return $this->substituteTo;
    }

    public function addSubstituteTo(Product $substituteTo): self
    {
        if (!$this->substituteTo->contains($substituteTo)) {
            $this->substituteTo->add($substituteTo);
        }
        return $this;
    }

    public function removeSubstituteTo(Product $substituteTo): self
    {
        if ($this->substituteTo->removeElement($substituteTo)) {
        }
        return $this;
    }

    /**
     * @return Collection<int, Company>
     */
    public function getSupplier(): Collection
    {
        return $this->supplier;
    }

    public function addSupplier(Company $supplier): self
    {
        if (!$this->supplier->contains($supplier)) {
            $this->supplier->add($supplier);
            $supplier->setSuppliedProducts($this);
        }
        return $this;
    }

    public function removeSupplier(Company $supplier): self
    {
        if ($this->supplier->removeElement($supplier)) {
            if ($supplier->getSuppliedProducts() === $this) {
                $supplier->setSuppliedProducts(null);
            }
        }
        return $this;
    }

    public function getSupportPeriod(): ?int    {
        return $this->supportPeriod;
    }

    public function setSupportPeriod(?int $supportPeriod): self
    {
        $this->supportPeriod = $supportPeriod;
        return $this;
    }

    /**
     * @return Collection<int, Tag>
     */
    public function getTags(): Collection
    {
        return $this->tags;
    }

    public function addTag(Tag $tag): self
    {
        if (!$this->tags->contains($tag)) {
            $this->tags->add($tag);
        }
        return $this;
    }

    public function removeTag(Tag $tag): self
    {
        if ($this->tags->removeElement($tag)) {
        }
        return $this;
    }

    public function getTaxCategory(): ?TaxCategory
    {
        return $this->taxCategory;
    }

    public function setTaxCategory(?TaxCategory $taxCategory): self
    {
        $this->taxCategory = $taxCategory;
        return $this;
    }

    public function getUnitOfMeasure(): ?string    {
        return $this->unitOfMeasure;
    }

    public function setUnitOfMeasure(?string $unitOfMeasure): self
    {
        $this->unitOfMeasure = $unitOfMeasure;
        return $this;
    }

    public function getWarrantyPeriod(): ?int    {
        return $this->warrantyPeriod;
    }

    public function setWarrantyPeriod(?int $warrantyPeriod): self
    {
        $this->warrantyPeriod = $warrantyPeriod;
        return $this;
    }

    public function getWeight(): ?float    {
        return $this->weight;
    }

    public function setWeight(?float $weight): self
    {
        $this->weight = $weight;
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? ($this->getId()?->toRfc4122() ?? '');
    }
}
