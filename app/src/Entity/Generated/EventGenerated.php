<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use App\Entity\Trait\OrganizationTrait;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
                                                                                                                                                                                                    use App\Entity\Calendar;
use App\Entity\EventCategory;
use App\Entity\Event;
use App\Entity\User;
use App\Entity\EventAttendee;
use App\Entity\Attachment;
use App\Entity\Reminder;
use App\Entity\Notification;
use App\Entity\MeetingData;
use App\Entity\WorkingHour;
use App\Entity\Holiday;
use App\Entity\EventResourceBooking;

/**
 * Event Entity (Generated Base Class)
 *
 * 
 *
 * This class is ALWAYS regenerated from CSV. DO NOT edit this file.
 * Add custom logic to Event.php instead.
 *
 * @generated by Luminai Code Generator
 * @see /config/EntityNew.csv and /config/PropertyNew.csv
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class EventGenerated extends EntityBase
{
    use OrganizationTrait;

    #[ORM\Column(type: 'string')]
    #[Assert\NotBlank]
    #[Assert\Length(max: 255)]
    #[Groups(['event:read', 'event:write'])]
    protected string $name;

    #[ORM\ManyToOne(targetEntity: Calendar::class, inversedBy: 'events')]
    #[Groups(['event:read', 'event:write'])]
    protected ?Calendar $calendar = null;

    #[ORM\Column(type: 'text', nullable: true)]
    #[Groups(['event:read', 'event:write'])]
    protected ?string $description = null;

    #[ORM\Column(type: 'string', nullable: true)]
    #[Assert\Length(max: 255)]
    #[Groups(['event:read', 'event:write'])]
    protected ?string $location = null;

    #[ORM\Column(type: 'string', nullable: true)]
    #[Assert\Length(max: 255)]
    #[Groups(['event:read', 'event:write'])]
    protected ?string $geo = null;

    #[ORM\Column(type: 'datetime', nullable: true)]
    #[Groups(['event:read', 'event:write'])]
    protected ?\DateTimeInterface $startTime = null;

    #[ORM\Column(type: 'datetime', nullable: true)]
    #[Groups(['event:read', 'event:write'])]
    protected ?\DateTimeInterface $endTime = null;

    #[ORM\Column(type: 'boolean', nullable: true)]
    #[Groups(['event:read', 'event:write'])]
    protected ?bool $allDay = null;

    #[ORM\Column(type: 'integer', nullable: true)]
    #[Groups(['event:read', 'event:write'])]
    protected ?int $eventStatus = null;

    #[ORM\Column(type: 'boolean', nullable: true)]
    #[Groups(['event:read', 'event:write'])]
    protected ?bool $visibility = null;

    #[ORM\Column(type: 'integer', nullable: true)]
    #[Groups(['event:read', 'event:write'])]
    protected ?int $priority = null;

    #[ORM\Column(type: 'float', nullable: true)]
    #[Groups(['event:read', 'event:write'])]
    protected ?float $recurrenceInterval = null;

    #[ORM\Column(type: 'integer', nullable: true)]
    #[Groups(['event:read', 'event:write'])]
    protected ?int $recurrenceFrequency = null;

    #[ORM\Column(type: 'date', nullable: true)]
    #[Groups(['event:read', 'event:write'])]
    protected ?\DateTimeInterface $recurrenceEndDate = null;

    #[ORM\Column(type: 'integer', nullable: true)]
    #[Groups(['event:read', 'event:write'])]
    protected ?int $recurrenceCount = null;

    #[ORM\Column(type: 'datetime', nullable: true)]
    #[Groups(['event:read', 'event:write'])]
    protected ?\DateTimeInterface $originalStartTime = null;

    #[ORM\Column(type: 'integer', nullable: true)]
    #[Groups(['event:read', 'event:write'])]
    protected ?int $sequence = null;

    #[ORM\ManyToMany(targetEntity: EventCategory::class, inversedBy: 'events', fetch: 'LAZY')]
    #[Groups(['event:read', 'event:write'])]
    protected Collection $categories;

    #[ORM\ManyToOne(targetEntity: Event::class, inversedBy: 'childrenEvents')]
    #[Groups(['event:read', 'event:write'])]
    protected ?Event $parentEvent = null;

    #[ORM\OneToMany(targetEntity: Event::class, mappedBy: 'parentEvent', fetch: 'LAZY')]
    #[Groups(['event:read', 'event:write'])]
    protected Collection $childrenEvents;

    #[ORM\ManyToOne(targetEntity: User::class, inversedBy: 'organizedEvents')]
    #[Groups(['event:read', 'event:write'])]
    protected ?User $organizer = null;

    #[ORM\OneToMany(targetEntity: EventAttendee::class, mappedBy: 'event', cascade: ['persist', 'remove'], orphanRemoval: true, fetch: 'LAZY')]
    #[Groups(['event:read', 'event:write'])]
    protected Collection $attendees;

    #[ORM\OneToMany(targetEntity: Attachment::class, mappedBy: 'event', fetch: 'LAZY')]
    #[Groups(['event:read', 'event:write'])]
    protected Collection $attachments;

    #[ORM\OneToMany(targetEntity: Reminder::class, mappedBy: 'event', fetch: 'LAZY')]
    #[Groups(['event:read', 'event:write'])]
    protected Collection $reminders;

    #[ORM\OneToMany(targetEntity: Notification::class, mappedBy: 'event', fetch: 'LAZY')]
    #[Groups(['event:read', 'event:write'])]
    protected Collection $notifications;

    #[ORM\OneToMany(targetEntity: MeetingData::class, mappedBy: 'event', fetch: 'LAZY')]
    #[Groups(['event:read', 'event:write'])]
    protected Collection $meetingDatas;

    #[ORM\OneToMany(targetEntity: WorkingHour::class, mappedBy: 'event', fetch: 'LAZY')]
    #[Groups(['event:read', 'event:write'])]
    protected Collection $workingHours;

    #[ORM\OneToMany(targetEntity: Holiday::class, mappedBy: 'event', fetch: 'LAZY')]
    #[Groups(['event:read', 'event:write'])]
    protected Collection $holidays;

    #[ORM\OneToMany(targetEntity: EventResourceBooking::class, mappedBy: 'event', fetch: 'LAZY')]
    #[Groups(['event:read', 'event:write'])]
    protected Collection $resourceBookings;

    #[ORM\Column(type: 'string', nullable: true)]
    #[Assert\Length(max: 255)]
    #[Groups(['event:read', 'event:write'])]
    protected ?string $hangoutLink = null;

    #[ORM\Column(type: 'json', nullable: true)]
    #[Groups(['event:read', 'event:write'])]
    protected ?array $conferenceData = null;

    #[ORM\Column(type: 'json', nullable: true)]
    #[Groups(['event:read', 'event:write'])]
    protected ?array $extendedProperties = null;

    #[ORM\Column(type: 'json', nullable: true)]
    #[Groups(['event:read', 'event:write'])]
    protected ?array $source = null;

    #[ORM\Column(type: 'text', nullable: true)]
    #[Groups(['event:read', 'event:write'])]
    protected ?string $notes = null;


    public function __construct()
    {
        parent::__construct();
        $this->categories = new ArrayCollection();
        $this->childrenEvents = new ArrayCollection();
        $this->attendees = new ArrayCollection();
        $this->attachments = new ArrayCollection();
        $this->reminders = new ArrayCollection();
        $this->notifications = new ArrayCollection();
        $this->meetingDatas = new ArrayCollection();
        $this->workingHours = new ArrayCollection();
        $this->holidays = new ArrayCollection();
        $this->resourceBookings = new ArrayCollection();
    }

    public function getName(): string
    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    
    public function getCalendar(): ?Calendar
    {
        return $this->calendar;
    }

    public function setCalendar(?Calendar $calendar): self
    {
        $this->calendar = $calendar;
        return $this;
    }

    public function getDescription(): ?string
    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    
    public function getLocation(): ?string
    {
        return $this->location;
    }

    public function setLocation(?string $location): self
    {
        $this->location = $location;
        return $this;
    }

    
    public function getGeo(): ?string
    {
        return $this->geo;
    }

    public function setGeo(?string $geo): self
    {
        $this->geo = $geo;
        return $this;
    }

    
    public function getStarttime(): ?\DateTimeInterface
    {
        return $this->startTime;
    }

    public function setStarttime(?\DateTimeInterface $startTime): self
    {
        $this->startTime = $startTime;
        return $this;
    }

    
    public function getEndtime(): ?\DateTimeInterface
    {
        return $this->endTime;
    }

    public function setEndtime(?\DateTimeInterface $endTime): self
    {
        $this->endTime = $endTime;
        return $this;
    }

    
    public function getAllday(): ?bool
    {
        return $this->allDay;
    }

    public function setAllday(?bool $allDay): self
    {
        $this->allDay = $allDay;
        return $this;
    }

    
    public function getEventstatus(): ?int
    {
        return $this->eventStatus;
    }

    public function setEventstatus(?int $eventStatus): self
    {
        $this->eventStatus = $eventStatus;
        return $this;
    }

    
    public function getVisibility(): ?bool
    {
        return $this->visibility;
    }

    public function setVisibility(?bool $visibility): self
    {
        $this->visibility = $visibility;
        return $this;
    }

    
    public function getPriority(): ?int
    {
        return $this->priority;
    }

    public function setPriority(?int $priority): self
    {
        $this->priority = $priority;
        return $this;
    }

    
    public function getRecurrenceinterval(): ?float
    {
        return $this->recurrenceInterval;
    }

    public function setRecurrenceinterval(?float $recurrenceInterval): self
    {
        $this->recurrenceInterval = $recurrenceInterval;
        return $this;
    }

    
    public function getRecurrencefrequency(): ?int
    {
        return $this->recurrenceFrequency;
    }

    public function setRecurrencefrequency(?int $recurrenceFrequency): self
    {
        $this->recurrenceFrequency = $recurrenceFrequency;
        return $this;
    }

    
    public function getRecurrenceenddate(): ?\DateTimeInterface
    {
        return $this->recurrenceEndDate;
    }

    public function setRecurrenceenddate(?\DateTimeInterface $recurrenceEndDate): self
    {
        $this->recurrenceEndDate = $recurrenceEndDate;
        return $this;
    }

    
    public function getRecurrencecount(): ?int
    {
        return $this->recurrenceCount;
    }

    public function setRecurrencecount(?int $recurrenceCount): self
    {
        $this->recurrenceCount = $recurrenceCount;
        return $this;
    }

    
    public function getOriginalstarttime(): ?\DateTimeInterface
    {
        return $this->originalStartTime;
    }

    public function setOriginalstarttime(?\DateTimeInterface $originalStartTime): self
    {
        $this->originalStartTime = $originalStartTime;
        return $this;
    }

    
    public function getSequence(): ?int
    {
        return $this->sequence;
    }

    public function setSequence(?int $sequence): self
    {
        $this->sequence = $sequence;
        return $this;
    }

    
    /**
     * @return Collection<int, EventCategory>
     */
    public function getCategories(): Collection
    {
        return $this->categories;
    }

    public function addCategorie(EventCategory $categorie): self
    {
        if (!$this->categories->contains($categorie)) {
            $this->categories->add($categorie);
        }
        return $this;
    }

    public function removeCategorie(EventCategory $categorie): self
    {
        if ($this->categories->removeElement($categorie)) {
        }
        return $this;
    }

    public function getParentevent(): ?Event
    {
        return $this->parentEvent;
    }

    public function setParentevent(?Event $parentEvent): self
    {
        $this->parentEvent = $parentEvent;
        return $this;
    }

    /**
     * @return Collection<int, Event>
     */
    public function getChildrenevents(): Collection
    {
        return $this->childrenEvents;
    }

    public function addChildrenevent(Event $childrenEvent): self
    {
        if (!$this->childrenEvents->contains($childrenEvent)) {
            $this->childrenEvents->add($childrenEvent);
        }
        return $this;
    }

    public function removeChildrenevent(Event $childrenEvent): self
    {
        if ($this->childrenEvents->removeElement($childrenEvent)) {
        }
        return $this;
    }

    public function getOrganizer(): ?User
    {
        return $this->organizer;
    }

    public function setOrganizer(?User $organizer): self
    {
        $this->organizer = $organizer;
        return $this;
    }

    /**
     * @return Collection<int, EventAttendee>
     */
    public function getAttendees(): Collection
    {
        return $this->attendees;
    }

    public function addAttendee(EventAttendee $attendee): self
    {
        if (!$this->attendees->contains($attendee)) {
            $this->attendees->add($attendee);
        }
        return $this;
    }

    public function removeAttendee(EventAttendee $attendee): self
    {
        if ($this->attendees->removeElement($attendee)) {
        }
        return $this;
    }

    /**
     * @return Collection<int, Attachment>
     */
    public function getAttachments(): Collection
    {
        return $this->attachments;
    }

    public function addAttachment(Attachment $attachment): self
    {
        if (!$this->attachments->contains($attachment)) {
            $this->attachments->add($attachment);
        }
        return $this;
    }

    public function removeAttachment(Attachment $attachment): self
    {
        if ($this->attachments->removeElement($attachment)) {
        }
        return $this;
    }

    /**
     * @return Collection<int, Reminder>
     */
    public function getReminders(): Collection
    {
        return $this->reminders;
    }

    public function addReminder(Reminder $reminder): self
    {
        if (!$this->reminders->contains($reminder)) {
            $this->reminders->add($reminder);
        }
        return $this;
    }

    public function removeReminder(Reminder $reminder): self
    {
        if ($this->reminders->removeElement($reminder)) {
        }
        return $this;
    }

    /**
     * @return Collection<int, Notification>
     */
    public function getNotifications(): Collection
    {
        return $this->notifications;
    }

    public function addNotification(Notification $notification): self
    {
        if (!$this->notifications->contains($notification)) {
            $this->notifications->add($notification);
        }
        return $this;
    }

    public function removeNotification(Notification $notification): self
    {
        if ($this->notifications->removeElement($notification)) {
        }
        return $this;
    }

    /**
     * @return Collection<int, MeetingData>
     */
    public function getMeetingdatas(): Collection
    {
        return $this->meetingDatas;
    }

    public function addMeetingdata(MeetingData $meetingData): self
    {
        if (!$this->meetingDatas->contains($meetingData)) {
            $this->meetingDatas->add($meetingData);
        }
        return $this;
    }

    public function removeMeetingdata(MeetingData $meetingData): self
    {
        if ($this->meetingDatas->removeElement($meetingData)) {
        }
        return $this;
    }

    /**
     * @return Collection<int, WorkingHour>
     */
    public function getWorkinghours(): Collection
    {
        return $this->workingHours;
    }

    public function addWorkinghour(WorkingHour $workingHour): self
    {
        if (!$this->workingHours->contains($workingHour)) {
            $this->workingHours->add($workingHour);
        }
        return $this;
    }

    public function removeWorkinghour(WorkingHour $workingHour): self
    {
        if ($this->workingHours->removeElement($workingHour)) {
        }
        return $this;
    }

    /**
     * @return Collection<int, Holiday>
     */
    public function getHolidays(): Collection
    {
        return $this->holidays;
    }

    public function addHoliday(Holiday $holiday): self
    {
        if (!$this->holidays->contains($holiday)) {
            $this->holidays->add($holiday);
        }
        return $this;
    }

    public function removeHoliday(Holiday $holiday): self
    {
        if ($this->holidays->removeElement($holiday)) {
        }
        return $this;
    }

    /**
     * @return Collection<int, EventResourceBooking>
     */
    public function getResourcebookings(): Collection
    {
        return $this->resourceBookings;
    }

    public function addResourcebooking(EventResourceBooking $resourceBooking): self
    {
        if (!$this->resourceBookings->contains($resourceBooking)) {
            $this->resourceBookings->add($resourceBooking);
        }
        return $this;
    }

    public function removeResourcebooking(EventResourceBooking $resourceBooking): self
    {
        if ($this->resourceBookings->removeElement($resourceBooking)) {
        }
        return $this;
    }

    public function getHangoutlink(): ?string
    {
        return $this->hangoutLink;
    }

    public function setHangoutlink(?string $hangoutLink): self
    {
        $this->hangoutLink = $hangoutLink;
        return $this;
    }

    
    public function getConferencedata(): ?array
    {
        return $this->conferenceData;
    }

    public function setConferencedata(?array $conferenceData): self
    {
        $this->conferenceData = $conferenceData;
        return $this;
    }

    
    public function getExtendedproperties(): ?array
    {
        return $this->extendedProperties;
    }

    public function setExtendedproperties(?array $extendedProperties): self
    {
        $this->extendedProperties = $extendedProperties;
        return $this;
    }

    
    public function getSource(): ?array
    {
        return $this->source;
    }

    public function setSource(?array $source): self
    {
        $this->source = $source;
        return $this;
    }

    
    public function getNotes(): ?string
    {
        return $this->notes;
    }

    public function setNotes(?string $notes): self
    {
        $this->notes = $notes;
        return $this;
    }

    

    public function __toString(): string
    {
        return $this->name ?? '';
    }
}
