<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use App\Entity\Trait\OrganizationTrait;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use App\Entity\Calendar;
use App\Entity\User;
use App\Entity\EventAttendee;
use App\Entity\EventCategory;
use App\Entity\Attachment;
use App\Entity\Reminder;
use App\Entity\EventResourceBooking;
use App\Entity\Event;
use App\Entity\Contact;
use App\Entity\Company;
use App\Entity\Deal;

/**
 * Event Entity (Generated Base Class)
 *
 * Calendar events, meetings, and appointments *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to Event.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class EventGenerated extends EntityBase
{
    use OrganizationTrait;

    #[ORM\Column(type: 'string', length: 255)]
    protected string $name;

    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $description = null;

    #[ORM\Column(type: 'datetime')]
    protected \DateTimeImmutable $startTime;

    #[ORM\Column(type: 'datetime')]
    protected \DateTimeImmutable $endTime;

    #[ORM\Column(type: 'boolean')]
    protected bool $allDay = false;

    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $location = null;

    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $meetingUrl = null;

    #[ORM\ManyToOne(targetEntity: Calendar::class, inversedBy: 'events')]
    protected ?Calendar $calendar = null;

    #[ORM\ManyToOne(targetEntity: User::class, inversedBy: 'organizedEvents')]
    protected ?User $organizer = null;

    #[ORM\OneToMany(targetEntity: EventAttendee::class, mappedBy: 'event', orphanRemoval: true, fetch: 'LAZY')]
    protected Collection $attendees;

    #[ORM\ManyToMany(targetEntity: EventCategory::class, inversedBy: 'events', fetch: 'LAZY')]
    protected Collection $categories;

    #[ORM\OneToMany(targetEntity: Attachment::class, mappedBy: 'event', fetch: 'LAZY')]
    protected Collection $attachments;

    #[ORM\OneToMany(targetEntity: Reminder::class, mappedBy: 'event', fetch: 'LAZY')]
    protected Collection $reminders;

    #[ORM\OneToMany(targetEntity: EventResourceBooking::class, mappedBy: 'event', fetch: 'LAZY')]
    protected Collection $resourceBookings;

    #[ORM\ManyToOne(targetEntity: Event::class, inversedBy: 'childrenEvents')]
    protected ?Event $parentEvent = null;

    #[ORM\OneToMany(targetEntity: Event::class, mappedBy: 'parentEvent', fetch: 'LAZY')]
    protected Collection $childrenEvents;

    #[ORM\Column(type: 'datetime', nullable: true)]
    protected ?\DateTimeImmutable $originalStartTime = null;

    #[ORM\Column(name: 'sequence_prop', type: 'integer', nullable: true)]
    protected ?int $sequence = null;

    #[ORM\Column(type: 'json', nullable: true)]
    protected ?array $conferenceData = null;

    #[ORM\Column(type: 'json', nullable: true)]
    protected ?array $extendedProperties = null;

    #[ORM\Column(type: 'json', nullable: true)]
    protected ?array $source = null;

    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $subject = null;

    #[ORM\Column(type: 'string', length: 255)]
    protected string $status = 'Planned';

    #[ORM\Column(type: 'string', length: 255)]
    protected string $showAs = 'Busy';

    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $eventType = null;

    #[ORM\Column(type: 'string', length: 255)]
    protected string $importance = 'Normal';

    #[ORM\Column(type: 'string', length: 255)]
    protected string $sensitivity = 'Normal';

    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $timezone = 'UTC';

    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $startTimezone = null;

    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $endTimezone = null;

    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $duration = null;

    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $locationDisplayName = null;

    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $locationUrl = null;

    #[ORM\Column(type: 'json', nullable: true)]
    protected ?array $locationCoordinates = null;

    #[ORM\Column(type: 'boolean')]
    protected bool $onlineMeeting = false;

    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $onlineMeetingProvider = null;

    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $meetingId = null;

    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $meetingPassword = null;

    #[ORM\Column(type: 'boolean')]
    protected bool $recurring = false;

    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $recurrenceRule = null;

    #[ORM\Column(type: 'json', nullable: true)]
    protected ?array $recurrenceExceptions = null;

    #[ORM\Column(type: 'boolean')]
    protected bool $cancelled = false;

    #[ORM\Column(type: 'boolean')]
    protected bool $draft = false;

    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $responseStatus = null;

    #[ORM\Column(type: 'boolean')]
    protected bool $responseRequested = true;

    #[ORM\Column(type: 'boolean')]
    protected bool $allowNewTimeProposals = true;

    #[ORM\Column(type: 'boolean')]
    protected bool $hideAttendees = false;

    #[ORM\Column(type: 'boolean')]
    protected bool $guestsCanModify = false;

    #[ORM\Column(type: 'boolean')]
    protected bool $guestsCanInviteOthers = true;

    #[ORM\Column(type: 'boolean')]
    protected bool $guestsCanSeeOtherGuests = true;

    #[ORM\Column(type: 'string', length: 255)]
    protected string $transparency = 'Opaque';

    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $reminderMinutes = 15;

    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $externalCalendarId = null;

    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $externalCalendarProvider = null;

    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $icalUid = null;

    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $webLink = null;

    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $htmlLink = null;

    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $colorId = null;

    #[ORM\Column(type: 'boolean')]
    protected bool $locked = false;

    #[ORM\ManyToOne(targetEntity: User::class)]
    protected ?User $assignedTo = null;

    #[ORM\ManyToOne(targetEntity: Contact::class)]
    protected ?Contact $contact = null;

    #[ORM\ManyToOne(targetEntity: Company::class)]
    protected ?Company $company = null;

    #[ORM\ManyToOne(targetEntity: Deal::class)]
    protected ?Deal $deal = null;


    public function __construct()
    {
        parent::__construct();
        $this->attendees = new ArrayCollection();
        $this->categories = new ArrayCollection();
        $this->attachments = new ArrayCollection();
        $this->reminders = new ArrayCollection();
        $this->resourceBookings = new ArrayCollection();
        $this->childrenEvents = new ArrayCollection();
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getDescription(): ?string    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    public function getStarttime(): \DateTimeImmutable    {
        return $this->startTime;
    }

    public function setStarttime(\DateTimeImmutable $startTime): self
    {
        $this->startTime = $startTime;
        return $this;
    }

    public function getEndtime(): \DateTimeImmutable    {
        return $this->endTime;
    }

    public function setEndtime(\DateTimeImmutable $endTime): self
    {
        $this->endTime = $endTime;
        return $this;
    }

    public function getAllday(): bool    {
        return $this->allDay;
    }

    public function setAllday(bool $allDay): self
    {
        $this->allDay = $allDay;
        return $this;
    }

    public function isAllday(): bool
    {
        return $this->allDay === true;
    }

    public function getLocation(): ?string    {
        return $this->location;
    }

    public function setLocation(?string $location): self
    {
        $this->location = $location;
        return $this;
    }

    public function getMeetingurl(): ?string    {
        return $this->meetingUrl;
    }

    public function setMeetingurl(?string $meetingUrl): self
    {
        $this->meetingUrl = $meetingUrl;
        return $this;
    }

    public function getCalendar(): ?App\Entity\Calendar
    {
        return $this->calendar;
    }

    public function setCalendar(?App\Entity\Calendar $calendar): self
    {
        $this->calendar = $calendar;
        return $this;
    }

    public function getOrganizer(): ?App\Entity\User
    {
        return $this->organizer;
    }

    public function setOrganizer(?App\Entity\User $organizer): self
    {
        $this->organizer = $organizer;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\EventAttendee>
     */
    public function getAttendees(): Collection
    {
        return $this->attendees;
    }

    public function addAttendee(App\Entity\EventAttendee $attendee): self
    {
        if (!$this->attendees->contains($attendee)) {
            $this->attendees->add($attendee);
            $attendee->setEvent($this);
        }
        return $this;
    }

    public function removeAttendee(App\Entity\EventAttendee $attendee): self
    {
        if ($this->attendees->removeElement($attendee)) {
            if ($attendee->getEvent() === $this) {
                $attendee->setEvent(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\EventCategory>
     */
    public function getCategories(): Collection
    {
        return $this->categories;
    }

    public function addCategory(App\Entity\EventCategory $category): self
    {
        if (!$this->categories->contains($category)) {
            $this->categories->add($category);
        }
        return $this;
    }

    public function removeCategory(App\Entity\EventCategory $category): self
    {
        if ($this->categories->removeElement($category)) {
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Attachment>
     */
    public function getAttachments(): Collection
    {
        return $this->attachments;
    }

    public function addAttachment(App\Entity\Attachment $attachment): self
    {
        if (!$this->attachments->contains($attachment)) {
            $this->attachments->add($attachment);
            $attachment->setEvent($this);
        }
        return $this;
    }

    public function removeAttachment(App\Entity\Attachment $attachment): self
    {
        if ($this->attachments->removeElement($attachment)) {
            if ($attachment->getEvent() === $this) {
                $attachment->setEvent(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Reminder>
     */
    public function getReminders(): Collection
    {
        return $this->reminders;
    }

    public function addReminder(App\Entity\Reminder $reminder): self
    {
        if (!$this->reminders->contains($reminder)) {
            $this->reminders->add($reminder);
            $reminder->setEvent($this);
        }
        return $this;
    }

    public function removeReminder(App\Entity\Reminder $reminder): self
    {
        if ($this->reminders->removeElement($reminder)) {
            if ($reminder->getEvent() === $this) {
                $reminder->setEvent(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\EventResourceBooking>
     */
    public function getResourcebookings(): Collection
    {
        return $this->resourceBookings;
    }

    public function addReourcebooking(App\Entity\EventResourceBooking $reourceBooking): self
    {
        if (!$this->resourceBookings->contains($reourceBooking)) {
            $this->resourceBookings->add($reourceBooking);
            $reourceBooking->setEvent($this);
        }
        return $this;
    }

    public function removeReourcebooking(App\Entity\EventResourceBooking $reourceBooking): self
    {
        if ($this->resourceBookings->removeElement($reourceBooking)) {
            if ($reourceBooking->getEvent() === $this) {
                $reourceBooking->setEvent(null);
            }
        }
        return $this;
    }

    public function getParentevent(): ?App\Entity\Event
    {
        return $this->parentEvent;
    }

    public function setParentevent(?App\Entity\Event $parentEvent): self
    {
        $this->parentEvent = $parentEvent;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Event>
     */
    public function getChildrenevents(): Collection
    {
        return $this->childrenEvents;
    }

    public function addChildrenevent(App\Entity\Event $childrenEvent): self
    {
        if (!$this->childrenEvents->contains($childrenEvent)) {
            $this->childrenEvents->add($childrenEvent);
            $childrenEvent->setParentevent($this);
        }
        return $this;
    }

    public function removeChildrenevent(App\Entity\Event $childrenEvent): self
    {
        if ($this->childrenEvents->removeElement($childrenEvent)) {
            if ($childrenEvent->getParentevent() === $this) {
                $childrenEvent->setParentevent(null);
            }
        }
        return $this;
    }

    public function getOriginalstarttime(): ?\DateTimeImmutable    {
        return $this->originalStartTime;
    }

    public function setOriginalstarttime(?\DateTimeImmutable $originalStartTime): self
    {
        $this->originalStartTime = $originalStartTime;
        return $this;
    }

    public function getSequence(): ?int    {
        return $this->sequence;
    }

    public function setSequence(?int $sequence): self
    {
        $this->sequence = $sequence;
        return $this;
    }

    public function getConferencedata(): ?array    {
        return $this->conferenceData;
    }

    public function setConferencedata(?array $conferenceData): self
    {
        $this->conferenceData = $conferenceData;
        return $this;
    }

    public function getExtendedproperties(): ?array    {
        return $this->extendedProperties;
    }

    public function setExtendedproperties(?array $extendedProperties): self
    {
        $this->extendedProperties = $extendedProperties;
        return $this;
    }

    public function getSource(): ?array    {
        return $this->source;
    }

    public function setSource(?array $source): self
    {
        $this->source = $source;
        return $this;
    }

    public function getSubject(): ?string    {
        return $this->subject;
    }

    public function setSubject(?string $subject): self
    {
        $this->subject = $subject;
        return $this;
    }

    public function getStatus(): string    {
        return $this->status;
    }

    public function setStatus(string $status): self
    {
        $this->status = $status;
        return $this;
    }

    public function getShowas(): string    {
        return $this->showAs;
    }

    public function setShowas(string $showAs): self
    {
        $this->showAs = $showAs;
        return $this;
    }

    public function getEventtype(): ?string    {
        return $this->eventType;
    }

    public function setEventtype(?string $eventType): self
    {
        $this->eventType = $eventType;
        return $this;
    }

    public function getImportance(): string    {
        return $this->importance;
    }

    public function setImportance(string $importance): self
    {
        $this->importance = $importance;
        return $this;
    }

    public function getSensitivity(): string    {
        return $this->sensitivity;
    }

    public function setSensitivity(string $sensitivity): self
    {
        $this->sensitivity = $sensitivity;
        return $this;
    }

    public function getTimezone(): ?string    {
        return $this->timezone;
    }

    public function setTimezone(?string $timezone): self
    {
        $this->timezone = $timezone;
        return $this;
    }

    public function getStarttimezone(): ?string    {
        return $this->startTimezone;
    }

    public function setStarttimezone(?string $startTimezone): self
    {
        $this->startTimezone = $startTimezone;
        return $this;
    }

    public function getEndtimezone(): ?string    {
        return $this->endTimezone;
    }

    public function setEndtimezone(?string $endTimezone): self
    {
        $this->endTimezone = $endTimezone;
        return $this;
    }

    public function getDuration(): ?int    {
        return $this->duration;
    }

    public function setDuration(?int $duration): self
    {
        $this->duration = $duration;
        return $this;
    }

    public function getLocationdisplayname(): ?string    {
        return $this->locationDisplayName;
    }

    public function setLocationdisplayname(?string $locationDisplayName): self
    {
        $this->locationDisplayName = $locationDisplayName;
        return $this;
    }

    public function getLocationurl(): ?string    {
        return $this->locationUrl;
    }

    public function setLocationurl(?string $locationUrl): self
    {
        $this->locationUrl = $locationUrl;
        return $this;
    }

    public function getLocationcoordinates(): ?array    {
        return $this->locationCoordinates;
    }

    public function setLocationcoordinates(?array $locationCoordinates): self
    {
        $this->locationCoordinates = $locationCoordinates;
        return $this;
    }

    public function getOnlinemeeting(): bool    {
        return $this->onlineMeeting;
    }

    public function setOnlinemeeting(bool $onlineMeeting): self
    {
        $this->onlineMeeting = $onlineMeeting;
        return $this;
    }

    public function isOnlinemeeting(): bool
    {
        return $this->onlineMeeting === true;
    }

    public function getOnlinemeetingprovider(): ?string    {
        return $this->onlineMeetingProvider;
    }

    public function setOnlinemeetingprovider(?string $onlineMeetingProvider): self
    {
        $this->onlineMeetingProvider = $onlineMeetingProvider;
        return $this;
    }

    public function getMeetingid(): ?string    {
        return $this->meetingId;
    }

    public function setMeetingid(?string $meetingId): self
    {
        $this->meetingId = $meetingId;
        return $this;
    }

    public function getMeetingpassword(): ?string    {
        return $this->meetingPassword;
    }

    public function setMeetingpassword(?string $meetingPassword): self
    {
        $this->meetingPassword = $meetingPassword;
        return $this;
    }

    public function getRecurring(): bool    {
        return $this->recurring;
    }

    public function setRecurring(bool $recurring): self
    {
        $this->recurring = $recurring;
        return $this;
    }

    public function isRecurring(): bool
    {
        return $this->recurring === true;
    }

    public function getRecurrencerule(): ?string    {
        return $this->recurrenceRule;
    }

    public function setRecurrencerule(?string $recurrenceRule): self
    {
        $this->recurrenceRule = $recurrenceRule;
        return $this;
    }

    public function getRecurrenceexceptions(): ?array    {
        return $this->recurrenceExceptions;
    }

    public function setRecurrenceexceptions(?array $recurrenceExceptions): self
    {
        $this->recurrenceExceptions = $recurrenceExceptions;
        return $this;
    }

    public function getCancelled(): bool    {
        return $this->cancelled;
    }

    public function setCancelled(bool $cancelled): self
    {
        $this->cancelled = $cancelled;
        return $this;
    }

    public function isCancelled(): bool
    {
        return $this->cancelled === true;
    }

    public function getDraft(): bool    {
        return $this->draft;
    }

    public function setDraft(bool $draft): self
    {
        $this->draft = $draft;
        return $this;
    }

    public function isDraft(): bool
    {
        return $this->draft === true;
    }

    public function getResponsestatus(): ?string    {
        return $this->responseStatus;
    }

    public function setResponsestatus(?string $responseStatus): self
    {
        $this->responseStatus = $responseStatus;
        return $this;
    }

    public function getResponserequested(): bool    {
        return $this->responseRequested;
    }

    public function setResponserequested(bool $responseRequested): self
    {
        $this->responseRequested = $responseRequested;
        return $this;
    }

    public function isResponserequested(): bool
    {
        return $this->responseRequested === true;
    }

    public function getAllownewtimeproposals(): bool    {
        return $this->allowNewTimeProposals;
    }

    public function setAllownewtimeproposals(bool $allowNewTimeProposals): self
    {
        $this->allowNewTimeProposals = $allowNewTimeProposals;
        return $this;
    }

    public function isAllownewtimeproposals(): bool
    {
        return $this->allowNewTimeProposals === true;
    }

    public function getHideattendees(): bool    {
        return $this->hideAttendees;
    }

    public function setHideattendees(bool $hideAttendees): self
    {
        $this->hideAttendees = $hideAttendees;
        return $this;
    }

    public function isHideattendees(): bool
    {
        return $this->hideAttendees === true;
    }

    public function getGuestscanmodify(): bool    {
        return $this->guestsCanModify;
    }

    public function setGuestscanmodify(bool $guestsCanModify): self
    {
        $this->guestsCanModify = $guestsCanModify;
        return $this;
    }

    public function isGuestscanmodify(): bool
    {
        return $this->guestsCanModify === true;
    }

    public function getGuestscaninviteothers(): bool    {
        return $this->guestsCanInviteOthers;
    }

    public function setGuestscaninviteothers(bool $guestsCanInviteOthers): self
    {
        $this->guestsCanInviteOthers = $guestsCanInviteOthers;
        return $this;
    }

    public function isGuestscaninviteothers(): bool
    {
        return $this->guestsCanInviteOthers === true;
    }

    public function getGuestscanseeotherguests(): bool    {
        return $this->guestsCanSeeOtherGuests;
    }

    public function setGuestscanseeotherguests(bool $guestsCanSeeOtherGuests): self
    {
        $this->guestsCanSeeOtherGuests = $guestsCanSeeOtherGuests;
        return $this;
    }

    public function isGuestscanseeotherguests(): bool
    {
        return $this->guestsCanSeeOtherGuests === true;
    }

    public function getTransparency(): string    {
        return $this->transparency;
    }

    public function setTransparency(string $transparency): self
    {
        $this->transparency = $transparency;
        return $this;
    }

    public function getReminderminutes(): ?int    {
        return $this->reminderMinutes;
    }

    public function setReminderminutes(?int $reminderMinutes): self
    {
        $this->reminderMinutes = $reminderMinutes;
        return $this;
    }

    public function getExternalcalendarid(): ?string    {
        return $this->externalCalendarId;
    }

    public function setExternalcalendarid(?string $externalCalendarId): self
    {
        $this->externalCalendarId = $externalCalendarId;
        return $this;
    }

    public function getExternalcalendarprovider(): ?string    {
        return $this->externalCalendarProvider;
    }

    public function setExternalcalendarprovider(?string $externalCalendarProvider): self
    {
        $this->externalCalendarProvider = $externalCalendarProvider;
        return $this;
    }

    public function getIcaluid(): ?string    {
        return $this->icalUid;
    }

    public function setIcaluid(?string $icalUid): self
    {
        $this->icalUid = $icalUid;
        return $this;
    }

    public function getWeblink(): ?string    {
        return $this->webLink;
    }

    public function setWeblink(?string $webLink): self
    {
        $this->webLink = $webLink;
        return $this;
    }

    public function getHtmllink(): ?string    {
        return $this->htmlLink;
    }

    public function setHtmllink(?string $htmlLink): self
    {
        $this->htmlLink = $htmlLink;
        return $this;
    }

    public function getColorid(): ?string    {
        return $this->colorId;
    }

    public function setColorid(?string $colorId): self
    {
        $this->colorId = $colorId;
        return $this;
    }

    public function getLocked(): bool    {
        return $this->locked;
    }

    public function setLocked(bool $locked): self
    {
        $this->locked = $locked;
        return $this;
    }

    public function isLocked(): bool
    {
        return $this->locked === true;
    }

    public function getAssignedto(): ?App\Entity\User
    {
        return $this->assignedTo;
    }

    public function setAssignedto(?App\Entity\User $assignedTo): self
    {
        $this->assignedTo = $assignedTo;
        return $this;
    }

    public function getContact(): ?App\Entity\Contact
    {
        return $this->contact;
    }

    public function setContact(?App\Entity\Contact $contact): self
    {
        $this->contact = $contact;
        return $this;
    }

    public function getCompany(): ?App\Entity\Company
    {
        return $this->company;
    }

    public function setCompany(?App\Entity\Company $company): self
    {
        $this->company = $company;
        return $this;
    }

    public function getDeal(): ?App\Entity\Deal
    {
        return $this->deal;
    }

    public function setDeal(?App\Entity\Deal $deal): self
    {
        $this->deal = $deal;
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? ($this->getId()?->toRfc4122() ?? '');
    }
}
