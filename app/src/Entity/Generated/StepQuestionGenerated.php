<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;
use App\Entity\Step;

/**
 * StepQuestion Entity (Generated Base Class)
 *
 * Decision questions in workflow logic *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to StepQuestion.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class StepQuestionGenerated extends EntityBase
{
    #[ORM\ManyToOne(targetEntity: Step::class, inversedBy: 'questions')]
    #[ORM\JoinColumn(nullable: false)]
    protected Step $step;

    #[ORM\Column(type: 'string', length: 255)]
    protected string $name;

    #[ORM\Column(type: 'string', length: 255)]
    #[Assert\3(max: 255, constraint: 'Length')]
    protected string $slug;

    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $prompt = null;

    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $objective = null;

    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $importance = 1;

    #[ORM\Column(type: 'integer')]
    protected int $viewOrder = 1;

    #[ORM\Column(type: 'json', nullable: true)]
    protected ?array $fewShotPositive = null;

    #[ORM\Column(type: 'json', nullable: true)]
    protected ?array $fewShotNegative = null;


    public function __construct()
    {
        parent::__construct();
    }

    public function getStep(): App\Entity\Step
    {
        return $this->step;
    }

    public function setStep(App\Entity\Step $step): self
    {
        $this->step = $step;
        return $this;
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getSlug(): string    {
        return $this->slug;
    }

    public function setSlug(string $slug): self
    {
        $this->slug = $slug;
        return $this;
    }

    public function getPrompt(): ?string    {
        return $this->prompt;
    }

    public function setPrompt(?string $prompt): self
    {
        $this->prompt = $prompt;
        return $this;
    }

    public function getObjective(): ?string    {
        return $this->objective;
    }

    public function setObjective(?string $objective): self
    {
        $this->objective = $objective;
        return $this;
    }

    public function getImportance(): ?int    {
        return $this->importance;
    }

    public function setImportance(?int $importance): self
    {
        $this->importance = $importance;
        return $this;
    }

    public function getVieworder(): int    {
        return $this->viewOrder;
    }

    public function setVieworder(int $viewOrder): self
    {
        $this->viewOrder = $viewOrder;
        return $this;
    }

    public function getFewshotpositive(): ?array    {
        return $this->fewShotPositive;
    }

    public function setFewshotpositive(?array $fewShotPositive): self
    {
        $this->fewShotPositive = $fewShotPositive;
        return $this;
    }

    public function getFewshotnegative(): ?array    {
        return $this->fewShotNegative;
    }

    public function setFewshotnegative(?array $fewShotNegative): self
    {
        $this->fewShotNegative = $fewShotNegative;
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? ($this->getId()?->toRfc4122() ?? '');
    }
}
