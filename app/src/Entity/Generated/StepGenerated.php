<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use App\Entity\TreeFlow;
use App\Entity\StepQuestion;
use App\Entity\StepOutput;
use App\Entity\StepInput;

/**
 * Step Entity (Generated Base Class)
 *
 * Individual steps in automated workflows *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to Step.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class StepGenerated extends EntityBase
{
    #[ORM\Column(type: 'string', length: 255)]
    protected string $name;

    #[ORM\ManyToOne(targetEntity: TreeFlow::class, inversedBy: 'steps')]
    #[ORM\JoinColumn(nullable: false)]
    protected TreeFlow $treeFlow;

    #[ORM\Column(name: 'first_prop', type: 'boolean')]
    protected bool $first = false;

    #[ORM\Column(type: 'string', length: 255)]
    #[Assert\3(max: 255, constraint: 'Length')]
    protected string $slug;

    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $objective = null;

    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $prompt = null;

    #[ORM\Column(type: 'integer')]
    protected int $viewOrder = 1;

    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $positionX = null;

    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $positionY = null;

    #[ORM\OneToMany(targetEntity: StepQuestion::class, mappedBy: 'step', orphanRemoval: true, fetch: 'LAZY')]
    protected Collection $questions;

    #[ORM\OneToMany(targetEntity: StepOutput::class, mappedBy: 'step', orphanRemoval: true, fetch: 'LAZY')]
    protected Collection $outputs;

    #[ORM\OneToMany(targetEntity: StepInput::class, mappedBy: 'step', orphanRemoval: true, fetch: 'LAZY')]
    protected Collection $inputs;


    public function __construct()
    {
        parent::__construct();
        $this->questions = new ArrayCollection();
        $this->outputs = new ArrayCollection();
        $this->inputs = new ArrayCollection();
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getTreeflow(): App\Entity\TreeFlow
    {
        return $this->treeFlow;
    }

    public function setTreeflow(App\Entity\TreeFlow $treeFlow): self
    {
        $this->treeFlow = $treeFlow;
        return $this;
    }

    public function getFirst(): bool    {
        return $this->first;
    }

    public function setFirst(bool $first): self
    {
        $this->first = $first;
        return $this;
    }

    public function isFirst(): bool
    {
        return $this->first === true;
    }

    public function getSlug(): string    {
        return $this->slug;
    }

    public function setSlug(string $slug): self
    {
        $this->slug = $slug;
        return $this;
    }

    public function getObjective(): ?string    {
        return $this->objective;
    }

    public function setObjective(?string $objective): self
    {
        $this->objective = $objective;
        return $this;
    }

    public function getPrompt(): ?string    {
        return $this->prompt;
    }

    public function setPrompt(?string $prompt): self
    {
        $this->prompt = $prompt;
        return $this;
    }

    public function getVieworder(): int    {
        return $this->viewOrder;
    }

    public function setVieworder(int $viewOrder): self
    {
        $this->viewOrder = $viewOrder;
        return $this;
    }

    public function getPositionx(): ?int    {
        return $this->positionX;
    }

    public function setPositionx(?int $positionX): self
    {
        $this->positionX = $positionX;
        return $this;
    }

    public function getPositiony(): ?int    {
        return $this->positionY;
    }

    public function setPositiony(?int $positionY): self
    {
        $this->positionY = $positionY;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\StepQuestion>
     */
    public function getQuestions(): Collection
    {
        return $this->questions;
    }

    public function addQuetion(App\Entity\StepQuestion $quetion): self
    {
        if (!$this->questions->contains($quetion)) {
            $this->questions->add($quetion);
            $quetion->setStep($this);
        }
        return $this;
    }

    public function removeQuetion(App\Entity\StepQuestion $quetion): self
    {
        if ($this->questions->removeElement($quetion)) {
            if ($quetion->getStep() === $this) {
                $quetion->setStep(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\StepOutput>
     */
    public function getOutputs(): Collection
    {
        return $this->outputs;
    }

    public function addOutput(App\Entity\StepOutput $output): self
    {
        if (!$this->outputs->contains($output)) {
            $this->outputs->add($output);
            $output->setStep($this);
        }
        return $this;
    }

    public function removeOutput(App\Entity\StepOutput $output): self
    {
        if ($this->outputs->removeElement($output)) {
            if ($output->getStep() === $this) {
                $output->setStep(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\StepInput>
     */
    public function getInputs(): Collection
    {
        return $this->inputs;
    }

    public function addInput(App\Entity\StepInput $input): self
    {
        if (!$this->inputs->contains($input)) {
            $this->inputs->add($input);
            $input->setStep($this);
        }
        return $this;
    }

    public function removeInput(App\Entity\StepInput $input): self
    {
        if ($this->inputs->removeElement($input)) {
            if ($input->getStep() === $this) {
                $input->setStep(null);
            }
        }
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? ($this->getId()?->toRfc4122() ?? '');
    }
}
