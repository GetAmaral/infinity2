<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use App\Entity\Trait\OrganizationTrait;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use App\Entity\Product;

/**
 * TaxCategory Entity (Generated Base Class)
 *
 * Tax categories for financial management *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to TaxCategory.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class TaxCategoryGenerated extends EntityBase
{
    use OrganizationTrait;

    #[ORM\Column(type: 'string', length: 255)]
    protected string $name;

    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $description = null;

    #[ORM\Column(type: 'decimal', precision: 5, scale: 2, nullable: true)]
    protected ?float $taxRate = null;

    #[ORM\OneToMany(targetEntity: Product::class, mappedBy: 'taxCategory', fetch: 'LAZY')]
    protected Collection $products;


    public function __construct()
    {
        parent::__construct();
        $this->products = new ArrayCollection();
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getDescription(): ?string    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    public function getTaxrate(): ?float    {
        return $this->taxRate;
    }

    public function setTaxrate(?float $taxRate): self
    {
        $this->taxRate = $taxRate;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Product>
     */
    public function getProducts(): Collection
    {
        return $this->products;
    }

    public function addProduct(App\Entity\Product $product): self
    {
        if (!$this->products->contains($product)) {
            $this->products->add($product);
            $product->setTaxcategory($this);
        }
        return $this;
    }

    public function removeProduct(App\Entity\Product $product): self
    {
        if ($this->products->removeElement($product)) {
            if ($product->getTaxcategory() === $this) {
                $product->setTaxcategory(null);
            }
        }
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? ($this->getId()?->toRfc4122() ?? '');
    }
}
