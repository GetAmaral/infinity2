<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
use App\Entity\Organization;
use App\Entity\Product;

/**
 * Billing Frequency Entity (Generated Base Class)
 *
 * Defines billing frequency options for subscriptions (Daily, Weekly, Biweekly, Monthly, Quarterly, Semi-Annual, Annual, Biennial). Controls recurring billing intervals with support for custom cycles and discount management. *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to BillingFrequency.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class BillingFrequencyGenerated extends EntityBase
{
    #[Groups(['billingfrequency:read', 'billingfrequency:write'])]
    #[ORM\ManyToOne(targetEntity: Organization::class, inversedBy: 'billingFrequencies')]
    #[ORM\JoinColumn(nullable: false)]
    protected Organization $organization;

    #[Groups(['billingfrequency:read', 'billingfrequency:write'])]
    #[ORM\Column(name: 'value_prop', type: 'string', length: 50, unique: true)]
    protected string $value;

    #[Groups(['billingfrequency:read', 'billingfrequency:write'])]
    #[ORM\Column(type: 'string', length: 255)]
    protected string $name;

    #[Groups(['billingfrequency:read', 'billingfrequency:write'])]
    #[ORM\Column(type: 'text', length: 500, nullable: true)]
    protected ?string $description = null;

    #[Groups(['billingfrequency:read', 'billingfrequency:write'])]
    #[ORM\Column(type: 'string', length: 100, nullable: true)]
    protected ?string $displayName = null;

    #[Groups(['billingfrequency:read', 'billingfrequency:write'])]
    #[ORM\Column(type: 'string', length: 20)]
    protected string $intervalType;

    #[Groups(['billingfrequency:read', 'billingfrequency:write'])]
    #[ORM\Column(type: 'integer')]
    protected int $intervalCount = 1;

    #[Groups(['billingfrequency:read', 'billingfrequency:write'])]
    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $daysInCycle = null;

    #[Groups(['billingfrequency:read', 'billingfrequency:write'])]
    #[ORM\Column(type: 'decimal', precision: 5, scale: 2, nullable: true)]
    protected ?string $discountPercentage = '0';

    #[Groups(['billingfrequency:read', 'billingfrequency:write'])]
    #[ORM\Column(name: 'default_prop', type: 'boolean')]
    protected bool $default = false;

    #[Groups(['billingfrequency:read', 'billingfrequency:write'])]
    #[ORM\Column(type: 'integer')]
    protected int $sortOrder = 0;

    #[Groups(['billingfrequency:read', 'billingfrequency:write'])]
    #[ORM\Column(type: 'boolean')]
    protected bool $active = true;

    #[Groups(['billingfrequency:read'])]
    #[ORM\OneToMany(targetEntity: Product::class, mappedBy: 'billingFrequency', fetch: 'LAZY')]
    protected Collection $products;


    public function __construct()
    {
        parent::__construct();
        $this->products = new ArrayCollection();
    }

    public function getOrganization(): Organization
    {
        return $this->organization;
    }

    public function setOrganization(Organization $organization): self
    {
        $this->organization = $organization;
        return $this;
    }

    public function getValue(): string    {
        return $this->value;
    }

    public function setValue(string $value): self
    {
        $this->value = $value;
        return $this;
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getDescription(): ?string    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    public function getDisplayName(): ?string    {
        return $this->displayName;
    }

    public function setDisplayName(?string $displayName): self
    {
        $this->displayName = $displayName;
        return $this;
    }

    public function getIntervalType(): string    {
        return $this->intervalType;
    }

    public function setIntervalType(string $intervalType): self
    {
        $this->intervalType = $intervalType;
        return $this;
    }

    public function getIntervalCount(): int    {
        return $this->intervalCount;
    }

    public function setIntervalCount(int $intervalCount): self
    {
        $this->intervalCount = $intervalCount;
        return $this;
    }

    public function getDaysInCycle(): ?int    {
        return $this->daysInCycle;
    }

    public function setDaysInCycle(?int $daysInCycle): self
    {
        $this->daysInCycle = $daysInCycle;
        return $this;
    }

    public function getDiscountPercentage(): ?string    {
        return $this->discountPercentage;
    }

    public function setDiscountPercentage(?string $discountPercentage): self
    {
        $this->discountPercentage = $discountPercentage;
        return $this;
    }

    public function getDefault(): bool    {
        return $this->default;
    }

    public function setDefault(bool $default): self
    {
        $this->default = $default;
        return $this;
    }

    public function isDefault(): bool
    {
        return $this->default === true;
    }

    public function getSortOrder(): int    {
        return $this->sortOrder;
    }

    public function setSortOrder(int $sortOrder): self
    {
        $this->sortOrder = $sortOrder;
        return $this;
    }

    public function getActive(): bool    {
        return $this->active;
    }

    public function setActive(bool $active): self
    {
        $this->active = $active;
        return $this;
    }

    public function isActive(): bool
    {
        return $this->active === true;
    }

    /**
     * @return Collection<int, Product>
     */
    public function getProducts(): Collection
    {
        return $this->products;
    }

    public function addProduct(Product $product): self
    {
        if (!$this->products->contains($product)) {
            $this->products->add($product);
            $product->setBillingFrequency($this);
        }
        return $this;
    }

    public function removeProduct(Product $product): self
    {
        if ($this->products->removeElement($product)) {
            if ($product->getBillingFrequency() === $this) {
                $product->setBillingFrequency(null);
            }
        }
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? ($this->getId()?->toRfc4122() ?? '');
    }
}
