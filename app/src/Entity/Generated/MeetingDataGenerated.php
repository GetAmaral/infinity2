<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use App\Entity\Trait\OrganizationTrait;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;
use App\Entity\Event;

/**
 * Meeting Data Entity (Generated Base Class)
 *
 * Meeting data including links, notes, recordings, agenda, minutes, and attendee tracking for comprehensive meeting management *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to MeetingData.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class MeetingDataGenerated extends EntityBase
{
    use OrganizationTrait;

    #[ORM\Column(type: 'string', length: 255)]
    protected string $title;

    #[ORM\ManyToOne(targetEntity: Event::class, inversedBy: 'meetingDatas')]
    protected ?Event $event = null;

    #[ORM\Column(type: 'string', length: 255)]
    protected string $meetingType;

    #[ORM\Column(type: 'string', length: 255)]
    protected string $status;

    #[ORM\Column(type: 'datetime')]
    protected \DateTimeImmutable $startTime;

    #[ORM\Column(type: 'datetime', nullable: true)]
    protected ?\DateTimeImmutable $endTime = null;

    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $duration = null;

    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $location = null;

    #[ORM\Column(type: 'json', nullable: true)]
    protected ?array $agenda = null;

    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $notes = null;

    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $minutes = null;

    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $meetingId = null;

    #[ORM\Column(type: 'json', nullable: true)]
    protected ?array $attendees = null;

    #[ORM\Column(type: 'json', nullable: true)]
    protected ?array $absentees = null;

    #[ORM\Column(type: 'json', nullable: true)]
    protected ?array $decisions = null;

    #[ORM\Column(type: 'json', nullable: true)]
    protected ?array $actionItems = null;

    #[ORM\Column(type: 'boolean')]
    protected bool $recordingAvailable = false;

    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $transcript = null;

    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $recordingDuration = null;

    #[ORM\Column(type: 'bigint', nullable: true)]
    protected ?string $recordingSize = null;

    #[ORM\Column(type: 'datetime', nullable: true)]
    protected ?\DateTimeImmutable $nextMeetingDate = null;

    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $organizer = null;

    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $platform = null;

    #[ORM\Column(type: 'json', nullable: true)]
    protected ?array $tags = null;

    #[ORM\Column(type: 'boolean')]
    protected bool $confidential = false;

    #[ORM\Column(type: 'boolean')]
    protected bool $recurring = false;

    #[ORM\Column(type: 'json', nullable: true)]
    protected ?array $recurrencePattern = null;

    #[ORM\Column(type: 'string', length: 500, nullable: true)]
    protected ?string $recordUrl = null;

    #[ORM\Column(type: 'string', length: 100, nullable: true)]
    protected ?string $secret = null;

    #[ORM\Column(type: 'string', length: 500, nullable: true)]
    protected ?string $url = null;


    public function __construct()
    {
        parent::__construct();
    }

    public function getTitle(): string    {
        return $this->title;
    }

    public function setTitle(string $title): self
    {
        $this->title = $title;
        return $this;
    }

    public function getEvent(): ?App\Entity\Event
    {
        return $this->event;
    }

    public function setEvent(?App\Entity\Event $event): self
    {
        $this->event = $event;
        return $this;
    }

    public function getMeetingtype(): string    {
        return $this->meetingType;
    }

    public function setMeetingtype(string $meetingType): self
    {
        $this->meetingType = $meetingType;
        return $this;
    }

    public function getStatus(): string    {
        return $this->status;
    }

    public function setStatus(string $status): self
    {
        $this->status = $status;
        return $this;
    }

    public function getStarttime(): \DateTimeImmutable    {
        return $this->startTime;
    }

    public function setStarttime(\DateTimeImmutable $startTime): self
    {
        $this->startTime = $startTime;
        return $this;
    }

    public function getEndtime(): ?\DateTimeImmutable    {
        return $this->endTime;
    }

    public function setEndtime(?\DateTimeImmutable $endTime): self
    {
        $this->endTime = $endTime;
        return $this;
    }

    public function getDuration(): ?int    {
        return $this->duration;
    }

    public function setDuration(?int $duration): self
    {
        $this->duration = $duration;
        return $this;
    }

    public function getLocation(): ?string    {
        return $this->location;
    }

    public function setLocation(?string $location): self
    {
        $this->location = $location;
        return $this;
    }

    public function getAgenda(): ?array    {
        return $this->agenda;
    }

    public function setAgenda(?array $agenda): self
    {
        $this->agenda = $agenda;
        return $this;
    }

    public function getNotes(): ?string    {
        return $this->notes;
    }

    public function setNotes(?string $notes): self
    {
        $this->notes = $notes;
        return $this;
    }

    public function getMinutes(): ?string    {
        return $this->minutes;
    }

    public function setMinutes(?string $minutes): self
    {
        $this->minutes = $minutes;
        return $this;
    }

    public function getMeetingid(): ?string    {
        return $this->meetingId;
    }

    public function setMeetingid(?string $meetingId): self
    {
        $this->meetingId = $meetingId;
        return $this;
    }

    public function getAttendees(): ?array    {
        return $this->attendees;
    }

    public function setAttendees(?array $attendees): self
    {
        $this->attendees = $attendees;
        return $this;
    }

    public function getAbsentees(): ?array    {
        return $this->absentees;
    }

    public function setAbsentees(?array $absentees): self
    {
        $this->absentees = $absentees;
        return $this;
    }

    public function getDecisions(): ?array    {
        return $this->decisions;
    }

    public function setDecisions(?array $decisions): self
    {
        $this->decisions = $decisions;
        return $this;
    }

    public function getActionitems(): ?array    {
        return $this->actionItems;
    }

    public function setActionitems(?array $actionItems): self
    {
        $this->actionItems = $actionItems;
        return $this;
    }

    public function getRecordingavailable(): bool    {
        return $this->recordingAvailable;
    }

    public function setRecordingavailable(bool $recordingAvailable): self
    {
        $this->recordingAvailable = $recordingAvailable;
        return $this;
    }

    public function isRecordingavailable(): bool
    {
        return $this->recordingAvailable === true;
    }

    public function getTranscript(): ?string    {
        return $this->transcript;
    }

    public function setTranscript(?string $transcript): self
    {
        $this->transcript = $transcript;
        return $this;
    }

    public function getRecordingduration(): ?int    {
        return $this->recordingDuration;
    }

    public function setRecordingduration(?int $recordingDuration): self
    {
        $this->recordingDuration = $recordingDuration;
        return $this;
    }

    public function getRecordingsize(): ?string    {
        return $this->recordingSize;
    }

    public function setRecordingsize(?string $recordingSize): self
    {
        $this->recordingSize = $recordingSize;
        return $this;
    }

    public function getNextmeetingdate(): ?\DateTimeImmutable    {
        return $this->nextMeetingDate;
    }

    public function setNextmeetingdate(?\DateTimeImmutable $nextMeetingDate): self
    {
        $this->nextMeetingDate = $nextMeetingDate;
        return $this;
    }

    public function getOrganizer(): ?string    {
        return $this->organizer;
    }

    public function setOrganizer(?string $organizer): self
    {
        $this->organizer = $organizer;
        return $this;
    }

    public function getPlatform(): ?string    {
        return $this->platform;
    }

    public function setPlatform(?string $platform): self
    {
        $this->platform = $platform;
        return $this;
    }

    public function getTags(): ?array    {
        return $this->tags;
    }

    public function setTags(?array $tags): self
    {
        $this->tags = $tags;
        return $this;
    }

    public function getConfidential(): bool    {
        return $this->confidential;
    }

    public function setConfidential(bool $confidential): self
    {
        $this->confidential = $confidential;
        return $this;
    }

    public function isConfidential(): bool
    {
        return $this->confidential === true;
    }

    public function getRecurring(): bool    {
        return $this->recurring;
    }

    public function setRecurring(bool $recurring): self
    {
        $this->recurring = $recurring;
        return $this;
    }

    public function isRecurring(): bool
    {
        return $this->recurring === true;
    }

    public function getRecurrencepattern(): ?array    {
        return $this->recurrencePattern;
    }

    public function setRecurrencepattern(?array $recurrencePattern): self
    {
        $this->recurrencePattern = $recurrencePattern;
        return $this;
    }

    public function getRecordurl(): ?string    {
        return $this->recordUrl;
    }

    public function setRecordurl(?string $recordUrl): self
    {
        $this->recordUrl = $recordUrl;
        return $this;
    }

    public function getSecret(): ?string    {
        return $this->secret;
    }

    public function setSecret(?string $secret): self
    {
        $this->secret = $secret;
        return $this;
    }

    public function getUrl(): ?string    {
        return $this->url;
    }

    public function setUrl(?string $url): self
    {
        $this->url = $url;
        return $this;
    }


    public function __toString(): string
    {
        return $this->title ?? ($this->getId()?->toRfc4122() ?? '');
    }
}
