<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
use App\Entity\Notification;
use App\Entity\Reminder;

/**
 * CommunicationMethod Entity (Generated Base Class)
 *
 * Communication methods (Phone, Email, SMS, Video Call, etc.) *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to CommunicationMethod.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class CommunicationMethodGenerated extends EntityBase
{
    #[Groups(['communicationmethod:read', 'communicationmethod:write'])]
    #[ORM\Column(type: 'string', length: 255)]
    protected string $name;

    #[Groups(['communicationmethod:read', 'communicationmethod:write'])]
    #[ORM\Column(name: 'function_prop', type: 'string', length: 255, nullable: true)]
    protected ?string $function = null;

    #[Groups(['communicationmethod:read'])]
    #[ORM\OneToMany(targetEntity: Notification::class, mappedBy: 'communicationMethod', fetch: 'LAZY')]
    protected Collection $notifications;

    #[Groups(['communicationmethod:read', 'communicationmethod:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $property = null;

    #[Groups(['communicationmethod:read'])]
    #[ORM\OneToMany(targetEntity: Reminder::class, mappedBy: 'communicationMethod', fetch: 'LAZY')]
    protected Collection $reminders;


    public function __construct()
    {
        parent::__construct();
        $this->notifications = new ArrayCollection();
        $this->reminders = new ArrayCollection();
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getFunction(): ?string    {
        return $this->function;
    }

    public function setFunction(?string $function): self
    {
        $this->function = $function;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Notification>
     */
    public function getNotifications(): Collection
    {
        return $this->notifications;
    }

    public function addNotification(App\Entity\Notification $notification): self
    {
        if (!$this->notifications->contains($notification)) {
            $this->notifications->add($notification);
            $notification->setCommunicationMethod($this);
        }
        return $this;
    }

    public function removeNotification(App\Entity\Notification $notification): self
    {
        if ($this->notifications->removeElement($notification)) {
            if ($notification->getCommunicationMethod() === $this) {
                $notification->setCommunicationMethod(null);
            }
        }
        return $this;
    }

    public function getProperty(): ?string    {
        return $this->property;
    }

    public function setProperty(?string $property): self
    {
        $this->property = $property;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Reminder>
     */
    public function getReminders(): Collection
    {
        return $this->reminders;
    }

    public function addReminder(App\Entity\Reminder $reminder): self
    {
        if (!$this->reminders->contains($reminder)) {
            $this->reminders->add($reminder);
            $reminder->setCommunicationMethod($this);
        }
        return $this;
    }

    public function removeReminder(App\Entity\Reminder $reminder): self
    {
        if ($this->reminders->removeElement($reminder)) {
            if ($reminder->getCommunicationMethod() === $this) {
                $reminder->setCommunicationMethod(null);
            }
        }
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? ($this->getId()?->toRfc4122() ?? '');
    }
}
