<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use App\Entity\Trait\OrganizationTrait;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;
use App\Entity\Calendar;
use App\Entity\Event;

/**
 * Holiday Entity (Generated Base Class)
 *
 * Company and regional holidays *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to Holiday.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class HolidayGenerated extends EntityBase
{
    use OrganizationTrait;

    #[ORM\Column(type: 'string', length: 255)]
    protected string $name;

    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $description = null;

    #[ORM\Column(type: 'boolean', nullable: true)]
    protected ?bool $blocksScheduling = null;

    #[ORM\Column(type: 'boolean')]
    protected bool $recurring;

    #[ORM\Column(type: 'boolean')]
    protected bool $observed;

    #[ORM\Column(type: 'boolean')]
    protected bool $active = true;

    #[ORM\ManyToOne(targetEntity: Calendar::class, inversedBy: 'holidays')]
    protected ?Calendar $calendar = null;

    #[ORM\Column(type: 'string', length: 2, nullable: true)]
    protected ?string $country = null;

    #[ORM\Column(type: 'string', length: 100, nullable: true)]
    protected ?string $region = null;

    #[ORM\Column(name: 'year_prop', type: 'integer', nullable: true)]
    protected ?int $year = null;

    #[ORM\Column(type: 'string', length: 50, nullable: true)]
    protected ?string $holidayType = null;

    #[ORM\ManyToOne(targetEntity: Event::class, inversedBy: 'holidays')]
    protected ?Event $event = null;

    #[ORM\Column(type: 'date', nullable: true)]
    protected ?\DateTimeImmutable $originalDate = null;

    #[ORM\Column(type: 'date')]
    protected \DateTimeImmutable $sentAt;

    #[ORM\Column(type: 'boolean')]
    protected bool $affectsSLA = true;

    #[ORM\Column(type: 'boolean')]
    protected bool $workingDay = false;

    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $notes = null;

    #[ORM\Column(type: 'time', nullable: true)]
    protected ?string $startTime = null;

    #[ORM\Column(type: 'time', nullable: true)]
    protected ?string $endTime = null;


    public function __construct()
    {
        parent::__construct();
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getDescription(): ?string    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    public function getBlocksscheduling(): ?bool    {
        return $this->blocksScheduling;
    }

    public function setBlocksscheduling(?bool $blocksScheduling): self
    {
        $this->blocksScheduling = $blocksScheduling;
        return $this;
    }

    public function isBlocksscheduling(): bool
    {
        return $this->blocksScheduling === true;
    }

    public function getRecurring(): bool    {
        return $this->recurring;
    }

    public function setRecurring(bool $recurring): self
    {
        $this->recurring = $recurring;
        return $this;
    }

    public function isRecurring(): bool
    {
        return $this->recurring === true;
    }

    public function getObserved(): bool    {
        return $this->observed;
    }

    public function setObserved(bool $observed): self
    {
        $this->observed = $observed;
        return $this;
    }

    public function isObserved(): bool
    {
        return $this->observed === true;
    }

    public function getActive(): bool    {
        return $this->active;
    }

    public function setActive(bool $active): self
    {
        $this->active = $active;
        return $this;
    }

    public function isActive(): bool
    {
        return $this->active === true;
    }

    public function getCalendar(): ?App\Entity\Calendar
    {
        return $this->calendar;
    }

    public function setCalendar(?App\Entity\Calendar $calendar): self
    {
        $this->calendar = $calendar;
        return $this;
    }

    public function getCountry(): ?string    {
        return $this->country;
    }

    public function setCountry(?string $country): self
    {
        $this->country = $country;
        return $this;
    }

    public function getRegion(): ?string    {
        return $this->region;
    }

    public function setRegion(?string $region): self
    {
        $this->region = $region;
        return $this;
    }

    public function getYear(): ?int    {
        return $this->year;
    }

    public function setYear(?int $year): self
    {
        $this->year = $year;
        return $this;
    }

    public function getHolidaytype(): ?string    {
        return $this->holidayType;
    }

    public function setHolidaytype(?string $holidayType): self
    {
        $this->holidayType = $holidayType;
        return $this;
    }

    public function getEvent(): ?App\Entity\Event
    {
        return $this->event;
    }

    public function setEvent(?App\Entity\Event $event): self
    {
        $this->event = $event;
        return $this;
    }

    public function getOriginaldate(): ?\DateTimeImmutable    {
        return $this->originalDate;
    }

    public function setOriginaldate(?\DateTimeImmutable $originalDate): self
    {
        $this->originalDate = $originalDate;
        return $this;
    }

    public function getSentat(): \DateTimeImmutable    {
        return $this->sentAt;
    }

    public function setSentat(\DateTimeImmutable $sentAt): self
    {
        $this->sentAt = $sentAt;
        return $this;
    }

    public function getAffectssla(): bool    {
        return $this->affectsSLA;
    }

    public function setAffectssla(bool $affectsSLA): self
    {
        $this->affectsSLA = $affectsSLA;
        return $this;
    }

    public function isAffectssla(): bool
    {
        return $this->affectsSLA === true;
    }

    public function getWorkingday(): bool    {
        return $this->workingDay;
    }

    public function setWorkingday(bool $workingDay): self
    {
        $this->workingDay = $workingDay;
        return $this;
    }

    public function isWorkingday(): bool
    {
        return $this->workingDay === true;
    }

    public function getNotes(): ?string    {
        return $this->notes;
    }

    public function setNotes(?string $notes): self
    {
        $this->notes = $notes;
        return $this;
    }

    public function getStarttime(): ?string    {
        return $this->startTime;
    }

    public function setStarttime(?string $startTime): self
    {
        $this->startTime = $startTime;
        return $this;
    }

    public function getEndtime(): ?string    {
        return $this->endTime;
    }

    public function setEndtime(?string $endTime): self
    {
        $this->endTime = $endTime;
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? ($this->getId()?->toRfc4122() ?? '');
    }
}
