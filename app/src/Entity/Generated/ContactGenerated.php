<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use App\Entity\Trait\OrganizationTrait;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
                                                                                                                                                                            use App\Entity\Company;
use App\Entity\User;
use App\Entity\City;
use App\Entity\SocialMedia;
use App\Entity\Flag;
use App\Entity\Talk;
use App\Entity\Deal;
use App\Entity\Task;
use App\Entity\EventAttendee;
use App\Entity\Campaign;

/**
 * Contact Entity (Generated Base Class)
 *
 * 
 *
 * This class is ALWAYS regenerated from CSV. DO NOT edit this file.
 * Add custom logic to Contact.php instead.
 *
 * @generated by Luminai Code Generator
 * @see /config/EntityNew.csv and /config/PropertyNew.csv
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class ContactGenerated extends EntityBase
{
    use OrganizationTrait;

    #[ORM\Column(type: 'string')]
    #[Assert\NotBlank]
    #[Assert\Length(max: 255)]
    #[Groups(['contact:read', 'contact:write'])]
    protected string $name;

    #[ORM\ManyToOne(targetEntity: Company::class, inversedBy: 'contacts')]
    #[Groups(['contact:read', 'contact:write'])]
    protected ?Company $company = null;

    #[ORM\Column(type: 'string', nullable: true)]
    #[Assert\Length(max: 255)]
    #[Groups(['contact:read', 'contact:write'])]
    protected ?string $origin = null;

    #[ORM\ManyToOne(targetEntity: User::class, inversedBy: 'managedContacts')]
    #[Groups(['contact:read', 'contact:write'])]
    protected ?User $accountManager = null;

    #[ORM\ManyToMany(targetEntity: User::class, inversedBy: 'contacts', fetch: 'LAZY')]
    #[Groups(['contact:read', 'contact:write'])]
    protected Collection $accountTeam;

    #[ORM\Column(type: 'string', nullable: true)]
    #[Assert\Length(max: 255)]
    #[Groups(['contact:read', 'contact:write'])]
    protected ?string $nickname = null;

    #[ORM\Column(type: 'integer', nullable: true)]
    #[Groups(['contact:read', 'contact:write'])]
    protected ?int $ranking = null;

    #[ORM\Column(type: 'string', nullable: true, unique: true)]
    #[Assert\Length(max: 255)]
    #[Groups(['contact:read', 'contact:write'])]
    protected ?string $email = null;

    #[ORM\Column(type: 'string', length: 20, nullable: true)]
    #[Assert\Length(max: 255)]
    #[Groups(['contact:read', 'contact:write'])]
    protected ?string $phone = null;

    #[ORM\Column(type: 'string', nullable: true)]
    #[Assert\Length(max: 255)]
    #[Groups(['contact:read', 'contact:write'])]
    protected ?string $address = null;

    #[ORM\Column(type: 'string', nullable: true)]
    #[Assert\Length(max: 255)]
    #[Groups(['contact:read', 'contact:write'])]
    protected ?string $neighborhood = null;

    #[ORM\ManyToOne(targetEntity: City::class)]
    #[Groups(['contact:read', 'contact:write'])]
    protected ?City $city = null;

    #[ORM\Column(type: 'string', nullable: true)]
    #[Assert\Length(max: 255)]
    #[Groups(['contact:read', 'contact:write'])]
    protected ?string $postalCode = null;

    #[ORM\Column(type: 'string', nullable: true)]
    #[Assert\Length(max: 255)]
    #[Groups(['contact:read', 'contact:write'])]
    protected ?string $geo = null;

    #[ORM\Column(type: 'date', nullable: true)]
    #[Groups(['contact:read', 'contact:write'])]
    protected ?\DateTimeInterface $birthDate = null;

    #[ORM\Column(type: 'integer', nullable: true)]
    #[Groups(['contact:read', 'contact:write'])]
    protected ?int $gender = null;

    #[ORM\Column(type: 'string', length: 20, nullable: true)]
    #[Assert\Length(max: 255)]
    #[Groups(['contact:read', 'contact:write'])]
    protected ?string $document = null;

    #[ORM\Column(type: 'integer', nullable: true)]
    #[Groups(['contact:read', 'contact:write'])]
    protected ?int $score = null;

    #[ORM\Column(type: 'text', nullable: true)]
    #[Groups(['contact:read', 'contact:write'])]
    protected ?string $notes = null;

    #[ORM\OneToMany(targetEntity: SocialMedia::class, mappedBy: 'contact', fetch: 'LAZY')]
    #[ORM\OrderBy(['name' => 'ASC'])]
    #[Groups(['contact:read', 'contact:write'])]
    protected Collection $socialMedias;

    #[ORM\OneToMany(targetEntity: Flag::class, mappedBy: 'contact', fetch: 'LAZY')]
    #[ORM\OrderBy(['name' => 'ASC'])]
    #[Groups(['contact:read', 'contact:write'])]
    protected Collection $flags;

    #[ORM\OneToMany(targetEntity: Talk::class, mappedBy: 'contact', fetch: 'EXTRA_LAZY')]
    #[Groups(['contact:read', 'contact:write'])]
    protected Collection $talks;

    #[ORM\Column(type: 'datetime', nullable: true)]
    #[Groups(['contact:read', 'contact:write'])]
    protected ?\DateTimeInterface $firstTalkDate = null;

    #[ORM\Column(type: 'datetime', nullable: true)]
    #[Groups(['contact:read', 'contact:write'])]
    protected ?\DateTimeInterface $lastTalkDate = null;

    #[ORM\Column(type: 'string', nullable: true)]
    #[Assert\Length(max: 255)]
    #[Groups(['contact:read', 'contact:write'])]
    protected ?string $profilePictureUrl = null;

    #[ORM\Column(type: 'integer', nullable: true)]
    #[Groups(['contact:read', 'contact:write'])]
    protected ?int $status = null;

    #[ORM\Column(type: 'string', nullable: true)]
    #[Assert\Length(max: 255)]
    #[Groups(['contact:read', 'contact:write'])]
    protected ?string $billingAddress = null;

    #[ORM\ManyToOne(targetEntity: City::class)]
    #[Groups(['contact:read', 'contact:write'])]
    protected ?City $billingCity = null;

    #[ORM\OneToMany(targetEntity: Deal::class, mappedBy: 'primaryContact', fetch: 'LAZY')]
    #[Groups(['contact:read', 'contact:write'])]
    protected Collection $primaryDeals;

    #[ORM\OneToMany(targetEntity: Task::class, mappedBy: 'contact', fetch: 'EXTRA_LAZY')]
    #[Groups(['contact:read', 'contact:write'])]
    protected Collection $tasks;

    #[ORM\OneToMany(targetEntity: EventAttendee::class, mappedBy: 'contact', fetch: 'LAZY')]
    #[Groups(['contact:read', 'contact:write'])]
    protected Collection $eventAttendances;

    #[ORM\ManyToMany(targetEntity: Deal::class, inversedBy: 'contacts', fetch: 'LAZY')]
    #[Groups(['contact:read', 'contact:write'])]
    protected Collection $deals;

    #[ORM\ManyToMany(targetEntity: Campaign::class, inversedBy: 'contacts', fetch: 'LAZY')]
    #[Groups(['contact:read', 'contact:write'])]
    protected Collection $campaigns;


    public function __construct()
    {
        parent::__construct();
        $this->accountTeam = new ArrayCollection();
        $this->socialMedias = new ArrayCollection();
        $this->flags = new ArrayCollection();
        $this->talks = new ArrayCollection();
        $this->primaryDeals = new ArrayCollection();
        $this->tasks = new ArrayCollection();
        $this->eventAttendances = new ArrayCollection();
        $this->deals = new ArrayCollection();
        $this->campaigns = new ArrayCollection();
    }

    public function getName(): string
    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    
    public function getCompany(): ?Company
    {
        return $this->company;
    }

    public function setCompany(?Company $company): self
    {
        $this->company = $company;
        return $this;
    }

    public function getOrigin(): ?string
    {
        return $this->origin;
    }

    public function setOrigin(?string $origin): self
    {
        $this->origin = $origin;
        return $this;
    }

    
    public function getAccountmanager(): ?User
    {
        return $this->accountManager;
    }

    public function setAccountmanager(?User $accountManager): self
    {
        $this->accountManager = $accountManager;
        return $this;
    }

    /**
     * @return Collection<int, User>
     */
    public function getAccountteam(): Collection
    {
        return $this->accountTeam;
    }

    public function addAccounttea(User $accountTea): self
    {
        if (!$this->accountTeam->contains($accountTea)) {
            $this->accountTeam->add($accountTea);
        }
        return $this;
    }

    public function removeAccounttea(User $accountTea): self
    {
        if ($this->accountTeam->removeElement($accountTea)) {
        }
        return $this;
    }

    public function getNickname(): ?string
    {
        return $this->nickname;
    }

    public function setNickname(?string $nickname): self
    {
        $this->nickname = $nickname;
        return $this;
    }

    
    public function getRanking(): ?int
    {
        return $this->ranking;
    }

    public function setRanking(?int $ranking): self
    {
        $this->ranking = $ranking;
        return $this;
    }

    
    public function getEmail(): ?string
    {
        return $this->email;
    }

    public function setEmail(?string $email): self
    {
        $this->email = $email;
        return $this;
    }

    
    public function getPhone(): ?string
    {
        return $this->phone;
    }

    public function setPhone(?string $phone): self
    {
        $this->phone = $phone;
        return $this;
    }

    
    public function getAddress(): ?string
    {
        return $this->address;
    }

    public function setAddress(?string $address): self
    {
        $this->address = $address;
        return $this;
    }

    
    public function getNeighborhood(): ?string
    {
        return $this->neighborhood;
    }

    public function setNeighborhood(?string $neighborhood): self
    {
        $this->neighborhood = $neighborhood;
        return $this;
    }

    
    public function getCity(): ?City
    {
        return $this->city;
    }

    public function setCity(?City $city): self
    {
        $this->city = $city;
        return $this;
    }

    public function getPostalcode(): ?string
    {
        return $this->postalCode;
    }

    public function setPostalcode(?string $postalCode): self
    {
        $this->postalCode = $postalCode;
        return $this;
    }

    
    public function getGeo(): ?string
    {
        return $this->geo;
    }

    public function setGeo(?string $geo): self
    {
        $this->geo = $geo;
        return $this;
    }

    
    public function getBirthdate(): ?\DateTimeInterface
    {
        return $this->birthDate;
    }

    public function setBirthdate(?\DateTimeInterface $birthDate): self
    {
        $this->birthDate = $birthDate;
        return $this;
    }

    
    public function getGender(): ?int
    {
        return $this->gender;
    }

    public function setGender(?int $gender): self
    {
        $this->gender = $gender;
        return $this;
    }

    
    public function getDocument(): ?string
    {
        return $this->document;
    }

    public function setDocument(?string $document): self
    {
        $this->document = $document;
        return $this;
    }

    
    public function getScore(): ?int
    {
        return $this->score;
    }

    public function setScore(?int $score): self
    {
        $this->score = $score;
        return $this;
    }

    
    public function getNotes(): ?string
    {
        return $this->notes;
    }

    public function setNotes(?string $notes): self
    {
        $this->notes = $notes;
        return $this;
    }

    
    /**
     * @return Collection<int, SocialMedia>
     */
    public function getSocialmedias(): Collection
    {
        return $this->socialMedias;
    }

    public function addSocialmedia(SocialMedia $socialMedia): self
    {
        if (!$this->socialMedias->contains($socialMedia)) {
            $this->socialMedias->add($socialMedia);
        }
        return $this;
    }

    public function removeSocialmedia(SocialMedia $socialMedia): self
    {
        if ($this->socialMedias->removeElement($socialMedia)) {
        }
        return $this;
    }

    /**
     * @return Collection<int, Flag>
     */
    public function getFlags(): Collection
    {
        return $this->flags;
    }

    public function addFlag(Flag $flag): self
    {
        if (!$this->flags->contains($flag)) {
            $this->flags->add($flag);
        }
        return $this;
    }

    public function removeFlag(Flag $flag): self
    {
        if ($this->flags->removeElement($flag)) {
        }
        return $this;
    }

    /**
     * @return Collection<int, Talk>
     */
    public function getTalks(): Collection
    {
        return $this->talks;
    }

    public function addTalk(Talk $talk): self
    {
        if (!$this->talks->contains($talk)) {
            $this->talks->add($talk);
        }
        return $this;
    }

    public function removeTalk(Talk $talk): self
    {
        if ($this->talks->removeElement($talk)) {
        }
        return $this;
    }

    public function getFirsttalkdate(): ?\DateTimeInterface
    {
        return $this->firstTalkDate;
    }

    public function setFirsttalkdate(?\DateTimeInterface $firstTalkDate): self
    {
        $this->firstTalkDate = $firstTalkDate;
        return $this;
    }

    
    public function getLasttalkdate(): ?\DateTimeInterface
    {
        return $this->lastTalkDate;
    }

    public function setLasttalkdate(?\DateTimeInterface $lastTalkDate): self
    {
        $this->lastTalkDate = $lastTalkDate;
        return $this;
    }

    
    public function getProfilepictureurl(): ?string
    {
        return $this->profilePictureUrl;
    }

    public function setProfilepictureurl(?string $profilePictureUrl): self
    {
        $this->profilePictureUrl = $profilePictureUrl;
        return $this;
    }

    
    public function getStatus(): ?int
    {
        return $this->status;
    }

    public function setStatus(?int $status): self
    {
        $this->status = $status;
        return $this;
    }

    
    public function getBillingaddress(): ?string
    {
        return $this->billingAddress;
    }

    public function setBillingaddress(?string $billingAddress): self
    {
        $this->billingAddress = $billingAddress;
        return $this;
    }

    
    public function getBillingcity(): ?City
    {
        return $this->billingCity;
    }

    public function setBillingcity(?City $billingCity): self
    {
        $this->billingCity = $billingCity;
        return $this;
    }

    /**
     * @return Collection<int, Deal>
     */
    public function getPrimarydeals(): Collection
    {
        return $this->primaryDeals;
    }

    public function addPrimarydeal(Deal $primaryDeal): self
    {
        if (!$this->primaryDeals->contains($primaryDeal)) {
            $this->primaryDeals->add($primaryDeal);
        }
        return $this;
    }

    public function removePrimarydeal(Deal $primaryDeal): self
    {
        if ($this->primaryDeals->removeElement($primaryDeal)) {
        }
        return $this;
    }

    /**
     * @return Collection<int, Task>
     */
    public function getTasks(): Collection
    {
        return $this->tasks;
    }

    public function addTask(Task $task): self
    {
        if (!$this->tasks->contains($task)) {
            $this->tasks->add($task);
        }
        return $this;
    }

    public function removeTask(Task $task): self
    {
        if ($this->tasks->removeElement($task)) {
        }
        return $this;
    }

    /**
     * @return Collection<int, EventAttendee>
     */
    public function getEventattendances(): Collection
    {
        return $this->eventAttendances;
    }

    public function addEventattendance(EventAttendee $eventAttendance): self
    {
        if (!$this->eventAttendances->contains($eventAttendance)) {
            $this->eventAttendances->add($eventAttendance);
        }
        return $this;
    }

    public function removeEventattendance(EventAttendee $eventAttendance): self
    {
        if ($this->eventAttendances->removeElement($eventAttendance)) {
        }
        return $this;
    }

    /**
     * @return Collection<int, Deal>
     */
    public function getDeals(): Collection
    {
        return $this->deals;
    }

    public function addDeal(Deal $deal): self
    {
        if (!$this->deals->contains($deal)) {
            $this->deals->add($deal);
        }
        return $this;
    }

    public function removeDeal(Deal $deal): self
    {
        if ($this->deals->removeElement($deal)) {
        }
        return $this;
    }

    /**
     * @return Collection<int, Campaign>
     */
    public function getCampaigns(): Collection
    {
        return $this->campaigns;
    }

    public function addCampaign(Campaign $campaign): self
    {
        if (!$this->campaigns->contains($campaign)) {
            $this->campaigns->add($campaign);
        }
        return $this;
    }

    public function removeCampaign(Campaign $campaign): self
    {
        if ($this->campaigns->removeElement($campaign)) {
        }
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? '';
    }
}
