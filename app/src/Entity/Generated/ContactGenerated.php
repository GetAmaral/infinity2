<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
use App\Entity\Organization;
use App\Entity\User;
use App\Entity\City;
use App\Entity\Campaign;
use App\Entity\Company;
use App\Entity\Deal;
use App\Entity\EventAttendee;
use App\Entity\SocialMedia;
use App\Entity\Talk;
use App\Entity\Task;

/**
 * Contact Entity (Generated Base Class)
 *
 * Customer contacts with full profile and interaction history *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to Contact.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class ContactGenerated extends EntityBase
{
    #[Groups(['contact:read', 'contact:write'])]
    #[ORM\ManyToOne(targetEntity: Organization::class, inversedBy: 'contacts')]
    #[ORM\JoinColumn(nullable: false)]
    protected Organization $organization;

    #[Groups(['contact:read', 'contact:write'])]
    #[ORM\Column(type: 'string', length: 100)]
    #[Assert\Length(max: 100)]
    protected string $firstName;

    #[Groups(['contact:read', 'contact:write'])]
    #[ORM\Column(type: 'string', length: 255)]
    protected string $name;

    #[Groups(['contact:read', 'contact:write'])]
    #[ORM\Column(type: 'string', length: 100)]
    #[Assert\Length(max: 100)]
    protected string $lastName;

    #[Groups(['contact:read', 'contact:write'])]
    #[ORM\ManyToOne(targetEntity: User::class, inversedBy: 'managedContacts')]
    protected ?User $accountManager = null;

    #[Groups(['contact:read', 'contact:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    #[Assert\Length(max: 255)]
    protected ?string $website = null;

    #[Groups(['contact:read'])]
    #[ORM\ManyToMany(targetEntity: User::class, inversedBy: 'contacts', fetch: 'LAZY')]
    #[ORM\JoinTable(name: 'contact_accountTeam')]
    protected Collection $accountTeam;

    #[Groups(['contact:read', 'contact:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $address = null;

    #[Groups(['contact:read', 'contact:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $billingAddress = null;

    #[Groups(['contact:read', 'contact:write'])]
    #[ORM\ManyToOne(targetEntity: City::class)]
    protected ?City $billingCity = null;

    #[Groups(['contact:read', 'contact:write'])]
    #[ORM\Column(type: 'date', nullable: true)]
    protected ?\DateTimeImmutable $birthDate = null;

    #[Groups(['contact:read'])]
    #[ORM\ManyToMany(targetEntity: Campaign::class, mappedBy: 'contacts', fetch: 'LAZY')]
    protected Collection $campaigns;

    #[Groups(['contact:read', 'contact:write'])]
    #[ORM\ManyToOne(targetEntity: City::class)]
    protected ?City $city = null;

    #[Groups(['contact:read', 'contact:write'])]
    #[ORM\ManyToOne(targetEntity: Company::class, inversedBy: 'contacts')]
    #[ORM\JoinColumn(nullable: false)]
    protected Company $company;

    #[Groups(['contact:read'])]
    #[ORM\ManyToMany(targetEntity: Deal::class, mappedBy: 'contacts', fetch: 'LAZY')]
    protected Collection $deals;

    #[Groups(['contact:read', 'contact:write'])]
    #[ORM\Column(type: 'string', length: 25, nullable: true)]
    protected ?string $mobilePhone = null;

    #[Groups(['contact:read', 'contact:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    #[Assert\Length(max: 255)]
    protected ?string $linkedinUrl = null;

    #[Groups(['contact:read', 'contact:write'])]
    #[ORM\Column(type: 'string', length: 150, nullable: true)]
    protected ?string $title = null;

    #[Groups(['contact:read', 'contact:write'])]
    #[ORM\Column(type: 'string', length: 100, nullable: true)]
    #[Assert\Length(max: 100)]
    protected ?string $department = null;

    #[Groups(['contact:read', 'contact:write'])]
    #[ORM\Column(type: 'boolean')]
    protected bool $emailOptOut;

    #[Groups(['contact:read', 'contact:write'])]
    #[ORM\Column(type: 'string', length: 100, nullable: true)]
    #[Assert\Length(max: 100)]
    protected ?string $leadSource = null;

    #[Groups(['contact:read', 'contact:write'])]
    #[ORM\Column(type: 'boolean')]
    protected bool $doNotCall;

    #[Groups(['contact:read', 'contact:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $preferredContactMethod = null;

    #[Groups(['contact:read', 'contact:write'])]
    #[ORM\Column(type: 'datetime', nullable: true)]
    protected ?\DateTimeImmutable $lastContactDate = null;

    #[Groups(['contact:read', 'contact:write'])]
    #[ORM\Column(name: 'document_prop', type: 'string', length: 20, nullable: true)]
    #[Assert\Length(max: 20)]
    protected ?string $document = null;

    #[Groups(['contact:read', 'contact:write'])]
    #[ORM\Column(type: 'string', length: 180, unique: true)]
    protected string $email;

    #[Groups(['contact:read'])]
    #[ORM\OneToMany(targetEntity: EventAttendee::class, mappedBy: 'contact', fetch: 'LAZY')]
    protected Collection $eventAttendances;

    #[Groups(['contact:read', 'contact:write'])]
    #[ORM\Column(type: 'datetime', nullable: true)]
    protected ?\DateTimeImmutable $firstTalkDate = null;

    #[Groups(['contact:read', 'contact:write'])]
    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $gender = null;

    #[Groups(['contact:read', 'contact:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $geo = null;

    #[Groups(['contact:read', 'contact:write'])]
    #[ORM\Column(type: 'datetime', nullable: true)]
    protected ?\DateTimeImmutable $lastTalkDate = null;

    #[Groups(['contact:read', 'contact:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $neighborhood = null;

    #[Groups(['contact:read', 'contact:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $nickname = null;

    #[Groups(['contact:read', 'contact:write'])]
    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $notes = null;

    #[Groups(['contact:read', 'contact:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $origin = null;

    #[Groups(['contact:read', 'contact:write'])]
    #[ORM\Column(type: 'string', length: 25, nullable: true)]
    protected ?string $phone = null;

    #[Groups(['contact:read', 'contact:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $postalCode = null;

    #[Groups(['contact:read'])]
    #[ORM\OneToMany(targetEntity: Deal::class, mappedBy: 'primaryContact', fetch: 'LAZY')]
    protected Collection $primaryDeals;

    #[Groups(['contact:read', 'contact:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $profilePictureUrl = null;

    #[Groups(['contact:read', 'contact:write'])]
    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $ranking = null;

    #[Groups(['contact:read', 'contact:write'])]
    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $score = null;

    #[Groups(['contact:read'])]
    #[ORM\OneToMany(targetEntity: SocialMedia::class, mappedBy: 'contact', fetch: 'LAZY')]
    protected Collection $socialMedias;

    #[Groups(['contact:read', 'contact:write'])]
    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $status = null;

    #[Groups(['contact:read'])]
    #[ORM\OneToMany(targetEntity: Talk::class, mappedBy: 'contact', fetch: 'LAZY')]
    protected Collection $talks;

    #[Groups(['contact:read'])]
    #[ORM\OneToMany(targetEntity: Task::class, mappedBy: 'contact', fetch: 'LAZY')]
    protected Collection $tasks;


    public function __construct()
    {
        parent::__construct();
        $this->accountTeam = new ArrayCollection();
        $this->campaigns = new ArrayCollection();
        $this->deals = new ArrayCollection();
        $this->eventAttendances = new ArrayCollection();
        $this->primaryDeals = new ArrayCollection();
        $this->socialMedias = new ArrayCollection();
        $this->talks = new ArrayCollection();
        $this->tasks = new ArrayCollection();
    }

    public function getOrganization(): Organization
    {
        return $this->organization;
    }

    public function setOrganization(Organization $organization): self
    {
        $this->organization = $organization;
        return $this;
    }

    public function getFirstName(): string    {
        return $this->firstName;
    }

    public function setFirstName(string $firstName): self
    {
        $this->firstName = $firstName;
        return $this;
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getLastName(): string    {
        return $this->lastName;
    }

    public function setLastName(string $lastName): self
    {
        $this->lastName = $lastName;
        return $this;
    }

    public function getAccountManager(): ?User
    {
        return $this->accountManager;
    }

    public function setAccountManager(?User $accountManager): self
    {
        $this->accountManager = $accountManager;
        return $this;
    }

    public function getWebsite(): ?string    {
        return $this->website;
    }

    public function setWebsite(?string $website): self
    {
        $this->website = $website;
        return $this;
    }

    /**
     * @return Collection<int, User>
     */
    public function getAccountTeam(): Collection
    {
        return $this->accountTeam;
    }

    public function addAccountTeam(User $accountTeam): self
    {
        if (!$this->accountTeam->contains($accountTeam)) {
            $this->accountTeam->add($accountTeam);
        }
        return $this;
    }

    public function removeAccountTeam(User $accountTeam): self
    {
        if ($this->accountTeam->removeElement($accountTeam)) {
        }
        return $this;
    }

    public function getAddress(): ?string    {
        return $this->address;
    }

    public function setAddress(?string $address): self
    {
        $this->address = $address;
        return $this;
    }

    public function getBillingAddress(): ?string    {
        return $this->billingAddress;
    }

    public function setBillingAddress(?string $billingAddress): self
    {
        $this->billingAddress = $billingAddress;
        return $this;
    }

    public function getBillingCity(): ?City
    {
        return $this->billingCity;
    }

    public function setBillingCity(?City $billingCity): self
    {
        $this->billingCity = $billingCity;
        return $this;
    }

    public function getBirthDate(): ?\DateTimeImmutable    {
        return $this->birthDate;
    }

    public function setBirthDate(?\DateTimeImmutable $birthDate): self
    {
        $this->birthDate = $birthDate;
        return $this;
    }

    /**
     * @return Collection<int, Campaign>
     */
    public function getCampaigns(): Collection
    {
        return $this->campaigns;
    }

    public function addCampaign(Campaign $campaign): self
    {
        if (!$this->campaigns->contains($campaign)) {
            $this->campaigns->add($campaign);
            $campaign->setContacts($this);
        }
        return $this;
    }

    public function removeCampaign(Campaign $campaign): self
    {
        if ($this->campaigns->removeElement($campaign)) {
            if ($campaign->getContacts() === $this) {
                $campaign->setContacts(null);
            }
        }
        return $this;
    }

    public function getCity(): ?City
    {
        return $this->city;
    }

    public function setCity(?City $city): self
    {
        $this->city = $city;
        return $this;
    }

    public function getCompany(): Company
    {
        return $this->company;
    }

    public function setCompany(Company $company): self
    {
        $this->company = $company;
        return $this;
    }

    /**
     * @return Collection<int, Deal>
     */
    public function getDeals(): Collection
    {
        return $this->deals;
    }

    public function addDeal(Deal $deal): self
    {
        if (!$this->deals->contains($deal)) {
            $this->deals->add($deal);
            $deal->setContacts($this);
        }
        return $this;
    }

    public function removeDeal(Deal $deal): self
    {
        if ($this->deals->removeElement($deal)) {
            if ($deal->getContacts() === $this) {
                $deal->setContacts(null);
            }
        }
        return $this;
    }

    public function getMobilePhone(): ?string    {
        return $this->mobilePhone;
    }

    public function setMobilePhone(?string $mobilePhone): self
    {
        $this->mobilePhone = $mobilePhone;
        return $this;
    }

    public function getLinkedinUrl(): ?string    {
        return $this->linkedinUrl;
    }

    public function setLinkedinUrl(?string $linkedinUrl): self
    {
        $this->linkedinUrl = $linkedinUrl;
        return $this;
    }

    public function getTitle(): ?string    {
        return $this->title;
    }

    public function setTitle(?string $title): self
    {
        $this->title = $title;
        return $this;
    }

    public function getDepartment(): ?string    {
        return $this->department;
    }

    public function setDepartment(?string $department): self
    {
        $this->department = $department;
        return $this;
    }

    public function getEmailOptOut(): bool    {
        return $this->emailOptOut;
    }

    public function setEmailOptOut(bool $emailOptOut): self
    {
        $this->emailOptOut = $emailOptOut;
        return $this;
    }

    public function isEmailOptOut(): bool
    {
        return $this->emailOptOut === true;
    }

    public function getLeadSource(): ?string    {
        return $this->leadSource;
    }

    public function setLeadSource(?string $leadSource): self
    {
        $this->leadSource = $leadSource;
        return $this;
    }

    public function getDoNotCall(): bool    {
        return $this->doNotCall;
    }

    public function setDoNotCall(bool $doNotCall): self
    {
        $this->doNotCall = $doNotCall;
        return $this;
    }

    public function isDoNotCall(): bool
    {
        return $this->doNotCall === true;
    }

    public function getPreferredContactMethod(): ?string    {
        return $this->preferredContactMethod;
    }

    public function setPreferredContactMethod(?string $preferredContactMethod): self
    {
        $this->preferredContactMethod = $preferredContactMethod;
        return $this;
    }

    public function getLastContactDate(): ?\DateTimeImmutable    {
        return $this->lastContactDate;
    }

    public function setLastContactDate(?\DateTimeImmutable $lastContactDate): self
    {
        $this->lastContactDate = $lastContactDate;
        return $this;
    }

    public function getDocument(): ?string    {
        return $this->document;
    }

    public function setDocument(?string $document): self
    {
        $this->document = $document;
        return $this;
    }

    public function getEmail(): string    {
        return $this->email;
    }

    public function setEmail(string $email): self
    {
        $this->email = $email;
        return $this;
    }

    /**
     * @return Collection<int, EventAttendee>
     */
    public function getEventAttendances(): Collection
    {
        return $this->eventAttendances;
    }

    public function addEventAttendance(EventAttendee $eventAttendance): self
    {
        if (!$this->eventAttendances->contains($eventAttendance)) {
            $this->eventAttendances->add($eventAttendance);
            $eventAttendance->setContact($this);
        }
        return $this;
    }

    public function removeEventAttendance(EventAttendee $eventAttendance): self
    {
        if ($this->eventAttendances->removeElement($eventAttendance)) {
            if ($eventAttendance->getContact() === $this) {
                $eventAttendance->setContact(null);
            }
        }
        return $this;
    }

    public function getFirstTalkDate(): ?\DateTimeImmutable    {
        return $this->firstTalkDate;
    }

    public function setFirstTalkDate(?\DateTimeImmutable $firstTalkDate): self
    {
        $this->firstTalkDate = $firstTalkDate;
        return $this;
    }

    public function getGender(): ?int    {
        return $this->gender;
    }

    public function setGender(?int $gender): self
    {
        $this->gender = $gender;
        return $this;
    }

    public function getGeo(): ?string    {
        return $this->geo;
    }

    public function setGeo(?string $geo): self
    {
        $this->geo = $geo;
        return $this;
    }

    public function getLastTalkDate(): ?\DateTimeImmutable    {
        return $this->lastTalkDate;
    }

    public function setLastTalkDate(?\DateTimeImmutable $lastTalkDate): self
    {
        $this->lastTalkDate = $lastTalkDate;
        return $this;
    }

    public function getNeighborhood(): ?string    {
        return $this->neighborhood;
    }

    public function setNeighborhood(?string $neighborhood): self
    {
        $this->neighborhood = $neighborhood;
        return $this;
    }

    public function getNickname(): ?string    {
        return $this->nickname;
    }

    public function setNickname(?string $nickname): self
    {
        $this->nickname = $nickname;
        return $this;
    }

    public function getNotes(): ?string    {
        return $this->notes;
    }

    public function setNotes(?string $notes): self
    {
        $this->notes = $notes;
        return $this;
    }

    public function getOrigin(): ?string    {
        return $this->origin;
    }

    public function setOrigin(?string $origin): self
    {
        $this->origin = $origin;
        return $this;
    }

    public function getPhone(): ?string    {
        return $this->phone;
    }

    public function setPhone(?string $phone): self
    {
        $this->phone = $phone;
        return $this;
    }

    public function getPostalCode(): ?string    {
        return $this->postalCode;
    }

    public function setPostalCode(?string $postalCode): self
    {
        $this->postalCode = $postalCode;
        return $this;
    }

    /**
     * @return Collection<int, Deal>
     */
    public function getPrimaryDeals(): Collection
    {
        return $this->primaryDeals;
    }

    public function addPrimaryDeal(Deal $primaryDeal): self
    {
        if (!$this->primaryDeals->contains($primaryDeal)) {
            $this->primaryDeals->add($primaryDeal);
            $primaryDeal->setPrimaryContact($this);
        }
        return $this;
    }

    public function removePrimaryDeal(Deal $primaryDeal): self
    {
        if ($this->primaryDeals->removeElement($primaryDeal)) {
            if ($primaryDeal->getPrimaryContact() === $this) {
                $primaryDeal->setPrimaryContact(null);
            }
        }
        return $this;
    }

    public function getProfilePictureUrl(): ?string    {
        return $this->profilePictureUrl;
    }

    public function setProfilePictureUrl(?string $profilePictureUrl): self
    {
        $this->profilePictureUrl = $profilePictureUrl;
        return $this;
    }

    public function getRanking(): ?int    {
        return $this->ranking;
    }

    public function setRanking(?int $ranking): self
    {
        $this->ranking = $ranking;
        return $this;
    }

    public function getScore(): ?int    {
        return $this->score;
    }

    public function setScore(?int $score): self
    {
        $this->score = $score;
        return $this;
    }

    /**
     * @return Collection<int, SocialMedia>
     */
    public function getSocialMedias(): Collection
    {
        return $this->socialMedias;
    }

    public function addSocialMedia(SocialMedia $socialMedia): self
    {
        if (!$this->socialMedias->contains($socialMedia)) {
            $this->socialMedias->add($socialMedia);
            $socialMedia->setContact($this);
        }
        return $this;
    }

    public function removeSocialMedia(SocialMedia $socialMedia): self
    {
        if ($this->socialMedias->removeElement($socialMedia)) {
            if ($socialMedia->getContact() === $this) {
                $socialMedia->setContact(null);
            }
        }
        return $this;
    }

    public function getStatus(): ?int    {
        return $this->status;
    }

    public function setStatus(?int $status): self
    {
        $this->status = $status;
        return $this;
    }

    /**
     * @return Collection<int, Talk>
     */
    public function getTalks(): Collection
    {
        return $this->talks;
    }

    public function addTalk(Talk $talk): self
    {
        if (!$this->talks->contains($talk)) {
            $this->talks->add($talk);
            $talk->setContact($this);
        }
        return $this;
    }

    public function removeTalk(Talk $talk): self
    {
        if ($this->talks->removeElement($talk)) {
            if ($talk->getContact() === $this) {
                $talk->setContact(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, Task>
     */
    public function getTasks(): Collection
    {
        return $this->tasks;
    }

    public function addTask(Task $task): self
    {
        if (!$this->tasks->contains($task)) {
            $this->tasks->add($task);
            $task->setContact($this);
        }
        return $this;
    }

    public function removeTask(Task $task): self
    {
        if ($this->tasks->removeElement($task)) {
            if ($task->getContact() === $this) {
                $task->setContact(null);
            }
        }
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? $this->title ?? ($this->getId()?->toRfc4122() ?? '');
    }
}
