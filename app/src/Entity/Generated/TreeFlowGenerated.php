<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
use App\Entity\Organization;
use App\Entity\Step;

/**
 * TreeFlow Entity (Generated Base Class)
 *
 * Workflow automation trees for business processes *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to TreeFlow.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class TreeFlowGenerated extends EntityBase
{
    #[Groups(['treeflow:read', 'treeflow:write'])]
    #[ORM\ManyToOne(targetEntity: Organization::class, inversedBy: 'treeFlows')]
    #[ORM\JoinColumn(nullable: false)]
    protected Organization $organization;

    #[Groups(['treeflow:read', 'treeflow:write'])]
    #[ORM\Column(type: 'string', length: 255)]
    #[Assert\Length(max: 255)]
    protected string $name;

    #[Groups(['treeflow:read'])]
    #[ORM\Column(type: 'string', length: 255)]
    #[Assert\Length(max: 255)]
    protected string $slug;

    #[Groups(['treeflow:read', 'treeflow:write'])]
    #[ORM\Column(name: 'version_prop', type: 'integer')]
    protected int $version = 1;

    #[Groups(['treeflow:read', 'treeflow:write'])]
    #[ORM\Column(type: 'json', nullable: true)]
    protected ?array $canvasViewState = null;

    #[Groups(['treeflow:read', 'treeflow:json'])]
    #[ORM\Column(type: 'json', nullable: true)]
    protected ?array $jsonStructure = null;

    #[Groups(['treeflow:read', 'treeflow:json'])]
    #[ORM\Column(type: 'json', nullable: true)]
    protected ?array $talkFlow = null;

    #[Groups(['treeflow:read'])]
    #[ORM\OneToMany(targetEntity: Step::class, mappedBy: 'treeFlow', orphanRemoval: true, fetch: 'LAZY')]
    protected Collection $steps;

    #[Groups(['treeflow:read', 'treeflow:write'])]
    #[ORM\Column(type: 'boolean')]
    protected bool $active = true;


    public function __construct()
    {
        parent::__construct();
        $this->steps = new ArrayCollection();
    }

    public function getOrganization(): Organization
    {
        return $this->organization;
    }

    public function setOrganization(Organization $organization): self
    {
        $this->organization = $organization;
        return $this;
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getSlug(): string    {
        return $this->slug;
    }

    public function setSlug(string $slug): self
    {
        $this->slug = $slug;
        return $this;
    }

    public function getVersion(): int    {
        return $this->version;
    }

    public function setVersion(int $version): self
    {
        $this->version = $version;
        return $this;
    }

    public function getCanvasViewState(): ?array    {
        return $this->canvasViewState;
    }

    public function setCanvasViewState(?array $canvasViewState): self
    {
        $this->canvasViewState = $canvasViewState;
        return $this;
    }

    public function getJsonStructure(): ?array    {
        return $this->jsonStructure;
    }

    public function setJsonStructure(?array $jsonStructure): self
    {
        $this->jsonStructure = $jsonStructure;
        return $this;
    }

    public function getTalkFlow(): ?array    {
        return $this->talkFlow;
    }

    public function setTalkFlow(?array $talkFlow): self
    {
        $this->talkFlow = $talkFlow;
        return $this;
    }

    /**
     * @return Collection<int, Step>
     */
    public function getSteps(): Collection
    {
        return $this->steps;
    }

    public function addStep(Step $step): self
    {
        if (!$this->steps->contains($step)) {
            $this->steps->add($step);
            $step->setTreeFlow($this);
        }
        return $this;
    }

    public function removeStep(Step $step): self
    {
        if ($this->steps->removeElement($step)) {
            if ($step->getTreeFlow() === $this) {
                $step->setTreeFlow(null);
            }
        }
        return $this;
    }

    public function getActive(): bool    {
        return $this->active;
    }

    public function setActive(bool $active): self
    {
        $this->active = $active;
        return $this;
    }

    public function isActive(): bool
    {
        return $this->active === true;
    }


    public function __toString(): string
    {
        return $this->name ?? ($this->getId()?->toRfc4122() ?? '');
    }
}
