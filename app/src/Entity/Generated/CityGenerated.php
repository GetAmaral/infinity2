<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
                                                use App\Entity\Country;
use App\Entity\EventResource;
use App\Entity\HolidayTemplate;

/**
 * City Entity (Generated Base Class)
 *
 * 
 *
 * This class is ALWAYS regenerated from CSV. DO NOT edit this file.
 * Add custom logic to City.php instead.
 *
 * @generated by Luminai Code Generator
 * @see /config/EntityNew.csv and /config/PropertyNew.csv
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class CityGenerated extends EntityBase
{
    #[ORM\Column(type: 'string')]
    #[Assert\NotBlank]
    #[Assert\Length(max: 255)]
    #[Groups(['city:read', 'city:write'])]
    protected string $name;

    #[ORM\Column(type: 'string', nullable: true)]
    #[Assert\Length(max: 255)]
    #[Groups(['city:read', 'city:write'])]
    protected ?string $state = null;

    #[ORM\Column(type: 'string', nullable: true)]
    #[Assert\Length(max: 255)]
    #[Groups(['city:read', 'city:write'])]
    protected ?string $ibgeCode = null;

    #[ORM\ManyToOne(targetEntity: Country::class)]
    #[Groups(['city:read', 'city:write'])]
    protected ?Country $country = null;

    #[ORM\OneToMany(targetEntity: EventResource::class, mappedBy: 'city', fetch: 'LAZY')]
    #[ORM\OrderBy(['name' => 'ASC'])]
    #[Groups(['city:read', 'city:write'])]
    protected Collection $eventResources;

    #[ORM\OneToMany(targetEntity: HolidayTemplate::class, mappedBy: 'city', fetch: 'LAZY')]
    #[ORM\OrderBy(['name' => 'ASC'])]
    #[Groups(['city:read', 'city:write'])]
    protected Collection $holidayTemplates;


    public function __construct()
    {
        parent::__construct();
        $this->eventResources = new ArrayCollection();
        $this->holidayTemplates = new ArrayCollection();
    }

    public function getName(): string
    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    
    public function getState(): ?string
    {
        return $this->state;
    }

    public function setState(?string $state): self
    {
        $this->state = $state;
        return $this;
    }

    
    public function getIbgecode(): ?string
    {
        return $this->ibgeCode;
    }

    public function setIbgecode(?string $ibgeCode): self
    {
        $this->ibgeCode = $ibgeCode;
        return $this;
    }

    
    public function getCountry(): ?Country
    {
        return $this->country;
    }

    public function setCountry(?Country $country): self
    {
        $this->country = $country;
        return $this;
    }

    /**
     * @return Collection<int, EventResource>
     */
    public function getEventresources(): Collection
    {
        return $this->eventResources;
    }

    public function addEventresource(EventResource $eventResource): self
    {
        if (!$this->eventResources->contains($eventResource)) {
            $this->eventResources->add($eventResource);
        }
        return $this;
    }

    public function removeEventresource(EventResource $eventResource): self
    {
        if ($this->eventResources->removeElement($eventResource)) {
        }
        return $this;
    }

    /**
     * @return Collection<int, HolidayTemplate>
     */
    public function getHolidaytemplates(): Collection
    {
        return $this->holidayTemplates;
    }

    public function addHolidaytemplate(HolidayTemplate $holidayTemplate): self
    {
        if (!$this->holidayTemplates->contains($holidayTemplate)) {
            $this->holidayTemplates->add($holidayTemplate);
        }
        return $this;
    }

    public function removeHolidaytemplate(HolidayTemplate $holidayTemplate): self
    {
        if ($this->holidayTemplates->removeElement($holidayTemplate)) {
        }
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? '';
    }
}
