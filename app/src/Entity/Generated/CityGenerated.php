<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use App\Entity\Trait\OrganizationTrait;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use App\Entity\Country;
use App\Entity\EventResource;
use App\Entity\HolidayTemplate;

/**
 * City Entity (Generated Base Class)
 *
 * Cities with geographic coordinates, timezone and location data for CRM operations *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to City.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class CityGenerated extends EntityBase
{
    use OrganizationTrait;

    #[ORM\Column(type: 'string', length: 255)]
    protected string $name;

    #[ORM\Column(name: 'state_prop', type: 'string', length: 100, nullable: true)]
    protected ?string $state = null;

    #[ORM\ManyToOne(targetEntity: Country::class)]
    protected ?Country $country = null;

    #[ORM\Column(type: 'float', precision: 10, scale: 2, nullable: true)]
    protected ?float $latitude = null;

    #[ORM\Column(type: 'float', precision: 10, scale: 2, nullable: true)]
    protected ?float $longitude = null;

    #[ORM\Column(type: 'string', length: 120, nullable: true)]
    protected ?string $timezone = null;

    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $population = null;

    #[ORM\Column(type: 'boolean')]
    protected bool $capital;

    #[ORM\Column(type: 'string', length: 20, nullable: true)]
    protected ?string $ibgeCode = null;

    #[ORM\Column(type: 'boolean')]
    protected bool $active;

    #[ORM\OneToMany(targetEntity: EventResource::class, mappedBy: 'city', fetch: 'LAZY')]
    protected Collection $eventResources;

    #[ORM\OneToMany(targetEntity: HolidayTemplate::class, mappedBy: 'city', fetch: 'LAZY')]
    protected Collection $holidayTemplates;


    public function __construct()
    {
        parent::__construct();
        $this->eventResources = new ArrayCollection();
        $this->holidayTemplates = new ArrayCollection();
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getState(): ?string    {
        return $this->state;
    }

    public function setState(?string $state): self
    {
        $this->state = $state;
        return $this;
    }

    public function getCountry(): ?App\Entity\Country
    {
        return $this->country;
    }

    public function setCountry(?App\Entity\Country $country): self
    {
        $this->country = $country;
        return $this;
    }

    public function getLatitude(): ?float    {
        return $this->latitude;
    }

    public function setLatitude(?float $latitude): self
    {
        $this->latitude = $latitude;
        return $this;
    }

    public function getLongitude(): ?float    {
        return $this->longitude;
    }

    public function setLongitude(?float $longitude): self
    {
        $this->longitude = $longitude;
        return $this;
    }

    public function getTimezone(): ?string    {
        return $this->timezone;
    }

    public function setTimezone(?string $timezone): self
    {
        $this->timezone = $timezone;
        return $this;
    }

    public function getPopulation(): ?int    {
        return $this->population;
    }

    public function setPopulation(?int $population): self
    {
        $this->population = $population;
        return $this;
    }

    public function getCapital(): bool    {
        return $this->capital;
    }

    public function setCapital(bool $capital): self
    {
        $this->capital = $capital;
        return $this;
    }

    public function isCapital(): bool
    {
        return $this->capital === true;
    }

    public function getIbgecode(): ?string    {
        return $this->ibgeCode;
    }

    public function setIbgecode(?string $ibgeCode): self
    {
        $this->ibgeCode = $ibgeCode;
        return $this;
    }

    public function getActive(): bool    {
        return $this->active;
    }

    public function setActive(bool $active): self
    {
        $this->active = $active;
        return $this;
    }

    public function isActive(): bool
    {
        return $this->active === true;
    }

    /**
     * @return Collection<int, App\Entity\EventResource>
     */
    public function getEventresources(): Collection
    {
        return $this->eventResources;
    }

    public function addEventreource(App\Entity\EventResource $eventReource): self
    {
        if (!$this->eventResources->contains($eventReource)) {
            $this->eventResources->add($eventReource);
            $eventReource->setCity($this);
        }
        return $this;
    }

    public function removeEventreource(App\Entity\EventResource $eventReource): self
    {
        if ($this->eventResources->removeElement($eventReource)) {
            if ($eventReource->getCity() === $this) {
                $eventReource->setCity(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\HolidayTemplate>
     */
    public function getHolidaytemplates(): Collection
    {
        return $this->holidayTemplates;
    }

    public function addHolidaytemplate(App\Entity\HolidayTemplate $holidayTemplate): self
    {
        if (!$this->holidayTemplates->contains($holidayTemplate)) {
            $this->holidayTemplates->add($holidayTemplate);
            $holidayTemplate->setCity($this);
        }
        return $this;
    }

    public function removeHolidaytemplate(App\Entity\HolidayTemplate $holidayTemplate): self
    {
        if ($this->holidayTemplates->removeElement($holidayTemplate)) {
            if ($holidayTemplate->getCity() === $this) {
                $holidayTemplate->setCity(null);
            }
        }
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? ($this->getId()?->toRfc4122() ?? '');
    }
}
