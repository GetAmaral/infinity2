<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use App\Entity\Agent;

/**
 * AgentType Entity (Generated Base Class)
 *
 * Agent types for customer support and sales teams *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to AgentType.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class AgentTypeGenerated extends EntityBase
{
    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $description = null;

    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $defaultPrompt = null;

    #[ORM\Column(type: 'string')]
    protected string $name;

    #[ORM\Column(type: 'boolean', nullable: true)]
    protected ?bool $active = null;

    #[ORM\Column(type: 'string', length: 50, nullable: true)]
    protected ?string $code = null;

    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $icon = null;

    #[ORM\Column(type: 'string', length: 7, nullable: true)]
    protected ?string $color = null;

    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $sortOrder = null;

    #[ORM\Column(type: 'boolean', nullable: true)]
    protected ?bool $default = null;

    #[ORM\OneToMany(targetEntity: Agent::class, mappedBy: 'agentType', fetch: 'LAZY')]
    protected Collection $agents;


    public function __construct()
    {
        parent::__construct();
        $this->agents = new ArrayCollection();
    }

    public function getDescription(): ?string    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    public function getDefaultprompt(): ?string    {
        return $this->defaultPrompt;
    }

    public function setDefaultprompt(?string $defaultPrompt): self
    {
        $this->defaultPrompt = $defaultPrompt;
        return $this;
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getActive(): ?bool    {
        return $this->active;
    }

    public function setActive(?bool $active): self
    {
        $this->active = $active;
        return $this;
    }

    public function isActive(): bool
    {
        return $this->active === true;
    }

    public function getCode(): ?string    {
        return $this->code;
    }

    public function setCode(?string $code): self
    {
        $this->code = $code;
        return $this;
    }

    public function getIcon(): ?string    {
        return $this->icon;
    }

    public function setIcon(?string $icon): self
    {
        $this->icon = $icon;
        return $this;
    }

    public function getColor(): ?string    {
        return $this->color;
    }

    public function setColor(?string $color): self
    {
        $this->color = $color;
        return $this;
    }

    public function getSortorder(): ?int    {
        return $this->sortOrder;
    }

    public function setSortorder(?int $sortOrder): self
    {
        $this->sortOrder = $sortOrder;
        return $this;
    }

    public function getDefault(): ?bool    {
        return $this->default;
    }

    public function setDefault(?bool $default): self
    {
        $this->default = $default;
        return $this;
    }

    public function isDefault(): bool
    {
        return $this->default === true;
    }

    /**
     * @return Collection<int, Agent>
     */
    public function getAgents(): Collection
    {
        return $this->agents;
    }

    public function addAgent(Agent $agent): self
    {
        if (!$this->agents->contains($agent)) {
            $this->agents->add($agent);
            $agent->setAgenttype($this);
        }
        return $this;
    }

    public function removeAgent(Agent $agent): self
    {
        if ($this->agents->removeElement($agent)) {
            if ($agent->getAgenttype() === $this) {
                $agent->setAgenttype(null);
            }
        }
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? ($this->getId()?->toRfc4122() ?? '');
    }
}
