<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use App\Entity\Trait\OrganizationTrait;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use App\Entity\Deal;

/**
 * DealType Entity (Generated Base Class)
 *
 * Deal types for categorizing opportunities *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to DealType.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class DealTypeGenerated extends EntityBase
{
    use OrganizationTrait;

    #[ORM\Column(type: 'string', length: 255)]
    protected string $name;

    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $description = null;

    #[ORM\Column(type: 'string', length: 50, nullable: true)]
    protected ?string $category = null;

    #[ORM\OneToMany(targetEntity: Deal::class, mappedBy: 'dealType', fetch: 'LAZY')]
    protected Collection $deals;

    #[ORM\Column(type: 'string', length: 7)]
    protected string $color = '#0dcaf0';

    #[ORM\Column(type: 'string', length: 50)]
    protected string $icon = 'bi-briefcase';

    #[ORM\Column(name: 'default_prop', type: 'boolean')]
    protected bool $default = false;

    #[ORM\Column(type: 'integer')]
    protected int $sortOrder = 0;

    #[ORM\Column(type: 'boolean')]
    protected bool $active = true;

    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $expectedDuration = null;

    #[ORM\Column(type: 'decimal', precision: 5, scale: 2, nullable: true)]
    protected ?float $winProbability = null;


    public function __construct()
    {
        parent::__construct();
        $this->deals = new ArrayCollection();
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getDescription(): ?string    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    public function getCategory(): ?string    {
        return $this->category;
    }

    public function setCategory(?string $category): self
    {
        $this->category = $category;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Deal>
     */
    public function getDeals(): Collection
    {
        return $this->deals;
    }

    public function addDeal(App\Entity\Deal $deal): self
    {
        if (!$this->deals->contains($deal)) {
            $this->deals->add($deal);
            $deal->setDealtype($this);
        }
        return $this;
    }

    public function removeDeal(App\Entity\Deal $deal): self
    {
        if ($this->deals->removeElement($deal)) {
            if ($deal->getDealtype() === $this) {
                $deal->setDealtype(null);
            }
        }
        return $this;
    }

    public function getColor(): string    {
        return $this->color;
    }

    public function setColor(string $color): self
    {
        $this->color = $color;
        return $this;
    }

    public function getIcon(): string    {
        return $this->icon;
    }

    public function setIcon(string $icon): self
    {
        $this->icon = $icon;
        return $this;
    }

    public function getDefault(): bool    {
        return $this->default;
    }

    public function setDefault(bool $default): self
    {
        $this->default = $default;
        return $this;
    }

    public function isDefault(): bool
    {
        return $this->default === true;
    }

    public function getSortorder(): int    {
        return $this->sortOrder;
    }

    public function setSortorder(int $sortOrder): self
    {
        $this->sortOrder = $sortOrder;
        return $this;
    }

    public function getActive(): bool    {
        return $this->active;
    }

    public function setActive(bool $active): self
    {
        $this->active = $active;
        return $this;
    }

    public function isActive(): bool
    {
        return $this->active === true;
    }

    public function getExpectedduration(): ?int    {
        return $this->expectedDuration;
    }

    public function setExpectedduration(?int $expectedDuration): self
    {
        $this->expectedDuration = $expectedDuration;
        return $this;
    }

    public function getWinprobability(): ?float    {
        return $this->winProbability;
    }

    public function setWinprobability(?float $winProbability): self
    {
        $this->winProbability = $winProbability;
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? ($this->getId()?->toRfc4122() ?? '');
    }
}
