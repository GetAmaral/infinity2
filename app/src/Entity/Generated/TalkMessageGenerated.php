<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use App\Entity\Trait\OrganizationTrait;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
                                                                                                                use App\Entity\Talk;
use App\Entity\Contact;
use App\Entity\User;
use App\Entity\Agent;
use App\Entity\Attachment;
use App\Entity\TalkMessage;
use App\Entity\Notification;

/**
 * TalkMessage Entity (Generated Base Class)
 *
 * 
 *
 * This class is ALWAYS regenerated from CSV. DO NOT edit this file.
 * Add custom logic to TalkMessage.php instead.
 *
 * @generated by Luminai Code Generator
 * @see /config/EntityNew.csv and /config/PropertyNew.csv
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class TalkMessageGenerated extends EntityBase
{
    use OrganizationTrait;

    #[ORM\ManyToOne(targetEntity: Talk::class, inversedBy: 'messages')]
    #[ORM\JoinColumn(nullable: false)]
    #[Groups(['talkmessage:read', 'talkmessage:write'])]
    protected Talk $talk;

    #[ORM\ManyToOne(targetEntity: Contact::class)]
    #[Groups(['talkmessage:read', 'talkmessage:write'])]
    protected ?Contact $fromContact = null;

    #[ORM\ManyToOne(targetEntity: User::class)]
    #[Groups(['talkmessage:read', 'talkmessage:write'])]
    protected ?User $fromUser = null;

    #[ORM\ManyToOne(targetEntity: Agent::class)]
    #[Groups(['talkmessage:read', 'talkmessage:write'])]
    protected ?Agent $fromAgent = null;

    #[ORM\Column(type: 'datetime', nullable: true)]
    #[Groups(['talkmessage:read', 'talkmessage:write'])]
    protected ?\DateTimeInterface $date = null;

    #[ORM\Column(type: 'text', nullable: true)]
    #[Groups(['talkmessage:read', 'talkmessage:write'])]
    protected ?string $text = null;

    #[ORM\Column(type: 'integer', nullable: true)]
    #[Groups(['talkmessage:read', 'talkmessage:write'])]
    protected ?int $messageType = null;

    #[ORM\OneToMany(targetEntity: Attachment::class, mappedBy: 'talkMessage', fetch: 'LAZY')]
    #[Groups(['talkmessage:read', 'talkmessage:write'])]
    protected Collection $attachments;

    #[ORM\Column(type: 'boolean', nullable: true)]
    #[Groups(['talkmessage:read', 'talkmessage:write'])]
    protected ?bool $read = null;

    #[ORM\Column(type: 'datetime', nullable: true)]
    #[Groups(['talkmessage:read', 'talkmessage:write'])]
    protected ?\DateTimeInterface $readAt = null;

    #[ORM\Column(type: 'float', nullable: true)]
    #[Groups(['talkmessage:read', 'talkmessage:write'])]
    protected ?float $sentiment = null;

    #[ORM\ManyToOne(targetEntity: TalkMessage::class)]
    #[Groups(['talkmessage:read', 'talkmessage:write'])]
    protected ?TalkMessage $parentMessage = null;

    #[ORM\Column(type: 'boolean', nullable: true)]
    #[Groups(['talkmessage:read', 'talkmessage:write'])]
    protected ?bool $edited = null;

    #[ORM\OneToOne(targetEntity: Notification::class, inversedBy: 'talkMessage')]
    #[Groups(['talkmessage:read', 'talkmessage:write'])]
    protected ?Notification $notification = null;


    public function __construct()
    {
        parent::__construct();
        $this->attachments = new ArrayCollection();
    }

    public function getTalk(): Talk
    {
        return $this->talk;
    }

    public function setTalk(Talk $talk): self
    {
        $this->talk = $talk;
        return $this;
    }

    public function getFromcontact(): ?Contact
    {
        return $this->fromContact;
    }

    public function setFromcontact(?Contact $fromContact): self
    {
        $this->fromContact = $fromContact;
        return $this;
    }

    public function getFromuser(): ?User
    {
        return $this->fromUser;
    }

    public function setFromuser(?User $fromUser): self
    {
        $this->fromUser = $fromUser;
        return $this;
    }

    public function getFromagent(): ?Agent
    {
        return $this->fromAgent;
    }

    public function setFromagent(?Agent $fromAgent): self
    {
        $this->fromAgent = $fromAgent;
        return $this;
    }

    public function getDate(): ?\DateTimeInterface
    {
        return $this->date;
    }

    public function setDate(?\DateTimeInterface $date): self
    {
        $this->date = $date;
        return $this;
    }

    
    public function getText(): ?string
    {
        return $this->text;
    }

    public function setText(?string $text): self
    {
        $this->text = $text;
        return $this;
    }

    
    public function getMessagetype(): ?int
    {
        return $this->messageType;
    }

    public function setMessagetype(?int $messageType): self
    {
        $this->messageType = $messageType;
        return $this;
    }

    
    /**
     * @return Collection<int, Attachment>
     */
    public function getAttachments(): Collection
    {
        return $this->attachments;
    }

    public function addAttachment(Attachment $attachment): self
    {
        if (!$this->attachments->contains($attachment)) {
            $this->attachments->add($attachment);
        }
        return $this;
    }

    public function removeAttachment(Attachment $attachment): self
    {
        if ($this->attachments->removeElement($attachment)) {
        }
        return $this;
    }

    public function getRead(): ?bool
    {
        return $this->read;
    }

    public function setRead(?bool $read): self
    {
        $this->read = $read;
        return $this;
    }

    
    public function getReadat(): ?\DateTimeInterface
    {
        return $this->readAt;
    }

    public function setReadat(?\DateTimeInterface $readAt): self
    {
        $this->readAt = $readAt;
        return $this;
    }

    
    public function getSentiment(): ?float
    {
        return $this->sentiment;
    }

    public function setSentiment(?float $sentiment): self
    {
        $this->sentiment = $sentiment;
        return $this;
    }

    
    public function getParentmessage(): ?TalkMessage
    {
        return $this->parentMessage;
    }

    public function setParentmessage(?TalkMessage $parentMessage): self
    {
        $this->parentMessage = $parentMessage;
        return $this;
    }

    public function getEdited(): ?bool
    {
        return $this->edited;
    }

    public function setEdited(?bool $edited): self
    {
        $this->edited = $edited;
        return $this;
    }

    
    public function getNotification(): ?Notification
    {
        return $this->notification;
    }

    public function setNotification(?Notification $notification): self
    {
        $this->notification = $notification;
        return $this;
    }


    public function __toString(): string
    {
        return (string) $this->getId()->toRfc4122();
    }
}
