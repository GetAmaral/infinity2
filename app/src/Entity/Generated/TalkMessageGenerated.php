<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
use App\Entity\Organization;
use App\Entity\Talk;
use App\Entity\Contact;
use App\Entity\User;
use App\Entity\Agent;
use App\Entity\Attachment;
use App\Entity\TalkMessage;
use App\Entity\Notification;

/**
 * TalkMessage Entity (Generated Base Class)
 *
 * Individual messages within communication threads *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to TalkMessage.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class TalkMessageGenerated extends EntityBase
{
    #[Groups(['talkmessage:read', 'talkmessage:write'])]
    #[ORM\ManyToOne(targetEntity: Organization::class, inversedBy: 'talkMessages')]
    #[ORM\JoinColumn(nullable: false)]
    protected Organization $organization;

    #[Groups(['talkmessage:read', 'talkmessage:write'])]
    #[ORM\ManyToOne(targetEntity: Talk::class, inversedBy: 'messages')]
    #[ORM\JoinColumn(nullable: false)]
    protected Talk $talk;

    #[Groups(['talkmessage:read', 'talkmessage:write'])]
    #[ORM\ManyToOne(targetEntity: Contact::class)]
    protected ?Contact $fromContact = null;

    #[Groups(['talkmessage:read', 'talkmessage:write'])]
    #[ORM\ManyToOne(targetEntity: User::class)]
    protected ?User $fromUser = null;

    #[Groups(['talkmessage:read', 'talkmessage:write'])]
    #[ORM\ManyToOne(targetEntity: Agent::class)]
    protected ?Agent $fromAgent = null;

    #[Groups(['talkmessage:read', 'talkmessage:write'])]
    #[ORM\Column(type: 'datetime')]
    protected \DateTimeImmutable $sentAt;

    #[Groups(['talkmessage:read', 'talkmessage:write'])]
    #[ORM\Column(type: 'text')]
    protected string $body;

    #[Groups(['talkmessage:read', 'talkmessage:write'])]
    #[ORM\Column(type: 'string', length: 255)]
    protected string $messageType = 'text';

    #[Groups(['talkmessage:read'])]
    #[ORM\OneToMany(targetEntity: Attachment::class, mappedBy: 'talkMessage', fetch: 'LAZY')]
    protected Collection $attachments;

    #[Groups(['talkmessage:read', 'talkmessage:write'])]
    #[ORM\Column(name: 'read_prop', type: 'boolean')]
    protected bool $read = false;

    #[Groups(['talkmessage:read', 'talkmessage:write'])]
    #[ORM\Column(type: 'datetime', nullable: true)]
    protected ?\DateTimeImmutable $readAt = null;

    #[Groups(['talkmessage:read', 'talkmessage:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $sentiment = null;

    #[Groups(['talkmessage:read', 'talkmessage:write'])]
    #[ORM\ManyToOne(targetEntity: TalkMessage::class)]
    protected ?TalkMessage $parentMessage = null;

    #[Groups(['talkmessage:read', 'talkmessage:write'])]
    #[ORM\Column(type: 'boolean', nullable: true)]
    protected ?bool $edited = null;

    #[Groups(['talkmessage:read', 'talkmessage:write'])]
    #[ORM\OneToOne(targetEntity: Notification::class, inversedBy: 'talkMessage')]
    protected ?Notification $notification = null;

    #[Groups(['talkmessage:read', 'talkmessage:write'])]
    #[ORM\Column(type: 'string', length: 255)]
    protected string $direction = 'inbound';

    #[Groups(['talkmessage:read', 'talkmessage:write'])]
    #[ORM\Column(type: 'datetime', nullable: true)]
    protected ?\DateTimeImmutable $deliveredAt = null;

    #[Groups(['talkmessage:read', 'talkmessage:write'])]
    #[ORM\Column(type: 'boolean')]
    protected bool $internal = false;

    #[Groups(['talkmessage:read', 'talkmessage:write'])]
    #[ORM\Column(name: 'system_prop', type: 'boolean')]
    protected bool $system = false;

    #[Groups(['talkmessage:read', 'talkmessage:write'])]
    #[ORM\Column(type: 'datetime', nullable: true)]
    protected ?\DateTimeImmutable $editedAt = null;

    #[Groups(['talkmessage:read', 'talkmessage:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $channel = null;

    #[Groups(['talkmessage:read', 'talkmessage:write'])]
    #[ORM\Column(type: 'string', length: 500, nullable: true)]
    #[Assert\Length(max: 500)]
    protected ?string $subject = null;

    #[Groups(['talkmessage:read', 'talkmessage:write'])]
    #[ORM\Column(type: 'json', nullable: true)]
    protected ?array $metadata = null;


    public function __construct()
    {
        parent::__construct();
        $this->attachments = new ArrayCollection();
    }

    public function getOrganization(): Organization
    {
        return $this->organization;
    }

    public function setOrganization(Organization $organization): self
    {
        $this->organization = $organization;
        return $this;
    }

    public function getTalk(): Talk
    {
        return $this->talk;
    }

    public function setTalk(Talk $talk): self
    {
        $this->talk = $talk;
        return $this;
    }

    public function getFromContact(): ?Contact
    {
        return $this->fromContact;
    }

    public function setFromContact(?Contact $fromContact): self
    {
        $this->fromContact = $fromContact;
        return $this;
    }

    public function getFromUser(): ?User
    {
        return $this->fromUser;
    }

    public function setFromUser(?User $fromUser): self
    {
        $this->fromUser = $fromUser;
        return $this;
    }

    public function getFromAgent(): ?Agent
    {
        return $this->fromAgent;
    }

    public function setFromAgent(?Agent $fromAgent): self
    {
        $this->fromAgent = $fromAgent;
        return $this;
    }

    public function getSentAt(): \DateTimeImmutable    {
        return $this->sentAt;
    }

    public function setSentAt(\DateTimeImmutable $sentAt): self
    {
        $this->sentAt = $sentAt;
        return $this;
    }

    public function getBody(): string    {
        return $this->body;
    }

    public function setBody(string $body): self
    {
        $this->body = $body;
        return $this;
    }

    public function getMessageType(): string    {
        return $this->messageType;
    }

    public function setMessageType(string $messageType): self
    {
        $this->messageType = $messageType;
        return $this;
    }

    /**
     * @return Collection<int, Attachment>
     */
    public function getAttachments(): Collection
    {
        return $this->attachments;
    }

    public function addAttachment(Attachment $attachment): self
    {
        if (!$this->attachments->contains($attachment)) {
            $this->attachments->add($attachment);
            $attachment->setTalkMessage($this);
        }
        return $this;
    }

    public function removeAttachment(Attachment $attachment): self
    {
        if ($this->attachments->removeElement($attachment)) {
            if ($attachment->getTalkMessage() === $this) {
                $attachment->setTalkMessage(null);
            }
        }
        return $this;
    }

    public function getRead(): bool    {
        return $this->read;
    }

    public function setRead(bool $read): self
    {
        $this->read = $read;
        return $this;
    }

    public function isRead(): bool
    {
        return $this->read === true;
    }

    public function getReadAt(): ?\DateTimeImmutable    {
        return $this->readAt;
    }

    public function setReadAt(?\DateTimeImmutable $readAt): self
    {
        $this->readAt = $readAt;
        return $this;
    }

    public function getSentiment(): ?string    {
        return $this->sentiment;
    }

    public function setSentiment(?string $sentiment): self
    {
        $this->sentiment = $sentiment;
        return $this;
    }

    public function getParentMessage(): ?TalkMessage
    {
        return $this->parentMessage;
    }

    public function setParentMessage(?TalkMessage $parentMessage): self
    {
        $this->parentMessage = $parentMessage;
        return $this;
    }

    public function getEdited(): ?bool    {
        return $this->edited;
    }

    public function setEdited(?bool $edited): self
    {
        $this->edited = $edited;
        return $this;
    }

    public function isEdited(): bool
    {
        return $this->edited === true;
    }

    public function getNotification(): ?Notification
    {
        return $this->notification;
    }

    public function setNotification(?Notification $notification): self
    {
        $this->notification = $notification;
        return $this;
    }

    public function getDirection(): string    {
        return $this->direction;
    }

    public function setDirection(string $direction): self
    {
        $this->direction = $direction;
        return $this;
    }

    public function getDeliveredAt(): ?\DateTimeImmutable    {
        return $this->deliveredAt;
    }

    public function setDeliveredAt(?\DateTimeImmutable $deliveredAt): self
    {
        $this->deliveredAt = $deliveredAt;
        return $this;
    }

    public function getInternal(): bool    {
        return $this->internal;
    }

    public function setInternal(bool $internal): self
    {
        $this->internal = $internal;
        return $this;
    }

    public function isInternal(): bool
    {
        return $this->internal === true;
    }

    public function getSystem(): bool    {
        return $this->system;
    }

    public function setSystem(bool $system): self
    {
        $this->system = $system;
        return $this;
    }

    public function isSystem(): bool
    {
        return $this->system === true;
    }

    public function getEditedAt(): ?\DateTimeImmutable    {
        return $this->editedAt;
    }

    public function setEditedAt(?\DateTimeImmutable $editedAt): self
    {
        $this->editedAt = $editedAt;
        return $this;
    }

    public function getChannel(): ?string    {
        return $this->channel;
    }

    public function setChannel(?string $channel): self
    {
        $this->channel = $channel;
        return $this;
    }

    public function getSubject(): ?string    {
        return $this->subject;
    }

    public function setSubject(?string $subject): self
    {
        $this->subject = $subject;
        return $this;
    }

    public function getMetadata(): ?array    {
        return $this->metadata;
    }

    public function setMetadata(?array $metadata): self
    {
        $this->metadata = $metadata;
        return $this;
    }


    public function __toString(): string
    {
        return $this->getId()?->toRfc4122() ?? '';
    }
}
