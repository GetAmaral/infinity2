<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use App\Entity\Trait\OrganizationTrait;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use App\Entity\PipelineTemplate;
use App\Entity\TaskTemplate;

/**
 * PipelineStageTemplate Entity (Generated Base Class)
 *
 * Templates for pipeline stages *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to PipelineStageTemplate.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class PipelineStageTemplateGenerated extends EntityBase
{
    use OrganizationTrait;

    #[ORM\Column(type: 'string', length: 255)]
    protected string $name;

    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $description = null;

    #[ORM\Column(name: 'order_prop', type: 'integer')]
    protected int $order = 0;

    #[ORM\Column(type: 'decimal', precision: 5, scale: 2)]
    protected float $probability = 0;

    #[ORM\Column(type: 'boolean')]
    protected bool $active;

    #[ORM\Column(type: 'string', length: 7, nullable: true)]
    protected ?string $color = '#0dcaf0';

    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $rottingDays = null;

    #[ORM\ManyToOne(targetEntity: PipelineTemplate::class, inversedBy: 'stages')]
    #[ORM\JoinColumn(nullable: false)]
    protected PipelineTemplate $pipelineTemplate;

    #[ORM\Column(name: 'final_prop', type: 'boolean')]
    protected bool $final;

    #[ORM\OneToMany(targetEntity: TaskTemplate::class, mappedBy: 'pipelineStageTemplate', fetch: 'LAZY')]
    protected Collection $tasks;

    #[ORM\Column(type: 'string', length: 255)]
    protected string $stageType;

    #[ORM\Column(type: 'json', nullable: true)]
    protected ?array $automationRules = null;

    #[ORM\Column(type: 'json', nullable: true)]
    protected ?array $requiredFields = null;

    #[ORM\Column(type: 'string', length: 50, nullable: true)]
    protected ?string $icon = null;


    public function __construct()
    {
        parent::__construct();
        $this->tasks = new ArrayCollection();
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getDescription(): ?string    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    public function getOrder(): int    {
        return $this->order;
    }

    public function setOrder(int $order): self
    {
        $this->order = $order;
        return $this;
    }

    public function getProbability(): float    {
        return $this->probability;
    }

    public function setProbability(float $probability): self
    {
        $this->probability = $probability;
        return $this;
    }

    public function getActive(): bool    {
        return $this->active;
    }

    public function setActive(bool $active): self
    {
        $this->active = $active;
        return $this;
    }

    public function isActive(): bool
    {
        return $this->active === true;
    }

    public function getColor(): ?string    {
        return $this->color;
    }

    public function setColor(?string $color): self
    {
        $this->color = $color;
        return $this;
    }

    public function getRottingdays(): ?int    {
        return $this->rottingDays;
    }

    public function setRottingdays(?int $rottingDays): self
    {
        $this->rottingDays = $rottingDays;
        return $this;
    }

    public function getPipelinetemplate(): App\Entity\PipelineTemplate
    {
        return $this->pipelineTemplate;
    }

    public function setPipelinetemplate(App\Entity\PipelineTemplate $pipelineTemplate): self
    {
        $this->pipelineTemplate = $pipelineTemplate;
        return $this;
    }

    public function getFinal(): bool    {
        return $this->final;
    }

    public function setFinal(bool $final): self
    {
        $this->final = $final;
        return $this;
    }

    public function isFinal(): bool
    {
        return $this->final === true;
    }

    /**
     * @return Collection<int, App\Entity\TaskTemplate>
     */
    public function getTasks(): Collection
    {
        return $this->tasks;
    }

    public function addTak(App\Entity\TaskTemplate $tak): self
    {
        if (!$this->tasks->contains($tak)) {
            $this->tasks->add($tak);
            $tak->setPipelinestagetemplate($this);
        }
        return $this;
    }

    public function removeTak(App\Entity\TaskTemplate $tak): self
    {
        if ($this->tasks->removeElement($tak)) {
            if ($tak->getPipelinestagetemplate() === $this) {
                $tak->setPipelinestagetemplate(null);
            }
        }
        return $this;
    }

    public function getStagetype(): string    {
        return $this->stageType;
    }

    public function setStagetype(string $stageType): self
    {
        $this->stageType = $stageType;
        return $this;
    }

    public function getAutomationrules(): ?array    {
        return $this->automationRules;
    }

    public function setAutomationrules(?array $automationRules): self
    {
        $this->automationRules = $automationRules;
        return $this;
    }

    public function getRequiredfields(): ?array    {
        return $this->requiredFields;
    }

    public function setRequiredfields(?array $requiredFields): self
    {
        $this->requiredFields = $requiredFields;
        return $this;
    }

    public function getIcon(): ?string    {
        return $this->icon;
    }

    public function setIcon(?string $icon): self
    {
        $this->icon = $icon;
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? ($this->getId()?->toRfc4122() ?? '');
    }
}
