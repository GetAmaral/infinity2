<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
use App\Entity\Organization;
use App\Entity\Event;

/**
 * EventCategory Entity (Generated Base Class)
 *
 * Event categories for calendar organization *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to EventCategory.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class EventCategoryGenerated extends EntityBase
{
    #[Groups(['eventcategory:read', 'eventcategory:write'])]
    #[ORM\ManyToOne(targetEntity: Organization::class, inversedBy: 'eventCategories')]
    #[ORM\JoinColumn(nullable: false)]
    protected Organization $organization;

    #[Groups(['eventcategory:read', 'eventcategory:write'])]
    #[ORM\Column(type: 'string', length: 255)]
    protected string $name;

    #[Groups(['eventcategory:read', 'eventcategory:write'])]
    #[ORM\Column(type: 'string', length: 7)]
    protected string $color = '#0dcaf0';

    #[Groups(['eventcategory:read', 'eventcategory:write'])]
    #[ORM\Column(type: 'text', length: 500, nullable: true)]
    protected ?string $description = null;

    #[Groups(['eventcategory:read', 'eventcategory:write'])]
    #[ORM\Column(type: 'string', length: 50)]
    protected string $icon = 'bi-calendar-event';

    #[Groups(['eventcategory:read', 'eventcategory:write'])]
    #[ORM\Column(name: 'default_prop', type: 'boolean')]
    protected bool $default = false;

    #[Groups(['eventcategory:read', 'eventcategory:write'])]
    #[ORM\Column(type: 'string', length: 50, nullable: true)]
    protected ?string $eventType = null;

    #[Groups(['eventcategory:read', 'eventcategory:write'])]
    #[ORM\Column(type: 'integer')]
    protected int $sortOrder = 0;

    #[Groups(['eventcategory:read', 'eventcategory:write'])]
    #[ORM\Column(type: 'boolean')]
    protected bool $allowMultiple = true;

    #[Groups(['eventcategory:read', 'eventcategory:write'])]
    #[ORM\Column(type: 'boolean')]
    protected bool $active = true;

    #[Groups(['eventcategory:read'])]
    #[ORM\ManyToMany(targetEntity: Event::class, mappedBy: 'categories', fetch: 'LAZY')]
    protected Collection $events;


    public function __construct()
    {
        parent::__construct();
        $this->events = new ArrayCollection();
    }

    public function getOrganization(): App\Entity\Organization
    {
        return $this->organization;
    }

    public function setOrganization(App\Entity\Organization $organization): self
    {
        $this->organization = $organization;
        return $this;
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getColor(): string    {
        return $this->color;
    }

    public function setColor(string $color): self
    {
        $this->color = $color;
        return $this;
    }

    public function getDescription(): ?string    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    public function getIcon(): string    {
        return $this->icon;
    }

    public function setIcon(string $icon): self
    {
        $this->icon = $icon;
        return $this;
    }

    public function getDefault(): bool    {
        return $this->default;
    }

    public function setDefault(bool $default): self
    {
        $this->default = $default;
        return $this;
    }

    public function isDefault(): bool
    {
        return $this->default === true;
    }

    public function getEventType(): ?string    {
        return $this->eventType;
    }

    public function setEventType(?string $eventType): self
    {
        $this->eventType = $eventType;
        return $this;
    }

    public function getSortOrder(): int    {
        return $this->sortOrder;
    }

    public function setSortOrder(int $sortOrder): self
    {
        $this->sortOrder = $sortOrder;
        return $this;
    }

    public function getAllowMultiple(): bool    {
        return $this->allowMultiple;
    }

    public function setAllowMultiple(bool $allowMultiple): self
    {
        $this->allowMultiple = $allowMultiple;
        return $this;
    }

    public function isAllowMultiple(): bool
    {
        return $this->allowMultiple === true;
    }

    public function getActive(): bool    {
        return $this->active;
    }

    public function setActive(bool $active): self
    {
        $this->active = $active;
        return $this;
    }

    public function isActive(): bool
    {
        return $this->active === true;
    }

    /**
     * @return Collection<int, App\Entity\Event>
     */
    public function getEvents(): Collection
    {
        return $this->events;
    }

    public function addEvent(App\Entity\Event $event): self
    {
        if (!$this->events->contains($event)) {
            $this->events->add($event);
            $event->setCategories($this);
        }
        return $this;
    }

    public function removeEvent(App\Entity\Event $event): self
    {
        if ($this->events->removeElement($event)) {
            if ($event->getCategories() === $this) {
                $event->setCategories(null);
            }
        }
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? ($this->getId()?->toRfc4122() ?? '');
    }
}
