<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
use App\Entity\Organization;
use App\Entity\Role;
use App\Entity\User;

/**
 * Profile Entity (Generated Base Class)
 *
 * User profiles with permissions and preferences *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to Profile.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class ProfileGenerated extends EntityBase
{
    #[Groups(['profile:read', 'profile:write'])]
    #[ORM\ManyToOne(targetEntity: Organization::class, inversedBy: 'profiles')]
    #[ORM\JoinColumn(nullable: false)]
    protected Organization $organization;

    #[Groups(['profile:read', 'profile:write'])]
    #[ORM\Column(type: 'string', length: 255)]
    protected string $name;

    #[Groups(['profile:read', 'profile:write'])]
    #[ORM\Column(type: 'string', length: 255)]
    protected string $description;

    #[Groups(['profile:read'])]
    #[ORM\ManyToMany(targetEntity: Role::class, fetch: 'LAZY')]
    protected Collection $grantedRoles;

    #[Groups(['profile:read'])]
    #[ORM\ManyToMany(targetEntity: User::class, inversedBy: 'profiles', fetch: 'LAZY')]
    #[ORM\JoinTable(name: 'profile_users')]
    protected Collection $users;


    public function __construct()
    {
        parent::__construct();
        $this->grantedRoles = new ArrayCollection();
        $this->users = new ArrayCollection();
    }

    public function getOrganization(): App\Entity\Organization
    {
        return $this->organization;
    }

    public function setOrganization(App\Entity\Organization $organization): self
    {
        $this->organization = $organization;
        return $this;
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getDescription(): string    {
        return $this->description;
    }

    public function setDescription(string $description): self
    {
        $this->description = $description;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Role>
     */
    public function getGrantedRoles(): Collection
    {
        return $this->grantedRoles;
    }

    public function addGrantedRole(App\Entity\Role $grantedRole): self
    {
        if (!$this->grantedRoles->contains($grantedRole)) {
            $this->grantedRoles->add($grantedRole);
        }
        return $this;
    }

    public function removeGrantedRole(App\Entity\Role $grantedRole): self
    {
        if ($this->grantedRoles->removeElement($grantedRole)) {
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\User>
     */
    public function getUsers(): Collection
    {
        return $this->users;
    }

    public function addUser(App\Entity\User $user): self
    {
        if (!$this->users->contains($user)) {
            $this->users->add($user);
        }
        return $this;
    }

    public function removeUser(App\Entity\User $user): self
    {
        if ($this->users->removeElement($user)) {
        }
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? ($this->getId()?->toRfc4122() ?? '');
    }
}
