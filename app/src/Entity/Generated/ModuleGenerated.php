<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;

/**
 * Module Entity (Generated Base Class)
 *
 * System modules for role-based access control *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to Module.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class ModuleGenerated extends EntityBase
{
    #[Groups(['module:read', 'module:write'])]
    #[ORM\Column(type: 'string', length: 255)]
    protected string $name;

    #[Groups(['module:read', 'module:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $description = null;

    #[Groups(['module:read', 'module:write'])]
    #[ORM\Column(type: 'boolean', nullable: true)]
    protected ?bool $enabled = null;

    #[Groups(['module:read', 'module:write'])]
    #[ORM\Column(name: 'version_prop', type: 'string', length: 255, nullable: true)]
    protected ?string $version = null;


    public function __construct()
    {
        parent::__construct();
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getDescription(): ?string    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    public function getEnabled(): ?bool    {
        return $this->enabled;
    }

    public function setEnabled(?bool $enabled): self
    {
        $this->enabled = $enabled;
        return $this;
    }

    public function isEnabled(): bool
    {
        return $this->enabled === true;
    }

    public function getVersion(): ?string    {
        return $this->version;
    }

    public function setVersion(?string $version): self
    {
        $this->version = $version;
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? ($this->getId()?->toRfc4122() ?? '');
    }
}
