<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use App\Entity\Trait\OrganizationTrait;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;
use App\Entity\User;
use App\Entity\Event;
use App\Entity\EventResource;

/**
 * EventResourceBooking Entity (Generated Base Class)
 *
 * Resource booking reservations *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to EventResourceBooking.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class EventResourceBookingGenerated extends EntityBase
{
    use OrganizationTrait;

    #[ORM\ManyToOne(targetEntity: User::class, inversedBy: 'resourceBookings')]
    protected ?User $bookedBy = null;

    #[ORM\Column(type: 'datetime')]
    protected \DateTimeImmutable $startTime;

    #[ORM\Column(type: 'datetime')]
    protected \DateTimeImmutable $endTime;

    #[ORM\Column(type: 'boolean')]
    protected bool $confirmed = false;

    #[ORM\Column(type: 'boolean')]
    protected bool $cancelled = false;

    #[ORM\Column(type: 'boolean')]
    protected bool $paid = false;

    #[ORM\Column(type: 'decimal', precision: 10, scale: 2, nullable: true)]
    protected ?float $depositAmount = 0;

    #[ORM\Column(type: 'decimal', precision: 10, scale: 2, nullable: true)]
    protected ?float $totalAmount = 0;

    #[ORM\Column(type: 'datetime', nullable: true)]
    protected ?\DateTimeImmutable $confirmedAt = null;

    #[ORM\Column(type: 'datetime', nullable: true)]
    protected ?\DateTimeImmutable $cancelledAt = null;

    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $cancellationReason = null;

    #[ORM\Column(type: 'boolean')]
    protected bool $reminderSent = false;

    #[ORM\ManyToOne(targetEntity: Event::class, inversedBy: 'resourceBookings')]
    protected ?Event $event = null;

    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $notes = null;

    #[ORM\Column(type: 'integer')]
    protected int $quantity = 1;

    #[ORM\ManyToOne(targetEntity: EventResource::class, inversedBy: 'eventBookings')]
    protected ?EventResource $resource = null;

    #[ORM\Column(type: 'string', length: 50)]
    protected string $status = 'pending';


    public function __construct()
    {
        parent::__construct();
    }

    public function getBookedby(): ?App\Entity\User
    {
        return $this->bookedBy;
    }

    public function setBookedby(?App\Entity\User $bookedBy): self
    {
        $this->bookedBy = $bookedBy;
        return $this;
    }

    public function getStarttime(): \DateTimeImmutable    {
        return $this->startTime;
    }

    public function setStarttime(\DateTimeImmutable $startTime): self
    {
        $this->startTime = $startTime;
        return $this;
    }

    public function getEndtime(): \DateTimeImmutable    {
        return $this->endTime;
    }

    public function setEndtime(\DateTimeImmutable $endTime): self
    {
        $this->endTime = $endTime;
        return $this;
    }

    public function getConfirmed(): bool    {
        return $this->confirmed;
    }

    public function setConfirmed(bool $confirmed): self
    {
        $this->confirmed = $confirmed;
        return $this;
    }

    public function isConfirmed(): bool
    {
        return $this->confirmed === true;
    }

    public function getCancelled(): bool    {
        return $this->cancelled;
    }

    public function setCancelled(bool $cancelled): self
    {
        $this->cancelled = $cancelled;
        return $this;
    }

    public function isCancelled(): bool
    {
        return $this->cancelled === true;
    }

    public function getPaid(): bool    {
        return $this->paid;
    }

    public function setPaid(bool $paid): self
    {
        $this->paid = $paid;
        return $this;
    }

    public function isPaid(): bool
    {
        return $this->paid === true;
    }

    public function getDepositamount(): ?float    {
        return $this->depositAmount;
    }

    public function setDepositamount(?float $depositAmount): self
    {
        $this->depositAmount = $depositAmount;
        return $this;
    }

    public function getTotalamount(): ?float    {
        return $this->totalAmount;
    }

    public function setTotalamount(?float $totalAmount): self
    {
        $this->totalAmount = $totalAmount;
        return $this;
    }

    public function getConfirmedat(): ?\DateTimeImmutable    {
        return $this->confirmedAt;
    }

    public function setConfirmedat(?\DateTimeImmutable $confirmedAt): self
    {
        $this->confirmedAt = $confirmedAt;
        return $this;
    }

    public function getCancelledat(): ?\DateTimeImmutable    {
        return $this->cancelledAt;
    }

    public function setCancelledat(?\DateTimeImmutable $cancelledAt): self
    {
        $this->cancelledAt = $cancelledAt;
        return $this;
    }

    public function getCancellationreason(): ?string    {
        return $this->cancellationReason;
    }

    public function setCancellationreason(?string $cancellationReason): self
    {
        $this->cancellationReason = $cancellationReason;
        return $this;
    }

    public function getRemindersent(): bool    {
        return $this->reminderSent;
    }

    public function setRemindersent(bool $reminderSent): self
    {
        $this->reminderSent = $reminderSent;
        return $this;
    }

    public function isRemindersent(): bool
    {
        return $this->reminderSent === true;
    }

    public function getEvent(): ?App\Entity\Event
    {
        return $this->event;
    }

    public function setEvent(?App\Entity\Event $event): self
    {
        $this->event = $event;
        return $this;
    }

    public function getNotes(): ?string    {
        return $this->notes;
    }

    public function setNotes(?string $notes): self
    {
        $this->notes = $notes;
        return $this;
    }

    public function getQuantity(): int    {
        return $this->quantity;
    }

    public function setQuantity(int $quantity): self
    {
        $this->quantity = $quantity;
        return $this;
    }

    public function getResource(): ?App\Entity\EventResource
    {
        return $this->resource;
    }

    public function setResource(?App\Entity\EventResource $resource): self
    {
        $this->resource = $resource;
        return $this;
    }

    public function getStatus(): string    {
        return $this->status;
    }

    public function setStatus(string $status): self
    {
        $this->status = $status;
        return $this;
    }


    public function __toString(): string
    {
        return $this->getId()?->toRfc4122() ?? '';
    }
}
