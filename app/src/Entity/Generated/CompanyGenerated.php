<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
use App\Entity\Organization;
use App\Entity\User;
use App\Entity\City;
use App\Entity\Campaign;
use App\Entity\Company;
use App\Entity\Contact;
use App\Entity\Deal;
use App\Entity\Talk;
use App\Entity\Brand;
use App\Entity\Product;
use App\Entity\SocialMedia;

/**
 * Company Entity (Generated Base Class)
 *
 * Business accounts and company profiles *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to Company.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class CompanyGenerated extends EntityBase
{
    #[Groups(['company:read', 'company:write'])]
    #[ORM\ManyToOne(targetEntity: Organization::class, inversedBy: 'companies')]
    #[ORM\JoinColumn(nullable: false)]
    protected Organization $organization;

    #[Groups(['company:read', 'company:write'])]
    #[ORM\Column(type: 'string', length: 255)]
    #[Assert\Length(max: 255)]
    protected string $name;

    #[Groups(['company:read', 'company:write'])]
    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $description = null;

    #[Groups(['company:read', 'company:write'])]
    #[ORM\Column(type: 'string', length: 100, nullable: true)]
    #[Assert\Length(max: 100)]
    protected ?string $industry = null;

    #[Groups(['company:read', 'company:write'])]
    #[ORM\ManyToOne(targetEntity: User::class, inversedBy: 'managedCompanies')]
    protected ?User $accountManager = null;

    #[Groups(['company:read', 'company:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    #[Assert\Length(max: 255)]
    protected ?string $website = null;

    #[Groups(['company:read', 'company:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    #[Assert\Length(max: 255)]
    protected ?string $billingAddress = null;

    #[Groups(['company:read', 'company:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    #[Assert\Length(max: 255)]
    protected ?string $legalName = null;

    #[Groups(['company:read', 'company:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    #[Assert\Length(max: 255)]
    protected ?string $shippingAddress = null;

    #[Groups(['company:read', 'company:write'])]
    #[ORM\ManyToOne(targetEntity: City::class)]
    protected ?City $shippingCity = null;

    #[Groups(['company:read', 'company:write'])]
    #[ORM\ManyToMany(targetEntity: Campaign::class, mappedBy: 'companies', fetch: 'LAZY')]
    protected Collection $campaigns;

    #[Groups(['company:read', 'company:write'])]
    #[ORM\Column(type: 'string', length: 20, nullable: true)]
    #[Assert\Length(max: 20)]
    protected ?string $shippingPostalCode = null;

    #[Groups(['company:read', 'company:write'])]
    #[ORM\Column(type: 'decimal', precision: 15, scale: 2, nullable: true)]
    protected ?string $annualRevenue = null;

    #[Groups(['company:read', 'company:write'])]
    #[ORM\Column(type: 'string', length: 3, nullable: true)]
    #[Assert\Length(max: 3)]
    protected ?string $currency = null;

    #[Groups(['company:read', 'company:write'])]
    #[ORM\Column(type: 'string', length: 50, nullable: true)]
    #[Assert\Length(max: 50)]
    protected ?string $companyType = null;

    #[Groups(['company:read', 'company:write'])]
    #[ORM\ManyToOne(targetEntity: Company::class)]
    protected ?Company $parentCompany = null;

    #[Groups(['company:read', 'company:write'])]
    #[ORM\Column(type: 'string', length: 50, nullable: true)]
    #[Assert\Length(max: 50)]
    protected ?string $accountSource = null;

    #[Groups(['company:read', 'company:write'])]
    #[ORM\Column(type: 'string', length: 20, nullable: true)]
    #[Assert\Length(max: 20)]
    protected ?string $rating = null;

    #[Groups(['company:read', 'company:write'])]
    #[ORM\Column(type: 'date', nullable: true)]
    protected ?\DateTimeImmutable $customerSince = null;

    #[Groups(['company:read', 'company:write'])]
    #[ORM\Column(type: 'string', length: 50, nullable: true)]
    #[Assert\Length(max: 50)]
    protected ?string $paymentTerms = null;

    #[Groups(['company:read', 'company:write'])]
    #[ORM\Column(type: 'decimal', precision: 15, scale: 2, nullable: true)]
    protected ?string $creditLimit = null;

    #[Groups(['company:read', 'company:write'])]
    #[ORM\Column(type: 'string', length: 20, nullable: true)]
    #[Assert\Length(max: 20)]
    protected ?string $fiscalYearEnd = null;

    #[Groups(['company:read', 'company:write'])]
    #[ORM\ManyToOne(targetEntity: City::class)]
    protected ?City $city = null;

    #[Groups(['company:read', 'company:write'])]
    #[ORM\Column(type: 'string', length: 10, nullable: true)]
    #[Assert\Length(max: 10)]
    protected ?string $sicCode = null;

    #[Groups(['company:read', 'company:write'])]
    #[ORM\Column(type: 'string', length: 10, nullable: true)]
    #[Assert\Length(max: 10)]
    protected ?string $naicsCode = null;

    #[Groups(['company:read', 'company:write'])]
    #[ORM\Column(type: 'string', length: 50, nullable: true)]
    #[Assert\Length(max: 50)]
    protected ?string $ownership = null;

    #[Groups(['company:read', 'company:write'])]
    #[ORM\Column(type: 'string', length: 10, nullable: true)]
    #[Assert\Length(max: 10)]
    protected ?string $tickerSymbol = null;

    #[Groups(['company:read', 'company:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    #[Assert\Length(max: 255)]
    protected ?string $linkedInUrl = null;

    #[Groups(['company:read', 'company:write'])]
    #[ORM\Column(type: 'boolean', nullable: true)]
    protected ?bool $doNotContact = null;

    #[Groups(['company:read', 'company:write'])]
    #[ORM\Column(type: 'boolean', nullable: true)]
    protected ?bool $gdprConsent = null;

    #[Groups(['company:read', 'company:write'])]
    #[ORM\Column(type: 'string', length: 100, nullable: true)]
    #[Assert\Length(max: 100)]
    protected ?string $country = null;

    #[Groups(['company:read', 'company:write'])]
    #[ORM\Column(type: 'string', length: 100, nullable: true)]
    #[Assert\Length(max: 100)]
    protected ?string $shippingCountry = null;

    #[Groups(['company:read', 'company:write'])]
    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $companySize = null;

    #[Groups(['company:read', 'company:write'])]
    #[ORM\Column(type: 'string', length: 20, nullable: true)]
    #[Assert\Length(max: 20)]
    protected ?string $fax = null;

    #[Groups(['company:read', 'company:write'])]
    #[ORM\OneToMany(targetEntity: Contact::class, mappedBy: 'company', fetch: 'LAZY')]
    protected Collection $contacts;

    #[Groups(['company:read', 'company:write'])]
    #[ORM\Column(type: 'string', length: 50, nullable: true)]
    #[Assert\Length(max: 50)]
    protected ?string $coordinates = null;

    #[Groups(['company:read', 'company:write'])]
    #[ORM\OneToMany(targetEntity: Deal::class, mappedBy: 'company', fetch: 'LAZY')]
    protected Collection $deals;

    #[Groups(['company:read', 'company:write'])]
    #[ORM\Column(type: 'string', length: 180, nullable: true)]
    #[Assert\Length(max: 180)]
    protected ?string $email = null;

    #[Groups(['company:read'])]
    #[ORM\OneToMany(targetEntity: Talk::class, mappedBy: 'company', fetch: 'LAZY')]
    protected Collection $talks;

    #[Groups(['company:read', 'company:write'])]
    #[ORM\ManyToMany(targetEntity: Brand::class, inversedBy: 'manufacturers', fetch: 'LAZY')]
    #[ORM\JoinTable(name: 'company_manufacturedBrands')]
    protected Collection $manufacturedBrands;

    #[Groups(['company:read', 'company:write'])]
    #[ORM\ManyToMany(targetEntity: Product::class, inversedBy: 'manufacturer', fetch: 'LAZY')]
    #[ORM\JoinTable(name: 'company_manufacturedProducts')]
    protected Collection $manufacturedProducts;

    #[Groups(['company:read', 'company:write'])]
    #[ORM\Column(type: 'string', length: 20, nullable: true)]
    #[Assert\Length(max: 20)]
    protected ?string $mobilePhone = null;

    #[Groups(['company:read', 'company:write'])]
    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $notes = null;

    #[Groups(['company:read', 'company:write'])]
    #[ORM\Column(type: 'string', length: 20, nullable: true)]
    #[Assert\Length(max: 20)]
    protected ?string $phone = null;

    #[Groups(['company:read', 'company:write'])]
    #[ORM\Column(type: 'string', length: 20, nullable: true)]
    #[Assert\Length(max: 20)]
    protected ?string $postalCode = null;

    #[Groups(['company:read', 'company:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    #[Assert\Length(max: 255)]
    protected ?string $primaryContactName = null;

    #[Groups(['company:read', 'company:write'])]
    #[ORM\OneToMany(targetEntity: SocialMedia::class, mappedBy: 'company', fetch: 'LAZY')]
    protected Collection $socialMedias;

    #[Groups(['company:read', 'company:write'])]
    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $status = null;

    #[Groups(['company:read', 'company:write'])]
    #[ORM\ManyToMany(targetEntity: Brand::class, inversedBy: 'suppliers', fetch: 'LAZY')]
    #[ORM\JoinTable(name: 'company_suppliedBrands')]
    protected Collection $suppliedBrands;

    #[Groups(['company:read', 'company:write'])]
    #[ORM\ManyToMany(targetEntity: Product::class, inversedBy: 'supplier', fetch: 'LAZY')]
    #[ORM\JoinTable(name: 'company_suppliedProducts')]
    protected Collection $suppliedProducts;

    #[Groups(['company:read', 'company:write'])]
    #[ORM\Column(type: 'string', length: 50, nullable: true)]
    #[Assert\Length(max: 50)]
    protected ?string $taxId = null;

    #[Groups(['company:read', 'company:write'])]
    #[ORM\Column(type: 'date', nullable: true)]
    protected ?\DateTimeImmutable $nextActivityDate = null;

    #[Groups(['company:read'])]
    #[ORM\Column(type: 'date', nullable: true)]
    protected ?\DateTimeImmutable $lastActivityDate = null;

    #[Groups(['company:read', 'company:write'])]
    #[ORM\Column(type: 'string', length: 255)]
    protected string $timeZone = 'UTC';

    #[Groups(['company:read', 'company:write'])]
    #[ORM\Column(type: 'string', length: 100, nullable: true)]
    #[Assert\Length(max: 100)]
    protected ?string $stateProvince = null;

    #[Groups(['company:read', 'company:write'])]
    #[ORM\Column(type: 'string', length: 500, nullable: true)]
    #[Assert\Length(max: 500)]
    protected ?string $tags = null;

    #[Groups(['company:read', 'company:write'])]
    #[ORM\Column(type: 'string', length: 50, nullable: true)]
    #[Assert\Length(max: 50)]
    protected ?string $lifecycleStage = null;

    #[Groups(['company:read', 'company:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    #[Assert\Length(max: 255)]
    protected ?string $companyDomain = null;

    #[Groups(['company:read', 'company:write'])]
    #[ORM\Column(type: 'string', length: 50, nullable: true)]
    #[Assert\Length(max: 50)]
    protected ?string $leadStatus = null;

    #[Groups(['company:read'])]
    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $numberOfAssociatedDeals = null;

    #[Groups(['company:read'])]
    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $numberOfAssociatedContacts = null;

    #[Groups(['company:read', 'company:write'])]
    #[ORM\Column(name: 'public_prop', type: 'boolean', nullable: true)]
    protected ?bool $public = null;

    #[Groups(['company:read', 'company:write'])]
    #[ORM\Column(type: 'string', length: 100, nullable: true)]
    #[Assert\Length(max: 100)]
    protected ?string $shippingStateProvince = null;


    public function __construct()
    {
        parent::__construct();
        $this->campaigns = new ArrayCollection();
        $this->contacts = new ArrayCollection();
        $this->deals = new ArrayCollection();
        $this->talks = new ArrayCollection();
        $this->manufacturedBrands = new ArrayCollection();
        $this->manufacturedProducts = new ArrayCollection();
        $this->socialMedias = new ArrayCollection();
        $this->suppliedBrands = new ArrayCollection();
        $this->suppliedProducts = new ArrayCollection();
    }

    public function getOrganization(): Organization
    {
        return $this->organization;
    }

    public function setOrganization(Organization $organization): self
    {
        $this->organization = $organization;
        return $this;
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getDescription(): ?string    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    public function getIndustry(): ?string    {
        return $this->industry;
    }

    public function setIndustry(?string $industry): self
    {
        $this->industry = $industry;
        return $this;
    }

    public function getAccountManager(): ?User
    {
        return $this->accountManager;
    }

    public function setAccountManager(?User $accountManager): self
    {
        $this->accountManager = $accountManager;
        return $this;
    }

    public function getWebsite(): ?string    {
        return $this->website;
    }

    public function setWebsite(?string $website): self
    {
        $this->website = $website;
        return $this;
    }

    public function getBillingAddress(): ?string    {
        return $this->billingAddress;
    }

    public function setBillingAddress(?string $billingAddress): self
    {
        $this->billingAddress = $billingAddress;
        return $this;
    }

    public function getLegalName(): ?string    {
        return $this->legalName;
    }

    public function setLegalName(?string $legalName): self
    {
        $this->legalName = $legalName;
        return $this;
    }

    public function getShippingAddress(): ?string    {
        return $this->shippingAddress;
    }

    public function setShippingAddress(?string $shippingAddress): self
    {
        $this->shippingAddress = $shippingAddress;
        return $this;
    }

    public function getShippingCity(): ?City
    {
        return $this->shippingCity;
    }

    public function setShippingCity(?City $shippingCity): self
    {
        $this->shippingCity = $shippingCity;
        return $this;
    }

    /**
     * @return Collection<int, Campaign>
     */
    public function getCampaigns(): Collection
    {
        return $this->campaigns;
    }

    public function addCampaign(Campaign $campaign): self
    {
        if (!$this->campaigns->contains($campaign)) {
            $this->campaigns->add($campaign);
            $campaign->setCompanies($this);
        }
        return $this;
    }

    public function removeCampaign(Campaign $campaign): self
    {
        if ($this->campaigns->removeElement($campaign)) {
            if ($campaign->getCompanies() === $this) {
                $campaign->setCompanies(null);
            }
        }
        return $this;
    }

    public function getShippingPostalCode(): ?string    {
        return $this->shippingPostalCode;
    }

    public function setShippingPostalCode(?string $shippingPostalCode): self
    {
        $this->shippingPostalCode = $shippingPostalCode;
        return $this;
    }

    public function getAnnualRevenue(): ?string    {
        return $this->annualRevenue;
    }

    public function setAnnualRevenue(?string $annualRevenue): self
    {
        $this->annualRevenue = $annualRevenue;
        return $this;
    }

    public function getCurrency(): ?string    {
        return $this->currency;
    }

    public function setCurrency(?string $currency): self
    {
        $this->currency = $currency;
        return $this;
    }

    public function getCompanyType(): ?string    {
        return $this->companyType;
    }

    public function setCompanyType(?string $companyType): self
    {
        $this->companyType = $companyType;
        return $this;
    }

    public function getParentCompany(): ?Company
    {
        return $this->parentCompany;
    }

    public function setParentCompany(?Company $parentCompany): self
    {
        $this->parentCompany = $parentCompany;
        return $this;
    }

    public function getAccountSource(): ?string    {
        return $this->accountSource;
    }

    public function setAccountSource(?string $accountSource): self
    {
        $this->accountSource = $accountSource;
        return $this;
    }

    public function getRating(): ?string    {
        return $this->rating;
    }

    public function setRating(?string $rating): self
    {
        $this->rating = $rating;
        return $this;
    }

    public function getCustomerSince(): ?\DateTimeImmutable    {
        return $this->customerSince;
    }

    public function setCustomerSince(?\DateTimeImmutable $customerSince): self
    {
        $this->customerSince = $customerSince;
        return $this;
    }

    public function getPaymentTerms(): ?string    {
        return $this->paymentTerms;
    }

    public function setPaymentTerms(?string $paymentTerms): self
    {
        $this->paymentTerms = $paymentTerms;
        return $this;
    }

    public function getCreditLimit(): ?string    {
        return $this->creditLimit;
    }

    public function setCreditLimit(?string $creditLimit): self
    {
        $this->creditLimit = $creditLimit;
        return $this;
    }

    public function getFiscalYearEnd(): ?string    {
        return $this->fiscalYearEnd;
    }

    public function setFiscalYearEnd(?string $fiscalYearEnd): self
    {
        $this->fiscalYearEnd = $fiscalYearEnd;
        return $this;
    }

    public function getCity(): ?City
    {
        return $this->city;
    }

    public function setCity(?City $city): self
    {
        $this->city = $city;
        return $this;
    }

    public function getSicCode(): ?string    {
        return $this->sicCode;
    }

    public function setSicCode(?string $sicCode): self
    {
        $this->sicCode = $sicCode;
        return $this;
    }

    public function getNaicsCode(): ?string    {
        return $this->naicsCode;
    }

    public function setNaicsCode(?string $naicsCode): self
    {
        $this->naicsCode = $naicsCode;
        return $this;
    }

    public function getOwnership(): ?string    {
        return $this->ownership;
    }

    public function setOwnership(?string $ownership): self
    {
        $this->ownership = $ownership;
        return $this;
    }

    public function getTickerSymbol(): ?string    {
        return $this->tickerSymbol;
    }

    public function setTickerSymbol(?string $tickerSymbol): self
    {
        $this->tickerSymbol = $tickerSymbol;
        return $this;
    }

    public function getLinkedInUrl(): ?string    {
        return $this->linkedInUrl;
    }

    public function setLinkedInUrl(?string $linkedInUrl): self
    {
        $this->linkedInUrl = $linkedInUrl;
        return $this;
    }

    public function getDoNotContact(): ?bool    {
        return $this->doNotContact;
    }

    public function setDoNotContact(?bool $doNotContact): self
    {
        $this->doNotContact = $doNotContact;
        return $this;
    }

    public function isDoNotContact(): bool
    {
        return $this->doNotContact === true;
    }

    public function getGdprConsent(): ?bool    {
        return $this->gdprConsent;
    }

    public function setGdprConsent(?bool $gdprConsent): self
    {
        $this->gdprConsent = $gdprConsent;
        return $this;
    }

    public function isGdprConsent(): bool
    {
        return $this->gdprConsent === true;
    }

    public function getCountry(): ?string    {
        return $this->country;
    }

    public function setCountry(?string $country): self
    {
        $this->country = $country;
        return $this;
    }

    public function getShippingCountry(): ?string    {
        return $this->shippingCountry;
    }

    public function setShippingCountry(?string $shippingCountry): self
    {
        $this->shippingCountry = $shippingCountry;
        return $this;
    }

    public function getCompanySize(): ?int    {
        return $this->companySize;
    }

    public function setCompanySize(?int $companySize): self
    {
        $this->companySize = $companySize;
        return $this;
    }

    public function getFax(): ?string    {
        return $this->fax;
    }

    public function setFax(?string $fax): self
    {
        $this->fax = $fax;
        return $this;
    }

    /**
     * @return Collection<int, Contact>
     */
    public function getContacts(): Collection
    {
        return $this->contacts;
    }

    public function addContact(Contact $contact): self
    {
        if (!$this->contacts->contains($contact)) {
            $this->contacts->add($contact);
            $contact->setCompany($this);
        }
        return $this;
    }

    public function removeContact(Contact $contact): self
    {
        if ($this->contacts->removeElement($contact)) {
            if ($contact->getCompany() === $this) {
                $contact->setCompany(null);
            }
        }
        return $this;
    }

    public function getCoordinates(): ?string    {
        return $this->coordinates;
    }

    public function setCoordinates(?string $coordinates): self
    {
        $this->coordinates = $coordinates;
        return $this;
    }

    /**
     * @return Collection<int, Deal>
     */
    public function getDeals(): Collection
    {
        return $this->deals;
    }

    public function addDeal(Deal $deal): self
    {
        if (!$this->deals->contains($deal)) {
            $this->deals->add($deal);
            $deal->setCompany($this);
        }
        return $this;
    }

    public function removeDeal(Deal $deal): self
    {
        if ($this->deals->removeElement($deal)) {
            if ($deal->getCompany() === $this) {
                $deal->setCompany(null);
            }
        }
        return $this;
    }

    public function getEmail(): ?string    {
        return $this->email;
    }

    public function setEmail(?string $email): self
    {
        $this->email = $email;
        return $this;
    }

    /**
     * @return Collection<int, Talk>
     */
    public function getTalks(): Collection
    {
        return $this->talks;
    }

    public function addTalk(Talk $talk): self
    {
        if (!$this->talks->contains($talk)) {
            $this->talks->add($talk);
            $talk->setCompany($this);
        }
        return $this;
    }

    public function removeTalk(Talk $talk): self
    {
        if ($this->talks->removeElement($talk)) {
            if ($talk->getCompany() === $this) {
                $talk->setCompany(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, Brand>
     */
    public function getManufacturedBrands(): Collection
    {
        return $this->manufacturedBrands;
    }

    public function addManufacturedBrand(Brand $manufacturedBrand): self
    {
        if (!$this->manufacturedBrands->contains($manufacturedBrand)) {
            $this->manufacturedBrands->add($manufacturedBrand);
        }
        return $this;
    }

    public function removeManufacturedBrand(Brand $manufacturedBrand): self
    {
        if ($this->manufacturedBrands->removeElement($manufacturedBrand)) {
        }
        return $this;
    }

    /**
     * @return Collection<int, Product>
     */
    public function getManufacturedProducts(): Collection
    {
        return $this->manufacturedProducts;
    }

    public function addManufacturedProduct(Product $manufacturedProduct): self
    {
        if (!$this->manufacturedProducts->contains($manufacturedProduct)) {
            $this->manufacturedProducts->add($manufacturedProduct);
        }
        return $this;
    }

    public function removeManufacturedProduct(Product $manufacturedProduct): self
    {
        if ($this->manufacturedProducts->removeElement($manufacturedProduct)) {
        }
        return $this;
    }

    public function getMobilePhone(): ?string    {
        return $this->mobilePhone;
    }

    public function setMobilePhone(?string $mobilePhone): self
    {
        $this->mobilePhone = $mobilePhone;
        return $this;
    }

    public function getNotes(): ?string    {
        return $this->notes;
    }

    public function setNotes(?string $notes): self
    {
        $this->notes = $notes;
        return $this;
    }

    public function getPhone(): ?string    {
        return $this->phone;
    }

    public function setPhone(?string $phone): self
    {
        $this->phone = $phone;
        return $this;
    }

    public function getPostalCode(): ?string    {
        return $this->postalCode;
    }

    public function setPostalCode(?string $postalCode): self
    {
        $this->postalCode = $postalCode;
        return $this;
    }

    public function getPrimaryContactName(): ?string    {
        return $this->primaryContactName;
    }

    public function setPrimaryContactName(?string $primaryContactName): self
    {
        $this->primaryContactName = $primaryContactName;
        return $this;
    }

    /**
     * @return Collection<int, SocialMedia>
     */
    public function getSocialMedias(): Collection
    {
        return $this->socialMedias;
    }

    public function addSocialMedia(SocialMedia $socialMedia): self
    {
        if (!$this->socialMedias->contains($socialMedia)) {
            $this->socialMedias->add($socialMedia);
            $socialMedia->setCompany($this);
        }
        return $this;
    }

    public function removeSocialMedia(SocialMedia $socialMedia): self
    {
        if ($this->socialMedias->removeElement($socialMedia)) {
            if ($socialMedia->getCompany() === $this) {
                $socialMedia->setCompany(null);
            }
        }
        return $this;
    }

    public function getStatus(): ?int    {
        return $this->status;
    }

    public function setStatus(?int $status): self
    {
        $this->status = $status;
        return $this;
    }

    /**
     * @return Collection<int, Brand>
     */
    public function getSuppliedBrands(): Collection
    {
        return $this->suppliedBrands;
    }

    public function addSuppliedBrand(Brand $suppliedBrand): self
    {
        if (!$this->suppliedBrands->contains($suppliedBrand)) {
            $this->suppliedBrands->add($suppliedBrand);
        }
        return $this;
    }

    public function removeSuppliedBrand(Brand $suppliedBrand): self
    {
        if ($this->suppliedBrands->removeElement($suppliedBrand)) {
        }
        return $this;
    }

    /**
     * @return Collection<int, Product>
     */
    public function getSuppliedProducts(): Collection
    {
        return $this->suppliedProducts;
    }

    public function addSuppliedProduct(Product $suppliedProduct): self
    {
        if (!$this->suppliedProducts->contains($suppliedProduct)) {
            $this->suppliedProducts->add($suppliedProduct);
        }
        return $this;
    }

    public function removeSuppliedProduct(Product $suppliedProduct): self
    {
        if ($this->suppliedProducts->removeElement($suppliedProduct)) {
        }
        return $this;
    }

    public function getTaxId(): ?string    {
        return $this->taxId;
    }

    public function setTaxId(?string $taxId): self
    {
        $this->taxId = $taxId;
        return $this;
    }

    public function getNextActivityDate(): ?\DateTimeImmutable    {
        return $this->nextActivityDate;
    }

    public function setNextActivityDate(?\DateTimeImmutable $nextActivityDate): self
    {
        $this->nextActivityDate = $nextActivityDate;
        return $this;
    }

    public function getLastActivityDate(): ?\DateTimeImmutable    {
        return $this->lastActivityDate;
    }

    public function setLastActivityDate(?\DateTimeImmutable $lastActivityDate): self
    {
        $this->lastActivityDate = $lastActivityDate;
        return $this;
    }

    public function getTimeZone(): string    {
        return $this->timeZone;
    }

    public function setTimeZone(string $timeZone): self
    {
        $this->timeZone = $timeZone;
        return $this;
    }

    public function getStateProvince(): ?string    {
        return $this->stateProvince;
    }

    public function setStateProvince(?string $stateProvince): self
    {
        $this->stateProvince = $stateProvince;
        return $this;
    }

    public function getTags(): ?string    {
        return $this->tags;
    }

    public function setTags(?string $tags): self
    {
        $this->tags = $tags;
        return $this;
    }

    public function getLifecycleStage(): ?string    {
        return $this->lifecycleStage;
    }

    public function setLifecycleStage(?string $lifecycleStage): self
    {
        $this->lifecycleStage = $lifecycleStage;
        return $this;
    }

    public function getCompanyDomain(): ?string    {
        return $this->companyDomain;
    }

    public function setCompanyDomain(?string $companyDomain): self
    {
        $this->companyDomain = $companyDomain;
        return $this;
    }

    public function getLeadStatus(): ?string    {
        return $this->leadStatus;
    }

    public function setLeadStatus(?string $leadStatus): self
    {
        $this->leadStatus = $leadStatus;
        return $this;
    }

    public function getNumberOfAssociatedDeals(): ?int    {
        return $this->numberOfAssociatedDeals;
    }

    public function setNumberOfAssociatedDeals(?int $numberOfAssociatedDeals): self
    {
        $this->numberOfAssociatedDeals = $numberOfAssociatedDeals;
        return $this;
    }

    public function getNumberOfAssociatedContacts(): ?int    {
        return $this->numberOfAssociatedContacts;
    }

    public function setNumberOfAssociatedContacts(?int $numberOfAssociatedContacts): self
    {
        $this->numberOfAssociatedContacts = $numberOfAssociatedContacts;
        return $this;
    }

    public function getPublic(): ?bool    {
        return $this->public;
    }

    public function setPublic(?bool $public): self
    {
        $this->public = $public;
        return $this;
    }

    public function isPublic(): bool
    {
        return $this->public === true;
    }

    public function getShippingStateProvince(): ?string    {
        return $this->shippingStateProvince;
    }

    public function setShippingStateProvince(?string $shippingStateProvince): self
    {
        $this->shippingStateProvince = $shippingStateProvince;
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? ($this->getId()?->toRfc4122() ?? '');
    }
}
