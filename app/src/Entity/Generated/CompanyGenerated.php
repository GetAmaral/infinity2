<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use App\Entity\Trait\OrganizationTrait;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
                                                                                                                                                        use App\Entity\User;
use App\Entity\City;
use App\Entity\SocialMedia;
use App\Entity\Contact;
use App\Entity\Flag;
use App\Entity\Deal;
use App\Entity\Campaign;
use App\Entity\Product;
use App\Entity\Brand;

/**
 * Company Entity (Generated Base Class)
 *
 * 
 *
 * This class is ALWAYS regenerated from CSV. DO NOT edit this file.
 * Add custom logic to Company.php instead.
 *
 * @generated by Luminai Code Generator
 * @see /config/EntityNew.csv and /config/PropertyNew.csv
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class CompanyGenerated extends EntityBase
{
    use OrganizationTrait;

    #[ORM\Column(type: 'string')]
    #[Assert\NotBlank]
    #[Assert\Length(max: 255)]
    #[Groups(['company:read', 'company:write'])]
    protected string $name;

    #[ORM\ManyToOne(targetEntity: User::class, inversedBy: 'managedCompanies')]
    #[Groups(['company:read', 'company:write'])]
    protected ?User $accountManager = null;

    #[ORM\Column(type: 'string', nullable: true, unique: true)]
    #[Assert\Length(max: 255)]
    #[Groups(['company:read', 'company:write'])]
    protected ?string $email = null;

    #[ORM\Column(type: 'string', nullable: true)]
    #[Assert\Length(max: 255)]
    #[Groups(['company:read', 'company:write'])]
    protected ?string $document = null;

    #[ORM\Column(type: 'string', nullable: true)]
    #[Assert\Length(max: 255)]
    #[Groups(['company:read', 'company:write'])]
    protected ?string $address = null;

    #[ORM\ManyToOne(targetEntity: City::class)]
    #[Groups(['company:read', 'company:write'])]
    protected ?City $city = null;

    #[ORM\Column(type: 'string', nullable: true)]
    #[Assert\Length(max: 255)]
    #[Groups(['company:read', 'company:write'])]
    protected ?string $postalCode = null;

    #[ORM\Column(type: 'string', nullable: true)]
    #[Assert\Length(max: 255)]
    #[Groups(['company:read', 'company:write'])]
    protected ?string $geo = null;

    #[ORM\Column(type: 'string', length: 20, nullable: true)]
    #[Assert\Length(max: 255)]
    #[Groups(['company:read', 'company:write'])]
    protected ?string $celPhone = null;

    #[ORM\Column(type: 'string', length: 20, nullable: true)]
    #[Assert\Length(max: 255)]
    #[Groups(['company:read', 'company:write'])]
    protected ?string $businesPhone = null;

    #[ORM\Column(type: 'string', nullable: true)]
    #[Assert\Length(max: 255)]
    #[Groups(['company:read', 'company:write'])]
    protected ?string $contactName = null;

    #[ORM\Column(type: 'string', nullable: true)]
    #[Assert\Length(max: 255)]
    #[Groups(['company:read', 'company:write'])]
    protected ?string $website = null;

    #[ORM\OneToMany(targetEntity: SocialMedia::class, mappedBy: 'company', fetch: 'LAZY')]
    #[ORM\OrderBy(['name' => 'ASC'])]
    #[Groups(['company:read', 'company:write'])]
    protected Collection $socialMedias;

    #[ORM\OneToMany(targetEntity: Contact::class, mappedBy: 'company', fetch: 'EXTRA_LAZY')]
    #[ORM\OrderBy(['name' => 'ASC'])]
    #[Groups(['company:read', 'company:write'])]
    protected Collection $contacts;

    #[ORM\OneToMany(targetEntity: Flag::class, mappedBy: 'company', fetch: 'LAZY')]
    #[ORM\OrderBy(['name' => 'ASC'])]
    #[Groups(['company:read', 'company:write'])]
    protected Collection $flags;

    #[ORM\OneToMany(targetEntity: Deal::class, mappedBy: 'company', fetch: 'EXTRA_LAZY')]
    #[ORM\OrderBy(['name' => 'ASC'])]
    #[Groups(['company:read', 'company:write'])]
    protected Collection $deals;

    #[ORM\ManyToMany(targetEntity: Campaign::class, inversedBy: 'companies', fetch: 'LAZY')]
    #[ORM\OrderBy(['name' => 'ASC'])]
    #[Groups(['company:read', 'company:write'])]
    protected Collection $campaigns;

    #[ORM\Column(type: 'string', nullable: true)]
    #[Assert\Length(max: 255)]
    #[Groups(['company:read', 'company:write'])]
    protected ?string $industry = null;

    #[ORM\Column(type: 'integer', nullable: true)]
    #[Groups(['company:read', 'company:write'])]
    protected ?int $companySize = null;

    #[ORM\Column(type: 'text', nullable: true)]
    #[Groups(['company:read', 'company:write'])]
    protected ?string $notes = null;

    #[ORM\Column(type: 'integer', nullable: true)]
    #[Groups(['company:read', 'company:write'])]
    protected ?int $status = null;

    #[ORM\ManyToMany(targetEntity: Product::class, inversedBy: 'manufacturer', fetch: 'LAZY')]
    #[ORM\OrderBy(['name' => 'ASC'])]
    #[Groups(['company:read', 'company:write'])]
    protected Collection $manufacturedProducts;

    #[ORM\ManyToMany(targetEntity: Product::class, inversedBy: 'supplier', fetch: 'LAZY')]
    #[ORM\OrderBy(['name' => 'ASC'])]
    #[Groups(['company:read', 'company:write'])]
    protected Collection $suppliedProducts;

    #[ORM\ManyToMany(targetEntity: Brand::class, inversedBy: 'manufacturers', fetch: 'LAZY')]
    #[Groups(['company:read', 'company:write'])]
    protected Collection $manufacturedBrands;

    #[ORM\ManyToMany(targetEntity: Brand::class, inversedBy: 'suppliers', fetch: 'LAZY')]
    #[Groups(['company:read', 'company:write'])]
    protected Collection $suppliedBrands;


    public function __construct()
    {
        parent::__construct();
        $this->socialMedias = new ArrayCollection();
        $this->contacts = new ArrayCollection();
        $this->flags = new ArrayCollection();
        $this->deals = new ArrayCollection();
        $this->campaigns = new ArrayCollection();
        $this->manufacturedProducts = new ArrayCollection();
        $this->suppliedProducts = new ArrayCollection();
        $this->manufacturedBrands = new ArrayCollection();
        $this->suppliedBrands = new ArrayCollection();
    }

    public function getName(): string
    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    
    public function getAccountmanager(): ?User
    {
        return $this->accountManager;
    }

    public function setAccountmanager(?User $accountManager): self
    {
        $this->accountManager = $accountManager;
        return $this;
    }

    public function getEmail(): ?string
    {
        return $this->email;
    }

    public function setEmail(?string $email): self
    {
        $this->email = $email;
        return $this;
    }

    
    public function getDocument(): ?string
    {
        return $this->document;
    }

    public function setDocument(?string $document): self
    {
        $this->document = $document;
        return $this;
    }

    
    public function getAddress(): ?string
    {
        return $this->address;
    }

    public function setAddress(?string $address): self
    {
        $this->address = $address;
        return $this;
    }

    
    public function getCity(): ?City
    {
        return $this->city;
    }

    public function setCity(?City $city): self
    {
        $this->city = $city;
        return $this;
    }

    public function getPostalcode(): ?string
    {
        return $this->postalCode;
    }

    public function setPostalcode(?string $postalCode): self
    {
        $this->postalCode = $postalCode;
        return $this;
    }

    
    public function getGeo(): ?string
    {
        return $this->geo;
    }

    public function setGeo(?string $geo): self
    {
        $this->geo = $geo;
        return $this;
    }

    
    public function getCelphone(): ?string
    {
        return $this->celPhone;
    }

    public function setCelphone(?string $celPhone): self
    {
        $this->celPhone = $celPhone;
        return $this;
    }

    
    public function getBusinesphone(): ?string
    {
        return $this->businesPhone;
    }

    public function setBusinesphone(?string $businesPhone): self
    {
        $this->businesPhone = $businesPhone;
        return $this;
    }

    
    public function getContactname(): ?string
    {
        return $this->contactName;
    }

    public function setContactname(?string $contactName): self
    {
        $this->contactName = $contactName;
        return $this;
    }

    
    public function getWebsite(): ?string
    {
        return $this->website;
    }

    public function setWebsite(?string $website): self
    {
        $this->website = $website;
        return $this;
    }

    
    /**
     * @return Collection<int, SocialMedia>
     */
    public function getSocialmedias(): Collection
    {
        return $this->socialMedias;
    }

    public function addSocialmedia(SocialMedia $socialMedia): self
    {
        if (!$this->socialMedias->contains($socialMedia)) {
            $this->socialMedias->add($socialMedia);
        }
        return $this;
    }

    public function removeSocialmedia(SocialMedia $socialMedia): self
    {
        if ($this->socialMedias->removeElement($socialMedia)) {
        }
        return $this;
    }

    /**
     * @return Collection<int, Contact>
     */
    public function getContacts(): Collection
    {
        return $this->contacts;
    }

    public function addContact(Contact $contact): self
    {
        if (!$this->contacts->contains($contact)) {
            $this->contacts->add($contact);
        }
        return $this;
    }

    public function removeContact(Contact $contact): self
    {
        if ($this->contacts->removeElement($contact)) {
        }
        return $this;
    }

    /**
     * @return Collection<int, Flag>
     */
    public function getFlags(): Collection
    {
        return $this->flags;
    }

    public function addFlag(Flag $flag): self
    {
        if (!$this->flags->contains($flag)) {
            $this->flags->add($flag);
        }
        return $this;
    }

    public function removeFlag(Flag $flag): self
    {
        if ($this->flags->removeElement($flag)) {
        }
        return $this;
    }

    /**
     * @return Collection<int, Deal>
     */
    public function getDeals(): Collection
    {
        return $this->deals;
    }

    public function addDeal(Deal $deal): self
    {
        if (!$this->deals->contains($deal)) {
            $this->deals->add($deal);
        }
        return $this;
    }

    public function removeDeal(Deal $deal): self
    {
        if ($this->deals->removeElement($deal)) {
        }
        return $this;
    }

    /**
     * @return Collection<int, Campaign>
     */
    public function getCampaigns(): Collection
    {
        return $this->campaigns;
    }

    public function addCampaign(Campaign $campaign): self
    {
        if (!$this->campaigns->contains($campaign)) {
            $this->campaigns->add($campaign);
        }
        return $this;
    }

    public function removeCampaign(Campaign $campaign): self
    {
        if ($this->campaigns->removeElement($campaign)) {
        }
        return $this;
    }

    public function getIndustry(): ?string
    {
        return $this->industry;
    }

    public function setIndustry(?string $industry): self
    {
        $this->industry = $industry;
        return $this;
    }

    
    public function getCompanysize(): ?int
    {
        return $this->companySize;
    }

    public function setCompanysize(?int $companySize): self
    {
        $this->companySize = $companySize;
        return $this;
    }

    
    public function getNotes(): ?string
    {
        return $this->notes;
    }

    public function setNotes(?string $notes): self
    {
        $this->notes = $notes;
        return $this;
    }

    
    public function getStatus(): ?int
    {
        return $this->status;
    }

    public function setStatus(?int $status): self
    {
        $this->status = $status;
        return $this;
    }

    
    /**
     * @return Collection<int, Product>
     */
    public function getManufacturedproducts(): Collection
    {
        return $this->manufacturedProducts;
    }

    public function addManufacturedproduct(Product $manufacturedProduct): self
    {
        if (!$this->manufacturedProducts->contains($manufacturedProduct)) {
            $this->manufacturedProducts->add($manufacturedProduct);
        }
        return $this;
    }

    public function removeManufacturedproduct(Product $manufacturedProduct): self
    {
        if ($this->manufacturedProducts->removeElement($manufacturedProduct)) {
        }
        return $this;
    }

    /**
     * @return Collection<int, Product>
     */
    public function getSuppliedproducts(): Collection
    {
        return $this->suppliedProducts;
    }

    public function addSuppliedproduct(Product $suppliedProduct): self
    {
        if (!$this->suppliedProducts->contains($suppliedProduct)) {
            $this->suppliedProducts->add($suppliedProduct);
        }
        return $this;
    }

    public function removeSuppliedproduct(Product $suppliedProduct): self
    {
        if ($this->suppliedProducts->removeElement($suppliedProduct)) {
        }
        return $this;
    }

    /**
     * @return Collection<int, Brand>
     */
    public function getManufacturedbrands(): Collection
    {
        return $this->manufacturedBrands;
    }

    public function addManufacturedbrand(Brand $manufacturedBrand): self
    {
        if (!$this->manufacturedBrands->contains($manufacturedBrand)) {
            $this->manufacturedBrands->add($manufacturedBrand);
        }
        return $this;
    }

    public function removeManufacturedbrand(Brand $manufacturedBrand): self
    {
        if ($this->manufacturedBrands->removeElement($manufacturedBrand)) {
        }
        return $this;
    }

    /**
     * @return Collection<int, Brand>
     */
    public function getSuppliedbrands(): Collection
    {
        return $this->suppliedBrands;
    }

    public function addSuppliedbrand(Brand $suppliedBrand): self
    {
        if (!$this->suppliedBrands->contains($suppliedBrand)) {
            $this->suppliedBrands->add($suppliedBrand);
        }
        return $this;
    }

    public function removeSuppliedbrand(Brand $suppliedBrand): self
    {
        if ($this->suppliedBrands->removeElement($suppliedBrand)) {
        }
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? '';
    }
}
