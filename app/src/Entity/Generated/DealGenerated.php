<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use App\Entity\Trait\OrganizationTrait;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use App\Entity\Company;
use App\Entity\PipelineStage;
use App\Entity\DealType;
use App\Entity\Pipeline;
use App\Entity\DealCategory;
use App\Entity\Product;
use App\Entity\User;
use App\Entity\Contact;
use App\Entity\LeadSource;
use App\Entity\Campaign;
use App\Entity\DealStage;
use App\Entity\Talk;
use App\Entity\Task;
use App\Entity\Competitor;
use App\Entity\Tag;
use App\Entity\LostReason;
use App\Entity\WinReason;

/**
 * Deal Entity (Generated Base Class)
 *
 * Sales opportunities and deals tracking *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to Deal.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class DealGenerated extends EntityBase
{
    use OrganizationTrait;

    #[ORM\Column(type: 'string', length: 255)]
    protected string $name;

    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $description = null;

    #[ORM\ManyToOne(targetEntity: Company::class, inversedBy: 'deals')]
    protected ?Company $company = null;

    #[ORM\Column(type: 'string', length: 255)]
    protected string $dealStatus;

    #[ORM\ManyToOne(targetEntity: PipelineStage::class, inversedBy: 'deals')]
    #[ORM\JoinColumn(nullable: false)]
    protected PipelineStage $currentStage;

    #[ORM\Column(type: 'decimal', precision: 15, scale: 2, nullable: true)]
    protected ?float $probability = null;

    #[ORM\ManyToOne(targetEntity: DealType::class, inversedBy: 'deals')]
    protected ?DealType $dealType = null;

    #[ORM\ManyToOne(targetEntity: Pipeline::class, inversedBy: 'deals')]
    protected ?Pipeline $pipeline = null;

    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $priority = null;

    #[ORM\ManyToOne(targetEntity: DealCategory::class, inversedBy: 'deals')]
    protected ?DealCategory $category = null;

    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $dealNumber = null;

    #[ORM\Column(type: 'decimal', precision: 15, scale: 2, nullable: true)]
    protected ?float $expectedAmount = null;

    #[ORM\Column(type: 'decimal', precision: 15, scale: 2, nullable: true)]
    protected ?float $weightedAmount = null;

    #[ORM\Column(type: 'decimal', precision: 15, scale: 2, nullable: true)]
    protected ?float $closureAmount = null;

    #[ORM\Column(type: 'decimal', precision: 15, scale: 2, nullable: true)]
    protected ?float $initialAmount = null;

    #[ORM\Column(type: 'string', length: 3, nullable: true)]
    protected ?string $currency = null;

    #[ORM\Column(type: 'float', precision: 10, scale: 2, nullable: true)]
    protected ?float $exchangeRate = null;

    #[ORM\Column(type: 'decimal', precision: 15, scale: 2, nullable: true)]
    protected ?float $discountPercentage = null;

    #[ORM\Column(type: 'decimal', precision: 15, scale: 2, nullable: true)]
    protected ?float $discountAmount = null;

    #[ORM\Column(type: 'decimal', precision: 15, scale: 2, nullable: true)]
    protected ?float $commissionRate = null;

    #[ORM\Column(type: 'decimal', precision: 15, scale: 2, nullable: true)]
    protected ?float $commissionAmount = null;

    #[ORM\Column(type: 'datetime', nullable: true)]
    protected ?\DateTimeImmutable $expectedClosureDate = null;

    #[ORM\Column(type: 'datetime', nullable: true)]
    protected ?\DateTimeImmutable $closureDate = null;

    #[ORM\ManyToMany(targetEntity: Product::class, inversedBy: 'deals', fetch: 'LAZY')]
    protected Collection $products;

    #[ORM\Column(type: 'datetime', nullable: true)]
    protected ?\DateTimeImmutable $initialDate = null;

    #[ORM\Column(type: 'datetime', nullable: true)]
    protected ?\DateTimeImmutable $lastActivityDate = null;

    #[ORM\Column(type: 'datetime', nullable: true)]
    protected ?\DateTimeImmutable $nextFollowUp = null;

    #[ORM\Column(type: 'float', precision: 10, scale: 2, nullable: true)]
    protected ?float $daysInCurrentStage = null;

    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $forecastCategory = null;

    #[ORM\ManyToOne(targetEntity: User::class, inversedBy: 'managedDeals')]
    protected ?User $manager = null;

    #[ORM\ManyToMany(targetEntity: User::class, inversedBy: 'deals', fetch: 'LAZY')]
    protected Collection $team;

    #[ORM\ManyToOne(targetEntity: User::class, inversedBy: 'ownedDeals')]
    #[ORM\JoinColumn(nullable: false)]
    protected User $owner;

    #[ORM\ManyToOne(targetEntity: Contact::class, inversedBy: 'primaryDeals')]
    protected ?Contact $primaryContact = null;

    #[ORM\ManyToMany(targetEntity: Contact::class, inversedBy: 'deals', fetch: 'LAZY')]
    protected Collection $contacts;

    #[ORM\ManyToOne(targetEntity: LeadSource::class, inversedBy: 'deals')]
    protected ?LeadSource $leadSource = null;

    #[ORM\ManyToOne(targetEntity: Campaign::class, inversedBy: 'deals')]
    protected ?Campaign $campaign = null;

    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $sourceDetails = null;

    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $notes = null;

    #[ORM\OneToMany(targetEntity: DealStage::class, mappedBy: 'deal', fetch: 'LAZY')]
    protected Collection $dealStages;

    #[ORM\OneToMany(targetEntity: Talk::class, mappedBy: 'deal', fetch: 'LAZY')]
    protected Collection $talks;

    #[ORM\OneToMany(targetEntity: Task::class, mappedBy: 'deal', fetch: 'LAZY')]
    protected Collection $tasks;

    #[ORM\ManyToMany(targetEntity: Competitor::class, inversedBy: 'deals', fetch: 'LAZY')]
    protected Collection $competitors;

    #[ORM\ManyToMany(targetEntity: Tag::class, inversedBy: 'deals', fetch: 'LAZY')]
    protected Collection $tags;

    #[ORM\Column(type: 'json', nullable: true)]
    protected ?array $customFields = null;

    #[ORM\ManyToOne(targetEntity: LostReason::class, inversedBy: 'deals')]
    protected ?LostReason $lostReason = null;

    #[ORM\ManyToOne(targetEntity: WinReason::class, inversedBy: 'deals')]
    protected ?WinReason $winReason = null;

    #[ORM\Column(type: 'datetime', nullable: true)]
    protected ?\DateTimeImmutable $actualClosureDate = null;


    public function __construct()
    {
        parent::__construct();
        $this->products = new ArrayCollection();
        $this->team = new ArrayCollection();
        $this->contacts = new ArrayCollection();
        $this->dealStages = new ArrayCollection();
        $this->talks = new ArrayCollection();
        $this->tasks = new ArrayCollection();
        $this->competitors = new ArrayCollection();
        $this->tags = new ArrayCollection();
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getDescription(): ?string    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    public function getCompany(): ?App\Entity\Company
    {
        return $this->company;
    }

    public function setCompany(?App\Entity\Company $company): self
    {
        $this->company = $company;
        return $this;
    }

    public function getDealstatus(): string    {
        return $this->dealStatus;
    }

    public function setDealstatus(string $dealStatus): self
    {
        $this->dealStatus = $dealStatus;
        return $this;
    }

    public function getCurrentstage(): App\Entity\PipelineStage
    {
        return $this->currentStage;
    }

    public function setCurrentstage(App\Entity\PipelineStage $currentStage): self
    {
        $this->currentStage = $currentStage;
        return $this;
    }

    public function getProbability(): ?float    {
        return $this->probability;
    }

    public function setProbability(?float $probability): self
    {
        $this->probability = $probability;
        return $this;
    }

    public function getDealtype(): ?App\Entity\DealType
    {
        return $this->dealType;
    }

    public function setDealtype(?App\Entity\DealType $dealType): self
    {
        $this->dealType = $dealType;
        return $this;
    }

    public function getPipeline(): ?App\Entity\Pipeline
    {
        return $this->pipeline;
    }

    public function setPipeline(?App\Entity\Pipeline $pipeline): self
    {
        $this->pipeline = $pipeline;
        return $this;
    }

    public function getPriority(): ?string    {
        return $this->priority;
    }

    public function setPriority(?string $priority): self
    {
        $this->priority = $priority;
        return $this;
    }

    public function getCategory(): ?App\Entity\DealCategory
    {
        return $this->category;
    }

    public function setCategory(?App\Entity\DealCategory $category): self
    {
        $this->category = $category;
        return $this;
    }

    public function getDealnumber(): ?string    {
        return $this->dealNumber;
    }

    public function setDealnumber(?string $dealNumber): self
    {
        $this->dealNumber = $dealNumber;
        return $this;
    }

    public function getExpectedamount(): ?float    {
        return $this->expectedAmount;
    }

    public function setExpectedamount(?float $expectedAmount): self
    {
        $this->expectedAmount = $expectedAmount;
        return $this;
    }

    public function getWeightedamount(): ?float    {
        return $this->weightedAmount;
    }

    public function setWeightedamount(?float $weightedAmount): self
    {
        $this->weightedAmount = $weightedAmount;
        return $this;
    }

    public function getClosureamount(): ?float    {
        return $this->closureAmount;
    }

    public function setClosureamount(?float $closureAmount): self
    {
        $this->closureAmount = $closureAmount;
        return $this;
    }

    public function getInitialamount(): ?float    {
        return $this->initialAmount;
    }

    public function setInitialamount(?float $initialAmount): self
    {
        $this->initialAmount = $initialAmount;
        return $this;
    }

    public function getCurrency(): ?string    {
        return $this->currency;
    }

    public function setCurrency(?string $currency): self
    {
        $this->currency = $currency;
        return $this;
    }

    public function getExchangerate(): ?float    {
        return $this->exchangeRate;
    }

    public function setExchangerate(?float $exchangeRate): self
    {
        $this->exchangeRate = $exchangeRate;
        return $this;
    }

    public function getDiscountpercentage(): ?float    {
        return $this->discountPercentage;
    }

    public function setDiscountpercentage(?float $discountPercentage): self
    {
        $this->discountPercentage = $discountPercentage;
        return $this;
    }

    public function getDiscountamount(): ?float    {
        return $this->discountAmount;
    }

    public function setDiscountamount(?float $discountAmount): self
    {
        $this->discountAmount = $discountAmount;
        return $this;
    }

    public function getCommissionrate(): ?float    {
        return $this->commissionRate;
    }

    public function setCommissionrate(?float $commissionRate): self
    {
        $this->commissionRate = $commissionRate;
        return $this;
    }

    public function getCommissionamount(): ?float    {
        return $this->commissionAmount;
    }

    public function setCommissionamount(?float $commissionAmount): self
    {
        $this->commissionAmount = $commissionAmount;
        return $this;
    }

    public function getExpectedclosuredate(): ?\DateTimeImmutable    {
        return $this->expectedClosureDate;
    }

    public function setExpectedclosuredate(?\DateTimeImmutable $expectedClosureDate): self
    {
        $this->expectedClosureDate = $expectedClosureDate;
        return $this;
    }

    public function getClosuredate(): ?\DateTimeImmutable    {
        return $this->closureDate;
    }

    public function setClosuredate(?\DateTimeImmutable $closureDate): self
    {
        $this->closureDate = $closureDate;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Product>
     */
    public function getProducts(): Collection
    {
        return $this->products;
    }

    public function addProduct(App\Entity\Product $product): self
    {
        if (!$this->products->contains($product)) {
            $this->products->add($product);
        }
        return $this;
    }

    public function removeProduct(App\Entity\Product $product): self
    {
        if ($this->products->removeElement($product)) {
        }
        return $this;
    }

    public function getInitialdate(): ?\DateTimeImmutable    {
        return $this->initialDate;
    }

    public function setInitialdate(?\DateTimeImmutable $initialDate): self
    {
        $this->initialDate = $initialDate;
        return $this;
    }

    public function getLastactivitydate(): ?\DateTimeImmutable    {
        return $this->lastActivityDate;
    }

    public function setLastactivitydate(?\DateTimeImmutable $lastActivityDate): self
    {
        $this->lastActivityDate = $lastActivityDate;
        return $this;
    }

    public function getNextfollowup(): ?\DateTimeImmutable    {
        return $this->nextFollowUp;
    }

    public function setNextfollowup(?\DateTimeImmutable $nextFollowUp): self
    {
        $this->nextFollowUp = $nextFollowUp;
        return $this;
    }

    public function getDaysincurrentstage(): ?float    {
        return $this->daysInCurrentStage;
    }

    public function setDaysincurrentstage(?float $daysInCurrentStage): self
    {
        $this->daysInCurrentStage = $daysInCurrentStage;
        return $this;
    }

    public function getForecastcategory(): ?int    {
        return $this->forecastCategory;
    }

    public function setForecastcategory(?int $forecastCategory): self
    {
        $this->forecastCategory = $forecastCategory;
        return $this;
    }

    public function getManager(): ?App\Entity\User
    {
        return $this->manager;
    }

    public function setManager(?App\Entity\User $manager): self
    {
        $this->manager = $manager;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\User>
     */
    public function getTeam(): Collection
    {
        return $this->team;
    }

    public function addTeam(App\Entity\User $team): self
    {
        if (!$this->team->contains($team)) {
            $this->team->add($team);
        }
        return $this;
    }

    public function removeTeam(App\Entity\User $team): self
    {
        if ($this->team->removeElement($team)) {
        }
        return $this;
    }

    public function getOwner(): App\Entity\User
    {
        return $this->owner;
    }

    public function setOwner(App\Entity\User $owner): self
    {
        $this->owner = $owner;
        return $this;
    }

    public function getPrimarycontact(): ?App\Entity\Contact
    {
        return $this->primaryContact;
    }

    public function setPrimarycontact(?App\Entity\Contact $primaryContact): self
    {
        $this->primaryContact = $primaryContact;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Contact>
     */
    public function getContacts(): Collection
    {
        return $this->contacts;
    }

    public function addContact(App\Entity\Contact $contact): self
    {
        if (!$this->contacts->contains($contact)) {
            $this->contacts->add($contact);
        }
        return $this;
    }

    public function removeContact(App\Entity\Contact $contact): self
    {
        if ($this->contacts->removeElement($contact)) {
        }
        return $this;
    }

    public function getLeadsource(): ?App\Entity\LeadSource
    {
        return $this->leadSource;
    }

    public function setLeadsource(?App\Entity\LeadSource $leadSource): self
    {
        $this->leadSource = $leadSource;
        return $this;
    }

    public function getCampaign(): ?App\Entity\Campaign
    {
        return $this->campaign;
    }

    public function setCampaign(?App\Entity\Campaign $campaign): self
    {
        $this->campaign = $campaign;
        return $this;
    }

    public function getSourcedetails(): ?string    {
        return $this->sourceDetails;
    }

    public function setSourcedetails(?string $sourceDetails): self
    {
        $this->sourceDetails = $sourceDetails;
        return $this;
    }

    public function getNotes(): ?string    {
        return $this->notes;
    }

    public function setNotes(?string $notes): self
    {
        $this->notes = $notes;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\DealStage>
     */
    public function getDealstages(): Collection
    {
        return $this->dealStages;
    }

    public function addDealtage(App\Entity\DealStage $dealStage): self
    {
        if (!$this->dealStages->contains($dealStage)) {
            $this->dealStages->add($dealStage);
            $dealStage->setDeal($this);
        }
        return $this;
    }

    public function removeDealtage(App\Entity\DealStage $dealStage): self
    {
        if ($this->dealStages->removeElement($dealStage)) {
            if ($dealStage->getDeal() === $this) {
                $dealStage->setDeal(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Talk>
     */
    public function getTalks(): Collection
    {
        return $this->talks;
    }

    public function addTalk(App\Entity\Talk $talk): self
    {
        if (!$this->talks->contains($talk)) {
            $this->talks->add($talk);
            $talk->setDeal($this);
        }
        return $this;
    }

    public function removeTalk(App\Entity\Talk $talk): self
    {
        if ($this->talks->removeElement($talk)) {
            if ($talk->getDeal() === $this) {
                $talk->setDeal(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Task>
     */
    public function getTasks(): Collection
    {
        return $this->tasks;
    }

    public function addTak(App\Entity\Task $tak): self
    {
        if (!$this->tasks->contains($tak)) {
            $this->tasks->add($tak);
            $tak->setDeal($this);
        }
        return $this;
    }

    public function removeTak(App\Entity\Task $tak): self
    {
        if ($this->tasks->removeElement($tak)) {
            if ($tak->getDeal() === $this) {
                $tak->setDeal(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Competitor>
     */
    public function getCompetitors(): Collection
    {
        return $this->competitors;
    }

    public function addCompetitor(App\Entity\Competitor $competitor): self
    {
        if (!$this->competitors->contains($competitor)) {
            $this->competitors->add($competitor);
        }
        return $this;
    }

    public function removeCompetitor(App\Entity\Competitor $competitor): self
    {
        if ($this->competitors->removeElement($competitor)) {
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Tag>
     */
    public function getTags(): Collection
    {
        return $this->tags;
    }

    public function addTag(App\Entity\Tag $tag): self
    {
        if (!$this->tags->contains($tag)) {
            $this->tags->add($tag);
        }
        return $this;
    }

    public function removeTag(App\Entity\Tag $tag): self
    {
        if ($this->tags->removeElement($tag)) {
        }
        return $this;
    }

    public function getCustomfields(): ?array    {
        return $this->customFields;
    }

    public function setCustomfields(?array $customFields): self
    {
        $this->customFields = $customFields;
        return $this;
    }

    public function getLostreason(): ?App\Entity\LostReason
    {
        return $this->lostReason;
    }

    public function setLostreason(?App\Entity\LostReason $lostReason): self
    {
        $this->lostReason = $lostReason;
        return $this;
    }

    public function getWinreason(): ?App\Entity\WinReason
    {
        return $this->winReason;
    }

    public function setWinreason(?App\Entity\WinReason $winReason): self
    {
        $this->winReason = $winReason;
        return $this;
    }

    public function getActualclosuredate(): ?\DateTimeImmutable    {
        return $this->actualClosureDate;
    }

    public function setActualclosuredate(?\DateTimeImmutable $actualClosureDate): self
    {
        $this->actualClosureDate = $actualClosureDate;
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? ($this->getId()?->toRfc4122() ?? '');
    }
}
