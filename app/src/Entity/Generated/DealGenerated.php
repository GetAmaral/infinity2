<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
use App\Entity\Organization;
use App\Entity\Company;
use App\Entity\PipelineStage;
use App\Entity\DealType;
use App\Entity\Pipeline;
use App\Entity\DealCategory;
use App\Entity\Product;
use App\Entity\User;
use App\Entity\Contact;
use App\Entity\LeadSource;
use App\Entity\Campaign;
use App\Entity\DealStage;
use App\Entity\Talk;
use App\Entity\Task;
use App\Entity\Competitor;
use App\Entity\Tag;
use App\Entity\LostReason;
use App\Entity\WinReason;

/**
 * Deal Entity (Generated Base Class)
 *
 * Sales opportunities and deals tracking *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to Deal.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class DealGenerated extends EntityBase
{
    #[Groups(['deal:read', 'deal:write'])]
    #[ORM\ManyToOne(targetEntity: Organization::class, inversedBy: 'deals')]
    #[ORM\JoinColumn(nullable: false)]
    protected Organization $organization;

    #[Groups(['deal:read', 'deal:write'])]
    #[ORM\Column(type: 'string', length: 255)]
    protected string $name;

    #[Groups(['deal:read', 'deal:write'])]
    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $description = null;

    #[Groups(['deal:read', 'deal:write'])]
    #[ORM\ManyToOne(targetEntity: Company::class, inversedBy: 'deals')]
    protected ?Company $company = null;

    #[Groups(['deal:read', 'deal:write'])]
    #[ORM\Column(type: 'string', length: 255)]
    protected string $dealStatus;

    #[Groups(['deal:read', 'deal:write'])]
    #[ORM\ManyToOne(targetEntity: PipelineStage::class, inversedBy: 'deals')]
    #[ORM\JoinColumn(nullable: false)]
    protected PipelineStage $currentStage;

    #[Groups(['deal:read', 'deal:write'])]
    #[ORM\Column(type: 'decimal', precision: 15, scale: 2, nullable: true)]
    protected ?string $probability = null;

    #[Groups(['deal:read', 'deal:write'])]
    #[ORM\ManyToOne(targetEntity: DealType::class, inversedBy: 'deals')]
    protected ?DealType $dealType = null;

    #[Groups(['deal:read', 'deal:write'])]
    #[ORM\ManyToOne(targetEntity: Pipeline::class, inversedBy: 'deals')]
    protected ?Pipeline $pipeline = null;

    #[Groups(['deal:read', 'deal:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $priority = null;

    #[Groups(['deal:read', 'deal:write'])]
    #[ORM\ManyToOne(targetEntity: DealCategory::class, inversedBy: 'deals')]
    protected ?DealCategory $category = null;

    #[Groups(['deal:read', 'deal:write'])]
    #[ORM\Column(type: 'decimal', precision: 15, scale: 2, nullable: true)]
    protected ?string $expectedAmount = null;

    #[Groups(['deal:read', 'deal:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $dealNumber = null;

    #[Groups(['deal:read', 'deal:write'])]
    #[ORM\Column(type: 'decimal', precision: 15, scale: 2, nullable: true)]
    protected ?string $weightedAmount = null;

    #[Groups(['deal:read', 'deal:write'])]
    #[ORM\Column(type: 'decimal', precision: 15, scale: 2, nullable: true)]
    protected ?string $closureAmount = null;

    #[Groups(['deal:read', 'deal:write'])]
    #[ORM\Column(type: 'decimal', precision: 15, scale: 2, nullable: true)]
    protected ?string $initialAmount = null;

    #[Groups(['deal:read', 'deal:write'])]
    #[ORM\Column(type: 'string', length: 3, nullable: true)]
    protected ?string $currency = null;

    #[Groups(['deal:read', 'deal:write'])]
    #[ORM\Column(type: 'float', precision: 10, scale: 2, nullable: true)]
    protected ?float $exchangeRate = null;

    #[Groups(['deal:read', 'deal:write'])]
    #[ORM\Column(type: 'decimal', precision: 15, scale: 2, nullable: true)]
    #[Assert\Range(max: 100, min: 0)]
    protected ?string $discountPercentage = null;

    #[Groups(['deal:read', 'deal:write'])]
    #[ORM\Column(type: 'decimal', precision: 15, scale: 2, nullable: true)]
    protected ?string $discountAmount = null;

    #[Groups(['deal:read', 'deal:write'])]
    #[ORM\Column(type: 'decimal', precision: 15, scale: 2, nullable: true)]
    #[Assert\Range(max: 100, min: 0)]
    protected ?string $commissionRate = null;

    #[Groups(['deal:read', 'deal:write'])]
    #[ORM\Column(type: 'decimal', precision: 15, scale: 2, nullable: true)]
    protected ?string $commissionAmount = null;

    #[Groups(['deal:read', 'deal:write'])]
    #[ORM\Column(type: 'datetime', nullable: true)]
    protected ?\DateTimeImmutable $expectedClosureDate = null;

    #[Groups(['deal:read', 'deal:write'])]
    #[ORM\Column(type: 'datetime', nullable: true)]
    protected ?\DateTimeImmutable $closureDate = null;

    #[Groups(['deal:read'])]
    #[ORM\ManyToMany(targetEntity: Product::class, inversedBy: 'deals', fetch: 'LAZY')]
    #[ORM\JoinTable(name: 'deal_products')]
    protected Collection $products;

    #[Groups(['deal:read', 'deal:write'])]
    #[ORM\Column(type: 'datetime', nullable: true)]
    protected ?\DateTimeImmutable $initialDate = null;

    #[Groups(['deal:read', 'deal:write'])]
    #[ORM\Column(type: 'datetime', nullable: true)]
    protected ?\DateTimeImmutable $lastActivityDate = null;

    #[Groups(['deal:read', 'deal:write'])]
    #[ORM\Column(type: 'datetime', nullable: true)]
    protected ?\DateTimeImmutable $nextFollowUp = null;

    #[Groups(['deal:read', 'deal:write'])]
    #[ORM\Column(type: 'float', precision: 10, scale: 2, nullable: true)]
    protected ?float $daysInCurrentStage = null;

    #[Groups(['deal:read', 'deal:write'])]
    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $forecastCategory = null;

    #[Groups(['deal:read', 'deal:write'])]
    #[ORM\ManyToOne(targetEntity: User::class, inversedBy: 'managedDeals')]
    protected ?User $manager = null;

    #[Groups(['deal:read', 'deal:write'])]
    #[ORM\ManyToOne(targetEntity: User::class, inversedBy: 'ownedDeals')]
    #[ORM\JoinColumn(nullable: false)]
    protected User $owner;

    #[Groups(['deal:read'])]
    #[ORM\ManyToMany(targetEntity: User::class, inversedBy: 'deals', fetch: 'LAZY')]
    #[ORM\JoinTable(name: 'deal_team')]
    protected Collection $team;

    #[Groups(['deal:read', 'deal:write'])]
    #[ORM\ManyToOne(targetEntity: Contact::class, inversedBy: 'primaryDeals')]
    protected ?Contact $primaryContact = null;

    #[Groups(['deal:read'])]
    #[ORM\ManyToMany(targetEntity: Contact::class, inversedBy: 'deals', fetch: 'LAZY')]
    #[ORM\JoinTable(name: 'deal_contacts')]
    protected Collection $contacts;

    #[Groups(['deal:read', 'deal:write'])]
    #[ORM\ManyToOne(targetEntity: LeadSource::class, inversedBy: 'deals')]
    protected ?LeadSource $leadSource = null;

    #[Groups(['deal:read', 'deal:write'])]
    #[ORM\ManyToOne(targetEntity: Campaign::class, inversedBy: 'deals')]
    protected ?Campaign $campaign = null;

    #[Groups(['deal:read', 'deal:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $sourceDetails = null;

    #[Groups(['deal:read', 'deal:write'])]
    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $notes = null;

    #[Groups(['deal:read'])]
    #[ORM\OneToMany(targetEntity: DealStage::class, mappedBy: 'deal', fetch: 'LAZY')]
    protected Collection $dealStages;

    #[Groups(['deal:read'])]
    #[ORM\OneToMany(targetEntity: Talk::class, mappedBy: 'deal', fetch: 'LAZY')]
    protected Collection $talks;

    #[Groups(['deal:read'])]
    #[ORM\OneToMany(targetEntity: Task::class, mappedBy: 'deal', fetch: 'LAZY')]
    protected Collection $tasks;

    #[Groups(['deal:read'])]
    #[ORM\ManyToMany(targetEntity: Competitor::class, inversedBy: 'deals', fetch: 'LAZY')]
    #[ORM\JoinTable(name: 'deal_competitors')]
    protected Collection $competitors;

    #[Groups(['deal:read'])]
    #[ORM\ManyToMany(targetEntity: Tag::class, inversedBy: 'deals', fetch: 'LAZY')]
    #[ORM\JoinTable(name: 'deal_tags')]
    protected Collection $tags;

    #[Groups(['deal:read', 'deal:write'])]
    #[ORM\Column(type: 'json', nullable: true)]
    protected ?array $customFields = null;

    #[Groups(['deal:read', 'deal:write'])]
    #[ORM\ManyToOne(targetEntity: LostReason::class, inversedBy: 'deals')]
    protected ?LostReason $lostReason = null;

    #[Groups(['deal:read', 'deal:write'])]
    #[ORM\ManyToOne(targetEntity: WinReason::class, inversedBy: 'deals')]
    protected ?WinReason $winReason = null;

    #[Groups(['deal:read', 'deal:write'])]
    #[ORM\Column(type: 'datetime', nullable: true)]
    protected ?\DateTimeImmutable $actualClosureDate = null;


    public function __construct()
    {
        parent::__construct();
        $this->products = new ArrayCollection();
        $this->team = new ArrayCollection();
        $this->contacts = new ArrayCollection();
        $this->dealStages = new ArrayCollection();
        $this->talks = new ArrayCollection();
        $this->tasks = new ArrayCollection();
        $this->competitors = new ArrayCollection();
        $this->tags = new ArrayCollection();
    }

    public function getOrganization(): Organization
    {
        return $this->organization;
    }

    public function setOrganization(Organization $organization): self
    {
        $this->organization = $organization;
        return $this;
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getDescription(): ?string    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    public function getCompany(): ?Company
    {
        return $this->company;
    }

    public function setCompany(?Company $company): self
    {
        $this->company = $company;
        return $this;
    }

    public function getDealStatus(): string    {
        return $this->dealStatus;
    }

    public function setDealStatus(string $dealStatus): self
    {
        $this->dealStatus = $dealStatus;
        return $this;
    }

    public function getCurrentStage(): PipelineStage
    {
        return $this->currentStage;
    }

    public function setCurrentStage(PipelineStage $currentStage): self
    {
        $this->currentStage = $currentStage;
        return $this;
    }

    public function getProbability(): ?string    {
        return $this->probability;
    }

    public function setProbability(?string $probability): self
    {
        $this->probability = $probability;
        return $this;
    }

    public function getDealType(): ?DealType
    {
        return $this->dealType;
    }

    public function setDealType(?DealType $dealType): self
    {
        $this->dealType = $dealType;
        return $this;
    }

    public function getPipeline(): ?Pipeline
    {
        return $this->pipeline;
    }

    public function setPipeline(?Pipeline $pipeline): self
    {
        $this->pipeline = $pipeline;
        return $this;
    }

    public function getPriority(): ?string    {
        return $this->priority;
    }

    public function setPriority(?string $priority): self
    {
        $this->priority = $priority;
        return $this;
    }

    public function getCategory(): ?DealCategory
    {
        return $this->category;
    }

    public function setCategory(?DealCategory $category): self
    {
        $this->category = $category;
        return $this;
    }

    public function getExpectedAmount(): ?string    {
        return $this->expectedAmount;
    }

    public function setExpectedAmount(?string $expectedAmount): self
    {
        $this->expectedAmount = $expectedAmount;
        return $this;
    }

    public function getDealNumber(): ?string    {
        return $this->dealNumber;
    }

    public function setDealNumber(?string $dealNumber): self
    {
        $this->dealNumber = $dealNumber;
        return $this;
    }

    public function getWeightedAmount(): ?string    {
        return $this->weightedAmount;
    }

    public function setWeightedAmount(?string $weightedAmount): self
    {
        $this->weightedAmount = $weightedAmount;
        return $this;
    }

    public function getClosureAmount(): ?string    {
        return $this->closureAmount;
    }

    public function setClosureAmount(?string $closureAmount): self
    {
        $this->closureAmount = $closureAmount;
        return $this;
    }

    public function getInitialAmount(): ?string    {
        return $this->initialAmount;
    }

    public function setInitialAmount(?string $initialAmount): self
    {
        $this->initialAmount = $initialAmount;
        return $this;
    }

    public function getCurrency(): ?string    {
        return $this->currency;
    }

    public function setCurrency(?string $currency): self
    {
        $this->currency = $currency;
        return $this;
    }

    public function getExchangeRate(): ?float    {
        return $this->exchangeRate;
    }

    public function setExchangeRate(?float $exchangeRate): self
    {
        $this->exchangeRate = $exchangeRate;
        return $this;
    }

    public function getDiscountPercentage(): ?string    {
        return $this->discountPercentage;
    }

    public function setDiscountPercentage(?string $discountPercentage): self
    {
        $this->discountPercentage = $discountPercentage;
        return $this;
    }

    public function getDiscountAmount(): ?string    {
        return $this->discountAmount;
    }

    public function setDiscountAmount(?string $discountAmount): self
    {
        $this->discountAmount = $discountAmount;
        return $this;
    }

    public function getCommissionRate(): ?string    {
        return $this->commissionRate;
    }

    public function setCommissionRate(?string $commissionRate): self
    {
        $this->commissionRate = $commissionRate;
        return $this;
    }

    public function getCommissionAmount(): ?string    {
        return $this->commissionAmount;
    }

    public function setCommissionAmount(?string $commissionAmount): self
    {
        $this->commissionAmount = $commissionAmount;
        return $this;
    }

    public function getExpectedClosureDate(): ?\DateTimeImmutable    {
        return $this->expectedClosureDate;
    }

    public function setExpectedClosureDate(?\DateTimeImmutable $expectedClosureDate): self
    {
        $this->expectedClosureDate = $expectedClosureDate;
        return $this;
    }

    public function getClosureDate(): ?\DateTimeImmutable    {
        return $this->closureDate;
    }

    public function setClosureDate(?\DateTimeImmutable $closureDate): self
    {
        $this->closureDate = $closureDate;
        return $this;
    }

    /**
     * @return Collection<int, Product>
     */
    public function getProducts(): Collection
    {
        return $this->products;
    }

    public function addProduct(Product $product): self
    {
        if (!$this->products->contains($product)) {
            $this->products->add($product);
        }
        return $this;
    }

    public function removeProduct(Product $product): self
    {
        if ($this->products->removeElement($product)) {
        }
        return $this;
    }

    public function getInitialDate(): ?\DateTimeImmutable    {
        return $this->initialDate;
    }

    public function setInitialDate(?\DateTimeImmutable $initialDate): self
    {
        $this->initialDate = $initialDate;
        return $this;
    }

    public function getLastActivityDate(): ?\DateTimeImmutable    {
        return $this->lastActivityDate;
    }

    public function setLastActivityDate(?\DateTimeImmutable $lastActivityDate): self
    {
        $this->lastActivityDate = $lastActivityDate;
        return $this;
    }

    public function getNextFollowUp(): ?\DateTimeImmutable    {
        return $this->nextFollowUp;
    }

    public function setNextFollowUp(?\DateTimeImmutable $nextFollowUp): self
    {
        $this->nextFollowUp = $nextFollowUp;
        return $this;
    }

    public function getDaysInCurrentStage(): ?float    {
        return $this->daysInCurrentStage;
    }

    public function setDaysInCurrentStage(?float $daysInCurrentStage): self
    {
        $this->daysInCurrentStage = $daysInCurrentStage;
        return $this;
    }

    public function getForecastCategory(): ?int    {
        return $this->forecastCategory;
    }

    public function setForecastCategory(?int $forecastCategory): self
    {
        $this->forecastCategory = $forecastCategory;
        return $this;
    }

    public function getManager(): ?User
    {
        return $this->manager;
    }

    public function setManager(?User $manager): self
    {
        $this->manager = $manager;
        return $this;
    }

    public function getOwner(): User
    {
        return $this->owner;
    }

    public function setOwner(User $owner): self
    {
        $this->owner = $owner;
        return $this;
    }

    /**
     * @return Collection<int, User>
     */
    public function getTeam(): Collection
    {
        return $this->team;
    }

    public function addTeam(User $team): self
    {
        if (!$this->team->contains($team)) {
            $this->team->add($team);
        }
        return $this;
    }

    public function removeTeam(User $team): self
    {
        if ($this->team->removeElement($team)) {
        }
        return $this;
    }

    public function getPrimaryContact(): ?Contact
    {
        return $this->primaryContact;
    }

    public function setPrimaryContact(?Contact $primaryContact): self
    {
        $this->primaryContact = $primaryContact;
        return $this;
    }

    /**
     * @return Collection<int, Contact>
     */
    public function getContacts(): Collection
    {
        return $this->contacts;
    }

    public function addContact(Contact $contact): self
    {
        if (!$this->contacts->contains($contact)) {
            $this->contacts->add($contact);
        }
        return $this;
    }

    public function removeContact(Contact $contact): self
    {
        if ($this->contacts->removeElement($contact)) {
        }
        return $this;
    }

    public function getLeadSource(): ?LeadSource
    {
        return $this->leadSource;
    }

    public function setLeadSource(?LeadSource $leadSource): self
    {
        $this->leadSource = $leadSource;
        return $this;
    }

    public function getCampaign(): ?Campaign
    {
        return $this->campaign;
    }

    public function setCampaign(?Campaign $campaign): self
    {
        $this->campaign = $campaign;
        return $this;
    }

    public function getSourceDetails(): ?string    {
        return $this->sourceDetails;
    }

    public function setSourceDetails(?string $sourceDetails): self
    {
        $this->sourceDetails = $sourceDetails;
        return $this;
    }

    public function getNotes(): ?string    {
        return $this->notes;
    }

    public function setNotes(?string $notes): self
    {
        $this->notes = $notes;
        return $this;
    }

    /**
     * @return Collection<int, DealStage>
     */
    public function getDealStages(): Collection
    {
        return $this->dealStages;
    }

    public function addDealStage(DealStage $dealStage): self
    {
        if (!$this->dealStages->contains($dealStage)) {
            $this->dealStages->add($dealStage);
            $dealStage->setDeal($this);
        }
        return $this;
    }

    public function removeDealStage(DealStage $dealStage): self
    {
        if ($this->dealStages->removeElement($dealStage)) {
            if ($dealStage->getDeal() === $this) {
                $dealStage->setDeal(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, Talk>
     */
    public function getTalks(): Collection
    {
        return $this->talks;
    }

    public function addTalk(Talk $talk): self
    {
        if (!$this->talks->contains($talk)) {
            $this->talks->add($talk);
            $talk->setDeal($this);
        }
        return $this;
    }

    public function removeTalk(Talk $talk): self
    {
        if ($this->talks->removeElement($talk)) {
            if ($talk->getDeal() === $this) {
                $talk->setDeal(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, Task>
     */
    public function getTasks(): Collection
    {
        return $this->tasks;
    }

    public function addTask(Task $task): self
    {
        if (!$this->tasks->contains($task)) {
            $this->tasks->add($task);
            $task->setDeal($this);
        }
        return $this;
    }

    public function removeTask(Task $task): self
    {
        if ($this->tasks->removeElement($task)) {
            if ($task->getDeal() === $this) {
                $task->setDeal(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, Competitor>
     */
    public function getCompetitors(): Collection
    {
        return $this->competitors;
    }

    public function addCompetitor(Competitor $competitor): self
    {
        if (!$this->competitors->contains($competitor)) {
            $this->competitors->add($competitor);
        }
        return $this;
    }

    public function removeCompetitor(Competitor $competitor): self
    {
        if ($this->competitors->removeElement($competitor)) {
        }
        return $this;
    }

    /**
     * @return Collection<int, Tag>
     */
    public function getTags(): Collection
    {
        return $this->tags;
    }

    public function addTag(Tag $tag): self
    {
        if (!$this->tags->contains($tag)) {
            $this->tags->add($tag);
        }
        return $this;
    }

    public function removeTag(Tag $tag): self
    {
        if ($this->tags->removeElement($tag)) {
        }
        return $this;
    }

    public function getCustomFields(): ?array    {
        return $this->customFields;
    }

    public function setCustomFields(?array $customFields): self
    {
        $this->customFields = $customFields;
        return $this;
    }

    public function getLostReason(): ?LostReason
    {
        return $this->lostReason;
    }

    public function setLostReason(?LostReason $lostReason): self
    {
        $this->lostReason = $lostReason;
        return $this;
    }

    public function getWinReason(): ?WinReason
    {
        return $this->winReason;
    }

    public function setWinReason(?WinReason $winReason): self
    {
        $this->winReason = $winReason;
        return $this;
    }

    public function getActualClosureDate(): ?\DateTimeImmutable    {
        return $this->actualClosureDate;
    }

    public function setActualClosureDate(?\DateTimeImmutable $actualClosureDate): self
    {
        $this->actualClosureDate = $actualClosureDate;
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? ($this->getId()?->toRfc4122() ?? '');
    }
}
