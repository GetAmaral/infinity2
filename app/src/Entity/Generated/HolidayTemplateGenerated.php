<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
                                use App\Entity\Country;
use App\Entity\City;

/**
 * HolidayTemplate Entity (Generated Base Class)
 *
 * 
 *
 * This class is ALWAYS regenerated from CSV. DO NOT edit this file.
 * Add custom logic to HolidayTemplate.php instead.
 *
 * @generated by Luminai Code Generator
 * @see /config/EntityNew.csv and /config/PropertyNew.csv
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class HolidayTemplateGenerated extends EntityBase
{
    #[ORM\Column(type: '')]
    #[Groups(['holidaytemplate:read', 'holidaytemplate:write'])]
    protected mixed $name;

    #[ORM\Column(type: 'date', nullable: true)]
    #[Groups(['holidaytemplate:read', 'holidaytemplate:write'])]
    protected ?\DateTimeInterface $date = null;

    #[ORM\Column(type: 'integer', nullable: true)]
    #[Groups(['holidaytemplate:read', 'holidaytemplate:write'])]
    protected ?int $recurrenceInterval = null;

    #[ORM\Column(type: 'integer', nullable: true)]
    #[Groups(['holidaytemplate:read', 'holidaytemplate:write'])]
    protected ?int $recurrenceFrequency = null;

    #[ORM\ManyToOne(targetEntity: Country::class, inversedBy: 'holidayTemplates')]
    #[Groups(['holidaytemplate:read', 'holidaytemplate:write'])]
    protected ?Country $country = null;

    #[ORM\ManyToOne(targetEntity: City::class, inversedBy: 'holidayTemplates')]
    #[Groups(['holidaytemplate:read', 'holidaytemplate:write'])]
    protected ?City $city = null;

    #[ORM\Column(type: 'boolean', nullable: true)]
    #[Groups(['holidaytemplate:read', 'holidaytemplate:write'])]
    protected ?bool $blockSchedule = null;


    public function __construct()
    {
        parent::__construct();
    }

    public function getName(): mixed
    {
        return $this->name;
    }

    public function setName(mixed $name): self
    {
        $this->name = $name;
        return $this;
    }

    
    public function getDate(): ?\DateTimeInterface
    {
        return $this->date;
    }

    public function setDate(?\DateTimeInterface $date): self
    {
        $this->date = $date;
        return $this;
    }

    
    public function getRecurrenceinterval(): ?int
    {
        return $this->recurrenceInterval;
    }

    public function setRecurrenceinterval(?int $recurrenceInterval): self
    {
        $this->recurrenceInterval = $recurrenceInterval;
        return $this;
    }

    
    public function getRecurrencefrequency(): ?int
    {
        return $this->recurrenceFrequency;
    }

    public function setRecurrencefrequency(?int $recurrenceFrequency): self
    {
        $this->recurrenceFrequency = $recurrenceFrequency;
        return $this;
    }

    
    public function getCountry(): ?Country
    {
        return $this->country;
    }

    public function setCountry(?Country $country): self
    {
        $this->country = $country;
        return $this;
    }

    public function getCity(): ?City
    {
        return $this->city;
    }

    public function setCity(?City $city): self
    {
        $this->city = $city;
        return $this;
    }

    public function getBlockschedule(): ?bool
    {
        return $this->blockSchedule;
    }

    public function setBlockschedule(?bool $blockSchedule): self
    {
        $this->blockSchedule = $blockSchedule;
        return $this;
    }

    

    public function __toString(): string
    {
        return $this->name ?? '';
    }
}
