<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use App\Entity\Trait\OrganizationTrait;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;
use App\Entity\PipelineStageTemplate;
use App\Entity\TaskType;

/**
 * TaskTemplate Entity (Generated Base Class)
 *
 * Task templates for recurring task creation *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to TaskTemplate.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class TaskTemplateGenerated extends EntityBase
{
    use OrganizationTrait;

    #[ORM\Column(type: 'string', length: 255)]
    protected string $name;

    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $description = null;

    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $command = null;

    #[ORM\Column(type: 'boolean', nullable: true)]
    protected ?bool $active = null;

    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $durationMinutes = null;

    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $location = null;

    #[ORM\Column(type: 'float', precision: 10, scale: 2, nullable: true)]
    protected ?float $periodicityInterval = null;

    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $periodicityTimeframe = null;

    #[ORM\ManyToOne(targetEntity: PipelineStageTemplate::class, inversedBy: 'tasks')]
    protected ?PipelineStageTemplate $pipelineStageTemplate = null;

    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $priority = null;

    #[ORM\ManyToOne(targetEntity: TaskType::class, inversedBy: 'taskTemplates')]
    protected ?TaskType $type = null;


    public function __construct()
    {
        parent::__construct();
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getDescription(): ?string    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    public function getCommand(): ?string    {
        return $this->command;
    }

    public function setCommand(?string $command): self
    {
        $this->command = $command;
        return $this;
    }

    public function getActive(): ?bool    {
        return $this->active;
    }

    public function setActive(?bool $active): self
    {
        $this->active = $active;
        return $this;
    }

    public function isActive(): bool
    {
        return $this->active === true;
    }

    public function getDurationminutes(): ?int    {
        return $this->durationMinutes;
    }

    public function setDurationminutes(?int $durationMinutes): self
    {
        $this->durationMinutes = $durationMinutes;
        return $this;
    }

    public function getLocation(): ?string    {
        return $this->location;
    }

    public function setLocation(?string $location): self
    {
        $this->location = $location;
        return $this;
    }

    public function getPeriodicityinterval(): ?float    {
        return $this->periodicityInterval;
    }

    public function setPeriodicityinterval(?float $periodicityInterval): self
    {
        $this->periodicityInterval = $periodicityInterval;
        return $this;
    }

    public function getPeriodicitytimeframe(): ?int    {
        return $this->periodicityTimeframe;
    }

    public function setPeriodicitytimeframe(?int $periodicityTimeframe): self
    {
        $this->periodicityTimeframe = $periodicityTimeframe;
        return $this;
    }

    public function getPipelinestagetemplate(): ?App\Entity\PipelineStageTemplate
    {
        return $this->pipelineStageTemplate;
    }

    public function setPipelinestagetemplate(?App\Entity\PipelineStageTemplate $pipelineStageTemplate): self
    {
        $this->pipelineStageTemplate = $pipelineStageTemplate;
        return $this;
    }

    public function getPriority(): ?int    {
        return $this->priority;
    }

    public function setPriority(?int $priority): self
    {
        $this->priority = $priority;
        return $this;
    }

    public function getType(): ?App\Entity\TaskType
    {
        return $this->type;
    }

    public function setType(?App\Entity\TaskType $type): self
    {
        $this->type = $type;
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? ($this->getId()?->toRfc4122() ?? '');
    }
}
