<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
use App\Entity\HolidayTemplate;

/**
 * Country Entity (Generated Base Class)
 *
 * Countries reference data for international operations *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to Country.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class CountryGenerated extends EntityBase
{
    #[Groups(['country:read', 'country:write'])]
    #[ORM\Column(type: 'string', length: 255, unique: true)]
    protected string $name;

    #[Groups(['country:read', 'country:write'])]
    #[ORM\Column(type: 'string', length: 2, unique: true)]
    protected string $iso2;

    #[Groups(['country:read', 'country:write'])]
    #[ORM\Column(type: 'string', length: 3, unique: true)]
    protected string $iso3;

    #[Groups(['country:read', 'country:write'])]
    #[ORM\Column(type: 'string', length: 3, unique: true)]
    protected string $numericCode;

    #[Groups(['country:read', 'country:write'])]
    #[ORM\Column(type: 'string', length: 3)]
    protected string $currencyCode;

    #[Groups(['country:read', 'country:write'])]
    #[ORM\Column(type: 'string', length: 10)]
    protected string $phoneCode;

    #[Groups(['country:read', 'country:write'])]
    #[ORM\Column(type: 'string', length: 50)]
    protected string $continent;

    #[Groups(['country:read', 'country:write'])]
    #[ORM\Column(type: 'string', length: 100, nullable: true)]
    protected ?string $capital = null;

    #[Groups(['country:read', 'country:write'])]
    #[ORM\Column(type: 'string', length: 5, nullable: true)]
    protected ?string $currencySymbol = null;

    #[Groups(['country:read', 'country:write'])]
    #[ORM\Column(type: 'boolean')]
    protected bool $euMember = false;

    #[Groups(['country:read', 'country:write'])]
    #[ORM\Column(type: 'string', length: 100, nullable: true)]
    protected ?string $region = null;

    #[Groups(['country:read', 'country:write'])]
    #[ORM\Column(type: 'string', length: 100, nullable: true)]
    protected ?string $nativeName = null;

    #[Groups(['country:read', 'country:write'])]
    #[ORM\Column(type: 'string', length: 200, nullable: true)]
    protected ?string $officialName = null;

    #[Groups(['country:read', 'country:write'])]
    #[ORM\Column(type: 'string', length: 100, nullable: true)]
    protected ?string $subregion = null;

    #[Groups(['country:read', 'country:write'])]
    #[ORM\Column(type: 'boolean')]
    protected bool $active = true;

    #[Groups(['country:read', 'country:write'])]
    #[ORM\Column(type: 'decimal', precision: 10, scale: 7, nullable: true)]
    protected ?string $latitude = null;

    #[Groups(['country:read', 'country:write'])]
    #[ORM\Column(type: 'decimal', precision: 10, scale: 7, nullable: true)]
    protected ?string $longitude = null;

    #[Groups(['country:read', 'country:write'])]
    #[ORM\Column(type: 'json', nullable: true)]
    protected ?array $timezones = null;

    #[Groups(['country:read', 'country:write'])]
    #[ORM\Column(type: 'json', nullable: true)]
    protected ?array $languages = null;

    #[Groups(['country:read', 'country:write'])]
    #[ORM\Column(type: 'string', length: 10, nullable: true)]
    protected ?string $tld = null;

    #[Groups(['country:read', 'country:write'])]
    #[ORM\Column(type: 'string', length: 100, nullable: true)]
    protected ?string $nationalityName = null;

    #[Groups(['country:read', 'country:write'])]
    #[ORM\Column(type: 'boolean')]
    protected bool $availableForShipping = true;

    #[Groups(['country:read', 'country:write'])]
    #[ORM\Column(type: 'boolean')]
    protected bool $availableForBilling = true;

    #[Groups(['country:read', 'country:write'])]
    #[ORM\Column(type: 'boolean')]
    protected bool $schengenMember = false;

    #[Groups(['country:read', 'country:write'])]
    #[ORM\Column(type: 'boolean')]
    protected bool $oecdMember = false;

    #[Groups(['country:read', 'country:write'])]
    #[ORM\Column(type: 'boolean')]
    protected bool $dataResidencyRequired = false;

    #[Groups(['country:read', 'country:write'])]
    #[ORM\Column(type: 'string', length: 100, nullable: true)]
    protected ?string $postalCodeFormat = null;

    #[Groups(['country:read', 'country:write'])]
    #[ORM\Column(type: 'boolean')]
    protected bool $postalCodeRequired = true;

    #[Groups(['country:read', 'country:write'])]
    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $addressFormat = null;

    #[Groups(['country:read', 'country:write'])]
    #[ORM\Column(type: 'boolean')]
    protected bool $taxIdRequired = false;

    #[Groups(['country:read', 'country:write'])]
    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $population = null;

    #[Groups(['country:read', 'country:write'])]
    #[ORM\Column(type: 'decimal', precision: 12, scale: 2, nullable: true)]
    protected ?string $area = null;

    #[Groups(['country:read', 'country:write'])]
    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $unMemberSince = null;

    #[Groups(['country:read', 'country:write'])]
    #[ORM\Column(type: 'string', length: 10, nullable: true)]
    protected ?string $flagEmoji = null;

    #[Groups(['country:read', 'country:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $flagSvgUrl = null;

    #[Groups(['country:read'])]
    #[ORM\OneToMany(targetEntity: HolidayTemplate::class, mappedBy: 'country', fetch: 'LAZY')]
    protected Collection $holidayTemplates;


    public function __construct()
    {
        parent::__construct();
        $this->holidayTemplates = new ArrayCollection();
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getIso2(): string    {
        return $this->iso2;
    }

    public function setIso2(string $iso2): self
    {
        $this->iso2 = $iso2;
        return $this;
    }

    public function getIso3(): string    {
        return $this->iso3;
    }

    public function setIso3(string $iso3): self
    {
        $this->iso3 = $iso3;
        return $this;
    }

    public function getNumericCode(): string    {
        return $this->numericCode;
    }

    public function setNumericCode(string $numericCode): self
    {
        $this->numericCode = $numericCode;
        return $this;
    }

    public function getCurrencyCode(): string    {
        return $this->currencyCode;
    }

    public function setCurrencyCode(string $currencyCode): self
    {
        $this->currencyCode = $currencyCode;
        return $this;
    }

    public function getPhoneCode(): string    {
        return $this->phoneCode;
    }

    public function setPhoneCode(string $phoneCode): self
    {
        $this->phoneCode = $phoneCode;
        return $this;
    }

    public function getContinent(): string    {
        return $this->continent;
    }

    public function setContinent(string $continent): self
    {
        $this->continent = $continent;
        return $this;
    }

    public function getCapital(): ?string    {
        return $this->capital;
    }

    public function setCapital(?string $capital): self
    {
        $this->capital = $capital;
        return $this;
    }

    public function getCurrencySymbol(): ?string    {
        return $this->currencySymbol;
    }

    public function setCurrencySymbol(?string $currencySymbol): self
    {
        $this->currencySymbol = $currencySymbol;
        return $this;
    }

    public function getEuMember(): bool    {
        return $this->euMember;
    }

    public function setEuMember(bool $euMember): self
    {
        $this->euMember = $euMember;
        return $this;
    }

    public function isEuMember(): bool
    {
        return $this->euMember === true;
    }

    public function getRegion(): ?string    {
        return $this->region;
    }

    public function setRegion(?string $region): self
    {
        $this->region = $region;
        return $this;
    }

    public function getNativeName(): ?string    {
        return $this->nativeName;
    }

    public function setNativeName(?string $nativeName): self
    {
        $this->nativeName = $nativeName;
        return $this;
    }

    public function getOfficialName(): ?string    {
        return $this->officialName;
    }

    public function setOfficialName(?string $officialName): self
    {
        $this->officialName = $officialName;
        return $this;
    }

    public function getSubregion(): ?string    {
        return $this->subregion;
    }

    public function setSubregion(?string $subregion): self
    {
        $this->subregion = $subregion;
        return $this;
    }

    public function getActive(): bool    {
        return $this->active;
    }

    public function setActive(bool $active): self
    {
        $this->active = $active;
        return $this;
    }

    public function isActive(): bool
    {
        return $this->active === true;
    }

    public function getLatitude(): ?string    {
        return $this->latitude;
    }

    public function setLatitude(?string $latitude): self
    {
        $this->latitude = $latitude;
        return $this;
    }

    public function getLongitude(): ?string    {
        return $this->longitude;
    }

    public function setLongitude(?string $longitude): self
    {
        $this->longitude = $longitude;
        return $this;
    }

    public function getTimezones(): ?array    {
        return $this->timezones;
    }

    public function setTimezones(?array $timezones): self
    {
        $this->timezones = $timezones;
        return $this;
    }

    public function getLanguages(): ?array    {
        return $this->languages;
    }

    public function setLanguages(?array $languages): self
    {
        $this->languages = $languages;
        return $this;
    }

    public function getTld(): ?string    {
        return $this->tld;
    }

    public function setTld(?string $tld): self
    {
        $this->tld = $tld;
        return $this;
    }

    public function getNationalityName(): ?string    {
        return $this->nationalityName;
    }

    public function setNationalityName(?string $nationalityName): self
    {
        $this->nationalityName = $nationalityName;
        return $this;
    }

    public function getAvailableForShipping(): bool    {
        return $this->availableForShipping;
    }

    public function setAvailableForShipping(bool $availableForShipping): self
    {
        $this->availableForShipping = $availableForShipping;
        return $this;
    }

    public function isAvailableForShipping(): bool
    {
        return $this->availableForShipping === true;
    }

    public function getAvailableForBilling(): bool    {
        return $this->availableForBilling;
    }

    public function setAvailableForBilling(bool $availableForBilling): self
    {
        $this->availableForBilling = $availableForBilling;
        return $this;
    }

    public function isAvailableForBilling(): bool
    {
        return $this->availableForBilling === true;
    }

    public function getSchengenMember(): bool    {
        return $this->schengenMember;
    }

    public function setSchengenMember(bool $schengenMember): self
    {
        $this->schengenMember = $schengenMember;
        return $this;
    }

    public function isSchengenMember(): bool
    {
        return $this->schengenMember === true;
    }

    public function getOecdMember(): bool    {
        return $this->oecdMember;
    }

    public function setOecdMember(bool $oecdMember): self
    {
        $this->oecdMember = $oecdMember;
        return $this;
    }

    public function isOecdMember(): bool
    {
        return $this->oecdMember === true;
    }

    public function getDataResidencyRequired(): bool    {
        return $this->dataResidencyRequired;
    }

    public function setDataResidencyRequired(bool $dataResidencyRequired): self
    {
        $this->dataResidencyRequired = $dataResidencyRequired;
        return $this;
    }

    public function isDataResidencyRequired(): bool
    {
        return $this->dataResidencyRequired === true;
    }

    public function getPostalCodeFormat(): ?string    {
        return $this->postalCodeFormat;
    }

    public function setPostalCodeFormat(?string $postalCodeFormat): self
    {
        $this->postalCodeFormat = $postalCodeFormat;
        return $this;
    }

    public function getPostalCodeRequired(): bool    {
        return $this->postalCodeRequired;
    }

    public function setPostalCodeRequired(bool $postalCodeRequired): self
    {
        $this->postalCodeRequired = $postalCodeRequired;
        return $this;
    }

    public function isPostalCodeRequired(): bool
    {
        return $this->postalCodeRequired === true;
    }

    public function getAddressFormat(): ?string    {
        return $this->addressFormat;
    }

    public function setAddressFormat(?string $addressFormat): self
    {
        $this->addressFormat = $addressFormat;
        return $this;
    }

    public function getTaxIdRequired(): bool    {
        return $this->taxIdRequired;
    }

    public function setTaxIdRequired(bool $taxIdRequired): self
    {
        $this->taxIdRequired = $taxIdRequired;
        return $this;
    }

    public function isTaxIdRequired(): bool
    {
        return $this->taxIdRequired === true;
    }

    public function getPopulation(): ?int    {
        return $this->population;
    }

    public function setPopulation(?int $population): self
    {
        $this->population = $population;
        return $this;
    }

    public function getArea(): ?string    {
        return $this->area;
    }

    public function setArea(?string $area): self
    {
        $this->area = $area;
        return $this;
    }

    public function getUnMemberSince(): ?int    {
        return $this->unMemberSince;
    }

    public function setUnMemberSince(?int $unMemberSince): self
    {
        $this->unMemberSince = $unMemberSince;
        return $this;
    }

    public function getFlagEmoji(): ?string    {
        return $this->flagEmoji;
    }

    public function setFlagEmoji(?string $flagEmoji): self
    {
        $this->flagEmoji = $flagEmoji;
        return $this;
    }

    public function getFlagSvgUrl(): ?string    {
        return $this->flagSvgUrl;
    }

    public function setFlagSvgUrl(?string $flagSvgUrl): self
    {
        $this->flagSvgUrl = $flagSvgUrl;
        return $this;
    }

    /**
     * @return Collection<int, HolidayTemplate>
     */
    public function getHolidayTemplates(): Collection
    {
        return $this->holidayTemplates;
    }

    public function addHolidayTemplate(HolidayTemplate $holidayTemplate): self
    {
        if (!$this->holidayTemplates->contains($holidayTemplate)) {
            $this->holidayTemplates->add($holidayTemplate);
            $holidayTemplate->setCountry($this);
        }
        return $this;
    }

    public function removeHolidayTemplate(HolidayTemplate $holidayTemplate): self
    {
        if ($this->holidayTemplates->removeElement($holidayTemplate)) {
            if ($holidayTemplate->getCountry() === $this) {
                $holidayTemplate->setCountry(null);
            }
        }
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? ($this->getId()?->toRfc4122() ?? '');
    }
}
