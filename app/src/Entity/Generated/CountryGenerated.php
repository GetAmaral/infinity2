<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
                use App\Entity\HolidayTemplate;

/**
 * Country Entity (Generated Base Class)
 *
 * 
 *
 * This class is ALWAYS regenerated from CSV. DO NOT edit this file.
 * Add custom logic to Country.php instead.
 *
 * @generated by Luminai Code Generator
 * @see /config/EntityNew.csv and /config/PropertyNew.csv
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class CountryGenerated extends EntityBase
{
    #[ORM\Column(type: 'string')]
    #[Assert\NotBlank]
    #[Assert\Length(max: 255)]
    #[Groups(['country:read', 'country:write'])]
    protected string $name;

    #[ORM\Column(type: 'string', length: 3, nullable: true)]
    #[Assert\Length(max: 255)]
    #[Groups(['country:read', 'country:write'])]
    protected ?string $dialingCode = null;

    #[ORM\OneToMany(targetEntity: HolidayTemplate::class, mappedBy: 'country', fetch: 'LAZY')]
    #[ORM\OrderBy(['name' => 'ASC'])]
    #[Groups(['country:read', 'country:write'])]
    protected Collection $holidayTemplates;


    public function __construct()
    {
        parent::__construct();
        $this->holidayTemplates = new ArrayCollection();
    }

    public function getName(): string
    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    
    public function getDialingcode(): ?string
    {
        return $this->dialingCode;
    }

    public function setDialingcode(?string $dialingCode): self
    {
        $this->dialingCode = $dialingCode;
        return $this;
    }

    
    /**
     * @return Collection<int, HolidayTemplate>
     */
    public function getHolidaytemplates(): Collection
    {
        return $this->holidayTemplates;
    }

    public function addHolidaytemplate(HolidayTemplate $holidayTemplate): self
    {
        if (!$this->holidayTemplates->contains($holidayTemplate)) {
            $this->holidayTemplates->add($holidayTemplate);
        }
        return $this;
    }

    public function removeHolidaytemplate(HolidayTemplate $holidayTemplate): self
    {
        if ($this->holidayTemplates->removeElement($holidayTemplate)) {
        }
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? '';
    }
}
