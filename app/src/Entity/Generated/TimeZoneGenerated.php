<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
use App\Entity\WorkingHour;

/**
 * TimeZone Entity (Generated Base Class)
 *
 * Time zones for global calendar management *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to TimeZone.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class TimeZoneGenerated extends EntityBase
{
    #[Groups(['timezone:read', 'timezone:write'])]
    #[ORM\Column(type: 'string', length: 255)]
    protected string $name;

    #[Groups(['timezone:read', 'timezone:write'])]
    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $offsetMinutes = null;

    #[Groups(['timezone:read'])]
    #[ORM\OneToMany(targetEntity: WorkingHour::class, mappedBy: 'timeZone', fetch: 'LAZY')]
    protected Collection $workingHours;


    public function __construct()
    {
        parent::__construct();
        $this->workingHours = new ArrayCollection();
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getOffsetMinutes(): ?int    {
        return $this->offsetMinutes;
    }

    public function setOffsetMinutes(?int $offsetMinutes): self
    {
        $this->offsetMinutes = $offsetMinutes;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\WorkingHour>
     */
    public function getWorkingHours(): Collection
    {
        return $this->workingHours;
    }

    public function addWorkingHour(App\Entity\WorkingHour $workingHour): self
    {
        if (!$this->workingHours->contains($workingHour)) {
            $this->workingHours->add($workingHour);
            $workingHour->setTimeZone($this);
        }
        return $this;
    }

    public function removeWorkingHour(App\Entity\WorkingHour $workingHour): self
    {
        if ($this->workingHours->removeElement($workingHour)) {
            if ($workingHour->getTimeZone() === $this) {
                $workingHour->setTimeZone(null);
            }
        }
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? ($this->getId()?->toRfc4122() ?? '');
    }
}
