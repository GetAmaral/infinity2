<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
                use App\Entity\WorkingHour;

/**
 * TimeZone Entity (Generated Base Class)
 *
 * 
 *
 * This class is ALWAYS regenerated from CSV. DO NOT edit this file.
 * Add custom logic to TimeZone.php instead.
 *
 * @generated by Luminai Code Generator
 * @see /config/EntityNew.csv and /config/PropertyNew.csv
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class TimeZoneGenerated extends EntityBase
{
    #[ORM\Column(type: 'string', nullable: true)]
    #[Assert\Length(max: 255)]
    #[Groups(['timezone:read', 'timezone:write'])]
    protected ?string $name = null;

    #[ORM\Column(type: 'integer', nullable: true)]
    #[Groups(['timezone:read', 'timezone:write'])]
    protected ?int $offsetMinutes = null;

    #[ORM\OneToMany(targetEntity: WorkingHour::class, mappedBy: 'timeZone', fetch: 'LAZY')]
    #[Groups(['timezone:read', 'timezone:write'])]
    protected Collection $workingHours;


    public function __construct()
    {
        parent::__construct();
        $this->workingHours = new ArrayCollection();
    }

    public function getName(): ?string
    {
        return $this->name;
    }

    public function setName(?string $name): self
    {
        $this->name = $name;
        return $this;
    }

    
    public function getOffsetminutes(): ?int
    {
        return $this->offsetMinutes;
    }

    public function setOffsetminutes(?int $offsetMinutes): self
    {
        $this->offsetMinutes = $offsetMinutes;
        return $this;
    }

    
    /**
     * @return Collection<int, WorkingHour>
     */
    public function getWorkinghours(): Collection
    {
        return $this->workingHours;
    }

    public function addWorkinghour(WorkingHour $workingHour): self
    {
        if (!$this->workingHours->contains($workingHour)) {
            $this->workingHours->add($workingHour);
        }
        return $this;
    }

    public function removeWorkinghour(WorkingHour $workingHour): self
    {
        if ($this->workingHours->removeElement($workingHour)) {
        }
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? '';
    }
}
