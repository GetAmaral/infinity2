<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
use App\Entity\Organization;

/**
 * Flag Entity (Generated Base Class)
 *
 * Categorizable flags and labels for follow-ups, reminders, and entity tagging with polymorphic relationships *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to Flag.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class FlagGenerated extends EntityBase
{
    #[Groups(['flag:read', 'flag:write'])]
    #[ORM\ManyToOne(targetEntity: Organization::class, inversedBy: 'flags')]
    #[ORM\JoinColumn(nullable: false)]
    protected Organization $organization;

    #[Groups(['flag:read', 'flag:write'])]
    #[ORM\Column(type: 'string', length: 255)]
    protected string $name;

    #[Groups(['flag:read', 'flag:write'])]
    #[ORM\Column(type: 'string', length: 50)]
    #[Assert\Length(max: 50)]
    protected string $category = 'custom';

    #[Groups(['flag:read', 'flag:write'])]
    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $description = null;

    #[Groups(['flag:read', 'flag:write'])]
    #[ORM\Column(type: 'string', length: 7, nullable: true)]
    #[Assert\Length(max: 7)]
    protected ?string $color = '#0dcaf0';

    #[Groups(['flag:read', 'flag:write'])]
    #[ORM\Column(type: 'string', length: 50, nullable: true)]
    #[Assert\Length(max: 50)]
    protected ?string $icon = 'bi-flag';

    #[Groups(['flag:read', 'flag:write'])]
    #[ORM\Column(type: 'string', length: 50)]
    #[Assert\Length(max: 50)]
    protected string $entityType;

    #[Groups(['flag:read', 'flag:write'])]
    #[ORM\Column(type: 'uuid')]
    protected string $entityId;

    #[Groups(['flag:read', 'flag:write'])]
    #[ORM\Column(type: 'integer')]
    #[Assert\Range(max: 5, min: 1)]
    protected int $priority = 2;

    #[Groups(['flag:read', 'flag:write'])]
    #[ORM\Column(type: 'integer')]
    protected int $displayOrder = 0;

    #[Groups(['flag:read', 'flag:write'])]
    #[ORM\Column(type: 'boolean')]
    protected bool $active = true;

    #[Groups(['flag:read', 'flag:write'])]
    #[ORM\Column(name: 'system_prop', type: 'boolean')]
    protected bool $system = false;

    #[Groups(['flag:read', 'flag:write'])]
    #[ORM\Column(type: 'datetime_immutable', nullable: true)]
    protected ?\DateTimeImmutable $dueDate = null;


    public function __construct()
    {
        parent::__construct();
    }

    public function getOrganization(): Organization
    {
        return $this->organization;
    }

    public function setOrganization(Organization $organization): self
    {
        $this->organization = $organization;
        return $this;
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getCategory(): string    {
        return $this->category;
    }

    public function setCategory(string $category): self
    {
        $this->category = $category;
        return $this;
    }

    public function getDescription(): ?string    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    public function getColor(): ?string    {
        return $this->color;
    }

    public function setColor(?string $color): self
    {
        $this->color = $color;
        return $this;
    }

    public function getIcon(): ?string    {
        return $this->icon;
    }

    public function setIcon(?string $icon): self
    {
        $this->icon = $icon;
        return $this;
    }

    public function getEntityType(): string    {
        return $this->entityType;
    }

    public function setEntityType(string $entityType): self
    {
        $this->entityType = $entityType;
        return $this;
    }

    public function getEntityId(): string    {
        return $this->entityId;
    }

    public function setEntityId(string $entityId): self
    {
        $this->entityId = $entityId;
        return $this;
    }

    public function getPriority(): int    {
        return $this->priority;
    }

    public function setPriority(int $priority): self
    {
        $this->priority = $priority;
        return $this;
    }

    public function getDisplayOrder(): int    {
        return $this->displayOrder;
    }

    public function setDisplayOrder(int $displayOrder): self
    {
        $this->displayOrder = $displayOrder;
        return $this;
    }

    public function getActive(): bool    {
        return $this->active;
    }

    public function setActive(bool $active): self
    {
        $this->active = $active;
        return $this;
    }

    public function isActive(): bool
    {
        return $this->active === true;
    }

    public function getSystem(): bool    {
        return $this->system;
    }

    public function setSystem(bool $system): self
    {
        $this->system = $system;
        return $this;
    }

    public function isSystem(): bool
    {
        return $this->system === true;
    }

    public function getDueDate(): ?\DateTimeImmutable    {
        return $this->dueDate;
    }

    public function setDueDate(?\DateTimeImmutable $dueDate): self
    {
        $this->dueDate = $dueDate;
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? ($this->getId()?->toRfc4122() ?? '');
    }
}
