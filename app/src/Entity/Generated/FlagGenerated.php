<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use App\Entity\Trait\OrganizationTrait;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
                                                use App\Entity\User;
use App\Entity\Contact;
use App\Entity\Company;

/**
 * Flag Entity (Generated Base Class)
 *
 * 
 *
 * This class is ALWAYS regenerated from CSV. DO NOT edit this file.
 * Add custom logic to Flag.php instead.
 *
 * @generated by Luminai Code Generator
 * @see /config/EntityNew.csv and /config/PropertyNew.csv
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class FlagGenerated extends EntityBase
{
    use OrganizationTrait;

    #[ORM\Column(type: 'string')]
    #[Assert\NotBlank]
    #[Assert\Length(max: 255)]
    #[Groups(['flag:read', 'flag:write'])]
    protected string $name;

    #[ORM\Column(type: 'integer', nullable: true)]
    #[Groups(['flag:read', 'flag:write'])]
    protected ?int $sentiment = null;

    #[ORM\ManyToOne(targetEntity: User::class, inversedBy: 'flags')]
    #[Groups(['flag:read', 'flag:write'])]
    protected ?User $user = null;

    #[ORM\ManyToOne(targetEntity: Contact::class, inversedBy: 'flags')]
    #[Groups(['flag:read', 'flag:write'])]
    protected ?Contact $contact = null;

    #[ORM\ManyToOne(targetEntity: Company::class, inversedBy: 'flags')]
    #[Groups(['flag:read', 'flag:write'])]
    protected ?Company $company = null;

    #[ORM\Column(type: 'string', nullable: true)]
    #[Assert\Length(max: 255)]
    #[Groups(['flag:read', 'flag:write'])]
    protected ?string $color = null;

    #[ORM\Column(type: 'string', nullable: true)]
    #[Assert\Length(max: 255)]
    #[Groups(['flag:read', 'flag:write'])]
    protected ?string $icon = null;


    public function __construct()
    {
        parent::__construct();
    }

    public function getName(): string
    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    
    public function getSentiment(): ?int
    {
        return $this->sentiment;
    }

    public function setSentiment(?int $sentiment): self
    {
        $this->sentiment = $sentiment;
        return $this;
    }

    
    public function getUser(): ?User
    {
        return $this->user;
    }

    public function setUser(?User $user): self
    {
        $this->user = $user;
        return $this;
    }

    public function getContact(): ?Contact
    {
        return $this->contact;
    }

    public function setContact(?Contact $contact): self
    {
        $this->contact = $contact;
        return $this;
    }

    public function getCompany(): ?Company
    {
        return $this->company;
    }

    public function setCompany(?Company $company): self
    {
        $this->company = $company;
        return $this;
    }

    public function getColor(): ?string
    {
        return $this->color;
    }

    public function setColor(?string $color): self
    {
        $this->color = $color;
        return $this;
    }

    
    public function getIcon(): ?string
    {
        return $this->icon;
    }

    public function setIcon(?string $icon): self
    {
        $this->icon = $icon;
        return $this;
    }

    

    public function __toString(): string
    {
        return $this->name ?? '';
    }
}
