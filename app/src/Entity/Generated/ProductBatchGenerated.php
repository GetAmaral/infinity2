<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use App\Entity\Trait\OrganizationTrait;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
                use App\Entity\Product;

/**
 * ProductBatch Entity (Generated Base Class)
 *
 * 
 *
 * This class is ALWAYS regenerated from CSV. DO NOT edit this file.
 * Add custom logic to ProductBatch.php instead.
 *
 * @generated by Luminai Code Generator
 * @see /config/EntityNew.csv and /config/PropertyNew.csv
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class ProductBatchGenerated extends EntityBase
{
    use OrganizationTrait;

    #[ORM\Column(type: 'string')]
    #[Assert\NotBlank]
    #[Assert\Length(max: 255)]
    #[Groups(['productbatch:read', 'productbatch:write'])]
    protected string $name;

    #[ORM\ManyToOne(targetEntity: Product::class, inversedBy: 'batches')]
    #[Groups(['productbatch:read', 'productbatch:write'])]
    protected ?Product $product = null;

    #[ORM\Column(type: 'float', nullable: true)]
    #[Groups(['productbatch:read', 'productbatch:write'])]
    protected ?float $listPrice = null;

    #[ORM\Column(type: 'float', nullable: true)]
    #[Groups(['productbatch:read', 'productbatch:write'])]
    protected ?float $costPrice = null;

    #[ORM\Column(type: 'float', nullable: true)]
    #[Groups(['productbatch:read', 'productbatch:write'])]
    protected ?float $minimumPrice = null;

    #[ORM\Column(type: 'float', nullable: true)]
    #[Groups(['productbatch:read', 'productbatch:write'])]
    protected ?float $maximumDiscount = null;

    #[ORM\Column(type: 'float', nullable: true)]
    #[Groups(['productbatch:read', 'productbatch:write'])]
    protected ?float $discountAmount = null;

    #[ORM\Column(type: 'float', nullable: true)]
    #[Groups(['productbatch:read', 'productbatch:write'])]
    protected ?float $discountPercentage = null;

    #[ORM\Column(type: 'float', nullable: true)]
    #[Groups(['productbatch:read', 'productbatch:write'])]
    protected ?float $commissionRate = null;

    #[ORM\Column(type: 'float', nullable: true)]
    #[Groups(['productbatch:read', 'productbatch:write'])]
    protected ?float $commissionAmount = null;

    #[ORM\Column(type: 'string', nullable: true)]
    #[Assert\Length(max: 255)]
    #[Groups(['productbatch:read', 'productbatch:write'])]
    protected ?string $currency = null;

    #[ORM\Column(type: 'float', nullable: true)]
    #[Groups(['productbatch:read', 'productbatch:write'])]
    protected ?float $exchangeRate = null;

    #[ORM\Column(type: 'float', nullable: true)]
    #[Groups(['productbatch:read', 'productbatch:write'])]
    protected ?float $marginPercentage = null;

    #[ORM\Column(type: 'integer', nullable: true)]
    #[Groups(['productbatch:read', 'productbatch:write'])]
    protected ?int $stockQuantity = null;

    #[ORM\Column(type: 'integer', nullable: true)]
    #[Groups(['productbatch:read', 'productbatch:write'])]
    protected ?int $reservedQuantity = null;

    #[ORM\Column(type: 'integer', nullable: true)]
    #[Groups(['productbatch:read', 'productbatch:write'])]
    protected ?int $availableQuantity = null;

    #[ORM\Column(type: 'date', nullable: true)]
    #[Groups(['productbatch:read', 'productbatch:write'])]
    protected ?\DateTimeInterface $expirationDate = null;


    public function __construct()
    {
        parent::__construct();
    }

    public function getName(): string
    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    
    public function getProduct(): ?Product
    {
        return $this->product;
    }

    public function setProduct(?Product $product): self
    {
        $this->product = $product;
        return $this;
    }

    public function getListprice(): ?float
    {
        return $this->listPrice;
    }

    public function setListprice(?float $listPrice): self
    {
        $this->listPrice = $listPrice;
        return $this;
    }

    
    public function getCostprice(): ?float
    {
        return $this->costPrice;
    }

    public function setCostprice(?float $costPrice): self
    {
        $this->costPrice = $costPrice;
        return $this;
    }

    
    public function getMinimumprice(): ?float
    {
        return $this->minimumPrice;
    }

    public function setMinimumprice(?float $minimumPrice): self
    {
        $this->minimumPrice = $minimumPrice;
        return $this;
    }

    
    public function getMaximumdiscount(): ?float
    {
        return $this->maximumDiscount;
    }

    public function setMaximumdiscount(?float $maximumDiscount): self
    {
        $this->maximumDiscount = $maximumDiscount;
        return $this;
    }

    
    public function getDiscountamount(): ?float
    {
        return $this->discountAmount;
    }

    public function setDiscountamount(?float $discountAmount): self
    {
        $this->discountAmount = $discountAmount;
        return $this;
    }

    
    public function getDiscountpercentage(): ?float
    {
        return $this->discountPercentage;
    }

    public function setDiscountpercentage(?float $discountPercentage): self
    {
        $this->discountPercentage = $discountPercentage;
        return $this;
    }

    
    public function getCommissionrate(): ?float
    {
        return $this->commissionRate;
    }

    public function setCommissionrate(?float $commissionRate): self
    {
        $this->commissionRate = $commissionRate;
        return $this;
    }

    
    public function getCommissionamount(): ?float
    {
        return $this->commissionAmount;
    }

    public function setCommissionamount(?float $commissionAmount): self
    {
        $this->commissionAmount = $commissionAmount;
        return $this;
    }

    
    public function getCurrency(): ?string
    {
        return $this->currency;
    }

    public function setCurrency(?string $currency): self
    {
        $this->currency = $currency;
        return $this;
    }

    
    public function getExchangerate(): ?float
    {
        return $this->exchangeRate;
    }

    public function setExchangerate(?float $exchangeRate): self
    {
        $this->exchangeRate = $exchangeRate;
        return $this;
    }

    
    public function getMarginpercentage(): ?float
    {
        return $this->marginPercentage;
    }

    public function setMarginpercentage(?float $marginPercentage): self
    {
        $this->marginPercentage = $marginPercentage;
        return $this;
    }

    
    public function getStockquantity(): ?int
    {
        return $this->stockQuantity;
    }

    public function setStockquantity(?int $stockQuantity): self
    {
        $this->stockQuantity = $stockQuantity;
        return $this;
    }

    
    public function getReservedquantity(): ?int
    {
        return $this->reservedQuantity;
    }

    public function setReservedquantity(?int $reservedQuantity): self
    {
        $this->reservedQuantity = $reservedQuantity;
        return $this;
    }

    
    public function getAvailablequantity(): ?int
    {
        return $this->availableQuantity;
    }

    public function setAvailablequantity(?int $availableQuantity): self
    {
        $this->availableQuantity = $availableQuantity;
        return $this;
    }

    
    public function getExpirationdate(): ?\DateTimeInterface
    {
        return $this->expirationDate;
    }

    public function setExpirationdate(?\DateTimeInterface $expirationDate): self
    {
        $this->expirationDate = $expirationDate;
        return $this;
    }

    

    public function __toString(): string
    {
        return $this->name ?? '';
    }
}
