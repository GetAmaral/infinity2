<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use App\Entity\Trait\OrganizationTrait;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
                use App\Entity\Deal;

/**
 * LostReason Entity (Generated Base Class)
 *
 * 
 *
 * This class is ALWAYS regenerated from CSV. DO NOT edit this file.
 * Add custom logic to LostReason.php instead.
 *
 * @generated by Luminai Code Generator
 * @see /config/EntityNew.csv and /config/PropertyNew.csv
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class LostReasonGenerated extends EntityBase
{
    use OrganizationTrait;

    #[ORM\Column(type: 'string')]
    #[Assert\NotBlank]
    #[Assert\Length(max: 255)]
    #[Groups(['lostreason:read', 'lostreason:write'])]
    protected string $name;

    #[ORM\Column(type: 'string', nullable: true)]
    #[Assert\Length(max: 255)]
    #[Groups(['lostreason:read', 'lostreason:write'])]
    protected ?string $description = null;

    #[ORM\OneToMany(targetEntity: Deal::class, mappedBy: 'lostReason', fetch: 'EXTRA_LAZY')]
    #[Groups(['lostreason:read', 'lostreason:write'])]
    protected Collection $deals;


    public function __construct()
    {
        parent::__construct();
        $this->deals = new ArrayCollection();
    }

    public function getName(): string
    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    
    public function getDescription(): ?string
    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    
    /**
     * @return Collection<int, Deal>
     */
    public function getDeals(): Collection
    {
        return $this->deals;
    }

    public function addDeal(Deal $deal): self
    {
        if (!$this->deals->contains($deal)) {
            $this->deals->add($deal);
        }
        return $this;
    }

    public function removeDeal(Deal $deal): self
    {
        if ($this->deals->removeElement($deal)) {
        }
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? '';
    }
}
