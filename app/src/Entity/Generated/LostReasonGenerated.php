<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
use App\Entity\Organization;
use App\Entity\Deal;

/**
 * LostReason Entity (Generated Base Class)
 *
 * Tracks and categorizes reasons for lost deals with advanced analytics capabilities. Supports win-loss analysis, competitor tracking, and actionable insights to improve win rates. Implements CRM best practices for structured data collection and longitudinal analysis. *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to LostReason.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class LostReasonGenerated extends EntityBase
{
    #[Groups(['lostreason:read', 'lostreason:write'])]
    #[ORM\ManyToOne(targetEntity: Organization::class, inversedBy: 'lostReasons')]
    #[ORM\JoinColumn(nullable: false)]
    protected Organization $organization;

    #[Groups(['lostreason:read', 'lostreason:write'])]
    #[ORM\Column(type: 'string', length: 255)]
    protected string $name;

    #[Groups(['lostreason:read', 'lostreason:write'])]
    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $description = null;

    #[Groups(['lostreason:read', 'lostreason:write'])]
    #[ORM\Column(type: 'string', length: 255)]
    protected string $category;

    #[Groups(['lostreason:read', 'lostreason:write'])]
    #[ORM\OneToMany(targetEntity: Deal::class, mappedBy: 'lostReason', fetch: 'LAZY')]
    protected Collection $deals;

    #[Groups(['lostreason:read', 'lostreason:write'])]
    #[ORM\Column(type: 'boolean')]
    protected bool $active = true;

    #[Groups(['lostreason:read', 'lostreason:write'])]
    #[ORM\Column(name: 'default_prop', type: 'boolean')]
    protected bool $default = false;

    #[Groups(['lostreason:read', 'lostreason:write'])]
    #[ORM\Column(type: 'integer')]
    protected int $sortOrder = 0;

    #[Groups(['lostreason:read', 'lostreason:write'])]
    #[ORM\Column(type: 'boolean')]
    protected bool $requiresNotes = false;

    #[Groups(['lostreason:read', 'lostreason:write'])]
    #[ORM\Column(type: 'string', length: 7, nullable: true)]
    protected ?string $color = '#0dcaf0';

    #[Groups(['lostreason:read', 'lostreason:write'])]
    #[ORM\Column(type: 'boolean')]
    protected bool $critical = false;

    #[Groups(['lostreason:read', 'lostreason:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $impact = null;

    #[Groups(['lostreason:read', 'lostreason:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $winBackPotential = null;

    #[Groups(['lostreason:read', 'lostreason:write'])]
    #[ORM\Column(type: 'boolean')]
    protected bool $actionable = true;

    #[Groups(['lostreason:read', 'lostreason:write'])]
    #[ORM\Column(type: 'boolean')]
    protected bool $internal = false;

    #[Groups(['lostreason:read', 'lostreason:write'])]
    #[ORM\Column(type: 'string', length: 100, nullable: true)]
    protected ?string $competitorName = null;

    #[Groups(['lostreason:read', 'lostreason:write'])]
    #[ORM\Column(type: 'text', length: 500, nullable: true)]
    protected ?string $automationRule = null;


    public function __construct()
    {
        parent::__construct();
        $this->deals = new ArrayCollection();
    }

    public function getOrganization(): Organization
    {
        return $this->organization;
    }

    public function setOrganization(Organization $organization): self
    {
        $this->organization = $organization;
        return $this;
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getDescription(): ?string    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    public function getCategory(): string    {
        return $this->category;
    }

    public function setCategory(string $category): self
    {
        $this->category = $category;
        return $this;
    }

    /**
     * @return Collection<int, Deal>
     */
    public function getDeals(): Collection
    {
        return $this->deals;
    }

    public function addDeal(Deal $deal): self
    {
        if (!$this->deals->contains($deal)) {
            $this->deals->add($deal);
            $deal->setLostReason($this);
        }
        return $this;
    }

    public function removeDeal(Deal $deal): self
    {
        if ($this->deals->removeElement($deal)) {
            if ($deal->getLostReason() === $this) {
                $deal->setLostReason(null);
            }
        }
        return $this;
    }

    public function getActive(): bool    {
        return $this->active;
    }

    public function setActive(bool $active): self
    {
        $this->active = $active;
        return $this;
    }

    public function isActive(): bool
    {
        return $this->active === true;
    }

    public function getDefault(): bool    {
        return $this->default;
    }

    public function setDefault(bool $default): self
    {
        $this->default = $default;
        return $this;
    }

    public function isDefault(): bool
    {
        return $this->default === true;
    }

    public function getSortOrder(): int    {
        return $this->sortOrder;
    }

    public function setSortOrder(int $sortOrder): self
    {
        $this->sortOrder = $sortOrder;
        return $this;
    }

    public function getRequiresNotes(): bool    {
        return $this->requiresNotes;
    }

    public function setRequiresNotes(bool $requiresNotes): self
    {
        $this->requiresNotes = $requiresNotes;
        return $this;
    }

    public function isRequiresNotes(): bool
    {
        return $this->requiresNotes === true;
    }

    public function getColor(): ?string    {
        return $this->color;
    }

    public function setColor(?string $color): self
    {
        $this->color = $color;
        return $this;
    }

    public function getCritical(): bool    {
        return $this->critical;
    }

    public function setCritical(bool $critical): self
    {
        $this->critical = $critical;
        return $this;
    }

    public function isCritical(): bool
    {
        return $this->critical === true;
    }

    public function getImpact(): ?string    {
        return $this->impact;
    }

    public function setImpact(?string $impact): self
    {
        $this->impact = $impact;
        return $this;
    }

    public function getWinBackPotential(): ?string    {
        return $this->winBackPotential;
    }

    public function setWinBackPotential(?string $winBackPotential): self
    {
        $this->winBackPotential = $winBackPotential;
        return $this;
    }

    public function getActionable(): bool    {
        return $this->actionable;
    }

    public function setActionable(bool $actionable): self
    {
        $this->actionable = $actionable;
        return $this;
    }

    public function isActionable(): bool
    {
        return $this->actionable === true;
    }

    public function getInternal(): bool    {
        return $this->internal;
    }

    public function setInternal(bool $internal): self
    {
        $this->internal = $internal;
        return $this;
    }

    public function isInternal(): bool
    {
        return $this->internal === true;
    }

    public function getCompetitorName(): ?string    {
        return $this->competitorName;
    }

    public function setCompetitorName(?string $competitorName): self
    {
        $this->competitorName = $competitorName;
        return $this;
    }

    public function getAutomationRule(): ?string    {
        return $this->automationRule;
    }

    public function setAutomationRule(?string $automationRule): self
    {
        $this->automationRule = $automationRule;
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? ($this->getId()?->toRfc4122() ?? '');
    }
}
