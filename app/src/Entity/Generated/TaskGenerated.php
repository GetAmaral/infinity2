<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use App\Entity\Trait\OrganizationTrait;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
                                                                                use App\Entity\PipelineStage;
use App\Entity\Deal;
use App\Entity\Contact;
use App\Entity\User;
use App\Entity\TaskType;

/**
 * Task Entity (Generated Base Class)
 *
 * 
 *
 * This class is ALWAYS regenerated from CSV. DO NOT edit this file.
 * Add custom logic to Task.php instead.
 *
 * @generated by Luminai Code Generator
 * @see /config/EntityNew.csv and /config/PropertyNew.csv
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class TaskGenerated extends EntityBase
{
    use OrganizationTrait;

    #[ORM\Column(type: 'string')]
    #[Assert\NotBlank]
    #[Assert\Length(max: 255)]
    #[Groups(['task:read', 'task:write'])]
    protected string $name;

    #[ORM\ManyToOne(targetEntity: PipelineStage::class, inversedBy: 'tasks')]
    #[Groups(['task:read', 'task:write'])]
    protected ?PipelineStage $pipelineStage = null;

    #[ORM\ManyToOne(targetEntity: Deal::class, inversedBy: 'tasks')]
    #[Groups(['task:read', 'task:write'])]
    protected ?Deal $deal = null;

    #[ORM\ManyToOne(targetEntity: Contact::class, inversedBy: 'tasks')]
    #[Groups(['task:read', 'task:write'])]
    protected ?Contact $contact = null;

    #[ORM\ManyToOne(targetEntity: User::class, inversedBy: 'tasks')]
    #[Groups(['task:read', 'task:write'])]
    protected ?User $user = null;

    #[ORM\Column(type: 'text', nullable: true)]
    #[Groups(['task:read', 'task:write'])]
    protected ?string $command = null;

    #[ORM\Column(type: 'float', nullable: true)]
    #[Groups(['task:read', 'task:write'])]
    protected ?float $periodicityInterval = null;

    #[ORM\Column(type: 'integer', nullable: true)]
    #[Groups(['task:read', 'task:write'])]
    protected ?int $periodicityTimeframe = null;

    #[ORM\Column(type: 'boolean', nullable: true)]
    #[Groups(['task:read', 'task:write'])]
    protected ?bool $active = null;

    #[ORM\ManyToOne(targetEntity: TaskType::class, inversedBy: 'tasks')]
    #[Groups(['task:read', 'task:write'])]
    protected ?TaskType $type = null;

    #[ORM\Column(type: 'text', nullable: true)]
    #[Groups(['task:read', 'task:write'])]
    protected ?string $description = null;

    #[ORM\Column(type: 'datetime', nullable: true)]
    #[Groups(['task:read', 'task:write'])]
    protected ?\DateTimeInterface $scheduledDate = null;

    #[ORM\Column(type: 'datetime', nullable: true)]
    #[Groups(['task:read', 'task:write'])]
    protected ?\DateTimeInterface $completedDate = null;

    #[ORM\Column(type: 'integer', nullable: true)]
    #[Groups(['task:read', 'task:write'])]
    protected ?int $taskStatus = null;

    #[ORM\Column(type: 'integer', nullable: true)]
    #[Groups(['task:read', 'task:write'])]
    protected ?int $priority = null;

    #[ORM\Column(type: 'integer', nullable: true)]
    #[Groups(['task:read', 'task:write'])]
    protected ?int $durationMinutes = null;

    #[ORM\Column(type: 'string', nullable: true)]
    #[Assert\Length(max: 255)]
    #[Groups(['task:read', 'task:write'])]
    protected ?string $location = null;


    public function __construct()
    {
        parent::__construct();
    }

    public function getName(): string
    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    
    public function getPipelinestage(): ?PipelineStage
    {
        return $this->pipelineStage;
    }

    public function setPipelinestage(?PipelineStage $pipelineStage): self
    {
        $this->pipelineStage = $pipelineStage;
        return $this;
    }

    public function getDeal(): ?Deal
    {
        return $this->deal;
    }

    public function setDeal(?Deal $deal): self
    {
        $this->deal = $deal;
        return $this;
    }

    public function getContact(): ?Contact
    {
        return $this->contact;
    }

    public function setContact(?Contact $contact): self
    {
        $this->contact = $contact;
        return $this;
    }

    public function getUser(): ?User
    {
        return $this->user;
    }

    public function setUser(?User $user): self
    {
        $this->user = $user;
        return $this;
    }

    public function getCommand(): ?string
    {
        return $this->command;
    }

    public function setCommand(?string $command): self
    {
        $this->command = $command;
        return $this;
    }

    
    public function getPeriodicityinterval(): ?float
    {
        return $this->periodicityInterval;
    }

    public function setPeriodicityinterval(?float $periodicityInterval): self
    {
        $this->periodicityInterval = $periodicityInterval;
        return $this;
    }

    
    public function getPeriodicitytimeframe(): ?int
    {
        return $this->periodicityTimeframe;
    }

    public function setPeriodicitytimeframe(?int $periodicityTimeframe): self
    {
        $this->periodicityTimeframe = $periodicityTimeframe;
        return $this;
    }

    
    public function getActive(): ?bool
    {
        return $this->active;
    }

    public function setActive(?bool $active): self
    {
        $this->active = $active;
        return $this;
    }

    
    public function getType(): ?TaskType
    {
        return $this->type;
    }

    public function setType(?TaskType $type): self
    {
        $this->type = $type;
        return $this;
    }

    public function getDescription(): ?string
    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    
    public function getScheduleddate(): ?\DateTimeInterface
    {
        return $this->scheduledDate;
    }

    public function setScheduleddate(?\DateTimeInterface $scheduledDate): self
    {
        $this->scheduledDate = $scheduledDate;
        return $this;
    }

    
    public function getCompleteddate(): ?\DateTimeInterface
    {
        return $this->completedDate;
    }

    public function setCompleteddate(?\DateTimeInterface $completedDate): self
    {
        $this->completedDate = $completedDate;
        return $this;
    }

    
    public function getTaskstatus(): ?int
    {
        return $this->taskStatus;
    }

    public function setTaskstatus(?int $taskStatus): self
    {
        $this->taskStatus = $taskStatus;
        return $this;
    }

    
    public function getPriority(): ?int
    {
        return $this->priority;
    }

    public function setPriority(?int $priority): self
    {
        $this->priority = $priority;
        return $this;
    }

    
    public function getDurationminutes(): ?int
    {
        return $this->durationMinutes;
    }

    public function setDurationminutes(?int $durationMinutes): self
    {
        $this->durationMinutes = $durationMinutes;
        return $this;
    }

    
    public function getLocation(): ?string
    {
        return $this->location;
    }

    public function setLocation(?string $location): self
    {
        $this->location = $location;
        return $this;
    }

    

    public function __toString(): string
    {
        return $this->name ?? '';
    }
}
