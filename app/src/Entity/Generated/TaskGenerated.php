<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
use App\Entity\Organization;
use App\Entity\Contact;
use App\Entity\Deal;
use App\Entity\PipelineStage;
use App\Entity\Company;
use App\Entity\TaskType;
use App\Entity\User;

/**
 * Task Entity (Generated Base Class)
 *
 * Tasks and to-dos for productivity management *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to Task.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class TaskGenerated extends EntityBase
{
    #[Groups(['task:read', 'task:write'])]
    #[ORM\ManyToOne(targetEntity: Organization::class, inversedBy: 'tasks')]
    #[ORM\JoinColumn(nullable: false)]
    protected Organization $organization;

    #[Groups(['task:read', 'task:write'])]
    #[ORM\Column(type: 'string', length: 255)]
    #[Assert\Length(max: 255)]
    protected string $name;

    #[Groups(['task:read', 'task:write'])]
    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $description = null;

    #[Groups(['task:read', 'task:write'])]
    #[ORM\Column(type: 'datetime', nullable: true)]
    protected ?\DateTimeImmutable $startDate = null;

    #[Groups(['task:read', 'task:write'])]
    #[ORM\Column(type: 'integer', nullable: true)]
    #[Assert\Range(max: 150, min: 0)]
    protected ?int $completionPercentage = 0;

    #[Groups(['task:read', 'task:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $category = null;

    #[Groups(['task:read', 'task:write'])]
    #[ORM\Column(type: 'boolean')]
    protected bool $notificationSent = false;

    #[Groups(['task:read', 'task:write'])]
    #[ORM\Column(type: 'boolean', nullable: true)]
    protected ?bool $archived = null;

    #[Groups(['task:read', 'task:write'])]
    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $command = null;

    #[Groups(['task:read', 'task:write'])]
    #[ORM\Column(type: 'datetime', nullable: true)]
    protected ?\DateTimeImmutable $completedDate = null;

    #[Groups(['task:read', 'task:write'])]
    #[ORM\ManyToOne(targetEntity: Contact::class, inversedBy: 'tasks')]
    protected ?Contact $contact = null;

    #[Groups(['task:read', 'task:write'])]
    #[ORM\ManyToOne(targetEntity: Deal::class, inversedBy: 'tasks')]
    protected ?Deal $deal = null;

    #[Groups(['task:read', 'task:write'])]
    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $durationMinutes = null;

    #[Groups(['task:read', 'task:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    #[Assert\Length(max: 255)]
    protected ?string $location = null;

    #[Groups(['task:read', 'task:write'])]
    #[ORM\ManyToOne(targetEntity: PipelineStage::class, inversedBy: 'tasks')]
    protected ?PipelineStage $pipelineStage = null;

    #[Groups(['task:read', 'task:write'])]
    #[ORM\Column(type: 'integer', nullable: true)]
    #[Assert\Range(max: 5, min: 1)]
    protected ?int $priority = null;

    #[Groups(['task:read', 'task:write'])]
    #[ORM\Column(type: 'datetime', nullable: true)]
    protected ?\DateTimeImmutable $scheduledDate = null;

    #[Groups(['task:read', 'task:write'])]
    #[ORM\Column(type: 'boolean')]
    protected bool $completed = false;

    #[Groups(['task:read', 'task:write'])]
    #[ORM\ManyToOne(targetEntity: Company::class)]
    protected ?Company $company = null;

    #[Groups(['task:read', 'task:write'])]
    #[ORM\Column(type: 'datetime', nullable: true)]
    protected ?\DateTimeImmutable $reminderDate = null;

    #[Groups(['task:read', 'task:write'])]
    #[ORM\Column(type: 'boolean')]
    protected bool $reminder = false;

    #[Groups(['task:read', 'task:write'])]
    #[ORM\Column(type: 'boolean')]
    protected bool $recurring = false;

    #[Groups(['task:read', 'task:write'])]
    #[ORM\Column(type: 'string', length: 500, nullable: true)]
    #[Assert\Length(max: 500)]
    protected ?string $recurrenceRule = null;

    #[Groups(['task:read', 'task:write'])]
    #[ORM\Column(type: 'boolean')]
    protected bool $overdue = false;

    #[Groups(['task:read', 'task:write'])]
    #[ORM\Column(type: 'string', length: 100, nullable: true)]
    #[Assert\Length(max: 100)]
    protected ?string $queue = null;

    #[Groups(['task:read', 'task:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    #[Assert\Length(max: 255)]
    protected ?string $emailSubject = null;

    #[Groups(['task:read', 'task:write'])]
    #[ORM\Column(type: 'string', length: 20)]
    #[Assert\Length(max: 20)]
    protected string $taskStatus;

    #[Groups(['task:read', 'task:write'])]
    #[ORM\Column(type: 'string', length: 50, nullable: true)]
    #[Assert\Length(max: 50)]
    protected ?string $phoneNumber = null;

    #[Groups(['task:read', 'task:write'])]
    #[ORM\Column(type: 'string', length: 500, nullable: true)]
    #[Assert\Length(max: 500)]
    protected ?string $meetingUrl = null;

    #[Groups(['task:read', 'task:write'])]
    #[ORM\Column(type: 'string', length: 100, nullable: true)]
    #[Assert\Length(max: 100)]
    protected ?string $outcome = null;

    #[Groups(['task:read', 'task:write'])]
    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $notes = null;

    #[Groups(['task:read', 'task:write'])]
    #[ORM\ManyToOne(targetEntity: TaskType::class, inversedBy: 'tasks')]
    protected ?TaskType $type = null;

    #[Groups(['task:read', 'task:write'])]
    #[ORM\ManyToOne(targetEntity: User::class, inversedBy: 'tasks')]
    protected ?User $user = null;


    public function __construct()
    {
        parent::__construct();
    }

    public function getOrganization(): Organization
    {
        return $this->organization;
    }

    public function setOrganization(Organization $organization): self
    {
        $this->organization = $organization;
        return $this;
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getDescription(): ?string    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    public function getStartDate(): ?\DateTimeImmutable    {
        return $this->startDate;
    }

    public function setStartDate(?\DateTimeImmutable $startDate): self
    {
        $this->startDate = $startDate;
        return $this;
    }

    public function getCompletionPercentage(): ?int    {
        return $this->completionPercentage;
    }

    public function setCompletionPercentage(?int $completionPercentage): self
    {
        $this->completionPercentage = $completionPercentage;
        return $this;
    }

    public function getCategory(): ?string    {
        return $this->category;
    }

    public function setCategory(?string $category): self
    {
        $this->category = $category;
        return $this;
    }

    public function getNotificationSent(): bool    {
        return $this->notificationSent;
    }

    public function setNotificationSent(bool $notificationSent): self
    {
        $this->notificationSent = $notificationSent;
        return $this;
    }

    public function isNotificationSent(): bool
    {
        return $this->notificationSent === true;
    }

    public function getArchived(): ?bool    {
        return $this->archived;
    }

    public function setArchived(?bool $archived): self
    {
        $this->archived = $archived;
        return $this;
    }

    public function isArchived(): bool
    {
        return $this->archived === true;
    }

    public function getCommand(): ?string    {
        return $this->command;
    }

    public function setCommand(?string $command): self
    {
        $this->command = $command;
        return $this;
    }

    public function getCompletedDate(): ?\DateTimeImmutable    {
        return $this->completedDate;
    }

    public function setCompletedDate(?\DateTimeImmutable $completedDate): self
    {
        $this->completedDate = $completedDate;
        return $this;
    }

    public function getContact(): ?Contact
    {
        return $this->contact;
    }

    public function setContact(?Contact $contact): self
    {
        $this->contact = $contact;
        return $this;
    }

    public function getDeal(): ?Deal
    {
        return $this->deal;
    }

    public function setDeal(?Deal $deal): self
    {
        $this->deal = $deal;
        return $this;
    }

    public function getDurationMinutes(): ?int    {
        return $this->durationMinutes;
    }

    public function setDurationMinutes(?int $durationMinutes): self
    {
        $this->durationMinutes = $durationMinutes;
        return $this;
    }

    public function getLocation(): ?string    {
        return $this->location;
    }

    public function setLocation(?string $location): self
    {
        $this->location = $location;
        return $this;
    }

    public function getPipelineStage(): ?PipelineStage
    {
        return $this->pipelineStage;
    }

    public function setPipelineStage(?PipelineStage $pipelineStage): self
    {
        $this->pipelineStage = $pipelineStage;
        return $this;
    }

    public function getPriority(): ?int    {
        return $this->priority;
    }

    public function setPriority(?int $priority): self
    {
        $this->priority = $priority;
        return $this;
    }

    public function getScheduledDate(): ?\DateTimeImmutable    {
        return $this->scheduledDate;
    }

    public function setScheduledDate(?\DateTimeImmutable $scheduledDate): self
    {
        $this->scheduledDate = $scheduledDate;
        return $this;
    }

    public function getCompleted(): bool    {
        return $this->completed;
    }

    public function setCompleted(bool $completed): self
    {
        $this->completed = $completed;
        return $this;
    }

    public function isCompleted(): bool
    {
        return $this->completed === true;
    }

    public function getCompany(): ?Company
    {
        return $this->company;
    }

    public function setCompany(?Company $company): self
    {
        $this->company = $company;
        return $this;
    }

    public function getReminderDate(): ?\DateTimeImmutable    {
        return $this->reminderDate;
    }

    public function setReminderDate(?\DateTimeImmutable $reminderDate): self
    {
        $this->reminderDate = $reminderDate;
        return $this;
    }

    public function getReminder(): bool    {
        return $this->reminder;
    }

    public function setReminder(bool $reminder): self
    {
        $this->reminder = $reminder;
        return $this;
    }

    public function isReminder(): bool
    {
        return $this->reminder === true;
    }

    public function getRecurring(): bool    {
        return $this->recurring;
    }

    public function setRecurring(bool $recurring): self
    {
        $this->recurring = $recurring;
        return $this;
    }

    public function isRecurring(): bool
    {
        return $this->recurring === true;
    }

    public function getRecurrenceRule(): ?string    {
        return $this->recurrenceRule;
    }

    public function setRecurrenceRule(?string $recurrenceRule): self
    {
        $this->recurrenceRule = $recurrenceRule;
        return $this;
    }

    public function getOverdue(): bool    {
        return $this->overdue;
    }

    public function setOverdue(bool $overdue): self
    {
        $this->overdue = $overdue;
        return $this;
    }

    public function isOverdue(): bool
    {
        return $this->overdue === true;
    }

    public function getQueue(): ?string    {
        return $this->queue;
    }

    public function setQueue(?string $queue): self
    {
        $this->queue = $queue;
        return $this;
    }

    public function getEmailSubject(): ?string    {
        return $this->emailSubject;
    }

    public function setEmailSubject(?string $emailSubject): self
    {
        $this->emailSubject = $emailSubject;
        return $this;
    }

    public function getTaskStatus(): string    {
        return $this->taskStatus;
    }

    public function setTaskStatus(string $taskStatus): self
    {
        $this->taskStatus = $taskStatus;
        return $this;
    }

    public function getPhoneNumber(): ?string    {
        return $this->phoneNumber;
    }

    public function setPhoneNumber(?string $phoneNumber): self
    {
        $this->phoneNumber = $phoneNumber;
        return $this;
    }

    public function getMeetingUrl(): ?string    {
        return $this->meetingUrl;
    }

    public function setMeetingUrl(?string $meetingUrl): self
    {
        $this->meetingUrl = $meetingUrl;
        return $this;
    }

    public function getOutcome(): ?string    {
        return $this->outcome;
    }

    public function setOutcome(?string $outcome): self
    {
        $this->outcome = $outcome;
        return $this;
    }

    public function getNotes(): ?string    {
        return $this->notes;
    }

    public function setNotes(?string $notes): self
    {
        $this->notes = $notes;
        return $this;
    }

    public function getType(): ?TaskType
    {
        return $this->type;
    }

    public function setType(?TaskType $type): self
    {
        $this->type = $type;
        return $this;
    }

    public function getUser(): ?User
    {
        return $this->user;
    }

    public function setUser(?User $user): self
    {
        $this->user = $user;
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? ($this->getId()?->toRfc4122() ?? '');
    }
}
