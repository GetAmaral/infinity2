<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use App\Entity\Trait\OrganizationTrait;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
                                                                                                use App\Entity\User;
use App\Entity\CalendarType;
use App\Entity\Event;
use App\Entity\CalendarExternalLink;
use App\Entity\WorkingHour;
use App\Entity\Holiday;

/**
 * Calendar Entity (Generated Base Class)
 *
 * 
 *
 * This class is ALWAYS regenerated from CSV. DO NOT edit this file.
 * Add custom logic to Calendar.php instead.
 *
 * @generated by Luminai Code Generator
 * @see /config/EntityNew.csv and /config/PropertyNew.csv
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class CalendarGenerated extends EntityBase
{
    use OrganizationTrait;

    #[ORM\Column(type: 'string')]
    #[Assert\NotBlank]
    #[Assert\Length(max: 255)]
    #[Groups(['calendar:read', 'calendar:write'])]
    protected string $name;

    #[ORM\ManyToOne(targetEntity: User::class, inversedBy: 'calendars')]
    #[Groups(['calendar:read', 'calendar:write'])]
    protected ?User $user = null;

    #[ORM\Column(type: 'text', nullable: true)]
    #[Groups(['calendar:read', 'calendar:write'])]
    protected ?string $description = null;

    #[ORM\Column(type: 'string', nullable: true)]
    #[Assert\Length(max: 255)]
    #[Groups(['calendar:read', 'calendar:write'])]
    protected ?string $timeZone = null;

    #[ORM\Column(type: 'string', nullable: true)]
    #[Assert\Length(max: 255)]
    #[Groups(['calendar:read', 'calendar:write'])]
    protected ?string $color = null;

    #[ORM\Column(type: 'boolean', nullable: true)]
    #[Groups(['calendar:read', 'calendar:write'])]
    protected ?bool $primary = null;

    #[ORM\Column(type: 'boolean', nullable: true)]
    #[Groups(['calendar:read', 'calendar:write'])]
    protected ?bool $visible = null;

    #[ORM\Column(type: 'string', nullable: true)]
    #[Assert\Length(max: 255)]
    #[Groups(['calendar:read', 'calendar:write'])]
    protected ?string $accessRole = null;

    #[ORM\ManyToOne(targetEntity: CalendarType::class, inversedBy: 'calendars')]
    #[Groups(['calendar:read', 'calendar:write'])]
    protected ?CalendarType $calendarType = null;

    #[ORM\OneToMany(targetEntity: Event::class, mappedBy: 'calendar', fetch: 'EXTRA_LAZY')]
    #[ORM\OrderBy(['name' => 'ASC'])]
    #[Groups(['calendar:read', 'calendar:write'])]
    protected Collection $events;

    #[ORM\ManyToOne(targetEntity: CalendarExternalLink::class, inversedBy: 'calendars')]
    #[Groups(['calendar:read', 'calendar:write'])]
    protected ?CalendarExternalLink $externalLink = null;

    #[ORM\Column(type: 'string', nullable: true)]
    #[Assert\Length(max: 255)]
    #[Groups(['calendar:read', 'calendar:write'])]
    protected ?string $externalApiKey = null;

    #[ORM\OneToMany(targetEntity: WorkingHour::class, mappedBy: 'calendar', fetch: 'LAZY')]
    #[Groups(['calendar:read', 'calendar:write'])]
    protected Collection $workingHours;

    #[ORM\OneToMany(targetEntity: Holiday::class, mappedBy: 'calendar', fetch: 'LAZY')]
    #[ORM\OrderBy(['name' => 'ASC'])]
    #[Groups(['calendar:read', 'calendar:write'])]
    protected Collection $holidays;


    public function __construct()
    {
        parent::__construct();
        $this->events = new ArrayCollection();
        $this->workingHours = new ArrayCollection();
        $this->holidays = new ArrayCollection();
    }

    public function getName(): string
    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    
    public function getUser(): ?User
    {
        return $this->user;
    }

    public function setUser(?User $user): self
    {
        $this->user = $user;
        return $this;
    }

    public function getDescription(): ?string
    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    
    public function getTimezone(): ?string
    {
        return $this->timeZone;
    }

    public function setTimezone(?string $timeZone): self
    {
        $this->timeZone = $timeZone;
        return $this;
    }

    
    public function getColor(): ?string
    {
        return $this->color;
    }

    public function setColor(?string $color): self
    {
        $this->color = $color;
        return $this;
    }

    
    public function getPrimary(): ?bool
    {
        return $this->primary;
    }

    public function setPrimary(?bool $primary): self
    {
        $this->primary = $primary;
        return $this;
    }

    
    public function getVisible(): ?bool
    {
        return $this->visible;
    }

    public function setVisible(?bool $visible): self
    {
        $this->visible = $visible;
        return $this;
    }

    
    public function getAccessrole(): ?string
    {
        return $this->accessRole;
    }

    public function setAccessrole(?string $accessRole): self
    {
        $this->accessRole = $accessRole;
        return $this;
    }

    
    public function getCalendartype(): ?CalendarType
    {
        return $this->calendarType;
    }

    public function setCalendartype(?CalendarType $calendarType): self
    {
        $this->calendarType = $calendarType;
        return $this;
    }

    /**
     * @return Collection<int, Event>
     */
    public function getEvents(): Collection
    {
        return $this->events;
    }

    public function addEvent(Event $event): self
    {
        if (!$this->events->contains($event)) {
            $this->events->add($event);
        }
        return $this;
    }

    public function removeEvent(Event $event): self
    {
        if ($this->events->removeElement($event)) {
        }
        return $this;
    }

    public function getExternallink(): ?CalendarExternalLink
    {
        return $this->externalLink;
    }

    public function setExternallink(?CalendarExternalLink $externalLink): self
    {
        $this->externalLink = $externalLink;
        return $this;
    }

    public function getExternalapikey(): ?string
    {
        return $this->externalApiKey;
    }

    public function setExternalapikey(?string $externalApiKey): self
    {
        $this->externalApiKey = $externalApiKey;
        return $this;
    }

    
    /**
     * @return Collection<int, WorkingHour>
     */
    public function getWorkinghours(): Collection
    {
        return $this->workingHours;
    }

    public function addWorkinghour(WorkingHour $workingHour): self
    {
        if (!$this->workingHours->contains($workingHour)) {
            $this->workingHours->add($workingHour);
        }
        return $this;
    }

    public function removeWorkinghour(WorkingHour $workingHour): self
    {
        if ($this->workingHours->removeElement($workingHour)) {
        }
        return $this;
    }

    /**
     * @return Collection<int, Holiday>
     */
    public function getHolidays(): Collection
    {
        return $this->holidays;
    }

    public function addHoliday(Holiday $holiday): self
    {
        if (!$this->holidays->contains($holiday)) {
            $this->holidays->add($holiday);
        }
        return $this;
    }

    public function removeHoliday(Holiday $holiday): self
    {
        if ($this->holidays->removeElement($holiday)) {
        }
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? '';
    }
}
