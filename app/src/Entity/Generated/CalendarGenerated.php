<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
use App\Entity\Organization;
use App\Entity\User;
use App\Entity\CalendarType;
use App\Entity\Event;
use App\Entity\CalendarExternalLink;
use App\Entity\WorkingHour;
use App\Entity\Holiday;

/**
 * Calendar Entity (Generated Base Class)
 *
 * Calendars for organizing events and meetings *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to Calendar.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class CalendarGenerated extends EntityBase
{
    #[Groups(['calendar:read', 'calendar:write'])]
    #[ORM\ManyToOne(targetEntity: Organization::class, inversedBy: 'calendars')]
    #[ORM\JoinColumn(nullable: false)]
    protected Organization $organization;

    #[Groups(['calendar:read', 'calendar:write'])]
    #[ORM\Column(type: 'string', length: 255)]
    #[Assert\Length(max: 255)]
    protected string $name;

    #[Groups(['calendar:read', 'calendar:write'])]
    #[ORM\ManyToOne(targetEntity: User::class, inversedBy: 'calendars')]
    protected ?User $user = null;

    #[Groups(['calendar:read', 'calendar:write'])]
    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $description = null;

    #[Groups(['calendar:read', 'calendar:write'])]
    #[ORM\Column(type: 'string', length: 255)]
    protected string $timeZone = 'UTC';

    #[Groups(['calendar:read', 'calendar:write'])]
    #[ORM\Column(type: 'string', length: 7, nullable: true)]
    #[Assert\Length(max: 7)]
    protected ?string $color = '#0dcaf0';

    #[Groups(['calendar:read', 'calendar:write'])]
    #[ORM\Column(name: 'primary_prop', type: 'boolean', nullable: true)]
    protected ?bool $primary = false;

    #[Groups(['calendar:read', 'calendar:write'])]
    #[ORM\Column(type: 'boolean', nullable: true)]
    protected ?bool $visible = true;

    #[Groups(['calendar:read', 'calendar:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $accessRole = null;

    #[Groups(['calendar:read', 'calendar:write'])]
    #[ORM\ManyToOne(targetEntity: CalendarType::class, inversedBy: 'calendars')]
    protected ?CalendarType $calendarType = null;

    #[Groups(['calendar:read'])]
    #[ORM\OneToMany(targetEntity: Event::class, mappedBy: 'calendar', fetch: 'LAZY')]
    protected Collection $events;

    #[Groups(['calendar:read', 'calendar:write'])]
    #[ORM\ManyToOne(targetEntity: CalendarExternalLink::class, inversedBy: 'calendars')]
    protected ?CalendarExternalLink $externalLink = null;

    #[Groups(['calendar:read', 'calendar:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $externalApiKey = null;

    #[Groups(['calendar:read'])]
    #[ORM\OneToMany(targetEntity: WorkingHour::class, mappedBy: 'calendar', fetch: 'LAZY')]
    protected Collection $workingHours;

    #[Groups(['calendar:read'])]
    #[ORM\OneToMany(targetEntity: Holiday::class, mappedBy: 'calendar', fetch: 'LAZY')]
    protected Collection $holidays;

    #[Groups(['calendar:read', 'calendar:write'])]
    #[ORM\Column(name: 'default_prop', type: 'boolean')]
    protected bool $default = false;

    #[Groups(['calendar:read', 'calendar:write'])]
    #[ORM\Column(type: 'boolean')]
    protected bool $active = true;

    #[Groups(['calendar:read', 'calendar:write'])]
    #[ORM\Column(name: 'public_prop', type: 'boolean')]
    protected bool $public = false;

    #[Groups(['calendar:read', 'calendar:write'])]
    #[ORM\Column(type: 'string', length: 100, nullable: true)]
    #[Assert\Length(max: 100)]
    protected ?string $icon = null;

    #[Groups(['calendar:read', 'calendar:write'])]
    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $sortOrder = null;

    #[Groups(['calendar:read', 'calendar:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    #[Assert\Length(max: 255)]
    protected ?string $externalId = null;

    #[Groups(['calendar:read', 'calendar:write'])]
    #[ORM\Column(type: 'datetime_immutable', nullable: true)]
    protected ?\DateTimeImmutable $lastSyncedAt = null;

    #[Groups(['calendar:read', 'calendar:write'])]
    #[ORM\Column(type: 'json', nullable: true)]
    protected ?array $permissions = null;

    #[Groups(['calendar:read', 'calendar:write'])]
    #[ORM\Column(type: 'json', nullable: true)]
    protected ?array $settings = null;


    public function __construct()
    {
        parent::__construct();
        $this->events = new ArrayCollection();
        $this->workingHours = new ArrayCollection();
        $this->holidays = new ArrayCollection();
    }

    public function getOrganization(): Organization
    {
        return $this->organization;
    }

    public function setOrganization(Organization $organization): self
    {
        $this->organization = $organization;
        return $this;
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getUser(): ?User
    {
        return $this->user;
    }

    public function setUser(?User $user): self
    {
        $this->user = $user;
        return $this;
    }

    public function getDescription(): ?string    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    public function getTimeZone(): string    {
        return $this->timeZone;
    }

    public function setTimeZone(string $timeZone): self
    {
        $this->timeZone = $timeZone;
        return $this;
    }

    public function getColor(): ?string    {
        return $this->color;
    }

    public function setColor(?string $color): self
    {
        $this->color = $color;
        return $this;
    }

    public function getPrimary(): ?bool    {
        return $this->primary;
    }

    public function setPrimary(?bool $primary): self
    {
        $this->primary = $primary;
        return $this;
    }

    public function isPrimary(): bool
    {
        return $this->primary === true;
    }

    public function getVisible(): ?bool    {
        return $this->visible;
    }

    public function setVisible(?bool $visible): self
    {
        $this->visible = $visible;
        return $this;
    }

    public function isVisible(): bool
    {
        return $this->visible === true;
    }

    public function getAccessRole(): ?string    {
        return $this->accessRole;
    }

    public function setAccessRole(?string $accessRole): self
    {
        $this->accessRole = $accessRole;
        return $this;
    }

    public function getCalendarType(): ?CalendarType
    {
        return $this->calendarType;
    }

    public function setCalendarType(?CalendarType $calendarType): self
    {
        $this->calendarType = $calendarType;
        return $this;
    }

    /**
     * @return Collection<int, Event>
     */
    public function getEvents(): Collection
    {
        return $this->events;
    }

    public function addEvent(Event $event): self
    {
        if (!$this->events->contains($event)) {
            $this->events->add($event);
            $event->setCalendar($this);
        }
        return $this;
    }

    public function removeEvent(Event $event): self
    {
        if ($this->events->removeElement($event)) {
            if ($event->getCalendar() === $this) {
                $event->setCalendar(null);
            }
        }
        return $this;
    }

    public function getExternalLink(): ?CalendarExternalLink
    {
        return $this->externalLink;
    }

    public function setExternalLink(?CalendarExternalLink $externalLink): self
    {
        $this->externalLink = $externalLink;
        return $this;
    }

    public function getExternalApiKey(): ?string    {
        return $this->externalApiKey;
    }

    public function setExternalApiKey(?string $externalApiKey): self
    {
        $this->externalApiKey = $externalApiKey;
        return $this;
    }

    /**
     * @return Collection<int, WorkingHour>
     */
    public function getWorkingHours(): Collection
    {
        return $this->workingHours;
    }

    public function addWorkingHour(WorkingHour $workingHour): self
    {
        if (!$this->workingHours->contains($workingHour)) {
            $this->workingHours->add($workingHour);
            $workingHour->setCalendar($this);
        }
        return $this;
    }

    public function removeWorkingHour(WorkingHour $workingHour): self
    {
        if ($this->workingHours->removeElement($workingHour)) {
            if ($workingHour->getCalendar() === $this) {
                $workingHour->setCalendar(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, Holiday>
     */
    public function getHolidays(): Collection
    {
        return $this->holidays;
    }

    public function addHoliday(Holiday $holiday): self
    {
        if (!$this->holidays->contains($holiday)) {
            $this->holidays->add($holiday);
            $holiday->setCalendar($this);
        }
        return $this;
    }

    public function removeHoliday(Holiday $holiday): self
    {
        if ($this->holidays->removeElement($holiday)) {
            if ($holiday->getCalendar() === $this) {
                $holiday->setCalendar(null);
            }
        }
        return $this;
    }

    public function getDefault(): bool    {
        return $this->default;
    }

    public function setDefault(bool $default): self
    {
        $this->default = $default;
        return $this;
    }

    public function isDefault(): bool
    {
        return $this->default === true;
    }

    public function getActive(): bool    {
        return $this->active;
    }

    public function setActive(bool $active): self
    {
        $this->active = $active;
        return $this;
    }

    public function isActive(): bool
    {
        return $this->active === true;
    }

    public function getPublic(): bool    {
        return $this->public;
    }

    public function setPublic(bool $public): self
    {
        $this->public = $public;
        return $this;
    }

    public function isPublic(): bool
    {
        return $this->public === true;
    }

    public function getIcon(): ?string    {
        return $this->icon;
    }

    public function setIcon(?string $icon): self
    {
        $this->icon = $icon;
        return $this;
    }

    public function getSortOrder(): ?int    {
        return $this->sortOrder;
    }

    public function setSortOrder(?int $sortOrder): self
    {
        $this->sortOrder = $sortOrder;
        return $this;
    }

    public function getExternalId(): ?string    {
        return $this->externalId;
    }

    public function setExternalId(?string $externalId): self
    {
        $this->externalId = $externalId;
        return $this;
    }

    public function getLastSyncedAt(): ?\DateTimeImmutable    {
        return $this->lastSyncedAt;
    }

    public function setLastSyncedAt(?\DateTimeImmutable $lastSyncedAt): self
    {
        $this->lastSyncedAt = $lastSyncedAt;
        return $this;
    }

    public function getPermissions(): ?array    {
        return $this->permissions;
    }

    public function setPermissions(?array $permissions): self
    {
        $this->permissions = $permissions;
        return $this;
    }

    public function getSettings(): ?array    {
        return $this->settings;
    }

    public function setSettings(?array $settings): self
    {
        $this->settings = $settings;
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? ($this->getId()?->toRfc4122() ?? '');
    }
}
