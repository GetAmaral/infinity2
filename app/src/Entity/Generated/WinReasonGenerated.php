<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use App\Entity\Trait\OrganizationTrait;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use App\Entity\Deal;

/**
 * Win Reason Entity (Generated Base Class)
 *
 * Tracks reasons for won deals to analyze success patterns and competitive positioning *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to WinReason.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class WinReasonGenerated extends EntityBase
{
    use OrganizationTrait;

    #[ORM\Column(type: 'string', length: 255)]
    protected string $name;

    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $description = null;

    #[ORM\Column(type: 'string', length: 255)]
    protected string $category;

    #[ORM\Column(type: 'integer')]
    protected int $sortOrder = 100;

    #[ORM\Column(type: 'decimal', precision: 5, scale: 2, nullable: true)]
    protected ?float $impactScore = null;

    #[ORM\Column(type: 'integer')]
    protected int $usageCount = 0;

    #[ORM\Column(type: 'datetime', nullable: true)]
    protected ?\DateTimeImmutable $lastUsedAt = null;

    #[ORM\Column(type: 'boolean')]
    protected bool $competitorRelated = false;

    #[ORM\Column(type: 'string', length: 100, nullable: true)]
    protected ?string $primaryCompetitor = null;

    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $dealValueImpact = null;

    #[ORM\Column(type: 'string', length: 7)]
    protected string $color = '#0dcaf0';

    #[ORM\Column(type: 'json', nullable: true)]
    protected ?array $tags = null;

    #[ORM\Column(type: 'boolean')]
    protected bool $active = true;

    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $notes = null;

    #[ORM\Column(type: 'boolean')]
    protected bool $requiresApproval = false;

    #[ORM\OneToMany(targetEntity: Deal::class, mappedBy: 'winReason', fetch: 'LAZY')]
    protected Collection $deals;


    public function __construct()
    {
        parent::__construct();
        $this->deals = new ArrayCollection();
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getDescription(): ?string    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    public function getCategory(): string    {
        return $this->category;
    }

    public function setCategory(string $category): self
    {
        $this->category = $category;
        return $this;
    }

    public function getSortorder(): int    {
        return $this->sortOrder;
    }

    public function setSortorder(int $sortOrder): self
    {
        $this->sortOrder = $sortOrder;
        return $this;
    }

    public function getImpactscore(): ?float    {
        return $this->impactScore;
    }

    public function setImpactscore(?float $impactScore): self
    {
        $this->impactScore = $impactScore;
        return $this;
    }

    public function getUsagecount(): int    {
        return $this->usageCount;
    }

    public function setUsagecount(int $usageCount): self
    {
        $this->usageCount = $usageCount;
        return $this;
    }

    public function getLastusedat(): ?\DateTimeImmutable    {
        return $this->lastUsedAt;
    }

    public function setLastusedat(?\DateTimeImmutable $lastUsedAt): self
    {
        $this->lastUsedAt = $lastUsedAt;
        return $this;
    }

    public function getCompetitorrelated(): bool    {
        return $this->competitorRelated;
    }

    public function setCompetitorrelated(bool $competitorRelated): self
    {
        $this->competitorRelated = $competitorRelated;
        return $this;
    }

    public function isCompetitorrelated(): bool
    {
        return $this->competitorRelated === true;
    }

    public function getPrimarycompetitor(): ?string    {
        return $this->primaryCompetitor;
    }

    public function setPrimarycompetitor(?string $primaryCompetitor): self
    {
        $this->primaryCompetitor = $primaryCompetitor;
        return $this;
    }

    public function getDealvalueimpact(): ?string    {
        return $this->dealValueImpact;
    }

    public function setDealvalueimpact(?string $dealValueImpact): self
    {
        $this->dealValueImpact = $dealValueImpact;
        return $this;
    }

    public function getColor(): string    {
        return $this->color;
    }

    public function setColor(string $color): self
    {
        $this->color = $color;
        return $this;
    }

    public function getTags(): ?array    {
        return $this->tags;
    }

    public function setTags(?array $tags): self
    {
        $this->tags = $tags;
        return $this;
    }

    public function getActive(): bool    {
        return $this->active;
    }

    public function setActive(bool $active): self
    {
        $this->active = $active;
        return $this;
    }

    public function isActive(): bool
    {
        return $this->active === true;
    }

    public function getNotes(): ?string    {
        return $this->notes;
    }

    public function setNotes(?string $notes): self
    {
        $this->notes = $notes;
        return $this;
    }

    public function getRequiresapproval(): bool    {
        return $this->requiresApproval;
    }

    public function setRequiresapproval(bool $requiresApproval): self
    {
        $this->requiresApproval = $requiresApproval;
        return $this;
    }

    public function isRequiresapproval(): bool
    {
        return $this->requiresApproval === true;
    }

    /**
     * @return Collection<int, App\Entity\Deal>
     */
    public function getDeals(): Collection
    {
        return $this->deals;
    }

    public function addDeal(App\Entity\Deal $deal): self
    {
        if (!$this->deals->contains($deal)) {
            $this->deals->add($deal);
            $deal->setWinreason($this);
        }
        return $this;
    }

    public function removeDeal(App\Entity\Deal $deal): self
    {
        if ($this->deals->removeElement($deal)) {
            if ($deal->getWinreason() === $this) {
                $deal->setWinreason(null);
            }
        }
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? ($this->getId()?->toRfc4122() ?? '');
    }
}
