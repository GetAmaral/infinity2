<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
use App\Entity\Organization;
use App\Entity\Contact;
use App\Entity\Event;
use App\Entity\Notification;
use App\Entity\User;

/**
 * EventAttendee Entity (Generated Base Class)
 *
 * Comprehensive event attendee tracking with RSVP status, check-in management, and attendance confirmation *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to EventAttendee.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class EventAttendeeGenerated extends EntityBase
{
    #[Groups(['eventattendee:read', 'eventattendee:write'])]
    #[ORM\ManyToOne(targetEntity: Organization::class, inversedBy: 'eventAttendees')]
    #[ORM\JoinColumn(nullable: false)]
    protected Organization $organization;

    #[Groups(['eventattendee:read', 'eventattendee:write'])]
    #[ORM\Column(type: 'string', length: 255)]
    protected string $name;

    #[Groups(['eventattendee:read', 'eventattendee:write'])]
    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $attendeeStatus = null;

    #[Groups(['eventattendee:read', 'eventattendee:write'])]
    #[ORM\Column(name: 'comment_prop', type: 'text', nullable: true)]
    protected ?string $comment = null;

    #[Groups(['eventattendee:read', 'eventattendee:write'])]
    #[ORM\ManyToOne(targetEntity: Contact::class, inversedBy: 'eventAttendances')]
    protected ?Contact $contact = null;

    #[Groups(['eventattendee:read', 'eventattendee:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true, unique: true)]
    protected ?string $email = null;

    #[Groups(['eventattendee:read', 'eventattendee:write'])]
    #[ORM\ManyToOne(targetEntity: Event::class, inversedBy: 'attendees')]
    #[ORM\JoinColumn(nullable: false)]
    protected Event $event;

    #[Groups(['eventattendee:read'])]
    #[ORM\OneToMany(targetEntity: Notification::class, mappedBy: 'attendee', fetch: 'LAZY')]
    protected Collection $notifications;

    #[Groups(['eventattendee:read', 'eventattendee:write'])]
    #[ORM\Column(type: 'boolean')]
    protected bool $optional = false;

    #[Groups(['eventattendee:read', 'eventattendee:write'])]
    #[ORM\Column(type: 'boolean')]
    protected bool $organizer = false;

    #[Groups(['eventattendee:read', 'eventattendee:write'])]
    #[ORM\Column(type: 'string', length: 50, nullable: true)]
    protected ?string $phone = null;

    #[Groups(['eventattendee:read', 'eventattendee:write'])]
    #[ORM\ManyToOne(targetEntity: User::class, inversedBy: 'eventAttendances')]
    protected ?User $user = null;


    public function __construct()
    {
        parent::__construct();
        $this->notifications = new ArrayCollection();
    }

    public function getOrganization(): Organization
    {
        return $this->organization;
    }

    public function setOrganization(Organization $organization): self
    {
        $this->organization = $organization;
        return $this;
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getAttendeeStatus(): ?int    {
        return $this->attendeeStatus;
    }

    public function setAttendeeStatus(?int $attendeeStatus): self
    {
        $this->attendeeStatus = $attendeeStatus;
        return $this;
    }

    public function getComment(): ?string    {
        return $this->comment;
    }

    public function setComment(?string $comment): self
    {
        $this->comment = $comment;
        return $this;
    }

    public function getContact(): ?Contact
    {
        return $this->contact;
    }

    public function setContact(?Contact $contact): self
    {
        $this->contact = $contact;
        return $this;
    }

    public function getEmail(): ?string    {
        return $this->email;
    }

    public function setEmail(?string $email): self
    {
        $this->email = $email;
        return $this;
    }

    public function getEvent(): Event
    {
        return $this->event;
    }

    public function setEvent(Event $event): self
    {
        $this->event = $event;
        return $this;
    }

    /**
     * @return Collection<int, Notification>
     */
    public function getNotifications(): Collection
    {
        return $this->notifications;
    }

    public function addNotification(Notification $notification): self
    {
        if (!$this->notifications->contains($notification)) {
            $this->notifications->add($notification);
            $notification->setAttendee($this);
        }
        return $this;
    }

    public function removeNotification(Notification $notification): self
    {
        if ($this->notifications->removeElement($notification)) {
            if ($notification->getAttendee() === $this) {
                $notification->setAttendee(null);
            }
        }
        return $this;
    }

    public function getOptional(): bool    {
        return $this->optional;
    }

    public function setOptional(bool $optional): self
    {
        $this->optional = $optional;
        return $this;
    }

    public function isOptional(): bool
    {
        return $this->optional === true;
    }

    public function getOrganizer(): bool    {
        return $this->organizer;
    }

    public function setOrganizer(bool $organizer): self
    {
        $this->organizer = $organizer;
        return $this;
    }

    public function isOrganizer(): bool
    {
        return $this->organizer === true;
    }

    public function getPhone(): ?string    {
        return $this->phone;
    }

    public function setPhone(?string $phone): self
    {
        $this->phone = $phone;
        return $this;
    }

    public function getUser(): ?User
    {
        return $this->user;
    }

    public function setUser(?User $user): self
    {
        $this->user = $user;
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? ($this->getId()?->toRfc4122() ?? '');
    }
}
