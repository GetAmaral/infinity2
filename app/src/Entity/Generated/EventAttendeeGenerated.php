<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use App\Entity\Trait\OrganizationTrait;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
                                                                use App\Entity\Event;
use App\Entity\User;
use App\Entity\Contact;
use App\Entity\Notification;

/**
 * EventAttendee Entity (Generated Base Class)
 *
 * 
 *
 * This class is ALWAYS regenerated from CSV. DO NOT edit this file.
 * Add custom logic to EventAttendee.php instead.
 *
 * @generated by Luminai Code Generator
 * @see /config/EntityNew.csv and /config/PropertyNew.csv
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class EventAttendeeGenerated extends EntityBase
{
    use OrganizationTrait;

    #[ORM\Column(type: 'string', nullable: true)]
    #[Assert\Length(max: 255)]
    #[Groups(['eventattendee:read', 'eventattendee:write'])]
    protected ?string $name = null;

    #[ORM\ManyToOne(targetEntity: Event::class, inversedBy: 'attendees')]
    #[Groups(['eventattendee:read', 'eventattendee:write'])]
    protected ?Event $event = null;

    #[ORM\ManyToOne(targetEntity: User::class, inversedBy: 'eventAttendances')]
    #[Groups(['eventattendee:read', 'eventattendee:write'])]
    protected ?User $user = null;

    #[ORM\ManyToOne(targetEntity: Contact::class, inversedBy: 'eventAttendances')]
    #[Groups(['eventattendee:read', 'eventattendee:write'])]
    protected ?Contact $contact = null;

    #[ORM\OneToMany(targetEntity: Notification::class, mappedBy: 'attendee', fetch: 'LAZY')]
    #[Groups(['eventattendee:read', 'eventattendee:write'])]
    protected Collection $notifications;

    #[ORM\Column(type: 'string', nullable: true, unique: true)]
    #[Assert\Length(max: 255)]
    #[Groups(['eventattendee:read', 'eventattendee:write'])]
    protected ?string $email = null;

    #[ORM\Column(type: 'string', length: 50, nullable: true)]
    #[Assert\Length(max: 255)]
    #[Groups(['eventattendee:read', 'eventattendee:write'])]
    protected ?string $phone = null;

    #[ORM\Column(type: 'integer', nullable: true)]
    #[Groups(['eventattendee:read', 'eventattendee:write'])]
    protected ?int $attendeeStatus = null;

    #[ORM\Column(type: 'text', nullable: true)]
    #[Groups(['eventattendee:read', 'eventattendee:write'])]
    protected ?string $comment = null;

    #[ORM\Column(type: 'boolean', nullable: true)]
    #[Groups(['eventattendee:read', 'eventattendee:write'])]
    protected ?bool $organizer = null;

    #[ORM\Column(type: 'boolean', nullable: true)]
    #[Groups(['eventattendee:read', 'eventattendee:write'])]
    protected ?bool $optional = null;


    public function __construct()
    {
        parent::__construct();
        $this->notifications = new ArrayCollection();
    }

    public function getName(): ?string
    {
        return $this->name;
    }

    public function setName(?string $name): self
    {
        $this->name = $name;
        return $this;
    }

    
    public function getEvent(): ?Event
    {
        return $this->event;
    }

    public function setEvent(?Event $event): self
    {
        $this->event = $event;
        return $this;
    }

    public function getUser(): ?User
    {
        return $this->user;
    }

    public function setUser(?User $user): self
    {
        $this->user = $user;
        return $this;
    }

    public function getContact(): ?Contact
    {
        return $this->contact;
    }

    public function setContact(?Contact $contact): self
    {
        $this->contact = $contact;
        return $this;
    }

    /**
     * @return Collection<int, Notification>
     */
    public function getNotifications(): Collection
    {
        return $this->notifications;
    }

    public function addNotification(Notification $notification): self
    {
        if (!$this->notifications->contains($notification)) {
            $this->notifications->add($notification);
        }
        return $this;
    }

    public function removeNotification(Notification $notification): self
    {
        if ($this->notifications->removeElement($notification)) {
        }
        return $this;
    }

    public function getEmail(): ?string
    {
        return $this->email;
    }

    public function setEmail(?string $email): self
    {
        $this->email = $email;
        return $this;
    }

    
    public function getPhone(): ?string
    {
        return $this->phone;
    }

    public function setPhone(?string $phone): self
    {
        $this->phone = $phone;
        return $this;
    }

    
    public function getAttendeestatus(): ?int
    {
        return $this->attendeeStatus;
    }

    public function setAttendeestatus(?int $attendeeStatus): self
    {
        $this->attendeeStatus = $attendeeStatus;
        return $this;
    }

    
    public function getComment(): ?string
    {
        return $this->comment;
    }

    public function setComment(?string $comment): self
    {
        $this->comment = $comment;
        return $this;
    }

    
    public function getOrganizer(): ?bool
    {
        return $this->organizer;
    }

    public function setOrganizer(?bool $organizer): self
    {
        $this->organizer = $organizer;
        return $this;
    }

    
    public function getOptional(): ?bool
    {
        return $this->optional;
    }

    public function setOptional(?bool $optional): self
    {
        $this->optional = $optional;
        return $this;
    }

    

    public function __toString(): string
    {
        return $this->name ?? '';
    }
}
