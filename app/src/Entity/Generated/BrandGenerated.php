<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
use App\Entity\Organization;
use App\Entity\Product;
use App\Entity\Company;

/**
 * Brand Entity (Generated Base Class)
 *
 * Product brands for catalog organization *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to Brand.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class BrandGenerated extends EntityBase
{
    #[Groups(['brand:read', 'brand:write'])]
    #[ORM\ManyToOne(targetEntity: Organization::class, inversedBy: 'brands')]
    #[ORM\JoinColumn(nullable: false)]
    protected Organization $organization;

    #[Groups(['brand:read', 'brand:write'])]
    #[ORM\Column(type: 'string', length: 255)]
    protected string $name;

    #[Groups(['brand:read', 'brand:write'])]
    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $description = null;

    #[Groups(['brand:read', 'brand:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $tagline = null;

    #[Groups(['brand:read', 'brand:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $logoUrl = null;

    #[Groups(['brand:read', 'brand:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $primaryColor = null;

    #[Groups(['brand:read', 'brand:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $industry = null;

    #[Groups(['brand:read', 'brand:write'])]
    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $positioning = null;

    #[Groups(['brand:read', 'brand:write'])]
    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $targetMarket = null;

    #[Groups(['brand:read', 'brand:write'])]
    #[ORM\Column(type: 'decimal', precision: 5, scale: 2, nullable: true)]
    protected ?string $marketShare = null;

    #[Groups(['brand:read', 'brand:write'])]
    #[ORM\Column(type: 'decimal', precision: 15, scale: 2, nullable: true)]
    protected ?string $brandValue = null;

    #[Groups(['brand:read', 'brand:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $countryOfOrigin = null;

    #[Groups(['brand:read', 'brand:write'])]
    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $foundedYear = null;

    #[Groups(['brand:read', 'brand:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $website = null;

    #[Groups(['brand:read', 'brand:write'])]
    #[ORM\Column(type: 'boolean')]
    protected bool $active = true;

    #[Groups(['brand:read'])]
    #[ORM\OneToMany(targetEntity: Product::class, mappedBy: 'brand', fetch: 'LAZY')]
    protected Collection $products;

    #[Groups(['brand:read'])]
    #[ORM\ManyToMany(targetEntity: Company::class, mappedBy: 'manufacturedBrands', fetch: 'LAZY')]
    protected Collection $manufacturers;

    #[Groups(['brand:read'])]
    #[ORM\ManyToMany(targetEntity: Company::class, mappedBy: 'suppliedBrands', fetch: 'LAZY')]
    protected Collection $suppliers;


    public function __construct()
    {
        parent::__construct();
        $this->products = new ArrayCollection();
        $this->manufacturers = new ArrayCollection();
        $this->suppliers = new ArrayCollection();
    }

    public function getOrganization(): Organization
    {
        return $this->organization;
    }

    public function setOrganization(Organization $organization): self
    {
        $this->organization = $organization;
        return $this;
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getDescription(): ?string    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    public function getTagline(): ?string    {
        return $this->tagline;
    }

    public function setTagline(?string $tagline): self
    {
        $this->tagline = $tagline;
        return $this;
    }

    public function getLogoUrl(): ?string    {
        return $this->logoUrl;
    }

    public function setLogoUrl(?string $logoUrl): self
    {
        $this->logoUrl = $logoUrl;
        return $this;
    }

    public function getPrimaryColor(): ?string    {
        return $this->primaryColor;
    }

    public function setPrimaryColor(?string $primaryColor): self
    {
        $this->primaryColor = $primaryColor;
        return $this;
    }

    public function getIndustry(): ?string    {
        return $this->industry;
    }

    public function setIndustry(?string $industry): self
    {
        $this->industry = $industry;
        return $this;
    }

    public function getPositioning(): ?string    {
        return $this->positioning;
    }

    public function setPositioning(?string $positioning): self
    {
        $this->positioning = $positioning;
        return $this;
    }

    public function getTargetMarket(): ?string    {
        return $this->targetMarket;
    }

    public function setTargetMarket(?string $targetMarket): self
    {
        $this->targetMarket = $targetMarket;
        return $this;
    }

    public function getMarketShare(): ?string    {
        return $this->marketShare;
    }

    public function setMarketShare(?string $marketShare): self
    {
        $this->marketShare = $marketShare;
        return $this;
    }

    public function getBrandValue(): ?string    {
        return $this->brandValue;
    }

    public function setBrandValue(?string $brandValue): self
    {
        $this->brandValue = $brandValue;
        return $this;
    }

    public function getCountryOfOrigin(): ?string    {
        return $this->countryOfOrigin;
    }

    public function setCountryOfOrigin(?string $countryOfOrigin): self
    {
        $this->countryOfOrigin = $countryOfOrigin;
        return $this;
    }

    public function getFoundedYear(): ?int    {
        return $this->foundedYear;
    }

    public function setFoundedYear(?int $foundedYear): self
    {
        $this->foundedYear = $foundedYear;
        return $this;
    }

    public function getWebsite(): ?string    {
        return $this->website;
    }

    public function setWebsite(?string $website): self
    {
        $this->website = $website;
        return $this;
    }

    public function getActive(): bool    {
        return $this->active;
    }

    public function setActive(bool $active): self
    {
        $this->active = $active;
        return $this;
    }

    public function isActive(): bool
    {
        return $this->active === true;
    }

    /**
     * @return Collection<int, Product>
     */
    public function getProducts(): Collection
    {
        return $this->products;
    }

    public function addProduct(Product $product): self
    {
        if (!$this->products->contains($product)) {
            $this->products->add($product);
            $product->setBrand($this);
        }
        return $this;
    }

    public function removeProduct(Product $product): self
    {
        if ($this->products->removeElement($product)) {
            if ($product->getBrand() === $this) {
                $product->setBrand(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, Company>
     */
    public function getManufacturers(): Collection
    {
        return $this->manufacturers;
    }

    public function addManufacturer(Company $manufacturer): self
    {
        if (!$this->manufacturers->contains($manufacturer)) {
            $this->manufacturers->add($manufacturer);
            $manufacturer->setManufacturedBrands($this);
        }
        return $this;
    }

    public function removeManufacturer(Company $manufacturer): self
    {
        if ($this->manufacturers->removeElement($manufacturer)) {
            if ($manufacturer->getManufacturedBrands() === $this) {
                $manufacturer->setManufacturedBrands(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, Company>
     */
    public function getSuppliers(): Collection
    {
        return $this->suppliers;
    }

    public function addSupplier(Company $supplier): self
    {
        if (!$this->suppliers->contains($supplier)) {
            $this->suppliers->add($supplier);
            $supplier->setSuppliedBrands($this);
        }
        return $this;
    }

    public function removeSupplier(Company $supplier): self
    {
        if ($this->suppliers->removeElement($supplier)) {
            if ($supplier->getSuppliedBrands() === $this) {
                $supplier->setSuppliedBrands(null);
            }
        }
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? ($this->getId()?->toRfc4122() ?? '');
    }
}
