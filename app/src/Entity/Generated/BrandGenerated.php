<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use App\Entity\Trait\OrganizationTrait;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
                                    use App\Entity\Product;
use App\Entity\Company;

/**
 * Brand Entity (Generated Base Class)
 *
 * 
 *
 * This class is ALWAYS regenerated from CSV. DO NOT edit this file.
 * Add custom logic to Brand.php instead.
 *
 * @generated by Luminai Code Generator
 * @see /config/EntityNew.csv and /config/PropertyNew.csv
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class BrandGenerated extends EntityBase
{
    use OrganizationTrait;

    #[ORM\Column(type: 'string')]
    #[Assert\NotBlank]
    #[Assert\Length(max: 255)]
    #[Groups(['brand:read', 'brand:write'])]
    protected string $name;

    #[ORM\Column(type: 'text', nullable: true)]
    #[Groups(['brand:read', 'brand:write'])]
    protected ?string $description = null;

    #[ORM\Column(type: 'string', nullable: true)]
    #[Assert\Length(max: 255)]
    #[Groups(['brand:read', 'brand:write'])]
    protected ?string $logoUrl = null;

    #[ORM\Column(type: 'string', nullable: true)]
    #[Assert\Length(max: 255)]
    #[Groups(['brand:read', 'brand:write'])]
    protected ?string $website = null;

    #[ORM\OneToMany(targetEntity: Product::class, mappedBy: 'brand', fetch: 'EXTRA_LAZY')]
    #[ORM\OrderBy(['name' => 'ASC'])]
    #[Groups(['brand:read', 'brand:write'])]
    protected Collection $products;

    #[ORM\ManyToMany(targetEntity: Company::class, inversedBy: 'manufacturedBrands', fetch: 'LAZY')]
    #[Groups(['brand:read', 'brand:write'])]
    protected Collection $manufacturers;

    #[ORM\ManyToMany(targetEntity: Company::class, inversedBy: 'suppliedBrands', fetch: 'LAZY')]
    #[Groups(['brand:read', 'brand:write'])]
    protected Collection $suppliers;


    public function __construct()
    {
        parent::__construct();
        $this->products = new ArrayCollection();
        $this->manufacturers = new ArrayCollection();
        $this->suppliers = new ArrayCollection();
    }

    public function getName(): string
    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    
    public function getDescription(): ?string
    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    
    public function getLogourl(): ?string
    {
        return $this->logoUrl;
    }

    public function setLogourl(?string $logoUrl): self
    {
        $this->logoUrl = $logoUrl;
        return $this;
    }

    
    public function getWebsite(): ?string
    {
        return $this->website;
    }

    public function setWebsite(?string $website): self
    {
        $this->website = $website;
        return $this;
    }

    
    /**
     * @return Collection<int, Product>
     */
    public function getProducts(): Collection
    {
        return $this->products;
    }

    public function addProduct(Product $product): self
    {
        if (!$this->products->contains($product)) {
            $this->products->add($product);
        }
        return $this;
    }

    public function removeProduct(Product $product): self
    {
        if ($this->products->removeElement($product)) {
        }
        return $this;
    }

    /**
     * @return Collection<int, Company>
     */
    public function getManufacturers(): Collection
    {
        return $this->manufacturers;
    }

    public function addManufacturer(Company $manufacturer): self
    {
        if (!$this->manufacturers->contains($manufacturer)) {
            $this->manufacturers->add($manufacturer);
        }
        return $this;
    }

    public function removeManufacturer(Company $manufacturer): self
    {
        if ($this->manufacturers->removeElement($manufacturer)) {
        }
        return $this;
    }

    /**
     * @return Collection<int, Company>
     */
    public function getSuppliers(): Collection
    {
        return $this->suppliers;
    }

    public function addSupplier(Company $supplier): self
    {
        if (!$this->suppliers->contains($supplier)) {
            $this->suppliers->add($supplier);
        }
        return $this;
    }

    public function removeSupplier(Company $supplier): self
    {
        if ($this->suppliers->removeElement($supplier)) {
        }
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? '';
    }
}
