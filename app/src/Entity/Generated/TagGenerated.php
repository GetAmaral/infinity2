<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
use App\Entity\Organization;
use App\Entity\Deal;
use App\Entity\Product;

/**
 * Tag Entity (Generated Base Class)
 *
 * Tags for flexible categorization across all entities *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to Tag.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class TagGenerated extends EntityBase
{
    #[Groups(['tag:read', 'tag:write'])]
    #[ORM\ManyToOne(targetEntity: Organization::class, inversedBy: 'tags')]
    #[ORM\JoinColumn(nullable: false)]
    protected Organization $organization;

    #[Groups(['tag:read', 'tag:write'])]
    #[ORM\Column(type: 'string', length: 255)]
    protected string $name;

    #[Groups(['tag:read', 'tag:write'])]
    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $description = null;

    #[Groups(['tag:read', 'tag:write'])]
    #[ORM\Column(type: 'string', length: 7, nullable: true)]
    protected ?string $color = '#0dcaf0';

    #[Groups(['tag:read'])]
    #[ORM\ManyToMany(targetEntity: Deal::class, mappedBy: 'tags', fetch: 'LAZY')]
    protected Collection $deals;

    #[Groups(['tag:read'])]
    #[ORM\ManyToMany(targetEntity: Product::class, mappedBy: 'tags', fetch: 'LAZY')]
    protected Collection $products;

    #[Groups(['tag:read', 'tag:write'])]
    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $sentiment = null;


    public function __construct()
    {
        parent::__construct();
        $this->deals = new ArrayCollection();
        $this->products = new ArrayCollection();
    }

    public function getOrganization(): Organization
    {
        return $this->organization;
    }

    public function setOrganization(Organization $organization): self
    {
        $this->organization = $organization;
        return $this;
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getDescription(): ?string    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    public function getColor(): ?string    {
        return $this->color;
    }

    public function setColor(?string $color): self
    {
        $this->color = $color;
        return $this;
    }

    /**
     * @return Collection<int, Deal>
     */
    public function getDeals(): Collection
    {
        return $this->deals;
    }

    public function addDeal(Deal $deal): self
    {
        if (!$this->deals->contains($deal)) {
            $this->deals->add($deal);
            $deal->setTags($this);
        }
        return $this;
    }

    public function removeDeal(Deal $deal): self
    {
        if ($this->deals->removeElement($deal)) {
            if ($deal->getTags() === $this) {
                $deal->setTags(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, Product>
     */
    public function getProducts(): Collection
    {
        return $this->products;
    }

    public function addProduct(Product $product): self
    {
        if (!$this->products->contains($product)) {
            $this->products->add($product);
            $product->setTags($this);
        }
        return $this;
    }

    public function removeProduct(Product $product): self
    {
        if ($this->products->removeElement($product)) {
            if ($product->getTags() === $this) {
                $product->setTags(null);
            }
        }
        return $this;
    }

    public function getSentiment(): ?int    {
        return $this->sentiment;
    }

    public function setSentiment(?int $sentiment): self
    {
        $this->sentiment = $sentiment;
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? ($this->getId()?->toRfc4122() ?? '');
    }
}
