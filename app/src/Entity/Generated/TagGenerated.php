<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use App\Entity\Trait\OrganizationTrait;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use App\Entity\Deal;
use App\Entity\Product;

/**
 * Tag Entity (Generated Base Class)
 *
 * Tags for flexible categorization across all entities *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to Tag.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class TagGenerated extends EntityBase
{
    use OrganizationTrait;

    #[ORM\Column(type: 'string', length: 255)]
    protected string $name;

    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $description = null;

    #[ORM\Column(type: 'string', length: 7, nullable: true)]
    protected ?string $color = '#0dcaf0';

    #[ORM\ManyToMany(targetEntity: Deal::class, inversedBy: 'tags', fetch: 'LAZY')]
    protected Collection $deals;

    #[ORM\ManyToMany(targetEntity: Product::class, inversedBy: 'tags', fetch: 'LAZY')]
    protected Collection $products;

    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $sentiment = null;


    public function __construct()
    {
        parent::__construct();
        $this->deals = new ArrayCollection();
        $this->products = new ArrayCollection();
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getDescription(): ?string    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    public function getColor(): ?string    {
        return $this->color;
    }

    public function setColor(?string $color): self
    {
        $this->color = $color;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Deal>
     */
    public function getDeals(): Collection
    {
        return $this->deals;
    }

    public function addDeal(App\Entity\Deal $deal): self
    {
        if (!$this->deals->contains($deal)) {
            $this->deals->add($deal);
        }
        return $this;
    }

    public function removeDeal(App\Entity\Deal $deal): self
    {
        if ($this->deals->removeElement($deal)) {
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Product>
     */
    public function getProducts(): Collection
    {
        return $this->products;
    }

    public function addProduct(App\Entity\Product $product): self
    {
        if (!$this->products->contains($product)) {
            $this->products->add($product);
        }
        return $this;
    }

    public function removeProduct(App\Entity\Product $product): self
    {
        if ($this->products->removeElement($product)) {
        }
        return $this;
    }

    public function getSentiment(): ?int    {
        return $this->sentiment;
    }

    public function setSentiment(?int $sentiment): self
    {
        $this->sentiment = $sentiment;
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? ($this->getId()?->toRfc4122() ?? '');
    }
}
