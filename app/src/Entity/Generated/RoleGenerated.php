<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use App\Entity\User;

/**
 * Role Entity (Generated Base Class)
 *
 * User roles for permission management and access control *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to Role.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class RoleGenerated extends EntityBase
{
    #[ORM\Column(type: 'string', length: 255, unique: true)]
    protected string $name;

    #[ORM\Column(type: 'json')]
    protected array $permissions;

    #[ORM\ManyToMany(targetEntity: User::class, mappedBy: 'grantedRoles', fetch: 'LAZY')]
    protected Collection $users;

    #[ORM\Column(type: 'string', length: 255)]
    protected string $description;

    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $priority = null;

    #[ORM\Column(type: 'boolean')]
    protected bool $systemRole = false;


    public function __construct()
    {
        parent::__construct();
        $this->users = new ArrayCollection();
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getPermissions(): array    {
        return $this->permissions;
    }

    public function setPermissions(array $permissions): self
    {
        $this->permissions = $permissions;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\User>
     */
    public function getUsers(): Collection
    {
        return $this->users;
    }

    public function addUer(App\Entity\User $uer): self
    {
        if (!$this->users->contains($uer)) {
            $this->users->add($uer);
            $uer->setGrantedroles($this);
        }
        return $this;
    }

    public function removeUer(App\Entity\User $uer): self
    {
        if ($this->users->removeElement($uer)) {
            if ($uer->getGrantedroles() === $this) {
                $uer->setGrantedroles(null);
            }
        }
        return $this;
    }

    public function getDescription(): string    {
        return $this->description;
    }

    public function setDescription(string $description): self
    {
        $this->description = $description;
        return $this;
    }

    public function getPriority(): ?int    {
        return $this->priority;
    }

    public function setPriority(?int $priority): self
    {
        $this->priority = $priority;
        return $this;
    }

    public function getSystemrole(): bool    {
        return $this->systemRole;
    }

    public function setSystemrole(bool $systemRole): self
    {
        $this->systemRole = $systemRole;
        return $this;
    }

    public function isSystemrole(): bool
    {
        return $this->systemRole === true;
    }


    public function __toString(): string
    {
        return $this->name ?? ($this->getId()?->toRfc4122() ?? '');
    }
}
