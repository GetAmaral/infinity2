<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use App\Entity\Trait\OrganizationTrait;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use App\Entity\CourseModule;
use App\Entity\User;
use App\Entity\StudentCourse;

/**
 * Course Entity (Generated Base Class)
 *
 * Educational courses and training programs *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to Course.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class CourseGenerated extends EntityBase
{
    use OrganizationTrait;

    #[ORM\Column(type: 'string', length: 255)]
    protected string $name;

    #[ORM\Column(type: 'datetime_immutable', nullable: true)]
    protected ?\DateTimeImmutable $releaseDate = null;

    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $description = null;

    #[ORM\OneToMany(targetEntity: CourseModule::class, mappedBy: 'course', orphanRemoval: true, fetch: 'LAZY')]
    protected Collection $modules;

    #[ORM\Column(type: 'boolean')]
    protected bool $active = true;

    #[ORM\ManyToOne(targetEntity: User::class, inversedBy: 'ownedCourses')]
    #[ORM\JoinColumn(nullable: false)]
    protected User $owner;

    #[ORM\OneToMany(targetEntity: StudentCourse::class, mappedBy: 'course', fetch: 'LAZY')]
    protected Collection $studentCourses;

    #[ORM\Column(type: 'integer')]
    protected int $totalLengthSeconds = 0;


    public function __construct()
    {
        parent::__construct();
        $this->modules = new ArrayCollection();
        $this->studentCourses = new ArrayCollection();
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getReleasedate(): ?\DateTimeImmutable    {
        return $this->releaseDate;
    }

    public function setReleasedate(?\DateTimeImmutable $releaseDate): self
    {
        $this->releaseDate = $releaseDate;
        return $this;
    }

    public function getDescription(): ?string    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\CourseModule>
     */
    public function getModules(): Collection
    {
        return $this->modules;
    }

    public function addModule(App\Entity\CourseModule $module): self
    {
        if (!$this->modules->contains($module)) {
            $this->modules->add($module);
            $module->setCourse($this);
        }
        return $this;
    }

    public function removeModule(App\Entity\CourseModule $module): self
    {
        if ($this->modules->removeElement($module)) {
            if ($module->getCourse() === $this) {
                $module->setCourse(null);
            }
        }
        return $this;
    }

    public function getActive(): bool    {
        return $this->active;
    }

    public function setActive(bool $active): self
    {
        $this->active = $active;
        return $this;
    }

    public function isActive(): bool
    {
        return $this->active === true;
    }

    public function getOwner(): App\Entity\User
    {
        return $this->owner;
    }

    public function setOwner(App\Entity\User $owner): self
    {
        $this->owner = $owner;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\StudentCourse>
     */
    public function getStudentcourses(): Collection
    {
        return $this->studentCourses;
    }

    public function addStudentcoure(App\Entity\StudentCourse $tudentCoure): self
    {
        if (!$this->studentCourses->contains($tudentCoure)) {
            $this->studentCourses->add($tudentCoure);
            $tudentCoure->setCourse($this);
        }
        return $this;
    }

    public function removeStudentcoure(App\Entity\StudentCourse $tudentCoure): self
    {
        if ($this->studentCourses->removeElement($tudentCoure)) {
            if ($tudentCoure->getCourse() === $this) {
                $tudentCoure->setCourse(null);
            }
        }
        return $this;
    }

    public function getTotallengthseconds(): int    {
        return $this->totalLengthSeconds;
    }

    public function setTotallengthseconds(int $totalLengthSeconds): self
    {
        $this->totalLengthSeconds = $totalLengthSeconds;
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? ($this->getId()?->toRfc4122() ?? '');
    }
}
