<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use App\Entity\Trait\OrganizationTrait;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
                use App\Entity\Notification;

/**
 * NotificationType Entity (Generated Base Class)
 *
 * 
 *
 * This class is ALWAYS regenerated from CSV. DO NOT edit this file.
 * Add custom logic to NotificationType.php instead.
 *
 * @generated by Luminai Code Generator
 * @see /config/EntityNew.csv and /config/PropertyNew.csv
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class NotificationTypeGenerated extends EntityBase
{
    use OrganizationTrait;

    #[ORM\Column(type: 'string')]
    #[Assert\NotBlank]
    #[Assert\Length(max: 255)]
    #[Groups(['notificationtype:read', 'notificationtype:write'])]
    protected string $name;

    #[ORM\Column(type: 'text', nullable: true)]
    #[Groups(['notificationtype:read', 'notificationtype:write'])]
    protected ?string $description = null;

    #[ORM\OneToMany(targetEntity: Notification::class, mappedBy: 'type', fetch: 'LAZY')]
    #[Groups(['notificationtype:read', 'notificationtype:write'])]
    protected Collection $notifications;


    public function __construct()
    {
        parent::__construct();
        $this->notifications = new ArrayCollection();
    }

    public function getName(): string
    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    
    public function getDescription(): ?string
    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    
    /**
     * @return Collection<int, Notification>
     */
    public function getNotifications(): Collection
    {
        return $this->notifications;
    }

    public function addNotification(Notification $notification): self
    {
        if (!$this->notifications->contains($notification)) {
            $this->notifications->add($notification);
        }
        return $this;
    }

    public function removeNotification(Notification $notification): self
    {
        if ($this->notifications->removeElement($notification)) {
        }
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? '';
    }
}
