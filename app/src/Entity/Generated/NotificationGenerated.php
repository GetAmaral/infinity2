<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use App\Entity\Trait\OrganizationTrait;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;
use App\Entity\User;
use App\Entity\EventAttendee;
use App\Entity\CommunicationMethod;
use App\Entity\Event;
use App\Entity\Reminder;
use App\Entity\TalkMessage;
use App\Entity\NotificationType;

/**
 * Notification Entity (Generated Base Class)
 *
 * System notifications for users *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to Notification.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class NotificationGenerated extends EntityBase
{
    use OrganizationTrait;

    #[ORM\Column(type: 'string', length: 255)]
    protected string $title;

    #[ORM\ManyToOne(targetEntity: User::class)]
    #[ORM\JoinColumn(nullable: false)]
    protected User $recipient;

    #[ORM\ManyToOne(targetEntity: User::class)]
    protected ?User $sender = null;

    #[ORM\Column(type: 'string', length: 20)]
    protected string $priority;

    #[ORM\Column(type: 'string', length: 500, nullable: true)]
    protected ?string $actionUrl = null;

    #[ORM\Column(name: 'read_prop', type: 'boolean')]
    protected bool $read;

    #[ORM\ManyToOne(targetEntity: EventAttendee::class, inversedBy: 'notifications')]
    protected ?EventAttendee $attendee = null;

    #[ORM\Column(type: 'boolean')]
    protected bool $archived;

    #[ORM\Column(type: 'datetime', nullable: true)]
    protected ?\DateTimeImmutable $readAt = null;

    #[ORM\ManyToOne(targetEntity: CommunicationMethod::class, inversedBy: 'notifications')]
    protected ?CommunicationMethod $communicationMethod = null;

    #[ORM\ManyToOne(targetEntity: Event::class, inversedBy: 'notifications')]
    protected ?Event $event = null;

    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $message = null;

    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $notificationStatus = null;

    #[ORM\ManyToOne(targetEntity: Reminder::class, inversedBy: 'notifications')]
    protected ?Reminder $reminder = null;

    #[ORM\Column(type: 'datetime', nullable: true)]
    protected ?\DateTimeImmutable $sentAt = null;

    #[ORM\OneToOne(targetEntity: TalkMessage::class, inversedBy: 'notification')]
    protected ?TalkMessage $talkMessage = null;

    #[ORM\ManyToOne(targetEntity: NotificationType::class, inversedBy: 'notifications')]
    protected ?NotificationType $type = null;


    public function __construct()
    {
        parent::__construct();
    }

    public function getTitle(): string    {
        return $this->title;
    }

    public function setTitle(string $title): self
    {
        $this->title = $title;
        return $this;
    }

    public function getRecipient(): App\Entity\User
    {
        return $this->recipient;
    }

    public function setRecipient(App\Entity\User $recipient): self
    {
        $this->recipient = $recipient;
        return $this;
    }

    public function getSender(): ?App\Entity\User
    {
        return $this->sender;
    }

    public function setSender(?App\Entity\User $sender): self
    {
        $this->sender = $sender;
        return $this;
    }

    public function getPriority(): string    {
        return $this->priority;
    }

    public function setPriority(string $priority): self
    {
        $this->priority = $priority;
        return $this;
    }

    public function getActionurl(): ?string    {
        return $this->actionUrl;
    }

    public function setActionurl(?string $actionUrl): self
    {
        $this->actionUrl = $actionUrl;
        return $this;
    }

    public function getRead(): bool    {
        return $this->read;
    }

    public function setRead(bool $read): self
    {
        $this->read = $read;
        return $this;
    }

    public function isRead(): bool
    {
        return $this->read === true;
    }

    public function getAttendee(): ?App\Entity\EventAttendee
    {
        return $this->attendee;
    }

    public function setAttendee(?App\Entity\EventAttendee $attendee): self
    {
        $this->attendee = $attendee;
        return $this;
    }

    public function getArchived(): bool    {
        return $this->archived;
    }

    public function setArchived(bool $archived): self
    {
        $this->archived = $archived;
        return $this;
    }

    public function isArchived(): bool
    {
        return $this->archived === true;
    }

    public function getReadat(): ?\DateTimeImmutable    {
        return $this->readAt;
    }

    public function setReadat(?\DateTimeImmutable $readAt): self
    {
        $this->readAt = $readAt;
        return $this;
    }

    public function getCommunicationmethod(): ?App\Entity\CommunicationMethod
    {
        return $this->communicationMethod;
    }

    public function setCommunicationmethod(?App\Entity\CommunicationMethod $communicationMethod): self
    {
        $this->communicationMethod = $communicationMethod;
        return $this;
    }

    public function getEvent(): ?App\Entity\Event
    {
        return $this->event;
    }

    public function setEvent(?App\Entity\Event $event): self
    {
        $this->event = $event;
        return $this;
    }

    public function getMessage(): ?string    {
        return $this->message;
    }

    public function setMessage(?string $message): self
    {
        $this->message = $message;
        return $this;
    }

    public function getNotificationstatus(): ?int    {
        return $this->notificationStatus;
    }

    public function setNotificationstatus(?int $notificationStatus): self
    {
        $this->notificationStatus = $notificationStatus;
        return $this;
    }

    public function getReminder(): ?App\Entity\Reminder
    {
        return $this->reminder;
    }

    public function setReminder(?App\Entity\Reminder $reminder): self
    {
        $this->reminder = $reminder;
        return $this;
    }

    public function getSentat(): ?\DateTimeImmutable    {
        return $this->sentAt;
    }

    public function setSentat(?\DateTimeImmutable $sentAt): self
    {
        $this->sentAt = $sentAt;
        return $this;
    }

    public function getTalkmessage(): ?App\Entity\TalkMessage
    {
        return $this->talkMessage;
    }

    public function setTalkmessage(?App\Entity\TalkMessage $talkMessage): self
    {
        $this->talkMessage = $talkMessage;
        return $this;
    }

    public function getType(): ?App\Entity\NotificationType
    {
        return $this->type;
    }

    public function setType(?App\Entity\NotificationType $type): self
    {
        $this->type = $type;
        return $this;
    }


    public function __toString(): string
    {
        return $this->title ?? ($this->getId()?->toRfc4122() ?? '');
    }
}
