<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use App\Entity\Trait\OrganizationTrait;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
                                                                                                use App\Entity\Event;
use App\Entity\EventAttendee;
use App\Entity\Reminder;
use App\Entity\NotificationType;
use App\Entity\CommunicationMethod;
use App\Entity\TalkMessage;

/**
 * Notification Entity (Generated Base Class)
 *
 * 
 *
 * This class is ALWAYS regenerated from CSV. DO NOT edit this file.
 * Add custom logic to Notification.php instead.
 *
 * @generated by Luminai Code Generator
 * @see /config/EntityNew.csv and /config/PropertyNew.csv
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class NotificationGenerated extends EntityBase
{
    use OrganizationTrait;

    #[ORM\ManyToOne(targetEntity: Event::class, inversedBy: 'notifications')]
    #[Groups(['notification:read', 'notification:write'])]
    protected ?Event $event = null;

    #[ORM\ManyToOne(targetEntity: EventAttendee::class, inversedBy: 'notifications')]
    #[Groups(['notification:read', 'notification:write'])]
    protected ?EventAttendee $attendee = null;

    #[ORM\ManyToOne(targetEntity: Reminder::class, inversedBy: 'notifications')]
    #[Groups(['notification:read', 'notification:write'])]
    protected ?Reminder $reminder = null;

    #[ORM\ManyToOne(targetEntity: NotificationType::class, inversedBy: 'notifications')]
    #[Groups(['notification:read', 'notification:write'])]
    protected ?NotificationType $type = null;

    #[ORM\ManyToOne(targetEntity: CommunicationMethod::class, inversedBy: 'notifications')]
    #[Groups(['notification:read', 'notification:write'])]
    protected ?CommunicationMethod $communicationMethod = null;

    #[ORM\Column(type: 'datetime', nullable: true)]
    #[Groups(['notification:read', 'notification:write'])]
    protected ?\DateTimeInterface $sentAt = null;

    #[ORM\Column(type: 'integer', nullable: true)]
    #[Groups(['notification:read', 'notification:write'])]
    protected ?int $notificationStatus = null;

    #[ORM\OneToOne(targetEntity: TalkMessage::class, inversedBy: 'notification')]
    #[Groups(['notification:read', 'notification:write'])]
    protected ?TalkMessage $talkMessage = null;

    #[ORM\Column(type: 'text', nullable: true)]
    #[Groups(['notification:read', 'notification:write'])]
    protected ?string $message = null;


    public function __construct()
    {
        parent::__construct();
    }

    public function getEvent(): ?Event
    {
        return $this->event;
    }

    public function setEvent(?Event $event): self
    {
        $this->event = $event;
        return $this;
    }

    public function getAttendee(): ?EventAttendee
    {
        return $this->attendee;
    }

    public function setAttendee(?EventAttendee $attendee): self
    {
        $this->attendee = $attendee;
        return $this;
    }

    public function getReminder(): ?Reminder
    {
        return $this->reminder;
    }

    public function setReminder(?Reminder $reminder): self
    {
        $this->reminder = $reminder;
        return $this;
    }

    public function getType(): ?NotificationType
    {
        return $this->type;
    }

    public function setType(?NotificationType $type): self
    {
        $this->type = $type;
        return $this;
    }

    public function getCommunicationmethod(): ?CommunicationMethod
    {
        return $this->communicationMethod;
    }

    public function setCommunicationmethod(?CommunicationMethod $communicationMethod): self
    {
        $this->communicationMethod = $communicationMethod;
        return $this;
    }

    public function getSentat(): ?\DateTimeInterface
    {
        return $this->sentAt;
    }

    public function setSentat(?\DateTimeInterface $sentAt): self
    {
        $this->sentAt = $sentAt;
        return $this;
    }

    
    public function getNotificationstatus(): ?int
    {
        return $this->notificationStatus;
    }

    public function setNotificationstatus(?int $notificationStatus): self
    {
        $this->notificationStatus = $notificationStatus;
        return $this;
    }

    
    public function getTalkmessage(): ?TalkMessage
    {
        return $this->talkMessage;
    }

    public function setTalkmessage(?TalkMessage $talkMessage): self
    {
        $this->talkMessage = $talkMessage;
        return $this;
    }

    public function getMessage(): ?string
    {
        return $this->message;
    }

    public function setMessage(?string $message): self
    {
        $this->message = $message;
        return $this;
    }

    

    public function __toString(): string
    {
        return (string) $this->getId()->toRfc4122();
    }
}
