<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
use App\Entity\Organization;
use App\Entity\User;
use App\Entity\Course;
use App\Entity\CourseLecture;
use App\Entity\StudentLecture;

/**
 * StudentCourse Entity (Generated Base Class)
 *
 * Student course enrollments and participation *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to StudentCourse.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class StudentCourseGenerated extends EntityBase
{
    #[Groups(['studentcourse:read', 'studentcourse:write'])]
    #[ORM\ManyToOne(targetEntity: Organization::class, inversedBy: 'studentCourses')]
    #[ORM\JoinColumn(nullable: false)]
    protected Organization $organization;

    #[Groups(['student_course:read', 'student_course:write'])]
    #[ORM\Column(type: 'datetime_immutable')]
    protected \DateTimeImmutable $enrolledAt;

    #[Groups(['student_course:read', 'student_course:write'])]
    #[ORM\Column(type: 'datetime_immutable', nullable: true)]
    protected ?\DateTimeImmutable $startDate = null;

    #[Groups(['student_course:read', 'student_course:write'])]
    #[ORM\Column(type: 'datetime_immutable', nullable: true)]
    protected ?\DateTimeImmutable $lastDate = null;

    #[Groups(['student_course:read', 'student_course:write'])]
    #[ORM\Column(type: 'float', precision: 10, scale: 2)]
    protected float $progressSeconds = 0;

    #[Groups(['student_course:read', 'student_course:write'])]
    #[ORM\Column(type: 'decimal', precision: 5, scale: 2)]
    #[Assert\Range(max: 100, min: 0)]
    protected string $progressPercentage = '0';

    #[Groups(['student_course:read', 'student_course:write'])]
    #[ORM\Column(type: 'datetime_immutable', nullable: true)]
    protected ?\DateTimeImmutable $completedAt = null;

    #[Groups(['student_course:read', 'student_course:write'])]
    #[ORM\ManyToOne(targetEntity: User::class, inversedBy: 'studentCourses')]
    #[ORM\JoinColumn(nullable: false)]
    protected User $student;

    #[Groups(['student_course:read', 'student_course:write'])]
    #[ORM\ManyToOne(targetEntity: Course::class, inversedBy: 'studentCourses')]
    #[ORM\JoinColumn(nullable: false)]
    protected Course $course;

    #[Groups(['student_course:read'])]
    #[ORM\ManyToOne(targetEntity: CourseLecture::class, inversedBy: 'studentCoursesOnThisLecture')]
    protected ?CourseLecture $currentLecture = null;

    #[Groups(['student_course:read'])]
    #[ORM\OneToMany(targetEntity: StudentLecture::class, mappedBy: 'studentCourse', fetch: 'LAZY')]
    protected Collection $studentLectures;

    #[Groups(['student_course:read', 'student_course:write'])]
    #[ORM\Column(type: 'boolean')]
    protected bool $active = true;


    public function __construct()
    {
        parent::__construct();
        $this->studentLectures = new ArrayCollection();
    }

    public function getOrganization(): Organization
    {
        return $this->organization;
    }

    public function setOrganization(Organization $organization): self
    {
        $this->organization = $organization;
        return $this;
    }

    public function getEnrolledAt(): \DateTimeImmutable    {
        return $this->enrolledAt;
    }

    public function setEnrolledAt(\DateTimeImmutable $enrolledAt): self
    {
        $this->enrolledAt = $enrolledAt;
        return $this;
    }

    public function getStartDate(): ?\DateTimeImmutable    {
        return $this->startDate;
    }

    public function setStartDate(?\DateTimeImmutable $startDate): self
    {
        $this->startDate = $startDate;
        return $this;
    }

    public function getLastDate(): ?\DateTimeImmutable    {
        return $this->lastDate;
    }

    public function setLastDate(?\DateTimeImmutable $lastDate): self
    {
        $this->lastDate = $lastDate;
        return $this;
    }

    public function getProgressSeconds(): float    {
        return $this->progressSeconds;
    }

    public function setProgressSeconds(float $progressSeconds): self
    {
        $this->progressSeconds = $progressSeconds;
        return $this;
    }

    public function getProgressPercentage(): string    {
        return $this->progressPercentage;
    }

    public function setProgressPercentage(string $progressPercentage): self
    {
        $this->progressPercentage = $progressPercentage;
        return $this;
    }

    public function getCompletedAt(): ?\DateTimeImmutable    {
        return $this->completedAt;
    }

    public function setCompletedAt(?\DateTimeImmutable $completedAt): self
    {
        $this->completedAt = $completedAt;
        return $this;
    }

    public function getStudent(): User
    {
        return $this->student;
    }

    public function setStudent(User $student): self
    {
        $this->student = $student;
        return $this;
    }

    public function getCourse(): Course
    {
        return $this->course;
    }

    public function setCourse(Course $course): self
    {
        $this->course = $course;
        return $this;
    }

    public function getCurrentLecture(): ?CourseLecture
    {
        return $this->currentLecture;
    }

    public function setCurrentLecture(?CourseLecture $currentLecture): self
    {
        $this->currentLecture = $currentLecture;
        return $this;
    }

    /**
     * @return Collection<int, StudentLecture>
     */
    public function getStudentLectures(): Collection
    {
        return $this->studentLectures;
    }

    public function addStudentLecture(StudentLecture $studentLecture): self
    {
        if (!$this->studentLectures->contains($studentLecture)) {
            $this->studentLectures->add($studentLecture);
            $studentLecture->setStudentCourse($this);
        }
        return $this;
    }

    public function removeStudentLecture(StudentLecture $studentLecture): self
    {
        if ($this->studentLectures->removeElement($studentLecture)) {
            if ($studentLecture->getStudentCourse() === $this) {
                $studentLecture->setStudentCourse(null);
            }
        }
        return $this;
    }

    public function getActive(): bool    {
        return $this->active;
    }

    public function setActive(bool $active): self
    {
        $this->active = $active;
        return $this;
    }

    public function isActive(): bool
    {
        return $this->active === true;
    }


    public function __toString(): string
    {
        return $this->getId()?->toRfc4122() ?? '';
    }
}
