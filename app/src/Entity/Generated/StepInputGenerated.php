<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use App\Entity\Step;
use App\Entity\StepConnection;

/**
 * StepInput Entity (Generated Base Class)
 *
 * Input parameters for workflow steps *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to StepInput.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class StepInputGenerated extends EntityBase
{
    #[ORM\ManyToOne(targetEntity: Step::class, inversedBy: 'inputs')]
    #[ORM\JoinColumn(nullable: false)]
    protected Step $step;

    #[ORM\Column(type: 'string', length: 255)]
    protected string $name;

    #[ORM\Column(name: 'type_prop', type: 'enum')]
    protected string $type = ANY;

    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    #[Assert\3(max: 255, constraint: 'Length')]
    protected ?string $slug = null;

    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $prompt = null;

    #[ORM\OneToMany(targetEntity: StepConnection::class, mappedBy: 'targetInput', orphanRemoval: true, fetch: 'LAZY')]
    protected Collection $connections;


    public function __construct()
    {
        parent::__construct();
        $this->connections = new ArrayCollection();
    }

    public function getStep(): App\Entity\Step
    {
        return $this->step;
    }

    public function setStep(App\Entity\Step $step): self
    {
        $this->step = $step;
        return $this;
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getType(): string    {
        return $this->type;
    }

    public function setType(string $type): self
    {
        $this->type = $type;
        return $this;
    }

    public function getSlug(): ?string    {
        return $this->slug;
    }

    public function setSlug(?string $slug): self
    {
        $this->slug = $slug;
        return $this;
    }

    public function getPrompt(): ?string    {
        return $this->prompt;
    }

    public function setPrompt(?string $prompt): self
    {
        $this->prompt = $prompt;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\StepConnection>
     */
    public function getConnections(): Collection
    {
        return $this->connections;
    }

    public function addConnection(App\Entity\StepConnection $connection): self
    {
        if (!$this->connections->contains($connection)) {
            $this->connections->add($connection);
            $connection->setTargetinput($this);
        }
        return $this;
    }

    public function removeConnection(App\Entity\StepConnection $connection): self
    {
        if ($this->connections->removeElement($connection)) {
            if ($connection->getTargetinput() === $this) {
                $connection->setTargetinput(null);
            }
        }
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? ($this->getId()?->toRfc4122() ?? '');
    }
}
