<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use App\Entity\Trait\OrganizationTrait;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
                                                use App\Entity\TalkMessage;
use App\Entity\Product;
use App\Entity\Event;

/**
 * Attachment Entity (Generated Base Class)
 *
 * 
 *
 * This class is ALWAYS regenerated from CSV. DO NOT edit this file.
 * Add custom logic to Attachment.php instead.
 *
 * @generated by Luminai Code Generator
 * @see /config/EntityNew.csv and /config/PropertyNew.csv
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class AttachmentGenerated extends EntityBase
{
    use OrganizationTrait;

    #[ORM\Column(type: 'string')]
    #[Assert\NotBlank]
    #[Assert\Length(max: 255)]
    #[Groups(['attachment:read', 'attachment:write'])]
    protected string $filename;

    #[ORM\Column(type: 'string', nullable: true)]
    #[Assert\Length(max: 255)]
    #[Groups(['attachment:read', 'attachment:write'])]
    protected ?string $fileType = null;

    #[ORM\Column(type: 'integer', nullable: true)]
    #[Groups(['attachment:read', 'attachment:write'])]
    protected ?int $fileSize = null;

    #[ORM\Column(type: 'string', nullable: true)]
    #[Assert\Length(max: 255)]
    #[Groups(['attachment:read', 'attachment:write'])]
    protected ?string $url = null;

    #[ORM\ManyToOne(targetEntity: TalkMessage::class, inversedBy: 'attachments')]
    #[Groups(['attachment:read', 'attachment:write'])]
    protected ?TalkMessage $talkMessage = null;

    #[ORM\ManyToOne(targetEntity: Product::class, inversedBy: 'attachments')]
    #[Groups(['attachment:read', 'attachment:write'])]
    protected ?Product $product = null;

    #[ORM\ManyToOne(targetEntity: Event::class, inversedBy: 'attachments')]
    #[Groups(['attachment:read', 'attachment:write'])]
    protected ?Event $event = null;


    public function __construct()
    {
        parent::__construct();
    }

    public function getFilename(): string
    {
        return $this->filename;
    }

    public function setFilename(string $filename): self
    {
        $this->filename = $filename;
        return $this;
    }

    
    public function getFiletype(): ?string
    {
        return $this->fileType;
    }

    public function setFiletype(?string $fileType): self
    {
        $this->fileType = $fileType;
        return $this;
    }

    
    public function getFilesize(): ?int
    {
        return $this->fileSize;
    }

    public function setFilesize(?int $fileSize): self
    {
        $this->fileSize = $fileSize;
        return $this;
    }

    
    public function getUrl(): ?string
    {
        return $this->url;
    }

    public function setUrl(?string $url): self
    {
        $this->url = $url;
        return $this;
    }

    
    public function getTalkmessage(): ?TalkMessage
    {
        return $this->talkMessage;
    }

    public function setTalkmessage(?TalkMessage $talkMessage): self
    {
        $this->talkMessage = $talkMessage;
        return $this;
    }

    public function getProduct(): ?Product
    {
        return $this->product;
    }

    public function setProduct(?Product $product): self
    {
        $this->product = $product;
        return $this;
    }

    public function getEvent(): ?Event
    {
        return $this->event;
    }

    public function setEvent(?Event $event): self
    {
        $this->event = $event;
        return $this;
    }


    public function __toString(): string
    {
        return (string) $this->getId()->toRfc4122();
    }
}
