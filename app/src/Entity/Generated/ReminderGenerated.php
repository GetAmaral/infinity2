<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use App\Entity\Trait\OrganizationTrait;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use App\Entity\CommunicationMethod;
use App\Entity\Event;
use App\Entity\Notification;

/**
 * Reminder Entity (Generated Base Class)
 *
 * Automated reminders and notifications for events, tasks, meetings, and follow-ups with multi-channel delivery support *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to Reminder.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class ReminderGenerated extends EntityBase
{
    use OrganizationTrait;

    #[ORM\Column(type: 'string', length: 255)]
    protected string $name;

    #[ORM\Column(type: 'boolean', nullable: true)]
    protected ?bool $active = true;

    #[ORM\ManyToOne(targetEntity: CommunicationMethod::class, inversedBy: 'reminders')]
    protected ?CommunicationMethod $communicationMethod = null;

    #[ORM\ManyToOne(targetEntity: Event::class, inversedBy: 'reminders')]
    protected ?Event $event = null;

    #[ORM\Column(type: 'integer')]
    protected int $minutesBeforeStart = 15;

    #[ORM\OneToMany(targetEntity: Notification::class, mappedBy: 'reminder', fetch: 'LAZY')]
    protected Collection $notifications;


    public function __construct()
    {
        parent::__construct();
        $this->notifications = new ArrayCollection();
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getActive(): ?bool    {
        return $this->active;
    }

    public function setActive(?bool $active): self
    {
        $this->active = $active;
        return $this;
    }

    public function isActive(): bool
    {
        return $this->active === true;
    }

    public function getCommunicationmethod(): ?App\Entity\CommunicationMethod
    {
        return $this->communicationMethod;
    }

    public function setCommunicationmethod(?App\Entity\CommunicationMethod $communicationMethod): self
    {
        $this->communicationMethod = $communicationMethod;
        return $this;
    }

    public function getEvent(): ?App\Entity\Event
    {
        return $this->event;
    }

    public function setEvent(?App\Entity\Event $event): self
    {
        $this->event = $event;
        return $this;
    }

    public function getMinutesbeforestart(): int    {
        return $this->minutesBeforeStart;
    }

    public function setMinutesbeforestart(int $minutesBeforeStart): self
    {
        $this->minutesBeforeStart = $minutesBeforeStart;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Notification>
     */
    public function getNotifications(): Collection
    {
        return $this->notifications;
    }

    public function addNotification(App\Entity\Notification $notification): self
    {
        if (!$this->notifications->contains($notification)) {
            $this->notifications->add($notification);
            $notification->setReminder($this);
        }
        return $this;
    }

    public function removeNotification(App\Entity\Notification $notification): self
    {
        if ($this->notifications->removeElement($notification)) {
            if ($notification->getReminder() === $this) {
                $notification->setReminder(null);
            }
        }
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? ($this->getId()?->toRfc4122() ?? '');
    }
}
