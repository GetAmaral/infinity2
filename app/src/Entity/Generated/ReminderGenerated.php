<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use App\Entity\Trait\OrganizationTrait;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
                                                use App\Entity\Event;
use App\Entity\CommunicationMethod;
use App\Entity\Notification;

/**
 * Reminder Entity (Generated Base Class)
 *
 * 
 *
 * This class is ALWAYS regenerated from CSV. DO NOT edit this file.
 * Add custom logic to Reminder.php instead.
 *
 * @generated by Luminai Code Generator
 * @see /config/EntityNew.csv and /config/PropertyNew.csv
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class ReminderGenerated extends EntityBase
{
    use OrganizationTrait;

    #[ORM\Column(type: 'string', nullable: true)]
    #[Assert\Length(max: 255)]
    #[Groups(['reminder:read', 'reminder:write'])]
    protected ?string $name = null;

    #[ORM\ManyToOne(targetEntity: Event::class, inversedBy: 'reminders')]
    #[Groups(['reminder:read', 'reminder:write'])]
    protected ?Event $event = null;

    #[ORM\ManyToOne(targetEntity: CommunicationMethod::class, inversedBy: 'reminders')]
    #[Groups(['reminder:read', 'reminder:write'])]
    protected ?CommunicationMethod $communicationMethod = null;

    #[ORM\OneToMany(targetEntity: Notification::class, mappedBy: 'reminder', fetch: 'LAZY')]
    #[Groups(['reminder:read', 'reminder:write'])]
    protected Collection $notifications;

    #[ORM\Column(type: 'integer', nullable: true)]
    #[Groups(['reminder:read', 'reminder:write'])]
    protected ?int $minutesBeforeStart = null;

    #[ORM\Column(type: 'boolean', nullable: true)]
    #[Groups(['reminder:read', 'reminder:write'])]
    protected ?bool $default = null;


    public function __construct()
    {
        parent::__construct();
        $this->notifications = new ArrayCollection();
    }

    public function getName(): ?string
    {
        return $this->name;
    }

    public function setName(?string $name): self
    {
        $this->name = $name;
        return $this;
    }

    
    public function getEvent(): ?Event
    {
        return $this->event;
    }

    public function setEvent(?Event $event): self
    {
        $this->event = $event;
        return $this;
    }

    public function getCommunicationmethod(): ?CommunicationMethod
    {
        return $this->communicationMethod;
    }

    public function setCommunicationmethod(?CommunicationMethod $communicationMethod): self
    {
        $this->communicationMethod = $communicationMethod;
        return $this;
    }

    /**
     * @return Collection<int, Notification>
     */
    public function getNotifications(): Collection
    {
        return $this->notifications;
    }

    public function addNotification(Notification $notification): self
    {
        if (!$this->notifications->contains($notification)) {
            $this->notifications->add($notification);
        }
        return $this;
    }

    public function removeNotification(Notification $notification): self
    {
        if ($this->notifications->removeElement($notification)) {
        }
        return $this;
    }

    public function getMinutesbeforestart(): ?int
    {
        return $this->minutesBeforeStart;
    }

    public function setMinutesbeforestart(?int $minutesBeforeStart): self
    {
        $this->minutesBeforeStart = $minutesBeforeStart;
        return $this;
    }

    
    public function getDefault(): ?bool
    {
        return $this->default;
    }

    public function setDefault(?bool $default): self
    {
        $this->default = $default;
        return $this;
    }

    

    public function __toString(): string
    {
        return $this->name ?? '';
    }
}
