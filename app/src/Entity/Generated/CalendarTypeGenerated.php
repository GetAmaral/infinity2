<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use App\Entity\Trait\OrganizationTrait;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use App\Entity\Calendar;

/**
 * Calendar Type Entity (Generated Base Class)
 *
 * Calendar types (Personal, Shared, Public, etc.) *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to CalendarType.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class CalendarTypeGenerated extends EntityBase
{
    use OrganizationTrait;

    #[ORM\Column(type: 'string', length: 255)]
    protected string $name;

    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $description = null;

    #[ORM\Column(type: 'string', length: 7)]
    protected string $color = '#0dcaf0';

    #[ORM\OneToMany(targetEntity: Calendar::class, mappedBy: 'calendarType', fetch: 'LAZY')]
    protected Collection $calendars;

    #[ORM\Column(type: 'string', length: 50)]
    protected string $icon = 'bi-calendar3';

    #[ORM\Column(type: 'boolean')]
    protected bool $active = true;

    #[ORM\Column(name: 'default_prop', type: 'boolean')]
    protected bool $default = false;

    #[ORM\Column(type: 'string', length: 20)]
    protected string $visibility = 'personal';

    #[ORM\Column(type: 'string', length: 20)]
    protected string $access_level = 'owner_only';

    #[ORM\Column(type: 'integer')]
    protected int $sort_order = 100;

    #[ORM\Column(type: 'boolean')]
    protected bool $allow_sharing = true;

    #[ORM\Column(type: 'boolean')]
    protected bool $require_approval = false;

    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $max_calendars_per_user = null;


    public function __construct()
    {
        parent::__construct();
        $this->calendars = new ArrayCollection();
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getDescription(): ?string    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    public function getColor(): string    {
        return $this->color;
    }

    public function setColor(string $color): self
    {
        $this->color = $color;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\Calendar>
     */
    public function getCalendars(): Collection
    {
        return $this->calendars;
    }

    public function addCalendar(App\Entity\Calendar $calendar): self
    {
        if (!$this->calendars->contains($calendar)) {
            $this->calendars->add($calendar);
            $calendar->setCalendartype($this);
        }
        return $this;
    }

    public function removeCalendar(App\Entity\Calendar $calendar): self
    {
        if ($this->calendars->removeElement($calendar)) {
            if ($calendar->getCalendartype() === $this) {
                $calendar->setCalendartype(null);
            }
        }
        return $this;
    }

    public function getIcon(): string    {
        return $this->icon;
    }

    public function setIcon(string $icon): self
    {
        $this->icon = $icon;
        return $this;
    }

    public function getActive(): bool    {
        return $this->active;
    }

    public function setActive(bool $active): self
    {
        $this->active = $active;
        return $this;
    }

    public function isActive(): bool
    {
        return $this->active === true;
    }

    public function getDefault(): bool    {
        return $this->default;
    }

    public function setDefault(bool $default): self
    {
        $this->default = $default;
        return $this;
    }

    public function isDefault(): bool
    {
        return $this->default === true;
    }

    public function getVisibility(): string    {
        return $this->visibility;
    }

    public function setVisibility(string $visibility): self
    {
        $this->visibility = $visibility;
        return $this;
    }

    public function getAccess_level(): string    {
        return $this->access_level;
    }

    public function setAccess_level(string $access_level): self
    {
        $this->access_level = $access_level;
        return $this;
    }

    public function getSort_order(): int    {
        return $this->sort_order;
    }

    public function setSort_order(int $sort_order): self
    {
        $this->sort_order = $sort_order;
        return $this;
    }

    public function getAllow_sharing(): bool    {
        return $this->allow_sharing;
    }

    public function setAllow_sharing(bool $allow_sharing): self
    {
        $this->allow_sharing = $allow_sharing;
        return $this;
    }

    public function isAllow_sharing(): bool
    {
        return $this->allow_sharing === true;
    }

    public function getRequire_approval(): bool    {
        return $this->require_approval;
    }

    public function setRequire_approval(bool $require_approval): self
    {
        $this->require_approval = $require_approval;
        return $this;
    }

    public function isRequire_approval(): bool
    {
        return $this->require_approval === true;
    }

    public function getMax_calendars_per_user(): ?int    {
        return $this->max_calendars_per_user;
    }

    public function setMax_calendars_per_user(?int $max_calendars_per_user): self
    {
        $this->max_calendars_per_user = $max_calendars_per_user;
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? ($this->getId()?->toRfc4122() ?? '');
    }
}
