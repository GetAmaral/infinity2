<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use App\Entity\CourseModule;
use App\Entity\StudentLecture;
use App\Entity\StudentCourse;

/**
 * CourseLecture Entity (Generated Base Class)
 *
 * Individual lectures and learning content *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to CourseLecture.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class CourseLectureGenerated extends EntityBase
{
    #[ORM\Column(type: 'string', length: 255)]
    protected string $name;

    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $description = null;

    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $videoFileName = null;

    #[ORM\Column(type: 'string', length: 500, nullable: true)]
    protected ?string $videoPath = null;

    #[ORM\Column(type: 'string', length: 20)]
    protected string $processingStatus = 'pending';

    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $processingStep = null;

    #[ORM\Column(type: 'integer')]
    protected int $processingPercentage = 0;

    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $processingError = null;

    #[ORM\Column(type: 'datetime_immutable', nullable: true)]
    protected ?\DateTimeImmutable $processedAt = null;

    #[ORM\Column(type: 'integer')]
    protected int $viewOrder = 0;

    #[ORM\Column(type: 'integer')]
    protected int $lengthSeconds = 0;

    #[ORM\ManyToOne(targetEntity: CourseModule::class, inversedBy: 'lectures')]
    #[ORM\JoinColumn(nullable: false)]
    protected CourseModule $courseModule;

    #[ORM\OneToMany(targetEntity: StudentLecture::class, mappedBy: 'lecture', fetch: 'LAZY')]
    protected Collection $studentLectures;

    #[ORM\OneToMany(targetEntity: StudentCourse::class, mappedBy: 'currentLecture', fetch: 'LAZY')]
    protected Collection $studentCoursesOnThisLecture;


    public function __construct()
    {
        parent::__construct();
        $this->studentLectures = new ArrayCollection();
        $this->studentCoursesOnThisLecture = new ArrayCollection();
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getDescription(): ?string    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    public function getVideofilename(): ?string    {
        return $this->videoFileName;
    }

    public function setVideofilename(?string $videoFileName): self
    {
        $this->videoFileName = $videoFileName;
        return $this;
    }

    public function getVideopath(): ?string    {
        return $this->videoPath;
    }

    public function setVideopath(?string $videoPath): self
    {
        $this->videoPath = $videoPath;
        return $this;
    }

    public function getProcessingstatus(): string    {
        return $this->processingStatus;
    }

    public function setProcessingstatus(string $processingStatus): self
    {
        $this->processingStatus = $processingStatus;
        return $this;
    }

    public function getProcessingstep(): ?string    {
        return $this->processingStep;
    }

    public function setProcessingstep(?string $processingStep): self
    {
        $this->processingStep = $processingStep;
        return $this;
    }

    public function getProcessingpercentage(): int    {
        return $this->processingPercentage;
    }

    public function setProcessingpercentage(int $processingPercentage): self
    {
        $this->processingPercentage = $processingPercentage;
        return $this;
    }

    public function getProcessingerror(): ?string    {
        return $this->processingError;
    }

    public function setProcessingerror(?string $processingError): self
    {
        $this->processingError = $processingError;
        return $this;
    }

    public function getProcessedat(): ?\DateTimeImmutable    {
        return $this->processedAt;
    }

    public function setProcessedat(?\DateTimeImmutable $processedAt): self
    {
        $this->processedAt = $processedAt;
        return $this;
    }

    public function getVieworder(): int    {
        return $this->viewOrder;
    }

    public function setVieworder(int $viewOrder): self
    {
        $this->viewOrder = $viewOrder;
        return $this;
    }

    public function getLengthseconds(): int    {
        return $this->lengthSeconds;
    }

    public function setLengthseconds(int $lengthSeconds): self
    {
        $this->lengthSeconds = $lengthSeconds;
        return $this;
    }

    public function getCoursemodule(): App\Entity\CourseModule
    {
        return $this->courseModule;
    }

    public function setCoursemodule(App\Entity\CourseModule $courseModule): self
    {
        $this->courseModule = $courseModule;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\StudentLecture>
     */
    public function getStudentlectures(): Collection
    {
        return $this->studentLectures;
    }

    public function addStudentlecture(App\Entity\StudentLecture $tudentLecture): self
    {
        if (!$this->studentLectures->contains($tudentLecture)) {
            $this->studentLectures->add($tudentLecture);
            $tudentLecture->setLecture($this);
        }
        return $this;
    }

    public function removeStudentlecture(App\Entity\StudentLecture $tudentLecture): self
    {
        if ($this->studentLectures->removeElement($tudentLecture)) {
            if ($tudentLecture->getLecture() === $this) {
                $tudentLecture->setLecture(null);
            }
        }
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\StudentCourse>
     */
    public function getStudentcoursesonthislecture(): Collection
    {
        return $this->studentCoursesOnThisLecture;
    }

    public function addStudentcoureonthilecture(App\Entity\StudentCourse $tudentCoureOnThiLecture): self
    {
        if (!$this->studentCoursesOnThisLecture->contains($tudentCoureOnThiLecture)) {
            $this->studentCoursesOnThisLecture->add($tudentCoureOnThiLecture);
            $tudentCoureOnThiLecture->setCurrentlecture($this);
        }
        return $this;
    }

    public function removeStudentcoureonthilecture(App\Entity\StudentCourse $tudentCoureOnThiLecture): self
    {
        if ($this->studentCoursesOnThisLecture->removeElement($tudentCoureOnThiLecture)) {
            if ($tudentCoureOnThiLecture->getCurrentlecture() === $this) {
                $tudentCoureOnThiLecture->setCurrentlecture(null);
            }
        }
        return $this;
    }


    public function __toString(): string
    {
        return $this->name ?? ($this->getId()?->toRfc4122() ?? '');
    }
}
