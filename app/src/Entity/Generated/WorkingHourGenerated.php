<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
use App\Entity\Organization;
use App\Entity\Calendar;
use App\Entity\Event;
use App\Entity\TimeZone;

/**
 * Working Hour Entity (Generated Base Class)
 *
 * Defines employee/user working hours and availability schedules for calendar management and appointment booking *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to WorkingHour.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class WorkingHourGenerated extends EntityBase
{
    #[Groups(['workinghour:read', 'workinghour:write'])]
    #[ORM\ManyToOne(targetEntity: Organization::class, inversedBy: 'workingHours')]
    #[ORM\JoinColumn(nullable: false)]
    protected Organization $organization;

    #[Groups(['workinghour:read', 'workinghour:write'])]
    #[ORM\Column(type: 'string', length: 255, nullable: true)]
    protected ?string $description = null;

    #[Groups(['workinghour:read', 'workinghour:write'])]
    #[ORM\ManyToOne(targetEntity: Calendar::class, inversedBy: 'workingHours')]
    protected ?Calendar $calendar = null;

    #[Groups(['workinghour:read', 'workinghour:write'])]
    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $dayOfWeek = null;

    #[Groups(['workinghour:read', 'workinghour:write'])]
    #[ORM\Column(type: 'time', nullable: true)]
    protected ?string $endTime = null;

    #[Groups(['workinghour:read', 'workinghour:write'])]
    #[ORM\ManyToOne(targetEntity: Event::class, inversedBy: 'workingHours')]
    protected ?Event $event = null;

    #[Groups(['workinghour:read', 'workinghour:write'])]
    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $minimalMinutesEventDuration = null;

    #[Groups(['workinghour:read', 'workinghour:write'])]
    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $notes = null;

    #[Groups(['workinghour:read', 'workinghour:write'])]
    #[ORM\Column(type: 'time', nullable: true)]
    protected ?string $startTime = null;

    #[Groups(['workinghour:read', 'workinghour:write'])]
    #[ORM\ManyToOne(targetEntity: TimeZone::class, inversedBy: 'workingHours')]
    #[ORM\JoinColumn(nullable: false)]
    protected TimeZone $timeZone;


    public function __construct()
    {
        parent::__construct();
    }

    public function getOrganization(): Organization
    {
        return $this->organization;
    }

    public function setOrganization(Organization $organization): self
    {
        $this->organization = $organization;
        return $this;
    }

    public function getDescription(): ?string    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    public function getCalendar(): ?Calendar
    {
        return $this->calendar;
    }

    public function setCalendar(?Calendar $calendar): self
    {
        $this->calendar = $calendar;
        return $this;
    }

    public function getDayOfWeek(): ?int    {
        return $this->dayOfWeek;
    }

    public function setDayOfWeek(?int $dayOfWeek): self
    {
        $this->dayOfWeek = $dayOfWeek;
        return $this;
    }

    public function getEndTime(): ?string    {
        return $this->endTime;
    }

    public function setEndTime(?string $endTime): self
    {
        $this->endTime = $endTime;
        return $this;
    }

    public function getEvent(): ?Event
    {
        return $this->event;
    }

    public function setEvent(?Event $event): self
    {
        $this->event = $event;
        return $this;
    }

    public function getMinimalMinutesEventDuration(): ?int    {
        return $this->minimalMinutesEventDuration;
    }

    public function setMinimalMinutesEventDuration(?int $minimalMinutesEventDuration): self
    {
        $this->minimalMinutesEventDuration = $minimalMinutesEventDuration;
        return $this;
    }

    public function getNotes(): ?string    {
        return $this->notes;
    }

    public function setNotes(?string $notes): self
    {
        $this->notes = $notes;
        return $this;
    }

    public function getStartTime(): ?string    {
        return $this->startTime;
    }

    public function setStartTime(?string $startTime): self
    {
        $this->startTime = $startTime;
        return $this;
    }

    public function getTimeZone(): TimeZone
    {
        return $this->timeZone;
    }

    public function setTimeZone(TimeZone $timeZone): self
    {
        $this->timeZone = $timeZone;
        return $this;
    }


    public function __toString(): string
    {
        return $this->getId()?->toRfc4122() ?? '';
    }
}
