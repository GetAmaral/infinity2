<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use App\Entity\Trait\OrganizationTrait;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
                                                use App\Entity\Calendar;
use App\Entity\Event;
use App\Entity\TimeZone;

/**
 * WorkingHour Entity (Generated Base Class)
 *
 * 
 *
 * This class is ALWAYS regenerated from CSV. DO NOT edit this file.
 * Add custom logic to WorkingHour.php instead.
 *
 * @generated by Luminai Code Generator
 * @see /config/EntityNew.csv and /config/PropertyNew.csv
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class WorkingHourGenerated extends EntityBase
{
    use OrganizationTrait;

    #[ORM\Column(type: 'string', nullable: true)]
    #[Assert\Length(max: 255)]
    #[Groups(['workinghour:read', 'workinghour:write'])]
    protected ?string $description = null;

    #[ORM\ManyToOne(targetEntity: Calendar::class, inversedBy: 'workingHours')]
    #[Groups(['workinghour:read', 'workinghour:write'])]
    protected ?Calendar $calendar = null;

    #[ORM\ManyToOne(targetEntity: Event::class, inversedBy: 'workingHours')]
    #[Groups(['workinghour:read', 'workinghour:write'])]
    protected ?Event $event = null;

    #[ORM\Column(type: 'integer', nullable: true)]
    #[Groups(['workinghour:read', 'workinghour:write'])]
    protected ?int $dayOfWeek = null;

    #[ORM\Column(type: 'time', nullable: true)]
    #[Groups(['workinghour:read', 'workinghour:write'])]
    protected ?\DateTimeInterface $startTime = null;

    #[ORM\Column(type: 'time', nullable: true)]
    #[Groups(['workinghour:read', 'workinghour:write'])]
    protected ?\DateTimeInterface $endTime = null;

    #[ORM\ManyToOne(targetEntity: TimeZone::class, inversedBy: 'workingHours')]
    #[Groups(['workinghour:read', 'workinghour:write'])]
    protected ?TimeZone $timeZone = null;

    #[ORM\Column(type: 'integer', nullable: true)]
    #[Groups(['workinghour:read', 'workinghour:write'])]
    protected ?int $minimalMinutesEventDuration = null;

    #[ORM\Column(type: 'text', nullable: true)]
    #[Groups(['workinghour:read', 'workinghour:write'])]
    protected ?string $notes = null;


    public function __construct()
    {
        parent::__construct();
    }

    public function getDescription(): ?string
    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    
    public function getCalendar(): ?Calendar
    {
        return $this->calendar;
    }

    public function setCalendar(?Calendar $calendar): self
    {
        $this->calendar = $calendar;
        return $this;
    }

    public function getEvent(): ?Event
    {
        return $this->event;
    }

    public function setEvent(?Event $event): self
    {
        $this->event = $event;
        return $this;
    }

    public function getDayofweek(): ?int
    {
        return $this->dayOfWeek;
    }

    public function setDayofweek(?int $dayOfWeek): self
    {
        $this->dayOfWeek = $dayOfWeek;
        return $this;
    }

    
    public function getStarttime(): ?\DateTimeInterface
    {
        return $this->startTime;
    }

    public function setStarttime(?\DateTimeInterface $startTime): self
    {
        $this->startTime = $startTime;
        return $this;
    }

    
    public function getEndtime(): ?\DateTimeInterface
    {
        return $this->endTime;
    }

    public function setEndtime(?\DateTimeInterface $endTime): self
    {
        $this->endTime = $endTime;
        return $this;
    }

    
    public function getTimezone(): ?TimeZone
    {
        return $this->timeZone;
    }

    public function setTimezone(?TimeZone $timeZone): self
    {
        $this->timeZone = $timeZone;
        return $this;
    }

    public function getMinimalminuteseventduration(): ?int
    {
        return $this->minimalMinutesEventDuration;
    }

    public function setMinimalminuteseventduration(?int $minimalMinutesEventDuration): self
    {
        $this->minimalMinutesEventDuration = $minimalMinutesEventDuration;
        return $this;
    }

    
    public function getNotes(): ?string
    {
        return $this->notes;
    }

    public function setNotes(?string $notes): self
    {
        $this->notes = $notes;
        return $this;
    }

    

    public function __toString(): string
    {
        return (string) $this->getId()->toRfc4122();
    }
}
