<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
use App\Entity\Trait\OrganizationTrait;
use Doctrine\ORM\Mapping as ORM;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Symfony\Component\Validator\Constraints as Assert;
use App\Entity\PipelineStageTemplate;

/**
 * PipelineTemplate Entity (Generated Base Class)
 *
 * Pipeline templates for quick setup *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to PipelineTemplate.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class PipelineTemplateGenerated extends EntityBase
{
    use OrganizationTrait;

    #[ORM\Column(type: 'string', length: 255)]
    protected string $name;

    #[ORM\Column(name: 'default_prop', type: 'boolean')]
    protected bool $default = false;

    #[ORM\Column(type: 'text', nullable: true)]
    protected ?string $description = null;

    #[ORM\Column(name: 'public_prop', type: 'boolean')]
    protected bool $public = false;

    #[ORM\Column(type: 'string', length: 100, nullable: true)]
    protected ?string $templateCategory = null;

    #[ORM\Column(type: 'integer', nullable: true)]
    protected ?int $estimatedDuration = null;

    #[ORM\Column(type: 'integer')]
    protected int $stageCount;

    #[ORM\Column(type: 'string', length: 100, nullable: true)]
    protected ?string $industry = null;

    #[ORM\Column(type: 'decimal', precision: 15, scale: 2, nullable: true)]
    protected ?float $targetDealSize = null;

    #[ORM\Column(type: 'string', length: 7)]
    protected string $color = '#0dcaf0';

    #[ORM\Column(type: 'string', length: 50)]
    protected string $icon = 'bi-diagram-3-fill';

    #[ORM\Column(type: 'integer')]
    protected int $usageCount = 0;

    #[ORM\OneToMany(targetEntity: PipelineStageTemplate::class, mappedBy: 'pipelineTemplate', orphanRemoval: true, fetch: 'LAZY')]
    protected Collection $stages;

    #[ORM\Column(type: 'json', nullable: true)]
    protected ?array $tags = null;

    #[ORM\Column(type: 'boolean', nullable: true)]
    protected ?bool $active = true;


    public function __construct()
    {
        parent::__construct();
        $this->stages = new ArrayCollection();
    }

    public function getName(): string    {
        return $this->name;
    }

    public function setName(string $name): self
    {
        $this->name = $name;
        return $this;
    }

    public function getDefault(): bool    {
        return $this->default;
    }

    public function setDefault(bool $default): self
    {
        $this->default = $default;
        return $this;
    }

    public function isDefault(): bool
    {
        return $this->default === true;
    }

    public function getDescription(): ?string    {
        return $this->description;
    }

    public function setDescription(?string $description): self
    {
        $this->description = $description;
        return $this;
    }

    public function getPublic(): bool    {
        return $this->public;
    }

    public function setPublic(bool $public): self
    {
        $this->public = $public;
        return $this;
    }

    public function isPublic(): bool
    {
        return $this->public === true;
    }

    public function getTemplatecategory(): ?string    {
        return $this->templateCategory;
    }

    public function setTemplatecategory(?string $templateCategory): self
    {
        $this->templateCategory = $templateCategory;
        return $this;
    }

    public function getEstimatedduration(): ?int    {
        return $this->estimatedDuration;
    }

    public function setEstimatedduration(?int $estimatedDuration): self
    {
        $this->estimatedDuration = $estimatedDuration;
        return $this;
    }

    public function getStagecount(): int    {
        return $this->stageCount;
    }

    public function setStagecount(int $stageCount): self
    {
        $this->stageCount = $stageCount;
        return $this;
    }

    public function getIndustry(): ?string    {
        return $this->industry;
    }

    public function setIndustry(?string $industry): self
    {
        $this->industry = $industry;
        return $this;
    }

    public function getTargetdealsize(): ?float    {
        return $this->targetDealSize;
    }

    public function setTargetdealsize(?float $targetDealSize): self
    {
        $this->targetDealSize = $targetDealSize;
        return $this;
    }

    public function getColor(): string    {
        return $this->color;
    }

    public function setColor(string $color): self
    {
        $this->color = $color;
        return $this;
    }

    public function getIcon(): string    {
        return $this->icon;
    }

    public function setIcon(string $icon): self
    {
        $this->icon = $icon;
        return $this;
    }

    public function getUsagecount(): int    {
        return $this->usageCount;
    }

    public function setUsagecount(int $usageCount): self
    {
        $this->usageCount = $usageCount;
        return $this;
    }

    /**
     * @return Collection<int, App\Entity\PipelineStageTemplate>
     */
    public function getStages(): Collection
    {
        return $this->stages;
    }

    public function addStage(App\Entity\PipelineStageTemplate $tage): self
    {
        if (!$this->stages->contains($tage)) {
            $this->stages->add($tage);
            $tage->setPipelinetemplate($this);
        }
        return $this;
    }

    public function removeStage(App\Entity\PipelineStageTemplate $tage): self
    {
        if ($this->stages->removeElement($tage)) {
            if ($tage->getPipelinetemplate() === $this) {
                $tage->setPipelinetemplate(null);
            }
        }
        return $this;
    }

    public function getTags(): ?array    {
        return $this->tags;
    }

    public function setTags(?array $tags): self
    {
        $this->tags = $tags;
        return $this;
    }

    public function getActive(): ?bool    {
        return $this->active;
    }

    public function setActive(?bool $active): self
    {
        $this->active = $active;
        return $this;
    }

    public function isActive(): bool
    {
        return $this->active === true;
    }


    public function __toString(): string
    {
        return $this->name ?? ($this->getId()?->toRfc4122() ?? '');
    }
}
