<?php

declare(strict_types=1);

namespace App\Controller\Generated;

use App\Controller\Base\BaseApiController;
use App\Entity\Competitor;
use App\Repository\CompetitorRepository;
use App\Security\Voter\CompetitorVoter;
use App\Form\CompetitorFormType;
use App\Service\ListPreferencesService;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Security\Csrf\CsrfToken;
use Symfony\Component\Security\Csrf\CsrfTokenManagerInterface;
use Symfony\Component\Security\Core\Exception\InvalidCsrfTokenException;
use Symfony\Contracts\Translation\TranslatorInterface;

/**
 * Generated Base Controller for Competitor
 *
 * ⚠️ WARNING: This file is ALWAYS regenerated by Genmax
 * DO NOT EDIT THIS FILE - Edit CompetitorController instead
 *
 * @generated
 * @codeCoverageIgnore
 */
abstract class CompetitorControllerGenerated extends BaseApiController
{
    public function __construct(
        protected readonly EntityManagerInterface $entityManager,
        protected readonly CompetitorRepository $repository,
        protected readonly ListPreferencesService $listPreferencesService,
        protected readonly TranslatorInterface $translator,
        protected readonly CsrfTokenManagerInterface $csrfTokenManager,
    ) {}

    // ====================================
    // ABSTRACT METHOD IMPLEMENTATIONS
    // ====================================

    /**
     * Get the repository for this entity
     */
    protected function getRepository(): CompetitorRepository
    {
        return $this->repository;
    }

    /**
     * Get the plural name for this entity
     */
    protected function getEntityPluralName(): string
    {
        return 'competitors';
    }

    /**
     * Convert entity to array for API responses
     */
    protected function entityToArray(object $entity): array
    {
        if (!$entity instanceof Competitor) {
            throw new \InvalidArgumentException('Expected Competitor instance');
        }

        return [
            'id' => $entity->getId()->toString(),
            'organization' => ($organizationRel = $entity->getOrganization()) ? [
                'id' => $organizationRel->getId()->toString(),
                'display' => (string) $organizationRel,
            ] : null,
            'name' => $entity->getName(),
            'description' => $entity->getDescription(),
            'industry' => $entity->getIndustry(),
            'targetMarket' => $entity->getTargetMarket(),
            'deals' => ($dealsRel = $entity->getDeals()) ? [
                'id' => $dealsRel->getId()->toString(),
                'display' => (string) $dealsRel,
            ] : null,
            'foundedYear' => $entity->getFoundedYear(),
            'website' => $entity->getWebsite(),
            'active' => $entity->getActive(),
            'marketPosition' => $entity->getMarketPosition(),
            'strengths' => $entity->getStrengths(),
            'products' => $entity->getProducts(),
            'weaknesses' => $entity->getWeaknesses(),
            'revenue' => $entity->getRevenue(),
            'employeeCount' => $entity->getEmployeeCount(),
            'winRate' => $entity->getWinRate(),
            'lossRate' => $entity->getLossRate(),
            'pricingModel' => $entity->getPricingModel(),
            'headquarters' => $entity->getHeadquarters(),
            'opportunities' => $entity->getOpportunities(),
            'threats' => $entity->getThreats(),
            'notes' => $entity->getNotes(),
            'lastAnalyzedAt' => $entity->getLastAnalyzedAt()?->format('M d, Y'),
            'keyDifferentiators' => $entity->getKeyDifferentiators(),
        ];
    }

    // ====================================
    // INDEX ACTION - List all Competitors
    // ====================================

    /**
     * List Competitors
     */
    protected function indexAction(): Response
    {
        $this->denyAccessUnlessGranted(CompetitorVoter::LIST);

        $preferences = $this->listPreferencesService->getEntityPreferences('competitors');
        $savedView = $preferences['view'] ?? 'grid';

        return $this->render('competitor/index.html.twig', [
            'entities' => [],  // Loaded via API
            'entity_name' => 'competitor',
            'entity_name_plural' => 'competitors',
            'page_icon' => 'bi-shield-exclamation',
            'default_view' => $savedView,

            // List configuration from GeneratorProperty
            'enable_search' => true,
            'enable_filters' => true,
            'enable_sorting' => true,
            'enable_create_button' => true,

            // Property metadata for client-side rendering (as JSON strings)
            'list_fields' => '[{"name":"name","label":"Name","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getName"},{"name":"description","label":"Description","type":"text","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDescription"},{"name":"industry","label":"Industry","type":"string","sortable":true,"searchable":true,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getIndustry"},{"name":"targetMarket","label":"Target Market","type":"text","sortable":false,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getTargetMarket"},{"name":"deals","label":"Deals","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDeals"},{"name":"foundedYear","label":"Founded Year","type":"integer","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getFoundedYear"},{"name":"website","label":"Website","type":"string","sortable":true,"searchable":true,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getWebsite"},{"name":"active","label":"Active Tracking","type":"boolean","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getActive"},{"name":"marketPosition","label":"Market Position","type":"string","sortable":true,"searchable":true,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getMarketPosition"},{"name":"strengths","label":"Strengths","type":"text","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getStrengths"},{"name":"products","label":"Products\/Services","type":"text","sortable":false,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getProducts"},{"name":"weaknesses","label":"Weaknesses","type":"text","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getWeaknesses"},{"name":"revenue","label":"Estimated Revenue","type":"string","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getRevenue"},{"name":"employeeCount","label":"Employee Count","type":"integer","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getEmployeeCount"},{"name":"winRate","label":"Win Rate %","type":"decimal","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getWinRate"},{"name":"lossRate","label":"Loss Rate %","type":"decimal","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getLossRate"},{"name":"pricingModel","label":"Pricing Model","type":"text","sortable":false,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getPricingModel"},{"name":"headquarters","label":"Headquarters","type":"string","sortable":true,"searchable":true,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getHeadquarters"},{"name":"lastAnalyzedAt","label":"Last Analyzed","type":"datetime","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getLastAnalyzedAt"},{"name":"keyDifferentiators","label":"Key Differentiators","type":"text","sortable":false,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getKeyDifferentiators"}]',
            'searchable_fields' => '[{"name":"name","label":"Name","type":"string"},{"name":"description","label":"Description","type":"text"},{"name":"industry","label":"Industry","type":"string"},{"name":"targetMarket","label":"Target Market","type":"text"},{"name":"website","label":"Website","type":"string"},{"name":"marketPosition","label":"Market Position","type":"string"},{"name":"strengths","label":"Strengths","type":"text"},{"name":"products","label":"Products\/Services","type":"text"},{"name":"weaknesses","label":"Weaknesses","type":"text"},{"name":"pricingModel","label":"Pricing Model","type":"text"},{"name":"headquarters","label":"Headquarters","type":"string"},{"name":"opportunities","label":"Opportunities","type":"text"},{"name":"threats","label":"Threats","type":"text"},{"name":"notes","label":"Sales Intelligence Notes","type":"text"},{"name":"keyDifferentiators","label":"Key Differentiators","type":"text"}]',
            'filterable_fields' => '[{"name":"industry","label":"Industry","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"foundedYear","label":"Founded Year","type":"integer","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"website","label":"Website","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"active","label":"Active Tracking","type":"boolean","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"marketPosition","label":"Market Position","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"revenue","label":"Estimated Revenue","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"employeeCount","label":"Employee Count","type":"integer","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"winRate","label":"Win Rate %","type":"decimal","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"lossRate","label":"Loss Rate %","type":"decimal","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"headquarters","label":"Headquarters","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"lastAnalyzedAt","label":"Last Analyzed","type":"datetime","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false}]',
            'sortable_fields' => '[{"name":"name","label":"Name"},{"name":"description","label":"Description"},{"name":"industry","label":"Industry"},{"name":"deals","label":"Deals"},{"name":"foundedYear","label":"Founded Year"},{"name":"website","label":"Website"},{"name":"active","label":"Active Tracking"},{"name":"marketPosition","label":"Market Position"},{"name":"strengths","label":"Strengths"},{"name":"weaknesses","label":"Weaknesses"},{"name":"revenue","label":"Estimated Revenue"},{"name":"employeeCount","label":"Employee Count"},{"name":"winRate","label":"Win Rate %"},{"name":"lossRate","label":"Loss Rate %"},{"name":"headquarters","label":"Headquarters"},{"name":"lastAnalyzedAt","label":"Last Analyzed"}]',
        ]);
    }

    // ====================================
    // API SEARCH - Fetch Competitors for list view
    // ====================================

    /**
     * API endpoint for searching Competitors
     */
    protected function apiSearchAction(Request $request): JsonResponse
    {
        $this->denyAccessUnlessGranted(CompetitorVoter::LIST);

        // This method uses the BaseApiController's handleSearchRequest
        // which integrates with API Platform's GetCollection operation
        return $this->handleSearchRequest($request);
    }

    // ====================================
    // NEW FORM ACTION - Display create form
    // ====================================

    /**
     * Display new competitor form
     */
    protected function newFormAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(CompetitorVoter::CREATE);

        $competitor = new Competitor();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($competitor);

        $form = $this->createForm(CompetitorFormType::class, $competitor);

        return $this->render('competitor/_form_modal.html.twig', [
            'form' => $form,
            'competitor' => $competitor,
            'is_edit' => false,
        ]);
    }

    // ====================================
    // CREATE ACTION - Process create form submission
    // ====================================

    /**
     * Process new competitor form submission
     */
    protected function createAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(CompetitorVoter::CREATE);

        $competitor = new Competitor();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($competitor);

        $form = $this->createForm(CompetitorFormType::class, $competitor);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before create hook
                $this->beforeCreate($competitor);

                $this->entityManager->persist($competitor);
                $this->entityManager->flush();

                // After create hook
                $this->afterCreate($competitor);

                $this->addFlash('success', $this->translator->trans(
                    'competitor.flash.created_successfully',
                    ['%name%' => (string) $competitor],
                    'competitor'
                ));

                return $this->redirectToRoute('competitor_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'competitor.flash.create_failed',
                    ['%error%' => $e->getMessage()],
                    'competitor'
                ));
            }
        }

        // Re-render with errors
        return $this->render('competitor/_form_modal.html.twig', [
            'form' => $form,
            'competitor' => $competitor,
            'is_edit' => false,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // EDIT FORM ACTION - Display edit form
    // ====================================

    /**
     * Display edit competitor form
     */
    protected function editFormAction(Competitor $competitor, Request $request): Response
    {
        $this->denyAccessUnlessGranted(CompetitorVoter::EDIT, $competitor);

        $form = $this->createForm(CompetitorFormType::class, $competitor);

        return $this->render('competitor/_form_modal.html.twig', [
            'form' => $form,
            'competitor' => $competitor,
            'is_edit' => true,
        ]);
    }

    // ====================================
    // UPDATE ACTION - Process edit form submission
    // ====================================

    /**
     * Process edit competitor form submission
     */
    protected function updateAction(Competitor $competitor, Request $request): Response
    {
        $this->denyAccessUnlessGranted(CompetitorVoter::EDIT, $competitor);

        $form = $this->createForm(CompetitorFormType::class, $competitor);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before update hook
                $this->beforeUpdate($competitor);

                $this->entityManager->flush();

                // After update hook
                $this->afterUpdate($competitor);

                $this->addFlash('success', $this->translator->trans(
                    'competitor.flash.updated_successfully',
                    ['%name%' => (string) $competitor],
                    'competitor'
                ));

                return $this->redirectToRoute('competitor_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'competitor.flash.update_failed',
                    ['%error%' => $e->getMessage()],
                    'competitor'
                ));
            }
        }

        // Re-render with errors
        return $this->render('competitor/_form_modal.html.twig', [
            'form' => $form,
            'competitor' => $competitor,
            'is_edit' => true,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // DELETE ACTION - Delete competitor
    // ====================================

    /**
     * Delete competitor
     */
    protected function deleteAction(Competitor $competitor, Request $request): Response
    {
        $this->denyAccessUnlessGranted(CompetitorVoter::DELETE, $competitor);

        // Verify CSRF token
        $token = $request->request->get('_token');
        if (!$this->csrfTokenManager->isTokenValid(new CsrfToken('delete_competitor_' . $competitor->getId()->toString(), $token))) {
            throw new InvalidCsrfTokenException('Invalid CSRF token for delete operation.');
        }

        try {
            // Before delete hook
            $this->beforeDelete($competitor);

            $name = (string) $competitor;

            $this->entityManager->remove($competitor);
            $this->entityManager->flush();

            // After delete hook
            $this->afterDelete();

            $this->addFlash('success', $this->translator->trans(
                'competitor.flash.deleted_successfully',
                ['%name%' => $name],
                'competitor'
            ));

        } catch (\Exception $e) {
            $this->addFlash('error', $this->translator->trans(
                'competitor.flash.delete_failed',
                ['%error%' => $e->getMessage()],
                'competitor'
            ));
        }

        return $this->redirectToRoute('competitor_index', [], Response::HTTP_SEE_OTHER);
    }

    // ====================================
    // SHOW ACTION - Display competitor details
    // ====================================

    /**
     * Display competitor details
     */
    protected function showAction(Competitor $competitor): Response
    {
        $this->denyAccessUnlessGranted(CompetitorVoter::VIEW, $competitor);

        return $this->render('competitor/show.html.twig', [
            'competitor' => $competitor,
        ]);
    }

    // ====================================
    // LIFECYCLE HOOKS
    // ====================================
    // Override these in CompetitorController to add custom logic

    /**
     * Initialize new entity before creating form
     *
     * Note: Organization and Owner are set automatically by TenantEntityProcessor
     * Only use this for custom initialization logic
     */
    protected function initializeNewEntity(Competitor $competitor): void
    {
        // Organization and Owner are set automatically by TenantEntityProcessor
        // Add your custom initialization here
    }

    /**
     * Execute logic before creating entity
     */
    protected function beforeCreate(Competitor $competitor): void
    {
        // Override to add logic before create
    }

    /**
     * Execute logic after creating entity
     */
    protected function afterCreate(Competitor $competitor): void
    {
        // Override to add logic after create (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before updating entity
     */
    protected function beforeUpdate(Competitor $competitor): void
    {
        // Override to add logic before update
    }

    /**
     * Execute logic after updating entity
     */
    protected function afterUpdate(Competitor $competitor): void
    {
        // Override to add logic after update (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before deleting entity
     */
    protected function beforeDelete(Competitor $competitor): void
    {
        // Override to add logic before delete (e.g., check dependencies, archive)
    }

    /**
     * Execute logic after deleting entity
     */
    protected function afterDelete(): void
    {
        // Override to add logic after delete (e.g., cleanup, send notification)
    }
}
