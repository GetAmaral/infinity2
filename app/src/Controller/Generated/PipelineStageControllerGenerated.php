<?php

declare(strict_types=1);

namespace App\Controller\Generated;

use App\Controller\Base\BaseApiController;
use App\Entity\PipelineStage;
use App\Repository\PipelineStageRepository;
use App\Security\Voter\PipelineStageVoter;
use App\Form\PipelineStageFormType;
use App\Service\ListPreferencesService;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Security\Csrf\CsrfToken;
use Symfony\Component\Security\Csrf\CsrfTokenManagerInterface;
use Symfony\Component\Security\Core\Exception\InvalidCsrfTokenException;
use Symfony\Contracts\Translation\TranslatorInterface;

/**
 * Generated Base Controller for PipelineStage
 *
 * ⚠️ WARNING: This file is ALWAYS regenerated by Genmax
 * DO NOT EDIT THIS FILE - Edit PipelineStageController instead
 *
 * @generated
 * @codeCoverageIgnore
 */
abstract class PipelineStageControllerGenerated extends BaseApiController
{
    public function __construct(
        protected readonly EntityManagerInterface $entityManager,
        protected readonly PipelineStageRepository $repository,
        protected readonly ListPreferencesService $listPreferencesService,
        protected readonly TranslatorInterface $translator,
        protected readonly CsrfTokenManagerInterface $csrfTokenManager,
    ) {}

    // ====================================
    // ABSTRACT METHOD IMPLEMENTATIONS
    // ====================================

    /**
     * Get the repository for this entity
     */
    protected function getRepository(): PipelineStageRepository
    {
        return $this->repository;
    }

    /**
     * Get the plural name for this entity
     */
    protected function getEntityPluralName(): string
    {
        return 'pipelineStages';
    }

    /**
     * Convert entity to array for API responses
     */
    protected function entityToArray(object $entity): array
    {
        if (!$entity instanceof PipelineStage) {
            throw new \InvalidArgumentException('Expected PipelineStage instance');
        }

        return [
            'id' => $entity->getId()->toString(),
            'organization' => ($organizationRel = $entity->getOrganization()) ? [
                'id' => $organizationRel->getId()->toString(),
                'display' => (string) $organizationRel,
            ] : null,
            'description' => $entity->getDescription(),
            'dealStages' => ($dealStagesRel = $entity->getDealStages()) ? [
                'id' => $dealStagesRel->getId()->toString(),
                'display' => (string) $dealStagesRel,
            ] : null,
            'probability' => $entity->getProbability(),
            'final' => $entity->getFinal(),
            'won' => $entity->getWon(),
            'active' => $entity->getActive(),
            'lost' => $entity->getLost(),
            'color' => $entity->getColor(),
            'deals' => ($dealsRel = $entity->getDeals()) ? [
                'id' => $dealsRel->getId()->toString(),
                'display' => (string) $dealsRel,
            ] : null,
            'displayOrder' => $entity->getDisplayOrder(),
            'migrationCriteria' => $entity->getMigrationCriteria(),
            'next' => ($nextRel = $entity->getNext()) ? [
                'id' => $nextRel->getId()->toString(),
                'display' => (string) $nextRel,
            ] : null,
            'pipeline' => ($pipelineRel = $entity->getPipeline()) ? [
                'id' => $pipelineRel->getId()->toString(),
                'display' => (string) $pipelineRel,
            ] : null,
            'previous' => ($previousRel = $entity->getPrevious()) ? [
                'id' => $previousRel->getId()->toString(),
                'display' => (string) $previousRel,
            ] : null,
            'stageName' => $entity->getStageName(),
            'tasks' => ($tasksRel = $entity->getTasks()) ? [
                'id' => $tasksRel->getId()->toString(),
                'display' => (string) $tasksRel,
            ] : null,
        ];
    }

    // ====================================
    // INDEX ACTION - List all PipelineStages
    // ====================================

    /**
     * List PipelineStages
     */
    protected function indexAction(): Response
    {
        $this->denyAccessUnlessGranted(PipelineStageVoter::LIST);

        $preferences = $this->listPreferencesService->getEntityPreferences('pipelineStages');
        $savedView = $preferences['view'] ?? 'grid';

        return $this->render('pipelinestage/index.html.twig', [
            'entities' => [],  // Loaded via API
            'entity_name' => 'pipelineStage',
            'entity_name_plural' => 'pipelineStages',
            'page_icon' => 'bi-diagram-2',
            'default_view' => $savedView,

            // List configuration from GeneratorProperty
            'enable_search' => true,
            'enable_filters' => true,
            'enable_sorting' => true,
            'enable_create_button' => true,

            // Property metadata for client-side rendering (as JSON strings)
            'list_fields' => '[{"name":"description","label":"Description","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDescription"},{"name":"dealStages","label":"DealStages","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDealStages"},{"name":"probability","label":"Probability","type":"integer","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getProbability"},{"name":"final","label":"Final","type":"boolean","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getFinal"},{"name":"won","label":"Won","type":"boolean","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getWon"},{"name":"active","label":"Active","type":"boolean","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getActive"},{"name":"lost","label":"Lost","type":"boolean","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getLost"},{"name":"color","label":"Color","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getColor"},{"name":"deals","label":"Deals","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDeals"},{"name":"displayOrder","label":"Display Order","type":"integer","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDisplayOrder"},{"name":"migrationCriteria","label":"MigrationCriteria","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getMigrationCriteria"},{"name":"next","label":"Next","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getNext"},{"name":"pipeline","label":"Pipeline","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getPipeline"},{"name":"previous","label":"Previous","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getPrevious"},{"name":"stageName","label":"Stage Name","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getStageName"},{"name":"tasks","label":"Tasks","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getTasks"}]',
            'searchable_fields' => '[{"name":"description","label":"Description","type":"string"},{"name":"migrationCriteria","label":"MigrationCriteria","type":"string"},{"name":"stageName","label":"Stage Name","type":"string"}]',
            'filterable_fields' => '[{"name":"probability","label":"Probability","type":"integer","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"final","label":"Final","type":"boolean","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"won","label":"Won","type":"boolean","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"active","label":"Active","type":"boolean","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"lost","label":"Lost","type":"boolean","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false}]',
            'sortable_fields' => '[{"name":"description","label":"Description"},{"name":"dealStages","label":"DealStages"},{"name":"probability","label":"Probability"},{"name":"final","label":"Final"},{"name":"won","label":"Won"},{"name":"active","label":"Active"},{"name":"lost","label":"Lost"},{"name":"deals","label":"Deals"},{"name":"displayOrder","label":"Display Order"},{"name":"migrationCriteria","label":"MigrationCriteria"},{"name":"next","label":"Next"},{"name":"pipeline","label":"Pipeline"},{"name":"previous","label":"Previous"},{"name":"stageName","label":"Stage Name"},{"name":"tasks","label":"Tasks"}]',
        ]);
    }

    // ====================================
    // API SEARCH - Fetch PipelineStages for list view
    // ====================================

    /**
     * API endpoint for searching PipelineStages
     */
    protected function apiSearchAction(Request $request): JsonResponse
    {
        $this->denyAccessUnlessGranted(PipelineStageVoter::LIST);

        // This method uses the BaseApiController's handleSearchRequest
        // which integrates with API Platform's GetCollection operation
        return $this->handleSearchRequest($request);
    }

    // ====================================
    // NEW FORM ACTION - Display create form
    // ====================================

    /**
     * Display new pipelineStage form
     */
    protected function newFormAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(PipelineStageVoter::CREATE);

        $pipelineStage = new PipelineStage();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($pipelineStage);

        $form = $this->createForm(PipelineStageFormType::class, $pipelineStage);

        return $this->render('pipelinestage/_form_modal.html.twig', [
            'form' => $form,
            'pipelineStage' => $pipelineStage,
            'is_edit' => false,
        ]);
    }

    // ====================================
    // CREATE ACTION - Process create form submission
    // ====================================

    /**
     * Process new pipelineStage form submission
     */
    protected function createAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(PipelineStageVoter::CREATE);

        $pipelineStage = new PipelineStage();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($pipelineStage);

        $form = $this->createForm(PipelineStageFormType::class, $pipelineStage);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before create hook
                $this->beforeCreate($pipelineStage);

                $this->entityManager->persist($pipelineStage);
                $this->entityManager->flush();

                // After create hook
                $this->afterCreate($pipelineStage);

                $this->addFlash('success', $this->translator->trans(
                    'pipelinestage.flash.created_successfully',
                    ['%name%' => (string) $pipelineStage],
                    'pipelinestage'
                ));

                return $this->redirectToRoute('pipelinestage_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'pipelinestage.flash.create_failed',
                    ['%error%' => $e->getMessage()],
                    'pipelinestage'
                ));
            }
        }

        // Re-render with errors
        return $this->render('pipelinestage/_form_modal.html.twig', [
            'form' => $form,
            'pipelineStage' => $pipelineStage,
            'is_edit' => false,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // EDIT FORM ACTION - Display edit form
    // ====================================

    /**
     * Display edit pipelineStage form
     */
    protected function editFormAction(PipelineStage $pipelineStage, Request $request): Response
    {
        $this->denyAccessUnlessGranted(PipelineStageVoter::EDIT, $pipelineStage);

        $form = $this->createForm(PipelineStageFormType::class, $pipelineStage);

        return $this->render('pipelinestage/_form_modal.html.twig', [
            'form' => $form,
            'pipelineStage' => $pipelineStage,
            'is_edit' => true,
        ]);
    }

    // ====================================
    // UPDATE ACTION - Process edit form submission
    // ====================================

    /**
     * Process edit pipelineStage form submission
     */
    protected function updateAction(PipelineStage $pipelineStage, Request $request): Response
    {
        $this->denyAccessUnlessGranted(PipelineStageVoter::EDIT, $pipelineStage);

        $form = $this->createForm(PipelineStageFormType::class, $pipelineStage);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before update hook
                $this->beforeUpdate($pipelineStage);

                $this->entityManager->flush();

                // After update hook
                $this->afterUpdate($pipelineStage);

                $this->addFlash('success', $this->translator->trans(
                    'pipelinestage.flash.updated_successfully',
                    ['%name%' => (string) $pipelineStage],
                    'pipelinestage'
                ));

                return $this->redirectToRoute('pipelinestage_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'pipelinestage.flash.update_failed',
                    ['%error%' => $e->getMessage()],
                    'pipelinestage'
                ));
            }
        }

        // Re-render with errors
        return $this->render('pipelinestage/_form_modal.html.twig', [
            'form' => $form,
            'pipelineStage' => $pipelineStage,
            'is_edit' => true,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // DELETE ACTION - Delete pipelineStage
    // ====================================

    /**
     * Delete pipelineStage
     */
    protected function deleteAction(PipelineStage $pipelineStage, Request $request): Response
    {
        $this->denyAccessUnlessGranted(PipelineStageVoter::DELETE, $pipelineStage);

        // Verify CSRF token
        $token = $request->request->get('_token');
        if (!$this->csrfTokenManager->isTokenValid(new CsrfToken('delete_pipelineStage_' . $pipelineStage->getId()->toString(), $token))) {
            throw new InvalidCsrfTokenException('Invalid CSRF token for delete operation.');
        }

        try {
            // Before delete hook
            $this->beforeDelete($pipelineStage);

            $name = (string) $pipelineStage;

            $this->entityManager->remove($pipelineStage);
            $this->entityManager->flush();

            // After delete hook
            $this->afterDelete();

            $this->addFlash('success', $this->translator->trans(
                'pipelinestage.flash.deleted_successfully',
                ['%name%' => $name],
                'pipelinestage'
            ));

        } catch (\Exception $e) {
            $this->addFlash('error', $this->translator->trans(
                'pipelinestage.flash.delete_failed',
                ['%error%' => $e->getMessage()],
                'pipelinestage'
            ));
        }

        return $this->redirectToRoute('pipelinestage_index', [], Response::HTTP_SEE_OTHER);
    }

    // ====================================
    // SHOW ACTION - Display pipelineStage details
    // ====================================

    /**
     * Display pipelineStage details
     */
    protected function showAction(PipelineStage $pipelineStage): Response
    {
        $this->denyAccessUnlessGranted(PipelineStageVoter::VIEW, $pipelineStage);

        return $this->render('pipelinestage/show.html.twig', [
            'pipelineStage' => $pipelineStage,
        ]);
    }

    // ====================================
    // LIFECYCLE HOOKS
    // ====================================
    // Override these in PipelineStageController to add custom logic

    /**
     * Initialize new entity before creating form
     *
     * Note: Organization and Owner are set automatically by TenantEntityProcessor
     * Only use this for custom initialization logic
     */
    protected function initializeNewEntity(PipelineStage $pipelineStage): void
    {
        // Organization and Owner are set automatically by TenantEntityProcessor
        // Add your custom initialization here
    }

    /**
     * Execute logic before creating entity
     */
    protected function beforeCreate(PipelineStage $pipelineStage): void
    {
        // Override to add logic before create
    }

    /**
     * Execute logic after creating entity
     */
    protected function afterCreate(PipelineStage $pipelineStage): void
    {
        // Override to add logic after create (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before updating entity
     */
    protected function beforeUpdate(PipelineStage $pipelineStage): void
    {
        // Override to add logic before update
    }

    /**
     * Execute logic after updating entity
     */
    protected function afterUpdate(PipelineStage $pipelineStage): void
    {
        // Override to add logic after update (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before deleting entity
     */
    protected function beforeDelete(PipelineStage $pipelineStage): void
    {
        // Override to add logic before delete (e.g., check dependencies, archive)
    }

    /**
     * Execute logic after deleting entity
     */
    protected function afterDelete(): void
    {
        // Override to add logic after delete (e.g., cleanup, send notification)
    }
}
