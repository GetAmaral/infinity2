<?php

declare(strict_types=1);

namespace App\Controller\Generated;

use App\Controller\Base\BaseApiController;
use App\Entity\Campaign;
use App\Repository\CampaignRepository;
use App\Security\Voter\CampaignVoter;
use App\Form\CampaignFormType;
use App\Service\ListPreferencesService;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Security\Csrf\CsrfToken;
use Symfony\Component\Security\Csrf\CsrfTokenManagerInterface;
use Symfony\Component\Security\Core\Exception\InvalidCsrfTokenException;
use Symfony\Contracts\Translation\TranslatorInterface;

/**
 * Generated Base Controller for Campaign
 *
 * ⚠️ WARNING: This file is ALWAYS regenerated by Genmax
 * DO NOT EDIT THIS FILE - Edit CampaignController instead
 *
 * @generated
 * @codeCoverageIgnore
 */
abstract class CampaignControllerGenerated extends BaseApiController
{
    public function __construct(
        protected readonly EntityManagerInterface $entityManager,
        protected readonly CampaignRepository $repository,
        protected readonly ListPreferencesService $listPreferencesService,
        protected readonly TranslatorInterface $translator,
        protected readonly CsrfTokenManagerInterface $csrfTokenManager,
    ) {}

    // ====================================
    // ABSTRACT METHOD IMPLEMENTATIONS
    // ====================================

    /**
     * Get the repository for this entity
     */
    protected function getRepository(): CampaignRepository
    {
        return $this->repository;
    }

    /**
     * Get the plural name for this entity
     */
    protected function getEntityPluralName(): string
    {
        return 'campaigns';
    }

    /**
     * Convert entity to array for API responses
     *
     * ⚠️ IMPORTANT: Enum Properties Stored as Strings
     * -------------------------------------------------
     * Properties with enum-backed types (like InputType) are stored as STRINGS
     * in the database and getters return strings directly, NOT enum objects.
     *
     * ❌ WRONG:   $entity->getType()->value   (Error: "Attempt to read property 'value' on string")
     * ✅ CORRECT: $entity->getType()          (Already a string - 'fully_completed')
     *
     * If you need the enum object for business logic, use:
     *    InputType::from($entity->getType())
     */
    protected function entityToArray(object $entity): array
    {
        if (!$entity instanceof Campaign) {
            throw new \InvalidArgumentException('Expected Campaign instance');
        }

        return [
            'id' => $entity->getId()->toString(),
            'organization' => ($organizationRel = $entity->getOrganization()) ? [
                'id' => $organizationRel->getId()->toString(),
                'display' => (string) $organizationRel,
            ] : null,
            'name' => $entity->getName(),
            'description' => $entity->getDescription(),
            'actualBudget' => $entity->getActualBudget(),
            'active' => $entity->getActive(),
            'actualCost' => $entity->getActualCost(),
            'actualReturn' => $entity->getActualReturn(),
            'actualRevenue' => $entity->getActualRevenue(),
            'archived' => $entity->getArchived(),
            'budgetedCost' => $entity->getBudgetedCost(),
            'campaignStatus' => $entity->getCampaignStatus(),
            'campaignType' => $entity->getCampaignType(),
            'codeName' => $entity->getCodeName(),
            'companies' => ($companiesRel = $entity->getCompanies()) ? [
                'id' => $companiesRel->getId()->toString(),
                'display' => (string) $companiesRel,
            ] : null,
            'contacts' => ($contactsRel = $entity->getContacts()) ? [
                'id' => $contactsRel->getId()->toString(),
                'display' => (string) $contactsRel,
            ] : null,
            'deals' => ($dealsRel = $entity->getDeals()) ? [
                'id' => $dealsRel->getId()->toString(),
                'display' => (string) $dealsRel,
            ] : null,
            'draft' => $entity->getDraft(),
            'duration' => $entity->getDuration(),
            'emailAddress' => $entity->getEmailAddress(),
            'endDate' => $entity->getEndDate()?->format('M d, Y'),
            'expectedResponse' => $entity->getExpectedResponse(),
            'expectedRevenue' => $entity->getExpectedRevenue(),
            'manager' => ($managerRel = $entity->getManager()) ? [
                'id' => $managerRel->getId()->toString(),
                'display' => (string) $managerRel,
            ] : null,
            'message' => $entity->getMessage(),
            'childCampaigns' => ($childCampaignsRel = $entity->getChildCampaigns()) ? [
                'id' => $childCampaignsRel->getId()->toString(),
                'display' => (string) $childCampaignsRel,
            ] : null,
            'numberOfContacts' => $entity->getNumberOfContacts(),
            'numberOfConverted' => $entity->getNumberOfConverted(),
            'numberOfLeads' => $entity->getNumberOfLeads(),
            'numberOfResponses' => $entity->getNumberOfResponses(),
            'objective' => $entity->getObjective(),
            'otherCost' => $entity->getOtherCost(),
            'owner' => ($ownerRel = $entity->getOwner()) ? [
                'id' => $ownerRel->getId()->toString(),
                'display' => (string) $ownerRel,
            ] : null,
            'parentCampaign' => ($parentCampaignRel = $entity->getParentCampaign()) ? [
                'id' => $parentCampaignRel->getId()->toString(),
                'display' => (string) $parentCampaignRel,
            ] : null,
            'plannedBudget' => $entity->getPlannedBudget(),
            'plannedDuration' => $entity->getPlannedDuration(),
            'plannedEndDate' => $entity->getPlannedEndDate()?->format('M d, Y'),
            'plannedReturn' => $entity->getPlannedReturn(),
            'plannedStartDate' => $entity->getPlannedStartDate()?->format('M d, Y'),
            'roi' => $entity->getRoi(),
            'socialMedias' => ($socialMediasRel = $entity->getSocialMedias()) ? [
                'id' => $socialMediasRel->getId()->toString(),
                'display' => (string) $socialMediasRel,
            ] : null,
            'startDate' => $entity->getStartDate()?->format('M d, Y'),
            'status' => $entity->getStatus(),
            'talks' => ($talksRel = $entity->getTalks()) ? [
                'id' => $talksRel->getId()->toString(),
                'display' => (string) $talksRel,
            ] : null,
            'targetAudience' => $entity->getTargetAudience(),
            'team' => ($teamRel = $entity->getTeam()) ? [
                'id' => $teamRel->getId()->toString(),
                'display' => (string) $teamRel,
            ] : null,
            'template' => $entity->getTemplate(),
        ];
    }

    // ====================================
    // INDEX ACTION - List all Campaigns
    // ====================================

    /**
     * List Campaigns
     */
    protected function indexAction(): Response
    {
        $this->denyAccessUnlessGranted(CampaignVoter::LIST);

        $preferences = $this->listPreferencesService->getEntityPreferences('campaigns');
        $savedView = $preferences['view'] ?? 'grid';

        return $this->render('campaign/index.html.twig', [
            'entities' => [],  // Loaded via API
            'entity_name' => 'campaign',
            'entity_name_plural' => 'campaigns',
            'page_icon' => 'bi-megaphone',
            'default_view' => $savedView,

            // List configuration from GeneratorProperty
            'enable_search' => true,
            'enable_filters' => false,
            'enable_sorting' => true,
            'enable_create_button' => true,

            // Property metadata for client-side rendering (as JSON strings)
            'list_fields' => '[{"name":"name","label":"Name","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getName"},{"name":"description","label":"Description","type":"text","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDescription"},{"name":"actualBudget","label":"Actual Budget","type":"decimal","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getActualBudget"},{"name":"active","label":"Active","type":"boolean","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getActive"},{"name":"actualCost","label":"Actual Cost","type":"decimal","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getActualCost"},{"name":"actualReturn","label":"Actual Return","type":"decimal","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getActualReturn"},{"name":"actualRevenue","label":"Actual Revenue","type":"decimal","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getActualRevenue"},{"name":"archived","label":"Archived","type":"boolean","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getArchived"},{"name":"budgetedCost","label":"Budgeted Cost","type":"decimal","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getBudgetedCost"},{"name":"campaignStatus","label":"Campaign Status","type":"integer","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCampaignStatus"},{"name":"campaignType","label":"Campaign Type","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCampaignType"},{"name":"codeName","label":"Code Name","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCodeName"},{"name":"companies","label":"Companies","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCompanies"},{"name":"contacts","label":"Contacts","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getContacts"},{"name":"deals","label":"Deals","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDeals"},{"name":"draft","label":"Draft","type":"boolean","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDraft"},{"name":"duration","label":"Duration","type":"integer","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDuration"},{"name":"emailAddress","label":"Email Address","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getEmailAddress"},{"name":"endDate","label":"End Date","type":"datetime","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getEndDate"},{"name":"expectedResponse","label":"Expected Response (%)","type":"integer","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getExpectedResponse"},{"name":"expectedRevenue","label":"Expected Revenue","type":"decimal","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getExpectedRevenue"},{"name":"manager","label":"Manager","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getManager"},{"name":"message","label":"Message","type":"text","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getMessage"},{"name":"numberOfContacts","label":"Number of Contacts","type":"integer","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getNumberOfContacts"},{"name":"numberOfConverted","label":"Number of Converted","type":"integer","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getNumberOfConverted"},{"name":"numberOfLeads","label":"Number of Leads","type":"integer","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getNumberOfLeads"},{"name":"numberOfResponses","label":"Number of Responses","type":"integer","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getNumberOfResponses"},{"name":"objective","label":"Objective","type":"text","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getObjective"},{"name":"otherCost","label":"Other Cost","type":"decimal","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getOtherCost"},{"name":"owner","label":"Owner","type":"","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getOwner"},{"name":"parentCampaign","label":"Parent Campaign","type":"","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getParentCampaign"},{"name":"plannedBudget","label":"Planned Budget","type":"decimal","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getPlannedBudget"},{"name":"plannedDuration","label":"Planned Duration","type":"integer","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getPlannedDuration"},{"name":"plannedEndDate","label":"Planned End Date","type":"datetime","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getPlannedEndDate"},{"name":"plannedReturn","label":"Planned Return","type":"decimal","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getPlannedReturn"},{"name":"plannedStartDate","label":"Planned Start Date","type":"datetime","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getPlannedStartDate"},{"name":"roi","label":"ROI","type":"decimal","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getRoi"},{"name":"socialMedias","label":"Social Medias","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getSocialMedias"},{"name":"startDate","label":"Start Date","type":"datetime","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getStartDate"},{"name":"status","label":"Status","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getStatus"},{"name":"talks","label":"Talks","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getTalks"},{"name":"targetAudience","label":"Target Audience","type":"text","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getTargetAudience"},{"name":"team","label":"Team","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getTeam"},{"name":"template","label":"Is Template","type":"boolean","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getTemplate"}]',
            'searchable_fields' => '[{"name":"name","label":"Name","type":"string"},{"name":"description","label":"Description","type":"text"}]',
            'filterable_fields' => '[]',
            'sortable_fields' => '[{"name":"name","label":"Name"},{"name":"description","label":"Description"},{"name":"actualBudget","label":"Actual Budget"},{"name":"actualReturn","label":"Actual Return"},{"name":"campaignStatus","label":"Campaign Status"},{"name":"companies","label":"Companies"},{"name":"contacts","label":"Contacts"},{"name":"deals","label":"Deals"},{"name":"duration","label":"Duration"},{"name":"endDate","label":"End Date"},{"name":"manager","label":"Manager"},{"name":"plannedBudget","label":"Planned Budget"},{"name":"plannedDuration","label":"Planned Duration"},{"name":"plannedEndDate","label":"Planned End Date"},{"name":"plannedReturn","label":"Planned Return"},{"name":"plannedStartDate","label":"Planned Start Date"},{"name":"roi","label":"ROI"},{"name":"socialMedias","label":"Social Medias"},{"name":"startDate","label":"Start Date"},{"name":"talks","label":"Talks"},{"name":"team","label":"Team"}]',
        ]);
    }

    // ====================================
    // API SEARCH - Fetch Campaigns for list view
    // ====================================

    /**
     * API endpoint for searching Campaigns
     */
    protected function apiSearchAction(Request $request): JsonResponse
    {
        $this->denyAccessUnlessGranted(CampaignVoter::LIST);

        // This method uses the BaseApiController's handleSearchRequest
        // which integrates with API Platform's GetCollection operation
        return $this->handleSearchRequest($request);
    }

    // ====================================
    // NEW FORM ACTION - Display create form
    // ====================================

    /**
     * Display new campaign form
     */
    protected function newFormAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(CampaignVoter::CREATE);

        $campaign = new Campaign();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($campaign);

        $form = $this->createForm(CampaignFormType::class, $campaign);

        return $this->render('campaign/_form_modal.html.twig', [
            'form' => $form,
            'campaign' => $campaign,
            'is_edit' => false,
        ]);
    }

    // ====================================
    // CREATE ACTION - Process create form submission
    // ====================================

    /**
     * Process new campaign form submission
     */
    protected function createAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(CampaignVoter::CREATE);

        $campaign = new Campaign();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($campaign);

        $form = $this->createForm(CampaignFormType::class, $campaign);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before create hook
                $this->beforeCreate($campaign);

                $this->entityManager->persist($campaign);
                $this->entityManager->flush();

                // After create hook
                $this->afterCreate($campaign);

                $this->addFlash('success', $this->translator->trans(
                    'campaign.flash.created_successfully',
                    ['%name%' => (string) $campaign],
                    'campaign'
                ));

                return $this->redirectToRoute('campaign_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'campaign.flash.create_failed',
                    ['%error%' => $e->getMessage()],
                    'campaign'
                ));
            }
        }

        // Re-render with errors
        return $this->render('campaign/_form_modal.html.twig', [
            'form' => $form,
            'campaign' => $campaign,
            'is_edit' => false,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // EDIT FORM ACTION - Display edit form
    // ====================================

    /**
     * Display edit campaign form
     */
    protected function editFormAction(Campaign $campaign, Request $request): Response
    {
        $this->denyAccessUnlessGranted(CampaignVoter::EDIT, $campaign);

        $form = $this->createForm(CampaignFormType::class, $campaign);

        return $this->render('campaign/_form_modal.html.twig', [
            'form' => $form,
            'campaign' => $campaign,
            'is_edit' => true,
        ]);
    }

    // ====================================
    // UPDATE ACTION - Process edit form submission
    // ====================================

    /**
     * Process edit campaign form submission
     */
    protected function updateAction(Campaign $campaign, Request $request): Response
    {
        $this->denyAccessUnlessGranted(CampaignVoter::EDIT, $campaign);

        $form = $this->createForm(CampaignFormType::class, $campaign);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before update hook
                $this->beforeUpdate($campaign);

                $this->entityManager->flush();

                // After update hook
                $this->afterUpdate($campaign);

                $this->addFlash('success', $this->translator->trans(
                    'campaign.flash.updated_successfully',
                    ['%name%' => (string) $campaign],
                    'campaign'
                ));

                return $this->redirectToRoute('campaign_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'campaign.flash.update_failed',
                    ['%error%' => $e->getMessage()],
                    'campaign'
                ));
            }
        }

        // Re-render with errors
        return $this->render('campaign/_form_modal.html.twig', [
            'form' => $form,
            'campaign' => $campaign,
            'is_edit' => true,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // DELETE ACTION - Delete campaign
    // ====================================

    /**
     * Delete campaign
     */
    protected function deleteAction(Campaign $campaign, Request $request): Response
    {
        $this->denyAccessUnlessGranted(CampaignVoter::DELETE, $campaign);

        // Verify CSRF token
        $token = $request->request->get('_token');
        if (!$this->csrfTokenManager->isTokenValid(new CsrfToken('delete_campaign_' . $campaign->getId()->toString(), $token))) {
            throw new InvalidCsrfTokenException('Invalid CSRF token for delete operation.');
        }

        try {
            // Before delete hook
            $this->beforeDelete($campaign);

            $name = (string) $campaign;

            $this->entityManager->remove($campaign);
            $this->entityManager->flush();

            // After delete hook
            $this->afterDelete();

            $this->addFlash('success', $this->translator->trans(
                'campaign.flash.deleted_successfully',
                ['%name%' => $name],
                'campaign'
            ));

        } catch (\Exception $e) {
            $this->addFlash('error', $this->translator->trans(
                'campaign.flash.delete_failed',
                ['%error%' => $e->getMessage()],
                'campaign'
            ));
        }

        return $this->redirectToRoute('campaign_index', [], Response::HTTP_SEE_OTHER);
    }

    // ====================================
    // SHOW ACTION - Display campaign details
    // ====================================

    /**
     * Display campaign details
     */
    protected function showAction(Campaign $campaign): Response
    {
        $this->denyAccessUnlessGranted(CampaignVoter::VIEW, $campaign);

        return $this->render('campaign/show.html.twig', [
            'campaign' => $campaign,
        ]);
    }

    // ====================================
    // LIFECYCLE HOOKS
    // ====================================
    // Override these in CampaignController to add custom logic

    /**
     * Initialize new entity before creating form
     *
     * Note: Organization and Owner are set automatically by TenantEntityProcessor
     * Only use this for custom initialization logic
     */
    protected function initializeNewEntity(Campaign $campaign): void
    {
        // Organization and Owner are set automatically by TenantEntityProcessor
        // Add your custom initialization here
    }

    /**
     * Execute logic before creating entity
     */
    protected function beforeCreate(Campaign $campaign): void
    {
        // Override to add logic before create
    }

    /**
     * Execute logic after creating entity
     */
    protected function afterCreate(Campaign $campaign): void
    {
        // Override to add logic after create (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before updating entity
     */
    protected function beforeUpdate(Campaign $campaign): void
    {
        // Override to add logic before update
    }

    /**
     * Execute logic after updating entity
     */
    protected function afterUpdate(Campaign $campaign): void
    {
        // Override to add logic after update (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before deleting entity
     */
    protected function beforeDelete(Campaign $campaign): void
    {
        // Override to add logic before delete (e.g., check dependencies, archive)
    }

    /**
     * Execute logic after deleting entity
     */
    protected function afterDelete(): void
    {
        // Override to add logic after delete (e.g., cleanup, send notification)
    }
}
