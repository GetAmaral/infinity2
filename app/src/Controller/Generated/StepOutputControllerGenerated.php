<?php

declare(strict_types=1);

namespace App\Controller\Generated;

use App\Controller\Base\BaseApiController;
use App\Entity\StepOutput;
use App\Repository\StepOutputRepository;
use App\Security\Voter\StepOutputVoter;
use App\Form\StepOutputFormType;
use App\Service\ListPreferencesService;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Security\Csrf\CsrfToken;
use Symfony\Component\Security\Csrf\CsrfTokenManagerInterface;
use Symfony\Component\Security\Core\Exception\InvalidCsrfTokenException;
use Symfony\Contracts\Translation\TranslatorInterface;

/**
 * Generated Base Controller for StepOutput
 *
 * ⚠️ WARNING: This file is ALWAYS regenerated by Genmax
 * DO NOT EDIT THIS FILE - Edit StepOutputController instead
 *
 * @generated
 * @codeCoverageIgnore
 */
abstract class StepOutputControllerGenerated extends BaseApiController
{
    public function __construct(
        protected readonly EntityManagerInterface $entityManager,
        protected readonly StepOutputRepository $repository,
        protected readonly ListPreferencesService $listPreferencesService,
        protected readonly TranslatorInterface $translator,
        protected readonly CsrfTokenManagerInterface $csrfTokenManager,
    ) {}

    // ====================================
    // ABSTRACT METHOD IMPLEMENTATIONS
    // ====================================

    /**
     * Get the repository for this entity
     */
    protected function getRepository(): StepOutputRepository
    {
        return $this->repository;
    }

    /**
     * Get the plural name for this entity
     */
    protected function getEntityPluralName(): string
    {
        return 'stepOutputs';
    }

    /**
     * Convert entity to array for API responses
     */
    protected function entityToArray(object $entity): array
    {
        if (!$entity instanceof StepOutput) {
            throw new \InvalidArgumentException('Expected StepOutput instance');
        }

        return [
            'id' => $entity->getId()->toString(),
            'step' => ($stepRel = $entity->getStep()) ? [
                'id' => $stepRel->getId()->toString(),
                'display' => (string) $stepRel,
            ] : null,
            'name' => $entity->getName(),
            'description' => $entity->getDescription(),
            'slug' => $entity->getSlug(),
            'conditional' => $entity->getConditional(),
            'connection' => ($connectionRel = $entity->getConnection()) ? [
                'id' => $connectionRel->getId()->toString(),
                'display' => (string) $connectionRel,
            ] : null,
        ];
    }

    // ====================================
    // INDEX ACTION - List all StepOutputs
    // ====================================

    /**
     * List StepOutputs
     */
    protected function indexAction(): Response
    {
        $this->denyAccessUnlessGranted(StepOutputVoter::LIST);

        $preferences = $this->listPreferencesService->getEntityPreferences('stepOutputs');
        $savedView = $preferences['view'] ?? 'grid';

        return $this->render('stepoutput/index.html.twig', [
            'entities' => [],  // Loaded via API
            'entity_name' => 'stepOutput',
            'entity_name_plural' => 'stepOutputs',
            'page_icon' => 'bi-arrow-bar-right',
            'default_view' => $savedView,

            // List configuration from GeneratorProperty
            'enable_search' => true,
            'enable_filters' => true,
            'enable_sorting' => true,
            'enable_create_button' => true,

            // Property metadata for client-side rendering (as JSON strings)
            'list_fields' => '[{"name":"name","label":"Name","type":"string","sortable":true,"searchable":true,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getName"}]',
            'searchable_fields' => '[{"name":"step","label":"Step","type":"string"},{"name":"name","label":"Name","type":"string"},{"name":"description","label":"Description","type":"text"},{"name":"slug","label":"Slug","type":"string"},{"name":"conditional","label":"Conditional","type":"text"},{"name":"connection","label":"Connection","type":"string"}]',
            'filterable_fields' => '[{"name":"step","label":"Step","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"name","label":"Name","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"description","label":"Description","type":"text","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"slug","label":"Slug","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"conditional","label":"Conditional","type":"text","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"connection","label":"Connection","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false}]',
            'sortable_fields' => '[{"name":"step","label":"Step"},{"name":"name","label":"Name"},{"name":"description","label":"Description"},{"name":"slug","label":"Slug"},{"name":"conditional","label":"Conditional"},{"name":"connection","label":"Connection"}]',
        ]);
    }


    // ====================================
    // NEW FORM ACTION - Display create form
    // ====================================

    /**
     * Display new stepOutput form
     */
    protected function newFormAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(StepOutputVoter::CREATE);

        $stepOutput = new StepOutput();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($stepOutput);

        $form = $this->createForm(StepOutputFormType::class, $stepOutput);

        return $this->render('stepoutput/_form_modal.html.twig', [
            'form' => $form,
            'stepOutput' => $stepOutput,
            'is_edit' => false,
        ]);
    }

    // ====================================
    // CREATE ACTION - Process create form submission
    // ====================================

    /**
     * Process new stepOutput form submission
     */
    protected function createAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(StepOutputVoter::CREATE);

        $stepOutput = new StepOutput();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($stepOutput);

        $form = $this->createForm(StepOutputFormType::class, $stepOutput);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before create hook
                $this->beforeCreate($stepOutput);

                $this->entityManager->persist($stepOutput);
                $this->entityManager->flush();

                // After create hook
                $this->afterCreate($stepOutput);

                $this->addFlash('success', $this->translator->trans(
                    'stepoutput.flash.created_successfully',
                    ['%name%' => (string) $stepOutput],
                    'stepoutput'
                ));

                return $this->redirectToRoute('stepoutput_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'stepoutput.flash.create_failed',
                    ['%error%' => $e->getMessage()],
                    'stepoutput'
                ));
            }
        }

        // Re-render with errors
        return $this->render('stepoutput/_form_modal.html.twig', [
            'form' => $form,
            'stepOutput' => $stepOutput,
            'is_edit' => false,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // EDIT FORM ACTION - Display edit form
    // ====================================

    /**
     * Display edit stepOutput form
     */
    protected function editFormAction(StepOutput $stepOutput, Request $request): Response
    {
        $this->denyAccessUnlessGranted(StepOutputVoter::EDIT, $stepOutput);

        $form = $this->createForm(StepOutputFormType::class, $stepOutput);

        return $this->render('stepoutput/_form_modal.html.twig', [
            'form' => $form,
            'stepOutput' => $stepOutput,
            'is_edit' => true,
        ]);
    }

    // ====================================
    // UPDATE ACTION - Process edit form submission
    // ====================================

    /**
     * Process edit stepOutput form submission
     */
    protected function updateAction(StepOutput $stepOutput, Request $request): Response
    {
        $this->denyAccessUnlessGranted(StepOutputVoter::EDIT, $stepOutput);

        $form = $this->createForm(StepOutputFormType::class, $stepOutput);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before update hook
                $this->beforeUpdate($stepOutput);

                $this->entityManager->flush();

                // After update hook
                $this->afterUpdate($stepOutput);

                $this->addFlash('success', $this->translator->trans(
                    'stepoutput.flash.updated_successfully',
                    ['%name%' => (string) $stepOutput],
                    'stepoutput'
                ));

                return $this->redirectToRoute('stepoutput_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'stepoutput.flash.update_failed',
                    ['%error%' => $e->getMessage()],
                    'stepoutput'
                ));
            }
        }

        // Re-render with errors
        return $this->render('stepoutput/_form_modal.html.twig', [
            'form' => $form,
            'stepOutput' => $stepOutput,
            'is_edit' => true,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // DELETE ACTION - Delete stepOutput
    // ====================================

    /**
     * Delete stepOutput
     */
    protected function deleteAction(StepOutput $stepOutput, Request $request): Response
    {
        $this->denyAccessUnlessGranted(StepOutputVoter::DELETE, $stepOutput);

        // Verify CSRF token
        $token = $request->request->get('_token');
        if (!$this->csrfTokenManager->isTokenValid(new CsrfToken('delete_stepOutput_' . $stepOutput->getId()->toString(), $token))) {
            throw new InvalidCsrfTokenException('Invalid CSRF token for delete operation.');
        }

        try {
            // Before delete hook
            $this->beforeDelete($stepOutput);

            $name = (string) $stepOutput;

            $this->entityManager->remove($stepOutput);
            $this->entityManager->flush();

            // After delete hook
            $this->afterDelete();

            $this->addFlash('success', $this->translator->trans(
                'stepoutput.flash.deleted_successfully',
                ['%name%' => $name],
                'stepoutput'
            ));

        } catch (\Exception $e) {
            $this->addFlash('error', $this->translator->trans(
                'stepoutput.flash.delete_failed',
                ['%error%' => $e->getMessage()],
                'stepoutput'
            ));
        }

        return $this->redirectToRoute('stepoutput_index', [], Response::HTTP_SEE_OTHER);
    }

    // ====================================
    // SHOW ACTION - Display stepOutput details
    // ====================================

    /**
     * Display stepOutput details
     */
    protected function showAction(StepOutput $stepOutput): Response
    {
        $this->denyAccessUnlessGranted(StepOutputVoter::VIEW, $stepOutput);

        return $this->render('stepoutput/show.html.twig', [
            'stepOutput' => $stepOutput,
        ]);
    }

    // ====================================
    // LIFECYCLE HOOKS
    // ====================================
    // Override these in StepOutputController to add custom logic

    /**
     * Initialize new entity before creating form
     *
     * Note: Organization and Owner are set automatically by TenantEntityProcessor
     * Only use this for custom initialization logic
     */
    protected function initializeNewEntity(StepOutput $stepOutput): void
    {
        // Organization and Owner are set automatically by TenantEntityProcessor
        // Add your custom initialization here
    }

    /**
     * Execute logic before creating entity
     */
    protected function beforeCreate(StepOutput $stepOutput): void
    {
        // Override to add logic before create
    }

    /**
     * Execute logic after creating entity
     */
    protected function afterCreate(StepOutput $stepOutput): void
    {
        // Override to add logic after create (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before updating entity
     */
    protected function beforeUpdate(StepOutput $stepOutput): void
    {
        // Override to add logic before update
    }

    /**
     * Execute logic after updating entity
     */
    protected function afterUpdate(StepOutput $stepOutput): void
    {
        // Override to add logic after update (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before deleting entity
     */
    protected function beforeDelete(StepOutput $stepOutput): void
    {
        // Override to add logic before delete (e.g., check dependencies, archive)
    }

    /**
     * Execute logic after deleting entity
     */
    protected function afterDelete(): void
    {
        // Override to add logic after delete (e.g., cleanup, send notification)
    }
}
