<?php

declare(strict_types=1);

namespace App\Controller\Generated;

use App\Controller\Base\BaseApiController;
use App\Entity\CalendarExternalLink;
use App\Repository\CalendarExternalLinkRepository;
use App\Security\Voter\CalendarExternalLinkVoter;
use App\Form\CalendarExternalLinkFormType;
use App\Service\ListPreferencesService;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Security\Csrf\CsrfToken;
use Symfony\Component\Security\Csrf\CsrfTokenManagerInterface;
use Symfony\Component\Security\Core\Exception\InvalidCsrfTokenException;
use Symfony\Contracts\Translation\TranslatorInterface;

/**
 * Generated Base Controller for CalendarExternalLink
 *
 * ⚠️ WARNING: This file is ALWAYS regenerated by Genmax
 * DO NOT EDIT THIS FILE - Edit CalendarExternalLinkController instead
 *
 * @generated
 * @codeCoverageIgnore
 */
abstract class CalendarExternalLinkControllerGenerated extends BaseApiController
{
    public function __construct(
        protected readonly EntityManagerInterface $entityManager,
        protected readonly CalendarExternalLinkRepository $repository,
        protected readonly ListPreferencesService $listPreferencesService,
        protected readonly TranslatorInterface $translator,
        protected readonly CsrfTokenManagerInterface $csrfTokenManager,
    ) {}

    // ====================================
    // ABSTRACT METHOD IMPLEMENTATIONS
    // ====================================

    /**
     * Get the repository for this entity
     */
    protected function getRepository(): CalendarExternalLinkRepository
    {
        return $this->repository;
    }

    /**
     * Get the plural name for this entity
     */
    protected function getEntityPluralName(): string
    {
        return 'calendarExternalLinks';
    }

    /**
     * Convert entity to array for API responses
     *
     * ⚠️ IMPORTANT: Enum Properties Stored as Strings
     * -------------------------------------------------
     * Properties with enum-backed types (like InputType) are stored as STRINGS
     * in the database and getters return strings directly, NOT enum objects.
     *
     * ❌ WRONG:   $entity->getType()->value   (Error: "Attempt to read property 'value' on string")
     * ✅ CORRECT: $entity->getType()          (Already a string - 'fully_completed')
     *
     * If you need the enum object for business logic, use:
     *    InputType::from($entity->getType())
     */
    protected function entityToArray(object $entity): array
    {
        if (!$entity instanceof CalendarExternalLink) {
            throw new \InvalidArgumentException('Expected CalendarExternalLink instance');
        }

        return [
            'id' => $entity->getId()->toString(),
            'name' => $entity->getName(),
            'calendars' => ($calendarsRel = $entity->getCalendars()) ? [
                'id' => $calendarsRel->getId()->toString(),
                'display' => (string) $calendarsRel,
            ] : null,
            'externalProvider' => $entity->getExternalProvider(),
            'active' => $entity->getActive(),
            'externalId' => $entity->getExternalId(),
            'url' => $entity->getUrl(),
            'accessToken' => $entity->getAccessToken(),
            'refreshToken' => $entity->getRefreshToken(),
            'tokenExpiresAt' => $entity->getTokenExpiresAt()?->format('M d, Y'),
            'syncToken' => $entity->getSyncToken(),
            'lastSyncedAt' => $entity->getLastSyncedAt()?->format('M d, Y'),
            'webhookUrl' => $entity->getWebhookUrl(),
            'webhookChannelId' => $entity->getWebhookChannelId(),
            'webhookExpiresAt' => $entity->getWebhookExpiresAt()?->format('M d, Y'),
            'syncDirection' => $entity->getSyncDirection(),
            'lastErrorMessage' => $entity->getLastErrorMessage(),
            'lastErrorAt' => $entity->getLastErrorAt()?->format('M d, Y'),
            'syncIntervalMinutes' => $entity->getSyncIntervalMinutes(),
            'retryCount' => $entity->getRetryCount(),
            'scopes' => $entity->getScopes(),
            'metadata' => $entity->getMetadata(),
            'user' => ($userRel = $entity->getUser()) ? [
                'id' => $userRel->getId()->toString(),
                'display' => (string) $userRel,
            ] : null,
        ];
    }

    // ====================================
    // INDEX ACTION - List all CalendarExternalLinks
    // ====================================

    /**
     * List CalendarExternalLinks
     */
    protected function indexAction(): Response
    {
        $this->denyAccessUnlessGranted(CalendarExternalLinkVoter::LIST);

        $preferences = $this->listPreferencesService->getEntityPreferences('calendarExternalLinks');
        $savedView = $preferences['view'] ?? 'grid';

        return $this->render('calendarexternallink/index.html.twig', [
            'entities' => [],  // Loaded via API
            'entity_name' => 'calendarExternalLink',
            'entity_name_plural' => 'calendarExternalLinks',
            'page_icon' => 'bi-link-45deg',
            'default_view' => $savedView,

            // List configuration from GeneratorProperty
            'enable_search' => true,
            'enable_filters' => true,
            'enable_sorting' => true,
            'enable_create_button' => true,

            // Property metadata for client-side rendering (as JSON strings)
            'list_fields' => '[{"name":"name","label":"Connection Name","type":"string","sortable":true,"searchable":true,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getName"},{"name":"calendars","label":"Calendars","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCalendars"},{"name":"externalProvider","label":"External Provider","type":"string","sortable":false,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getExternalProvider"},{"name":"active","label":"Active","type":"boolean","sortable":false,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":true,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getActive"},{"name":"lastSyncedAt","label":"Last Synced At","type":"datetime","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":true,"filterNumericRange":false,"filterExists":false,"getter":"getLastSyncedAt"},{"name":"syncDirection","label":"Sync Direction","type":"string","sortable":false,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getSyncDirection"},{"name":"user","label":"User","type":"","sortable":false,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getUser"}]',
            'searchable_fields' => '[{"name":"name","label":"Connection Name","type":"string"}]',
            'filterable_fields' => '[{"name":"name","label":"Connection Name","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"externalProvider","label":"External Provider","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"active","label":"Active","type":"boolean","strategy":null,"boolean":true,"date":false,"numericRange":false,"exists":false},{"name":"externalId","label":"External Provider ID","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"tokenExpiresAt","label":"Token Expires At","type":"datetime","strategy":null,"boolean":false,"date":true,"numericRange":false,"exists":false},{"name":"lastSyncedAt","label":"Last Synced At","type":"datetime","strategy":null,"boolean":false,"date":true,"numericRange":false,"exists":false},{"name":"webhookExpiresAt","label":"Webhook Expires At","type":"datetime","strategy":null,"boolean":false,"date":true,"numericRange":false,"exists":false},{"name":"syncDirection","label":"Sync Direction","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"lastErrorAt","label":"Last Error At","type":"datetime","strategy":null,"boolean":false,"date":true,"numericRange":false,"exists":false},{"name":"user","label":"User","type":"","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false}]',
            'sortable_fields' => '[{"name":"name","label":"Connection Name"},{"name":"calendars","label":"Calendars"},{"name":"url","label":"Calendar URL"},{"name":"lastSyncedAt","label":"Last Synced At"}]',
        ]);
    }

    // ====================================
    // API SEARCH - Fetch CalendarExternalLinks for list view
    // ====================================

    /**
     * API endpoint for searching CalendarExternalLinks
     */
    protected function apiSearchAction(Request $request): JsonResponse
    {
        $this->denyAccessUnlessGranted(CalendarExternalLinkVoter::LIST);

        // This method uses the BaseApiController's handleSearchRequest
        // which integrates with API Platform's GetCollection operation
        return $this->handleSearchRequest($request);
    }

    // ====================================
    // NEW FORM ACTION - Display create form
    // ====================================

    /**
     * Display new calendarExternalLink form
     */
    protected function newFormAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(CalendarExternalLinkVoter::CREATE);

        $calendarExternalLink = new CalendarExternalLink();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($calendarExternalLink);

        $form = $this->createForm(CalendarExternalLinkFormType::class, $calendarExternalLink);

        return $this->render('calendarexternallink/_form_modal.html.twig', [
            'form' => $form,
            'calendarExternalLink' => $calendarExternalLink,
            'is_edit' => false,
        ]);
    }

    // ====================================
    // CREATE ACTION - Process create form submission
    // ====================================

    /**
     * Process new calendarExternalLink form submission
     */
    protected function createAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(CalendarExternalLinkVoter::CREATE);

        $calendarExternalLink = new CalendarExternalLink();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($calendarExternalLink);

        $form = $this->createForm(CalendarExternalLinkFormType::class, $calendarExternalLink);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before create hook
                $this->beforeCreate($calendarExternalLink);

                $this->entityManager->persist($calendarExternalLink);
                $this->entityManager->flush();

                // After create hook
                $this->afterCreate($calendarExternalLink);

                $this->addFlash('success', $this->translator->trans(
                    'calendarexternallink.flash.created_successfully',
                    ['%name%' => (string) $calendarExternalLink],
                    'calendarexternallink'
                ));

                return $this->redirectToRoute('calendarexternallink_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'calendarexternallink.flash.create_failed',
                    ['%error%' => $e->getMessage()],
                    'calendarexternallink'
                ));
            }
        }

        // Re-render with errors
        return $this->render('calendarexternallink/_form_modal.html.twig', [
            'form' => $form,
            'calendarExternalLink' => $calendarExternalLink,
            'is_edit' => false,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // EDIT FORM ACTION - Display edit form
    // ====================================

    /**
     * Display edit calendarExternalLink form
     */
    protected function editFormAction(CalendarExternalLink $calendarExternalLink, Request $request): Response
    {
        $this->denyAccessUnlessGranted(CalendarExternalLinkVoter::EDIT, $calendarExternalLink);

        $form = $this->createForm(CalendarExternalLinkFormType::class, $calendarExternalLink);

        return $this->render('calendarexternallink/_form_modal.html.twig', [
            'form' => $form,
            'calendarExternalLink' => $calendarExternalLink,
            'is_edit' => true,
        ]);
    }

    // ====================================
    // UPDATE ACTION - Process edit form submission
    // ====================================

    /**
     * Process edit calendarExternalLink form submission
     */
    protected function updateAction(CalendarExternalLink $calendarExternalLink, Request $request): Response
    {
        $this->denyAccessUnlessGranted(CalendarExternalLinkVoter::EDIT, $calendarExternalLink);

        $form = $this->createForm(CalendarExternalLinkFormType::class, $calendarExternalLink);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before update hook
                $this->beforeUpdate($calendarExternalLink);

                $this->entityManager->flush();

                // After update hook
                $this->afterUpdate($calendarExternalLink);

                $this->addFlash('success', $this->translator->trans(
                    'calendarexternallink.flash.updated_successfully',
                    ['%name%' => (string) $calendarExternalLink],
                    'calendarexternallink'
                ));

                return $this->redirectToRoute('calendarexternallink_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'calendarexternallink.flash.update_failed',
                    ['%error%' => $e->getMessage()],
                    'calendarexternallink'
                ));
            }
        }

        // Re-render with errors
        return $this->render('calendarexternallink/_form_modal.html.twig', [
            'form' => $form,
            'calendarExternalLink' => $calendarExternalLink,
            'is_edit' => true,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // DELETE ACTION - Delete calendarExternalLink
    // ====================================

    /**
     * Delete calendarExternalLink
     */
    protected function deleteAction(CalendarExternalLink $calendarExternalLink, Request $request): Response
    {
        $this->denyAccessUnlessGranted(CalendarExternalLinkVoter::DELETE, $calendarExternalLink);

        // Verify CSRF token
        $token = $request->request->get('_token');
        if (!$this->csrfTokenManager->isTokenValid(new CsrfToken('delete_calendarExternalLink_' . $calendarExternalLink->getId()->toString(), $token))) {
            throw new InvalidCsrfTokenException('Invalid CSRF token for delete operation.');
        }

        try {
            // Before delete hook
            $this->beforeDelete($calendarExternalLink);

            $name = (string) $calendarExternalLink;

            $this->entityManager->remove($calendarExternalLink);
            $this->entityManager->flush();

            // After delete hook
            $this->afterDelete();

            $this->addFlash('success', $this->translator->trans(
                'calendarexternallink.flash.deleted_successfully',
                ['%name%' => $name],
                'calendarexternallink'
            ));

        } catch (\Exception $e) {
            $this->addFlash('error', $this->translator->trans(
                'calendarexternallink.flash.delete_failed',
                ['%error%' => $e->getMessage()],
                'calendarexternallink'
            ));
        }

        return $this->redirectToRoute('calendarexternallink_index', [], Response::HTTP_SEE_OTHER);
    }

    // ====================================
    // SHOW ACTION - Display calendarExternalLink details
    // ====================================

    /**
     * Display calendarExternalLink details
     */
    protected function showAction(CalendarExternalLink $calendarExternalLink): Response
    {
        $this->denyAccessUnlessGranted(CalendarExternalLinkVoter::VIEW, $calendarExternalLink);

        return $this->render('calendarexternallink/show.html.twig', [
            'calendarExternalLink' => $calendarExternalLink,
        ]);
    }

    // ====================================
    // LIFECYCLE HOOKS
    // ====================================
    // Override these in CalendarExternalLinkController to add custom logic

    /**
     * Initialize new entity before creating form
     *
     * Note: Organization and Owner are set automatically by TenantEntityProcessor
     * Only use this for custom initialization logic
     */
    protected function initializeNewEntity(CalendarExternalLink $calendarExternalLink): void
    {
        // Organization and Owner are set automatically by TenantEntityProcessor
        // Add your custom initialization here
    }

    /**
     * Execute logic before creating entity
     */
    protected function beforeCreate(CalendarExternalLink $calendarExternalLink): void
    {
        // Override to add logic before create
    }

    /**
     * Execute logic after creating entity
     */
    protected function afterCreate(CalendarExternalLink $calendarExternalLink): void
    {
        // Override to add logic after create (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before updating entity
     */
    protected function beforeUpdate(CalendarExternalLink $calendarExternalLink): void
    {
        // Override to add logic before update
    }

    /**
     * Execute logic after updating entity
     */
    protected function afterUpdate(CalendarExternalLink $calendarExternalLink): void
    {
        // Override to add logic after update (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before deleting entity
     */
    protected function beforeDelete(CalendarExternalLink $calendarExternalLink): void
    {
        // Override to add logic before delete (e.g., check dependencies, archive)
    }

    /**
     * Execute logic after deleting entity
     */
    protected function afterDelete(): void
    {
        // Override to add logic after delete (e.g., cleanup, send notification)
    }
}
