<?php

declare(strict_types=1);

namespace App\Controller\Generated;

use App\Controller\Base\BaseApiController;
use App\Entity\Talk;
use App\Repository\TalkRepository;
use App\Security\Voter\TalkVoter;
use App\Form\TalkFormType;
use App\Service\ListPreferencesService;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Security\Csrf\CsrfToken;
use Symfony\Component\Security\Csrf\CsrfTokenManagerInterface;
use Symfony\Component\Security\Core\Exception\InvalidCsrfTokenException;
use Symfony\Contracts\Translation\TranslatorInterface;

/**
 * Generated Base Controller for Talk
 *
 * ⚠️ WARNING: This file is ALWAYS regenerated by Genmax
 * DO NOT EDIT THIS FILE - Edit TalkController instead
 *
 * @generated
 * @codeCoverageIgnore
 */
abstract class TalkControllerGenerated extends BaseApiController
{
    public function __construct(
        protected readonly EntityManagerInterface $entityManager,
        protected readonly TalkRepository $repository,
        protected readonly ListPreferencesService $listPreferencesService,
        protected readonly TranslatorInterface $translator,
        protected readonly CsrfTokenManagerInterface $csrfTokenManager,
    ) {}

    // ====================================
    // ABSTRACT METHOD IMPLEMENTATIONS
    // ====================================

    /**
     * Get the repository for this entity
     */
    protected function getRepository(): TalkRepository
    {
        return $this->repository;
    }

    /**
     * Get the plural name for this entity
     */
    protected function getEntityPluralName(): string
    {
        return 'talks';
    }

    /**
     * Convert entity to array for API responses
     *
     * ⚠️ IMPORTANT: Enum Properties Stored as Strings
     * -------------------------------------------------
     * Properties with enum-backed types (like InputType) are stored as STRINGS
     * in the database and getters return strings directly, NOT enum objects.
     *
     * ❌ WRONG:   $entity->getType()->value   (Error: "Attempt to read property 'value' on string")
     * ✅ CORRECT: $entity->getType()          (Already a string - 'fully_completed')
     *
     * If you need the enum object for business logic, use:
     *    InputType::from($entity->getType())
     */
    protected function entityToArray(object $entity): array
    {
        if (!$entity instanceof Talk) {
            throw new \InvalidArgumentException('Expected Talk instance');
        }

        return [
            'id' => $entity->getId()->toString(),
            'organization' => ($organizationRel = $entity->getOrganization()) ? [
                'id' => $organizationRel->getId()->toString(),
                'display' => (string) $organizationRel,
            ] : null,
            'subject' => $entity->getSubject(),
            'summary' => $entity->getSummary(),
            'company' => ($companyRel = $entity->getCompany()) ? [
                'id' => $companyRel->getId()->toString(),
                'display' => (string) $companyRel,
            ] : null,
            'contact' => ($contactRel = $entity->getContact()) ? [
                'id' => $contactRel->getId()->toString(),
                'display' => (string) $contactRel,
            ] : null,
            'deal' => ($dealRel = $entity->getDeal()) ? [
                'id' => $dealRel->getId()->toString(),
                'display' => (string) $dealRel,
            ] : null,
            'talkType' => ($talkTypeRel = $entity->getTalkType()) ? [
                'id' => $talkTypeRel->getId()->toString(),
                'display' => (string) $talkTypeRel,
            ] : null,
            'channel' => $entity->getChannel(),
            'status' => $entity->getStatus(),
            'priority' => $entity->getPriority(),
            'outcome' => $entity->getOutcome(),
            'sentiment' => $entity->getSentiment(),
            'dateStart' => $entity->getDateStart()?->format('M d, Y'),
            'dateLastMessage' => $entity->getDateLastMessage()?->format('M d, Y'),
            'closedAt' => $entity->getClosedAt()?->format('M d, Y'),
            'durationSeconds' => $entity->getDurationSeconds(),
            'recordingUrl' => $entity->getRecordingUrl(),
            'users' => ($usersRel = $entity->getUsers()) ? [
                'id' => $usersRel->getId()->toString(),
                'display' => (string) $usersRel,
            ] : null,
            'owner' => ($ownerRel = $entity->getOwner()) ? [
                'id' => $ownerRel->getId()->toString(),
                'display' => (string) $ownerRel,
            ] : null,
            'assignedTo' => ($assignedToRel = $entity->getAssignedTo()) ? [
                'id' => $assignedToRel->getId()->toString(),
                'display' => (string) $assignedToRel,
            ] : null,
            'agents' => ($agentsRel = $entity->getAgents()) ? [
                'id' => $agentsRel->getId()->toString(),
                'display' => (string) $agentsRel,
            ] : null,
            'campaigns' => ($campaignsRel = $entity->getCampaigns()) ? [
                'id' => $campaignsRel->getId()->toString(),
                'display' => (string) $campaignsRel,
            ] : null,
            'messages' => ($messagesRel = $entity->getMessages()) ? [
                'id' => $messagesRel->getId()->toString(),
                'display' => (string) $messagesRel,
            ] : null,
            'messageCount' => $entity->getMessageCount(),
            'archived' => $entity->getArchived(),
            'internal' => $entity->getInternal(),
            'tags' => $entity->getTags(),
        ];
    }

    // ====================================
    // INDEX ACTION - List all Talks
    // ====================================

    /**
     * List Talks
     */
    protected function indexAction(): Response
    {
        $this->denyAccessUnlessGranted(TalkVoter::LIST);

        $preferences = $this->listPreferencesService->getEntityPreferences('talks');
        $savedView = $preferences['view'] ?? 'grid';

        return $this->render('talk/index.html.twig', [
            'entities' => [],  // Loaded via API
            'entity_name' => 'talk',
            'entity_name_plural' => 'talks',
            'page_icon' => 'bi-chat-dots',
            'default_view' => $savedView,

            // List configuration from GeneratorProperty
            'enable_search' => true,
            'enable_filters' => true,
            'enable_sorting' => true,
            'enable_create_button' => true,

            // Property metadata for client-side rendering (as JSON strings)
            'list_fields' => '[{"name":"subject","label":"Subject","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getSubject"},{"name":"summary","label":"Summary","type":"text","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getSummary"},{"name":"company","label":"Company","type":"","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCompany"},{"name":"contact","label":"Contact","type":"","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getContact"},{"name":"deal","label":"Deal","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDeal"},{"name":"talkType","label":"TalkType","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getTalkType"},{"name":"channel","label":"Channel","type":"integer","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getChannel"},{"name":"status","label":"Status","type":"integer","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getStatus"},{"name":"priority","label":"Priority","type":"integer","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getPriority"},{"name":"outcome","label":"Outcome","type":"integer","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getOutcome"},{"name":"sentiment","label":"Sentiment","type":"string","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getSentiment"},{"name":"dateStart","label":"DateStart","type":"datetime","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDateStart"},{"name":"dateLastMessage","label":"DateLastMessage","type":"datetime","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDateLastMessage"},{"name":"closedAt","label":"Closed At","type":"datetime","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getClosedAt"},{"name":"durationSeconds","label":"DurationSeconds","type":"integer","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDurationSeconds"},{"name":"recordingUrl","label":"RecordingUrl","type":"string","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getRecordingUrl"},{"name":"users","label":"Users","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getUsers"},{"name":"owner","label":"Owner","type":"","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getOwner"},{"name":"assignedTo","label":"Assigned To","type":"","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getAssignedTo"},{"name":"agents","label":"Agents","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getAgents"},{"name":"campaigns","label":"Campaigns","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCampaigns"},{"name":"messages","label":"Messages","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getMessages"},{"name":"messageCount","label":"Message Count","type":"integer","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getMessageCount"},{"name":"archived","label":"IsArchived","type":"boolean","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getArchived"},{"name":"internal","label":"Internal","type":"boolean","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getInternal"}]',
            'searchable_fields' => '[{"name":"subject","label":"Subject","type":"string"},{"name":"summary","label":"Summary","type":"text"},{"name":"tags","label":"Tags","type":"json"}]',
            'filterable_fields' => '[{"name":"company","label":"Company","type":"","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"sentiment","label":"Sentiment","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"closedAt","label":"Closed At","type":"datetime","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"owner","label":"Owner","type":"","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"assignedTo","label":"Assigned To","type":"","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"messageCount","label":"Message Count","type":"integer","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"internal","label":"Internal","type":"boolean","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"tags","label":"Tags","type":"json","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false}]',
            'sortable_fields' => '[{"name":"subject","label":"Subject"},{"name":"summary","label":"Summary"},{"name":"company","label":"Company"},{"name":"deal","label":"Deal"},{"name":"talkType","label":"TalkType"},{"name":"channel","label":"Channel"},{"name":"status","label":"Status"},{"name":"priority","label":"Priority"},{"name":"outcome","label":"Outcome"},{"name":"sentiment","label":"Sentiment"},{"name":"dateStart","label":"DateStart"},{"name":"dateLastMessage","label":"DateLastMessage"},{"name":"closedAt","label":"Closed At"},{"name":"durationSeconds","label":"DurationSeconds"},{"name":"recordingUrl","label":"RecordingUrl"},{"name":"users","label":"Users"},{"name":"owner","label":"Owner"},{"name":"assignedTo","label":"Assigned To"},{"name":"agents","label":"Agents"},{"name":"campaigns","label":"Campaigns"},{"name":"messages","label":"Messages"},{"name":"messageCount","label":"Message Count"},{"name":"archived","label":"IsArchived"},{"name":"internal","label":"Internal"}]',
        ]);
    }

    // ====================================
    // API SEARCH - Fetch Talks for list view
    // ====================================

    /**
     * API endpoint for searching Talks
     */
    protected function apiSearchAction(Request $request): JsonResponse
    {
        $this->denyAccessUnlessGranted(TalkVoter::LIST);

        // This method uses the BaseApiController's handleSearchRequest
        // which integrates with API Platform's GetCollection operation
        return $this->handleSearchRequest($request);
    }

    // ====================================
    // NEW FORM ACTION - Display create form
    // ====================================

    /**
     * Display new talk form
     */
    protected function newFormAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(TalkVoter::CREATE);

        $talk = new Talk();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($talk);

        $form = $this->createForm(TalkFormType::class, $talk);

        return $this->render('talk/_form_modal.html.twig', [
            'form' => $form,
            'talk' => $talk,
            'is_edit' => false,
        ]);
    }

    // ====================================
    // CREATE ACTION - Process create form submission
    // ====================================

    /**
     * Process new talk form submission
     */
    protected function createAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(TalkVoter::CREATE);

        $talk = new Talk();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($talk);

        $form = $this->createForm(TalkFormType::class, $talk);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before create hook
                $this->beforeCreate($talk);

                $this->entityManager->persist($talk);
                $this->entityManager->flush();

                // After create hook
                $this->afterCreate($talk);

                $this->addFlash('success', $this->translator->trans(
                    'talk.flash.created_successfully',
                    ['%name%' => (string) $talk],
                    'talk'
                ));

                return $this->redirectToRoute('talk_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'talk.flash.create_failed',
                    ['%error%' => $e->getMessage()],
                    'talk'
                ));
            }
        }

        // Re-render with errors
        return $this->render('talk/_form_modal.html.twig', [
            'form' => $form,
            'talk' => $talk,
            'is_edit' => false,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // EDIT FORM ACTION - Display edit form
    // ====================================

    /**
     * Display edit talk form
     */
    protected function editFormAction(Talk $talk, Request $request): Response
    {
        $this->denyAccessUnlessGranted(TalkVoter::EDIT, $talk);

        $form = $this->createForm(TalkFormType::class, $talk);

        return $this->render('talk/_form_modal.html.twig', [
            'form' => $form,
            'talk' => $talk,
            'is_edit' => true,
        ]);
    }

    // ====================================
    // UPDATE ACTION - Process edit form submission
    // ====================================

    /**
     * Process edit talk form submission
     */
    protected function updateAction(Talk $talk, Request $request): Response
    {
        $this->denyAccessUnlessGranted(TalkVoter::EDIT, $talk);

        $form = $this->createForm(TalkFormType::class, $talk);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before update hook
                $this->beforeUpdate($talk);

                $this->entityManager->flush();

                // After update hook
                $this->afterUpdate($talk);

                $this->addFlash('success', $this->translator->trans(
                    'talk.flash.updated_successfully',
                    ['%name%' => (string) $talk],
                    'talk'
                ));

                return $this->redirectToRoute('talk_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'talk.flash.update_failed',
                    ['%error%' => $e->getMessage()],
                    'talk'
                ));
            }
        }

        // Re-render with errors
        return $this->render('talk/_form_modal.html.twig', [
            'form' => $form,
            'talk' => $talk,
            'is_edit' => true,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // DELETE ACTION - Delete talk
    // ====================================

    /**
     * Delete talk
     */
    protected function deleteAction(Talk $talk, Request $request): Response
    {
        $this->denyAccessUnlessGranted(TalkVoter::DELETE, $talk);

        // Verify CSRF token
        $token = $request->request->get('_token');
        if (!$this->csrfTokenManager->isTokenValid(new CsrfToken('delete_talk_' . $talk->getId()->toString(), $token))) {
            throw new InvalidCsrfTokenException('Invalid CSRF token for delete operation.');
        }

        try {
            // Before delete hook
            $this->beforeDelete($talk);

            $name = (string) $talk;

            $this->entityManager->remove($talk);
            $this->entityManager->flush();

            // After delete hook
            $this->afterDelete();

            $this->addFlash('success', $this->translator->trans(
                'talk.flash.deleted_successfully',
                ['%name%' => $name],
                'talk'
            ));

        } catch (\Exception $e) {
            $this->addFlash('error', $this->translator->trans(
                'talk.flash.delete_failed',
                ['%error%' => $e->getMessage()],
                'talk'
            ));
        }

        return $this->redirectToRoute('talk_index', [], Response::HTTP_SEE_OTHER);
    }

    // ====================================
    // SHOW ACTION - Display talk details
    // ====================================

    /**
     * Display talk details
     */
    protected function showAction(Talk $talk): Response
    {
        $this->denyAccessUnlessGranted(TalkVoter::VIEW, $talk);

        return $this->render('talk/show.html.twig', [
            'talk' => $talk,
        ]);
    }

    // ====================================
    // LIFECYCLE HOOKS
    // ====================================
    // Override these in TalkController to add custom logic

    /**
     * Initialize new entity before creating form
     *
     * Note: Organization and Owner are set automatically by TenantEntityProcessor
     * Only use this for custom initialization logic
     */
    protected function initializeNewEntity(Talk $talk): void
    {
        // Organization and Owner are set automatically by TenantEntityProcessor
        // Add your custom initialization here
    }

    /**
     * Execute logic before creating entity
     */
    protected function beforeCreate(Talk $talk): void
    {
        // Override to add logic before create
    }

    /**
     * Execute logic after creating entity
     */
    protected function afterCreate(Talk $talk): void
    {
        // Override to add logic after create (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before updating entity
     */
    protected function beforeUpdate(Talk $talk): void
    {
        // Override to add logic before update
    }

    /**
     * Execute logic after updating entity
     */
    protected function afterUpdate(Talk $talk): void
    {
        // Override to add logic after update (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before deleting entity
     */
    protected function beforeDelete(Talk $talk): void
    {
        // Override to add logic before delete (e.g., check dependencies, archive)
    }

    /**
     * Execute logic after deleting entity
     */
    protected function afterDelete(): void
    {
        // Override to add logic after delete (e.g., cleanup, send notification)
    }
}
