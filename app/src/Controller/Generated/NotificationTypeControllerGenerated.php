<?php

declare(strict_types=1);

namespace App\Controller\Generated;

use App\Controller\Base\BaseApiController;
use App\Entity\NotificationType;
use App\Repository\NotificationTypeRepository;
use App\Security\Voter\NotificationTypeVoter;
use App\Form\NotificationTypeFormType;
use App\Service\ListPreferencesService;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Security\Csrf\CsrfToken;
use Symfony\Component\Security\Csrf\CsrfTokenManagerInterface;
use Symfony\Component\Security\Core\Exception\InvalidCsrfTokenException;
use Symfony\Contracts\Translation\TranslatorInterface;

/**
 * Generated Base Controller for NotificationType
 *
 * ⚠️ WARNING: This file is ALWAYS regenerated by Genmax
 * DO NOT EDIT THIS FILE - Edit NotificationTypeController instead
 *
 * @generated
 * @codeCoverageIgnore
 */
abstract class NotificationTypeControllerGenerated extends BaseApiController
{
    public function __construct(
        protected readonly EntityManagerInterface $entityManager,
        protected readonly NotificationTypeRepository $repository,
        protected readonly ListPreferencesService $listPreferencesService,
        protected readonly TranslatorInterface $translator,
        protected readonly CsrfTokenManagerInterface $csrfTokenManager,
    ) {}

    // ====================================
    // ABSTRACT METHOD IMPLEMENTATIONS
    // ====================================

    /**
     * Get the repository for this entity
     */
    protected function getRepository(): NotificationTypeRepository
    {
        return $this->repository;
    }

    /**
     * Get the plural name for this entity
     */
    protected function getEntityPluralName(): string
    {
        return 'notificationTypes';
    }

    /**
     * Convert entity to array for API responses
     */
    protected function entityToArray(object $entity): array
    {
        if (!$entity instanceof NotificationType) {
            throw new \InvalidArgumentException('Expected NotificationType instance');
        }

        return [
            'id' => $entity->getId()->toString(),
            'organization' => ($organizationRel = $entity->getOrganization()) ? [
                'id' => $organizationRel->getId()->toString(),
                'display' => (string) $organizationRel,
            ] : null,
            'name' => $entity->getName(),
            'description' => $entity->getDescription(),
            'icon' => $entity->getIcon(),
            'notifications' => ($notificationsRel = $entity->getNotifications()) ? [
                'id' => $notificationsRel->getId()->toString(),
                'display' => (string) $notificationsRel,
            ] : null,
            'active' => $entity->getActive(),
            'default' => $entity->getDefault(),
            'channels' => $entity->getChannels(),
            'priority' => $entity->getPriority(),
            'color' => $entity->getColor(),
            'emailSubject' => $entity->getEmailSubject(),
            'emailTemplate' => $entity->getEmailTemplate(),
            'smsTemplate' => $entity->getSmsTemplate(),
            'pushTitle' => $entity->getPushTitle(),
            'pushBody' => $entity->getPushBody(),
            'frequency' => $entity->getFrequency(),
            'retryEnabled' => $entity->getRetryEnabled(),
            'maxRetries' => $entity->getMaxRetries(),
            'throttleEnabled' => $entity->getThrottleEnabled(),
            'throttleLimit' => $entity->getThrottleLimit(),
            'tags' => $entity->getTags(),
            'metadata' => $entity->getMetadata(),
            'userPreferenceAllowed' => $entity->getUserPreferenceAllowed(),
            'requiresAction' => $entity->getRequiresAction(),
            'expiresAfterHours' => $entity->getExpiresAfterHours(),
        ];
    }

    // ====================================
    // INDEX ACTION - List all NotificationTypes
    // ====================================

    /**
     * List NotificationTypes
     */
    protected function indexAction(): Response
    {
        $this->denyAccessUnlessGranted(NotificationTypeVoter::LIST);

        $preferences = $this->listPreferencesService->getEntityPreferences('notificationTypes');
        $savedView = $preferences['view'] ?? 'grid';

        return $this->render('notificationtype/index.html.twig', [
            'entities' => [],  // Loaded via API
            'entity_name' => 'notificationType',
            'entity_name_plural' => 'notificationTypes',
            'page_icon' => 'bi-bell-fill',
            'default_view' => $savedView,

            // List configuration from GeneratorProperty
            'enable_search' => true,
            'enable_filters' => true,
            'enable_sorting' => true,
            'enable_create_button' => true,

            // Property metadata for client-side rendering (as JSON strings)
            'list_fields' => '[{"name":"name","label":"Name","type":"string","sortable":true,"searchable":true,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getName"},{"name":"description","label":"Description","type":"text","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDescription"},{"name":"icon","label":"Icon","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getIcon"},{"name":"notifications","label":"Notifications","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getNotifications"},{"name":"active","label":"Active","type":"boolean","sortable":false,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":true,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getActive"},{"name":"default","label":"Default","type":"boolean","sortable":false,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":true,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDefault"},{"name":"channels","label":"Channels","type":"json","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getChannels"},{"name":"priority","label":"Priority","type":"string","sortable":false,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getPriority"},{"name":"color","label":"Color","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getColor"},{"name":"frequency","label":"Frequency","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getFrequency"},{"name":"tags","label":"Tags","type":"json","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getTags"},{"name":"requiresAction","label":"Requires Action","type":"boolean","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":true,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getRequiresAction"}]',
            'searchable_fields' => '[{"name":"name","label":"Name","type":"string"},{"name":"description","label":"Description","type":"text"},{"name":"emailSubject","label":"Email Subject","type":"string"}]',
            'filterable_fields' => '[{"name":"name","label":"Name","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"active","label":"Active","type":"boolean","strategy":null,"boolean":true,"date":false,"numericRange":false,"exists":false},{"name":"default","label":"Default","type":"boolean","strategy":null,"boolean":true,"date":false,"numericRange":false,"exists":false},{"name":"priority","label":"Priority","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false}]',
            'sortable_fields' => '[{"name":"name","label":"Name"},{"name":"description","label":"Description"},{"name":"notifications","label":"Notifications"}]',
        ]);
    }

    // ====================================
    // API SEARCH - Fetch NotificationTypes for list view
    // ====================================

    /**
     * API endpoint for searching NotificationTypes
     */
    protected function apiSearchAction(Request $request): JsonResponse
    {
        $this->denyAccessUnlessGranted(NotificationTypeVoter::LIST);

        // This method uses the BaseApiController's handleSearchRequest
        // which integrates with API Platform's GetCollection operation
        return $this->handleSearchRequest($request);
    }

    // ====================================
    // NEW FORM ACTION - Display create form
    // ====================================

    /**
     * Display new notificationType form
     */
    protected function newFormAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(NotificationTypeVoter::CREATE);

        $notificationType = new NotificationType();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($notificationType);

        $form = $this->createForm(NotificationTypeFormType::class, $notificationType);

        return $this->render('notificationtype/_form_modal.html.twig', [
            'form' => $form,
            'notificationType' => $notificationType,
            'is_edit' => false,
        ]);
    }

    // ====================================
    // CREATE ACTION - Process create form submission
    // ====================================

    /**
     * Process new notificationType form submission
     */
    protected function createAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(NotificationTypeVoter::CREATE);

        $notificationType = new NotificationType();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($notificationType);

        $form = $this->createForm(NotificationTypeFormType::class, $notificationType);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before create hook
                $this->beforeCreate($notificationType);

                $this->entityManager->persist($notificationType);
                $this->entityManager->flush();

                // After create hook
                $this->afterCreate($notificationType);

                $this->addFlash('success', $this->translator->trans(
                    'notificationtype.flash.created_successfully',
                    ['%name%' => (string) $notificationType],
                    'notificationtype'
                ));

                return $this->redirectToRoute('notificationtype_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'notificationtype.flash.create_failed',
                    ['%error%' => $e->getMessage()],
                    'notificationtype'
                ));
            }
        }

        // Re-render with errors
        return $this->render('notificationtype/_form_modal.html.twig', [
            'form' => $form,
            'notificationType' => $notificationType,
            'is_edit' => false,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // EDIT FORM ACTION - Display edit form
    // ====================================

    /**
     * Display edit notificationType form
     */
    protected function editFormAction(NotificationType $notificationType, Request $request): Response
    {
        $this->denyAccessUnlessGranted(NotificationTypeVoter::EDIT, $notificationType);

        $form = $this->createForm(NotificationTypeFormType::class, $notificationType);

        return $this->render('notificationtype/_form_modal.html.twig', [
            'form' => $form,
            'notificationType' => $notificationType,
            'is_edit' => true,
        ]);
    }

    // ====================================
    // UPDATE ACTION - Process edit form submission
    // ====================================

    /**
     * Process edit notificationType form submission
     */
    protected function updateAction(NotificationType $notificationType, Request $request): Response
    {
        $this->denyAccessUnlessGranted(NotificationTypeVoter::EDIT, $notificationType);

        $form = $this->createForm(NotificationTypeFormType::class, $notificationType);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before update hook
                $this->beforeUpdate($notificationType);

                $this->entityManager->flush();

                // After update hook
                $this->afterUpdate($notificationType);

                $this->addFlash('success', $this->translator->trans(
                    'notificationtype.flash.updated_successfully',
                    ['%name%' => (string) $notificationType],
                    'notificationtype'
                ));

                return $this->redirectToRoute('notificationtype_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'notificationtype.flash.update_failed',
                    ['%error%' => $e->getMessage()],
                    'notificationtype'
                ));
            }
        }

        // Re-render with errors
        return $this->render('notificationtype/_form_modal.html.twig', [
            'form' => $form,
            'notificationType' => $notificationType,
            'is_edit' => true,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // DELETE ACTION - Delete notificationType
    // ====================================

    /**
     * Delete notificationType
     */
    protected function deleteAction(NotificationType $notificationType, Request $request): Response
    {
        $this->denyAccessUnlessGranted(NotificationTypeVoter::DELETE, $notificationType);

        // Verify CSRF token
        $token = $request->request->get('_token');
        if (!$this->csrfTokenManager->isTokenValid(new CsrfToken('delete_notificationType_' . $notificationType->getId()->toString(), $token))) {
            throw new InvalidCsrfTokenException('Invalid CSRF token for delete operation.');
        }

        try {
            // Before delete hook
            $this->beforeDelete($notificationType);

            $name = (string) $notificationType;

            $this->entityManager->remove($notificationType);
            $this->entityManager->flush();

            // After delete hook
            $this->afterDelete();

            $this->addFlash('success', $this->translator->trans(
                'notificationtype.flash.deleted_successfully',
                ['%name%' => $name],
                'notificationtype'
            ));

        } catch (\Exception $e) {
            $this->addFlash('error', $this->translator->trans(
                'notificationtype.flash.delete_failed',
                ['%error%' => $e->getMessage()],
                'notificationtype'
            ));
        }

        return $this->redirectToRoute('notificationtype_index', [], Response::HTTP_SEE_OTHER);
    }

    // ====================================
    // SHOW ACTION - Display notificationType details
    // ====================================

    /**
     * Display notificationType details
     */
    protected function showAction(NotificationType $notificationType): Response
    {
        $this->denyAccessUnlessGranted(NotificationTypeVoter::VIEW, $notificationType);

        return $this->render('notificationtype/show.html.twig', [
            'notificationType' => $notificationType,
        ]);
    }

    // ====================================
    // LIFECYCLE HOOKS
    // ====================================
    // Override these in NotificationTypeController to add custom logic

    /**
     * Initialize new entity before creating form
     *
     * Note: Organization and Owner are set automatically by TenantEntityProcessor
     * Only use this for custom initialization logic
     */
    protected function initializeNewEntity(NotificationType $notificationType): void
    {
        // Organization and Owner are set automatically by TenantEntityProcessor
        // Add your custom initialization here
    }

    /**
     * Execute logic before creating entity
     */
    protected function beforeCreate(NotificationType $notificationType): void
    {
        // Override to add logic before create
    }

    /**
     * Execute logic after creating entity
     */
    protected function afterCreate(NotificationType $notificationType): void
    {
        // Override to add logic after create (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before updating entity
     */
    protected function beforeUpdate(NotificationType $notificationType): void
    {
        // Override to add logic before update
    }

    /**
     * Execute logic after updating entity
     */
    protected function afterUpdate(NotificationType $notificationType): void
    {
        // Override to add logic after update (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before deleting entity
     */
    protected function beforeDelete(NotificationType $notificationType): void
    {
        // Override to add logic before delete (e.g., check dependencies, archive)
    }

    /**
     * Execute logic after deleting entity
     */
    protected function afterDelete(): void
    {
        // Override to add logic after delete (e.g., cleanup, send notification)
    }
}
