<?php

declare(strict_types=1);

namespace App\Controller\Generated;

use App\Entity\NotificationType;
use App\Form\NotificationTypeType;
use App\Repository\NotificationTypeRepository;
use App\Service\OrganizationContext;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Attribute\Route;
use Symfony\Component\Security\Http\Attribute\IsGranted;

/**
 * NotificationType Controller (Generated Base Class)
 *
 * This class is ALWAYS regenerated from CSV. DO NOT edit this file.
 * Add custom actions to NotificationTypeController.php instead.
 *
 * @generated by Luminai Code Generator
 */
#[Route('/notification-type')]
abstract class NotificationTypeControllerGenerated extends AbstractController
{
    public function __construct(
        protected readonly NotificationTypeRepository $repository,
        protected readonly OrganizationContext $organizationContext
    ) {}

    /**
     * List all NotificationTypes
     */
    #[Route('', name: 'notification_type_index', methods: ['GET'])]
        #[IsGranted('ROLE_ORGANIZATION_ADMIN')]
    public function index(Request $request): Response
    {
        $page = max(1, $request->query->getInt('page', 1));
        $search = $request->query->get('search', '');

        $notificationtypes = $this->repository->findPaginated($page, 30);
        $total = $this->repository->count();

        return $this->render('notificationtype/index.html.twig', [
            'notificationtypes' => $notificationtypes,
            'total' => $total,
            'page' => $page,
            'pages' => ceil($total / 30),
            'search' => $search,
        ]);
    }

    /**
     * Show NotificationType details
     */
    #[Route('/{id}', name: 'notification_type_show', methods: ['GET'])]
        #[IsGranted('ROLE_ORGANIZATION_ADMIN')]
    public function show(NotificationType $notificationtype): Response
    {
        $this->denyAccessUnlessGranted('VIEW', $notificationtype);

        return $this->render('notificationtype/show.html.twig', [
            'notificationtype' => $notificationtype,
        ]);
    }

    /**
     * Create new NotificationType
     */
    #[Route('/new', name: 'notification_type_new', methods: ['GET', 'POST'])]
        #[IsGranted('ROLE_ORGANIZATION_ADMIN')]
    public function new(Request $request): Response
    {
        $notificationtype = new NotificationType();

        // Set organization from context
        $organization = $this->organizationContext->getOrganization();
        if ($organization) {
            $notificationtype->setOrganization($organization);
        }

        $form = $this->createForm(NotificationTypeType::class, $notificationtype);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $this->repository->save($notificationtype, true);

            $this->addFlash('success', 'NotificationType created successfully.');

            return $this->redirectToRoute('notification_type_index');
        }

        return $this->render('notificationtype/form.html.twig', [
            'notificationtype' => $notificationtype,
            'form' => $form,
            'is_edit' => false,
        ]);
    }

    /**
     * Edit NotificationType
     */
    #[Route('/{id}/edit', name: 'notification_type_edit', methods: ['GET', 'POST'])]
        #[IsGranted('ROLE_ORGANIZATION_ADMIN')]
    public function edit(Request $request, NotificationType $notificationtype): Response
    {
        $this->denyAccessUnlessGranted('EDIT', $notificationtype);

        $form = $this->createForm(NotificationTypeType::class, $notificationtype);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $this->repository->save($notificationtype, true);

            $this->addFlash('success', 'NotificationType updated successfully.');

            return $this->redirectToRoute('notification_type_index');
        }

        return $this->render('notificationtype/form.html.twig', [
            'notificationtype' => $notificationtype,
            'form' => $form,
            'is_edit' => true,
        ]);
    }

    /**
     * Delete NotificationType
     */
    #[Route('/{id}', name: 'notification_type_delete', methods: ['POST'])]
        #[IsGranted('ROLE_ORGANIZATION_ADMIN')]
    public function delete(Request $request, NotificationType $notificationtype): Response
    {
        $this->denyAccessUnlessGranted('DELETE', $notificationtype);

        if ($this->isCsrfTokenValid('delete_notification_type_' . $notificationtype->getId(), $request->request->get('_token'))) {
            $this->repository->remove($notificationtype, true);

            $this->addFlash('success', 'NotificationType deleted successfully.');
        }

        return $this->redirectToRoute('notification_type_index');
    }
}
