<?php

declare(strict_types=1);

namespace App\Controller\Generated;

use App\Controller\Base\BaseApiController;
use App\Entity\EventAttendee;
use App\Repository\EventAttendeeRepository;
use App\Security\Voter\EventAttendeeVoter;
use App\Form\EventAttendeeFormType;
use App\Service\ListPreferencesService;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Security\Csrf\CsrfToken;
use Symfony\Component\Security\Csrf\CsrfTokenManagerInterface;
use Symfony\Component\Security\Core\Exception\InvalidCsrfTokenException;
use Symfony\Contracts\Translation\TranslatorInterface;

/**
 * Generated Base Controller for EventAttendee
 *
 * ⚠️ WARNING: This file is ALWAYS regenerated by Genmax
 * DO NOT EDIT THIS FILE - Edit EventAttendeeController instead
 *
 * @generated
 * @codeCoverageIgnore
 */
abstract class EventAttendeeControllerGenerated extends BaseApiController
{
    public function __construct(
        protected readonly EntityManagerInterface $entityManager,
        protected readonly EventAttendeeRepository $repository,
        protected readonly ListPreferencesService $listPreferencesService,
        protected readonly TranslatorInterface $translator,
        protected readonly CsrfTokenManagerInterface $csrfTokenManager,
    ) {}

    // ====================================
    // ABSTRACT METHOD IMPLEMENTATIONS
    // ====================================

    /**
     * Get the repository for this entity
     */
    protected function getRepository(): EventAttendeeRepository
    {
        return $this->repository;
    }

    /**
     * Get the plural name for this entity
     */
    protected function getEntityPluralName(): string
    {
        return 'eventAttendees';
    }

    /**
     * Convert entity to array for API responses
     */
    protected function entityToArray(object $entity): array
    {
        if (!$entity instanceof EventAttendee) {
            throw new \InvalidArgumentException('Expected EventAttendee instance');
        }

        return [
            'id' => $entity->getId()->toString(),
            'organization' => ($organizationRel = $entity->getOrganization()) ? [
                'id' => $organizationRel->getId()->toString(),
                'display' => (string) $organizationRel,
            ] : null,
            'name' => $entity->getName(),
            'attendeeStatus' => $entity->getAttendeeStatus(),
            'comment' => $entity->getComment(),
            'contact' => ($contactRel = $entity->getContact()) ? [
                'id' => $contactRel->getId()->toString(),
                'display' => (string) $contactRel,
            ] : null,
            'email' => $entity->getEmail(),
            'event' => ($eventRel = $entity->getEvent()) ? [
                'id' => $eventRel->getId()->toString(),
                'display' => (string) $eventRel,
            ] : null,
            'notifications' => ($notificationsRel = $entity->getNotifications()) ? [
                'id' => $notificationsRel->getId()->toString(),
                'display' => (string) $notificationsRel,
            ] : null,
            'optional' => $entity->getOptional(),
            'organizer' => $entity->getOrganizer(),
            'phone' => $entity->getPhone(),
            'user' => ($userRel = $entity->getUser()) ? [
                'id' => $userRel->getId()->toString(),
                'display' => (string) $userRel,
            ] : null,
        ];
    }

    // ====================================
    // INDEX ACTION - List all EventAttendees
    // ====================================

    /**
     * List EventAttendees
     */
    protected function indexAction(): Response
    {
        $this->denyAccessUnlessGranted(EventAttendeeVoter::LIST);

        $preferences = $this->listPreferencesService->getEntityPreferences('eventAttendees');
        $savedView = $preferences['view'] ?? 'grid';

        return $this->render('eventattendee/index.html.twig', [
            'entities' => [],  // Loaded via API
            'entity_name' => 'eventAttendee',
            'entity_name_plural' => 'eventAttendees',
            'page_icon' => 'bi-people',
            'default_view' => $savedView,

            // List configuration from GeneratorProperty
            'enable_search' => true,
            'enable_filters' => true,
            'enable_sorting' => true,
            'enable_create_button' => true,

            // Property metadata for client-side rendering (as JSON strings)
            'list_fields' => '[{"name":"name","label":"Name","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getName"},{"name":"attendeeStatus","label":"AttendeeStatus","type":"integer","sortable":true,"searchable":true,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getAttendeeStatus"},{"name":"comment","label":"Comment","type":"text","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getComment"},{"name":"contact","label":"Contact","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getContact"},{"name":"email","label":"Email","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getEmail"},{"name":"event","label":"Event","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getEvent"},{"name":"notifications","label":"Notifications","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getNotifications"},{"name":"optional","label":"Optional","type":"boolean","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getOptional"},{"name":"organizer","label":"Organizer","type":"boolean","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getOrganizer"},{"name":"phone","label":"Phone","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getPhone"},{"name":"user","label":"User","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getUser"}]',
            'searchable_fields' => '[{"name":"name","label":"Name","type":"string"},{"name":"attendeeStatus","label":"AttendeeStatus","type":"integer"},{"name":"comment","label":"Comment","type":"text"},{"name":"email","label":"Email","type":"string"},{"name":"phone","label":"Phone","type":"string"}]',
            'filterable_fields' => '[{"name":"attendeeStatus","label":"AttendeeStatus","type":"integer","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"optional","label":"Optional","type":"boolean","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"organizer","label":"Organizer","type":"boolean","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false}]',
            'sortable_fields' => '[{"name":"name","label":"Name"},{"name":"attendeeStatus","label":"AttendeeStatus"},{"name":"comment","label":"Comment"},{"name":"contact","label":"Contact"},{"name":"email","label":"Email"},{"name":"event","label":"Event"},{"name":"notifications","label":"Notifications"},{"name":"optional","label":"Optional"},{"name":"organizer","label":"Organizer"},{"name":"phone","label":"Phone"},{"name":"user","label":"User"}]',
        ]);
    }

    // ====================================
    // API SEARCH - Fetch EventAttendees for list view
    // ====================================

    /**
     * API endpoint for searching EventAttendees
     */
    protected function apiSearchAction(Request $request): JsonResponse
    {
        $this->denyAccessUnlessGranted(EventAttendeeVoter::LIST);

        // This method uses the BaseApiController's handleSearchRequest
        // which integrates with API Platform's GetCollection operation
        return $this->handleSearchRequest($request);
    }

    // ====================================
    // NEW FORM ACTION - Display create form
    // ====================================

    /**
     * Display new eventAttendee form
     */
    protected function newFormAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(EventAttendeeVoter::CREATE);

        $eventAttendee = new EventAttendee();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($eventAttendee);

        $form = $this->createForm(EventAttendeeFormType::class, $eventAttendee);

        return $this->render('eventattendee/_form_modal.html.twig', [
            'form' => $form,
            'eventAttendee' => $eventAttendee,
            'is_edit' => false,
        ]);
    }

    // ====================================
    // CREATE ACTION - Process create form submission
    // ====================================

    /**
     * Process new eventAttendee form submission
     */
    protected function createAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(EventAttendeeVoter::CREATE);

        $eventAttendee = new EventAttendee();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($eventAttendee);

        $form = $this->createForm(EventAttendeeFormType::class, $eventAttendee);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before create hook
                $this->beforeCreate($eventAttendee);

                $this->entityManager->persist($eventAttendee);
                $this->entityManager->flush();

                // After create hook
                $this->afterCreate($eventAttendee);

                $this->addFlash('success', $this->translator->trans(
                    'eventattendee.flash.created_successfully',
                    ['%name%' => (string) $eventAttendee],
                    'eventattendee'
                ));

                return $this->redirectToRoute('eventattendee_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'eventattendee.flash.create_failed',
                    ['%error%' => $e->getMessage()],
                    'eventattendee'
                ));
            }
        }

        // Re-render with errors
        return $this->render('eventattendee/_form_modal.html.twig', [
            'form' => $form,
            'eventAttendee' => $eventAttendee,
            'is_edit' => false,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // EDIT FORM ACTION - Display edit form
    // ====================================

    /**
     * Display edit eventAttendee form
     */
    protected function editFormAction(EventAttendee $eventAttendee, Request $request): Response
    {
        $this->denyAccessUnlessGranted(EventAttendeeVoter::EDIT, $eventAttendee);

        $form = $this->createForm(EventAttendeeFormType::class, $eventAttendee);

        return $this->render('eventattendee/_form_modal.html.twig', [
            'form' => $form,
            'eventAttendee' => $eventAttendee,
            'is_edit' => true,
        ]);
    }

    // ====================================
    // UPDATE ACTION - Process edit form submission
    // ====================================

    /**
     * Process edit eventAttendee form submission
     */
    protected function updateAction(EventAttendee $eventAttendee, Request $request): Response
    {
        $this->denyAccessUnlessGranted(EventAttendeeVoter::EDIT, $eventAttendee);

        $form = $this->createForm(EventAttendeeFormType::class, $eventAttendee);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before update hook
                $this->beforeUpdate($eventAttendee);

                $this->entityManager->flush();

                // After update hook
                $this->afterUpdate($eventAttendee);

                $this->addFlash('success', $this->translator->trans(
                    'eventattendee.flash.updated_successfully',
                    ['%name%' => (string) $eventAttendee],
                    'eventattendee'
                ));

                return $this->redirectToRoute('eventattendee_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'eventattendee.flash.update_failed',
                    ['%error%' => $e->getMessage()],
                    'eventattendee'
                ));
            }
        }

        // Re-render with errors
        return $this->render('eventattendee/_form_modal.html.twig', [
            'form' => $form,
            'eventAttendee' => $eventAttendee,
            'is_edit' => true,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // DELETE ACTION - Delete eventAttendee
    // ====================================

    /**
     * Delete eventAttendee
     */
    protected function deleteAction(EventAttendee $eventAttendee, Request $request): Response
    {
        $this->denyAccessUnlessGranted(EventAttendeeVoter::DELETE, $eventAttendee);

        // Verify CSRF token
        $token = $request->request->get('_token');
        if (!$this->csrfTokenManager->isTokenValid(new CsrfToken('delete_eventAttendee_' . $eventAttendee->getId()->toString(), $token))) {
            throw new InvalidCsrfTokenException('Invalid CSRF token for delete operation.');
        }

        try {
            // Before delete hook
            $this->beforeDelete($eventAttendee);

            $name = (string) $eventAttendee;

            $this->entityManager->remove($eventAttendee);
            $this->entityManager->flush();

            // After delete hook
            $this->afterDelete();

            $this->addFlash('success', $this->translator->trans(
                'eventattendee.flash.deleted_successfully',
                ['%name%' => $name],
                'eventattendee'
            ));

        } catch (\Exception $e) {
            $this->addFlash('error', $this->translator->trans(
                'eventattendee.flash.delete_failed',
                ['%error%' => $e->getMessage()],
                'eventattendee'
            ));
        }

        return $this->redirectToRoute('eventattendee_index', [], Response::HTTP_SEE_OTHER);
    }

    // ====================================
    // SHOW ACTION - Display eventAttendee details
    // ====================================

    /**
     * Display eventAttendee details
     */
    protected function showAction(EventAttendee $eventAttendee): Response
    {
        $this->denyAccessUnlessGranted(EventAttendeeVoter::VIEW, $eventAttendee);

        return $this->render('eventattendee/show.html.twig', [
            'eventAttendee' => $eventAttendee,
        ]);
    }

    // ====================================
    // LIFECYCLE HOOKS
    // ====================================
    // Override these in EventAttendeeController to add custom logic

    /**
     * Initialize new entity before creating form
     *
     * Note: Organization and Owner are set automatically by TenantEntityProcessor
     * Only use this for custom initialization logic
     */
    protected function initializeNewEntity(EventAttendee $eventAttendee): void
    {
        // Organization and Owner are set automatically by TenantEntityProcessor
        // Add your custom initialization here
    }

    /**
     * Execute logic before creating entity
     */
    protected function beforeCreate(EventAttendee $eventAttendee): void
    {
        // Override to add logic before create
    }

    /**
     * Execute logic after creating entity
     */
    protected function afterCreate(EventAttendee $eventAttendee): void
    {
        // Override to add logic after create (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before updating entity
     */
    protected function beforeUpdate(EventAttendee $eventAttendee): void
    {
        // Override to add logic before update
    }

    /**
     * Execute logic after updating entity
     */
    protected function afterUpdate(EventAttendee $eventAttendee): void
    {
        // Override to add logic after update (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before deleting entity
     */
    protected function beforeDelete(EventAttendee $eventAttendee): void
    {
        // Override to add logic before delete (e.g., check dependencies, archive)
    }

    /**
     * Execute logic after deleting entity
     */
    protected function afterDelete(): void
    {
        // Override to add logic after delete (e.g., cleanup, send notification)
    }
}
