<?php

declare(strict_types=1);

namespace App\Controller\Generated;

use App\Controller\Base\BaseApiController;
use App\Entity\CourseLecture;
use App\Repository\CourseLectureRepository;
use App\Security\Voter\CourseLectureVoter;
use App\Form\CourseLectureFormType;
use App\Service\ListPreferencesService;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Security\Csrf\CsrfToken;
use Symfony\Component\Security\Csrf\CsrfTokenManagerInterface;
use Symfony\Component\Security\Core\Exception\InvalidCsrfTokenException;
use Symfony\Contracts\Translation\TranslatorInterface;

/**
 * Generated Base Controller for CourseLecture
 *
 * ⚠️ WARNING: This file is ALWAYS regenerated by Genmax
 * DO NOT EDIT THIS FILE - Edit CourseLectureController instead
 *
 * @generated
 * @codeCoverageIgnore
 */
abstract class CourseLectureControllerGenerated extends BaseApiController
{
    public function __construct(
        protected readonly EntityManagerInterface $entityManager,
        protected readonly CourseLectureRepository $repository,
        protected readonly ListPreferencesService $listPreferencesService,
        protected readonly TranslatorInterface $translator,
        protected readonly CsrfTokenManagerInterface $csrfTokenManager,
    ) {}

    // ====================================
    // ABSTRACT METHOD IMPLEMENTATIONS
    // ====================================

    /**
     * Get the repository for this entity
     */
    protected function getRepository(): CourseLectureRepository
    {
        return $this->repository;
    }

    /**
     * Get the plural name for this entity
     */
    protected function getEntityPluralName(): string
    {
        return 'courseLectures';
    }

    /**
     * Convert entity to array for API responses
     */
    protected function entityToArray(object $entity): array
    {
        if (!$entity instanceof CourseLecture) {
            throw new \InvalidArgumentException('Expected CourseLecture instance');
        }

        return [
            'id' => $entity->getId()->toString(),
            'name' => $entity->getName(),
            'description' => $entity->getDescription(),
            'videoFileName' => $entity->getVideoFileName(),
            'videoPath' => $entity->getVideoPath(),
            'processingStatus' => $entity->getProcessingStatus(),
            'processingStep' => $entity->getProcessingStep(),
            'processingPercentage' => $entity->getProcessingPercentage(),
            'processingError' => $entity->getProcessingError(),
            'processedAt' => $entity->getProcessedAt()?->format('M d, Y'),
            'viewOrder' => $entity->getViewOrder(),
            'lengthSeconds' => $entity->getLengthSeconds(),
            'courseModule' => ($courseModuleRel = $entity->getCourseModule()) ? [
                'id' => $courseModuleRel->getId()->toString(),
                'display' => (string) $courseModuleRel,
            ] : null,
            'studentLectures' => ($studentLecturesRel = $entity->getStudentLectures()) ? [
                'id' => $studentLecturesRel->getId()->toString(),
                'display' => (string) $studentLecturesRel,
            ] : null,
            'studentCoursesOnThisLecture' => ($studentCoursesOnThisLectureRel = $entity->getStudentCoursesOnThisLecture()) ? [
                'id' => $studentCoursesOnThisLectureRel->getId()->toString(),
                'display' => (string) $studentCoursesOnThisLectureRel,
            ] : null,
            'organization' => ($organizationRel = $entity->getOrganization()) ? [
                'id' => $organizationRel->getId()->toString(),
                'display' => (string) $organizationRel,
            ] : null,
            'active' => $entity->getActive(),
            'published' => $entity->getPublished(),
            'free' => $entity->getFree(),
            'publishedAt' => $entity->getPublishedAt()?->format('M d, Y'),
            'videoUrl' => $entity->getVideoUrl(),
            'videoType' => $entity->getVideoType(),
            'videoResolution' => $entity->getVideoResolution(),
            'videoSizeBytes' => $entity->getVideoSizeBytes(),
            'transcript' => $entity->getTranscript(),
            'subtitleUrl' => $entity->getSubtitleUrl(),
            'subtitleLanguage' => $entity->getSubtitleLanguage(),
            'attachments' => $entity->getAttachments(),
            'externalLinks' => $entity->getExternalLinks(),
            'learningObjectives' => $entity->getLearningObjectives(),
            'prerequisites' => $entity->getPrerequisites(),
            'viewCount' => $entity->getViewCount(),
            'completionCount' => $entity->getCompletionCount(),
            'averageWatchPercentage' => $entity->getAverageWatchPercentage(),
            'rating' => $entity->getRating(),
            'ratingCount' => $entity->getRatingCount(),
            'durationSeconds' => $entity->getDurationSeconds(),
            'difficultyLevel' => $entity->getDifficultyLevel(),
            'tags' => $entity->getTags(),
            'skillsCovered' => $entity->getSkillsCovered(),
            'pointsValue' => $entity->getPointsValue(),
            'badges' => $entity->getBadges(),
        ];
    }

    // ====================================
    // INDEX ACTION - List all CourseLectures
    // ====================================

    /**
     * List CourseLectures
     */
    protected function indexAction(): Response
    {
        $this->denyAccessUnlessGranted(CourseLectureVoter::LIST);

        $preferences = $this->listPreferencesService->getEntityPreferences('courseLectures');
        $savedView = $preferences['view'] ?? 'grid';

        return $this->render('courselecture/index.html.twig', [
            'entities' => [],  // Loaded via API
            'entity_name' => 'courseLecture',
            'entity_name_plural' => 'courseLectures',
            'page_icon' => 'bi-play-circle',
            'default_view' => $savedView,

            // List configuration from GeneratorProperty
            'enable_search' => true,
            'enable_filters' => true,
            'enable_sorting' => true,
            'enable_create_button' => true,

            // Property metadata for client-side rendering (as JSON strings)
            'list_fields' => '[{"name":"name","label":"Name","type":"string","sortable":true,"searchable":true,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getName"},{"name":"courseModule","label":"CourseModule","type":"string","sortable":true,"searchable":true,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCourseModule"},{"name":"studentLectures","label":"StudentLectures","type":"string","sortable":true,"searchable":true,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getStudentLectures"},{"name":"studentCoursesOnThisLecture","label":"StudentCoursesOnThisLecture","type":"string","sortable":true,"searchable":true,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getStudentCoursesOnThisLecture"},{"name":"organization","label":"Organization","type":"","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getOrganization"},{"name":"active","label":"Active","type":"boolean","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getActive"},{"name":"published","label":"Published","type":"boolean","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getPublished"},{"name":"free","label":"Free","type":"boolean","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getFree"},{"name":"publishedAt","label":"Published At","type":"datetime_immutable","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getPublishedAt"},{"name":"videoType","label":"Video Type","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getVideoType"},{"name":"viewCount","label":"View Count","type":"integer","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getViewCount"},{"name":"completionCount","label":"Completion Count","type":"integer","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCompletionCount"},{"name":"averageWatchPercentage","label":"Average Watch %","type":"float","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getAverageWatchPercentage"},{"name":"rating","label":"Rating","type":"float","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getRating"},{"name":"durationSeconds","label":"Duration (seconds)","type":"integer","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDurationSeconds"},{"name":"difficultyLevel","label":"Difficulty Level","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDifficultyLevel"}]',
            'searchable_fields' => '[{"name":"name","label":"Name","type":"string"},{"name":"description","label":"Description","type":"text"},{"name":"videoFileName","label":"VideoFileName","type":"string"},{"name":"videoPath","label":"VideoPath","type":"string"},{"name":"processingStatus","label":"ProcessingStatus","type":"string"},{"name":"processingStep","label":"ProcessingStep","type":"string"},{"name":"processingError","label":"ProcessingError","type":"text"},{"name":"courseModule","label":"CourseModule","type":"string"},{"name":"studentLectures","label":"StudentLectures","type":"string"},{"name":"studentCoursesOnThisLecture","label":"StudentCoursesOnThisLecture","type":"string"}]',
            'filterable_fields' => '[{"name":"name","label":"Name","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"description","label":"Description","type":"text","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"videoFileName","label":"VideoFileName","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"videoPath","label":"VideoPath","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"processingStatus","label":"ProcessingStatus","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"processingStep","label":"ProcessingStep","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"processingPercentage","label":"ProcessingPercentage","type":"integer","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"processingError","label":"ProcessingError","type":"text","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"processedAt","label":"ProcessedAt","type":"datetime_immutable","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"viewOrder","label":"ViewOrder","type":"integer","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"lengthSeconds","label":"LengthSeconds","type":"integer","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"courseModule","label":"CourseModule","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"studentLectures","label":"StudentLectures","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"studentCoursesOnThisLecture","label":"StudentCoursesOnThisLecture","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false}]',
            'sortable_fields' => '[{"name":"name","label":"Name"},{"name":"description","label":"Description"},{"name":"videoFileName","label":"VideoFileName"},{"name":"videoPath","label":"VideoPath"},{"name":"processingStatus","label":"ProcessingStatus"},{"name":"processingStep","label":"ProcessingStep"},{"name":"processingPercentage","label":"ProcessingPercentage"},{"name":"processingError","label":"ProcessingError"},{"name":"processedAt","label":"ProcessedAt"},{"name":"viewOrder","label":"ViewOrder"},{"name":"lengthSeconds","label":"LengthSeconds"},{"name":"courseModule","label":"CourseModule"},{"name":"studentLectures","label":"StudentLectures"},{"name":"studentCoursesOnThisLecture","label":"StudentCoursesOnThisLecture"}]',
        ]);
    }

    // ====================================
    // API SEARCH - Fetch CourseLectures for list view
    // ====================================

    /**
     * API endpoint for searching CourseLectures
     */
    protected function apiSearchAction(Request $request): JsonResponse
    {
        $this->denyAccessUnlessGranted(CourseLectureVoter::LIST);

        // This method uses the BaseApiController's handleSearchRequest
        // which integrates with API Platform's GetCollection operation
        return $this->handleSearchRequest($request);
    }

    // ====================================
    // NEW FORM ACTION - Display create form
    // ====================================

    /**
     * Display new courseLecture form
     */
    protected function newFormAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(CourseLectureVoter::CREATE);

        $courseLecture = new CourseLecture();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($courseLecture);

        $form = $this->createForm(CourseLectureFormType::class, $courseLecture);

        return $this->render('courselecture/_form_modal.html.twig', [
            'form' => $form,
            'courseLecture' => $courseLecture,
            'is_edit' => false,
        ]);
    }

    // ====================================
    // CREATE ACTION - Process create form submission
    // ====================================

    /**
     * Process new courseLecture form submission
     */
    protected function createAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(CourseLectureVoter::CREATE);

        $courseLecture = new CourseLecture();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($courseLecture);

        $form = $this->createForm(CourseLectureFormType::class, $courseLecture);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before create hook
                $this->beforeCreate($courseLecture);

                $this->entityManager->persist($courseLecture);
                $this->entityManager->flush();

                // After create hook
                $this->afterCreate($courseLecture);

                $this->addFlash('success', $this->translator->trans(
                    'courselecture.flash.created_successfully',
                    ['%name%' => (string) $courseLecture],
                    'courselecture'
                ));

                return $this->redirectToRoute('courselecture_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'courselecture.flash.create_failed',
                    ['%error%' => $e->getMessage()],
                    'courselecture'
                ));
            }
        }

        // Re-render with errors
        return $this->render('courselecture/_form_modal.html.twig', [
            'form' => $form,
            'courseLecture' => $courseLecture,
            'is_edit' => false,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // EDIT FORM ACTION - Display edit form
    // ====================================

    /**
     * Display edit courseLecture form
     */
    protected function editFormAction(CourseLecture $courseLecture, Request $request): Response
    {
        $this->denyAccessUnlessGranted(CourseLectureVoter::EDIT, $courseLecture);

        $form = $this->createForm(CourseLectureFormType::class, $courseLecture);

        return $this->render('courselecture/_form_modal.html.twig', [
            'form' => $form,
            'courseLecture' => $courseLecture,
            'is_edit' => true,
        ]);
    }

    // ====================================
    // UPDATE ACTION - Process edit form submission
    // ====================================

    /**
     * Process edit courseLecture form submission
     */
    protected function updateAction(CourseLecture $courseLecture, Request $request): Response
    {
        $this->denyAccessUnlessGranted(CourseLectureVoter::EDIT, $courseLecture);

        $form = $this->createForm(CourseLectureFormType::class, $courseLecture);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before update hook
                $this->beforeUpdate($courseLecture);

                $this->entityManager->flush();

                // After update hook
                $this->afterUpdate($courseLecture);

                $this->addFlash('success', $this->translator->trans(
                    'courselecture.flash.updated_successfully',
                    ['%name%' => (string) $courseLecture],
                    'courselecture'
                ));

                return $this->redirectToRoute('courselecture_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'courselecture.flash.update_failed',
                    ['%error%' => $e->getMessage()],
                    'courselecture'
                ));
            }
        }

        // Re-render with errors
        return $this->render('courselecture/_form_modal.html.twig', [
            'form' => $form,
            'courseLecture' => $courseLecture,
            'is_edit' => true,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // DELETE ACTION - Delete courseLecture
    // ====================================

    /**
     * Delete courseLecture
     */
    protected function deleteAction(CourseLecture $courseLecture, Request $request): Response
    {
        $this->denyAccessUnlessGranted(CourseLectureVoter::DELETE, $courseLecture);

        // Verify CSRF token
        $token = $request->request->get('_token');
        if (!$this->csrfTokenManager->isTokenValid(new CsrfToken('delete_courseLecture_' . $courseLecture->getId()->toString(), $token))) {
            throw new InvalidCsrfTokenException('Invalid CSRF token for delete operation.');
        }

        try {
            // Before delete hook
            $this->beforeDelete($courseLecture);

            $name = (string) $courseLecture;

            $this->entityManager->remove($courseLecture);
            $this->entityManager->flush();

            // After delete hook
            $this->afterDelete();

            $this->addFlash('success', $this->translator->trans(
                'courselecture.flash.deleted_successfully',
                ['%name%' => $name],
                'courselecture'
            ));

        } catch (\Exception $e) {
            $this->addFlash('error', $this->translator->trans(
                'courselecture.flash.delete_failed',
                ['%error%' => $e->getMessage()],
                'courselecture'
            ));
        }

        return $this->redirectToRoute('courselecture_index', [], Response::HTTP_SEE_OTHER);
    }

    // ====================================
    // SHOW ACTION - Display courseLecture details
    // ====================================

    /**
     * Display courseLecture details
     */
    protected function showAction(CourseLecture $courseLecture): Response
    {
        $this->denyAccessUnlessGranted(CourseLectureVoter::VIEW, $courseLecture);

        return $this->render('courselecture/show.html.twig', [
            'courseLecture' => $courseLecture,
        ]);
    }

    // ====================================
    // LIFECYCLE HOOKS
    // ====================================
    // Override these in CourseLectureController to add custom logic

    /**
     * Initialize new entity before creating form
     *
     * Note: Organization and Owner are set automatically by TenantEntityProcessor
     * Only use this for custom initialization logic
     */
    protected function initializeNewEntity(CourseLecture $courseLecture): void
    {
        // Organization and Owner are set automatically by TenantEntityProcessor
        // Add your custom initialization here
    }

    /**
     * Execute logic before creating entity
     */
    protected function beforeCreate(CourseLecture $courseLecture): void
    {
        // Override to add logic before create
    }

    /**
     * Execute logic after creating entity
     */
    protected function afterCreate(CourseLecture $courseLecture): void
    {
        // Override to add logic after create (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before updating entity
     */
    protected function beforeUpdate(CourseLecture $courseLecture): void
    {
        // Override to add logic before update
    }

    /**
     * Execute logic after updating entity
     */
    protected function afterUpdate(CourseLecture $courseLecture): void
    {
        // Override to add logic after update (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before deleting entity
     */
    protected function beforeDelete(CourseLecture $courseLecture): void
    {
        // Override to add logic before delete (e.g., check dependencies, archive)
    }

    /**
     * Execute logic after deleting entity
     */
    protected function afterDelete(): void
    {
        // Override to add logic after delete (e.g., cleanup, send notification)
    }
}
