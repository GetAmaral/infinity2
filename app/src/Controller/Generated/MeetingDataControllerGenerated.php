<?php

declare(strict_types=1);

namespace App\Controller\Generated;

use App\Controller\Base\BaseApiController;
use App\Entity\MeetingData;
use App\Repository\MeetingDataRepository;
use App\Security\Voter\MeetingDataVoter;
use App\Form\MeetingDataFormType;
use App\Service\ListPreferencesService;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Security\Csrf\CsrfToken;
use Symfony\Component\Security\Csrf\CsrfTokenManagerInterface;
use Symfony\Component\Security\Core\Exception\InvalidCsrfTokenException;
use Symfony\Contracts\Translation\TranslatorInterface;

/**
 * Generated Base Controller for MeetingData
 *
 * ⚠️ WARNING: This file is ALWAYS regenerated by Genmax
 * DO NOT EDIT THIS FILE - Edit MeetingDataController instead
 *
 * @generated
 * @codeCoverageIgnore
 */
abstract class MeetingDataControllerGenerated extends BaseApiController
{
    public function __construct(
        protected readonly EntityManagerInterface $entityManager,
        protected readonly MeetingDataRepository $repository,
        protected readonly ListPreferencesService $listPreferencesService,
        protected readonly TranslatorInterface $translator,
        protected readonly CsrfTokenManagerInterface $csrfTokenManager,
    ) {}

    // ====================================
    // ABSTRACT METHOD IMPLEMENTATIONS
    // ====================================

    /**
     * Get the repository for this entity
     */
    protected function getRepository(): MeetingDataRepository
    {
        return $this->repository;
    }

    /**
     * Get the plural name for this entity
     */
    protected function getEntityPluralName(): string
    {
        return 'meetingDatas';
    }

    /**
     * Convert entity to array for API responses
     *
     * ⚠️ IMPORTANT: Enum Properties Stored as Strings
     * -------------------------------------------------
     * Properties with enum-backed types (like InputType) are stored as STRINGS
     * in the database and getters return strings directly, NOT enum objects.
     *
     * ❌ WRONG:   $entity->getType()->value   (Error: "Attempt to read property 'value' on string")
     * ✅ CORRECT: $entity->getType()          (Already a string - 'fully_completed')
     *
     * If you need the enum object for business logic, use:
     *    InputType::from($entity->getType())
     */
    protected function entityToArray(object $entity): array
    {
        if (!$entity instanceof MeetingData) {
            throw new \InvalidArgumentException('Expected MeetingData instance');
        }

        return [
            'id' => $entity->getId()->toString(),
            'organization' => ($organizationRel = $entity->getOrganization()) ? [
                'id' => $organizationRel->getId()->toString(),
                'display' => (string) $organizationRel,
            ] : null,
            'event' => ($eventRel = $entity->getEvent()) ? [
                'id' => $eventRel->getId()->toString(),
                'display' => (string) $eventRel,
            ] : null,
            'title' => $entity->getTitle(),
            'meetingType' => $entity->getMeetingType(),
            'status' => $entity->getStatus(),
            'startTime' => $entity->getStartTime()?->format('M d, Y'),
            'endTime' => $entity->getEndTime()?->format('M d, Y'),
            'duration' => $entity->getDuration(),
            'location' => $entity->getLocation(),
            'agenda' => $entity->getAgenda(),
            'notes' => $entity->getNotes(),
            'minutes' => $entity->getMinutes(),
            'attendees' => $entity->getAttendees(),
            'meetingId' => $entity->getMeetingId(),
            'absentees' => $entity->getAbsentees(),
            'decisions' => $entity->getDecisions(),
            'actionItems' => $entity->getActionItems(),
            'recordingAvailable' => $entity->getRecordingAvailable(),
            'transcript' => $entity->getTranscript(),
            'recordingDuration' => $entity->getRecordingDuration(),
            'recordingSize' => $entity->getRecordingSize(),
            'nextMeetingDate' => $entity->getNextMeetingDate()?->format('M d, Y'),
            'organizer' => $entity->getOrganizer(),
            'tags' => $entity->getTags(),
            'platform' => $entity->getPlatform(),
            'confidential' => $entity->getConfidential(),
            'recurring' => $entity->getRecurring(),
            'recurrencePattern' => $entity->getRecurrencePattern(),
            'recordUrl' => $entity->getRecordUrl(),
            'secret' => $entity->getSecret(),
            'url' => $entity->getUrl(),
        ];
    }

    // ====================================
    // INDEX ACTION - List all MeetingDatas
    // ====================================

    /**
     * List MeetingDatas
     */
    protected function indexAction(): Response
    {
        $this->denyAccessUnlessGranted(MeetingDataVoter::LIST);

        $preferences = $this->listPreferencesService->getEntityPreferences('meetingDatas');
        $savedView = $preferences['view'] ?? 'grid';

        return $this->render('meetingdata/index.html.twig', [
            'entities' => [],  // Loaded via API
            'entity_name' => 'meetingData',
            'entity_name_plural' => 'meetingDatas',
            'page_icon' => 'bi-camera-video',
            'default_view' => $savedView,

            // List configuration from GeneratorProperty
            'enable_search' => true,
            'enable_filters' => true,
            'enable_sorting' => true,
            'enable_create_button' => true,

            // Property metadata for client-side rendering (as JSON strings)
            'list_fields' => '[{"name":"event","label":"Event","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getEvent"},{"name":"title","label":"Meeting Title","type":"string","sortable":true,"searchable":true,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getTitle"},{"name":"meetingType","label":"Meeting Type","type":"string","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getMeetingType"},{"name":"status","label":"Status","type":"string","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getStatus"},{"name":"startTime","label":"Start Time","type":"datetime","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":true,"filterNumericRange":false,"filterExists":false,"getter":"getStartTime"},{"name":"endTime","label":"End Time","type":"datetime","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":true,"filterNumericRange":false,"filterExists":false,"getter":"getEndTime"},{"name":"duration","label":"Duration (minutes)","type":"integer","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":true,"filterExists":false,"getter":"getDuration"},{"name":"location","label":"Location","type":"string","sortable":false,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getLocation"},{"name":"meetingId","label":"Meeting ID","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getMeetingId"},{"name":"recordingAvailable","label":"Recording Available","type":"boolean","sortable":false,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":true,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getRecordingAvailable"},{"name":"nextMeetingDate","label":"Next Meeting Date","type":"datetime","sortable":false,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":true,"filterNumericRange":false,"filterExists":false,"getter":"getNextMeetingDate"},{"name":"organizer","label":"Organizer","type":"string","sortable":false,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getOrganizer"},{"name":"platform","label":"Platform","type":"string","sortable":true,"searchable":true,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getPlatform"},{"name":"confidential","label":"Confidential","type":"boolean","sortable":false,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":true,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getConfidential"},{"name":"recurring","label":"Recurring","type":"boolean","sortable":false,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":true,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getRecurring"},{"name":"url","label":"Meeting URL","type":"string","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getUrl"}]',
            'searchable_fields' => '[{"name":"title","label":"Meeting Title","type":"string"},{"name":"location","label":"Location","type":"string"},{"name":"notes","label":"Meeting Notes","type":"text"},{"name":"minutes","label":"Meeting Minutes","type":"text"},{"name":"meetingId","label":"Meeting ID","type":"string"},{"name":"transcript","label":"Transcript","type":"text"},{"name":"organizer","label":"Organizer","type":"string"},{"name":"tags","label":"Tags","type":"json"},{"name":"platform","label":"Platform","type":"string"}]',
            'filterable_fields' => '[{"name":"title","label":"Meeting Title","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"meetingType","label":"Meeting Type","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"status","label":"Status","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"startTime","label":"Start Time","type":"datetime","strategy":null,"boolean":false,"date":true,"numericRange":false,"exists":false},{"name":"endTime","label":"End Time","type":"datetime","strategy":null,"boolean":false,"date":true,"numericRange":false,"exists":false},{"name":"duration","label":"Duration (minutes)","type":"integer","strategy":null,"boolean":false,"date":false,"numericRange":true,"exists":false},{"name":"recordingAvailable","label":"Recording Available","type":"boolean","strategy":null,"boolean":true,"date":false,"numericRange":false,"exists":false},{"name":"nextMeetingDate","label":"Next Meeting Date","type":"datetime","strategy":null,"boolean":false,"date":true,"numericRange":false,"exists":false},{"name":"tags","label":"Tags","type":"json","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"platform","label":"Platform","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"confidential","label":"Confidential","type":"boolean","strategy":null,"boolean":true,"date":false,"numericRange":false,"exists":false},{"name":"recurring","label":"Recurring","type":"boolean","strategy":null,"boolean":true,"date":false,"numericRange":false,"exists":false}]',
            'sortable_fields' => '[{"name":"event","label":"Event"},{"name":"title","label":"Meeting Title"},{"name":"meetingType","label":"Meeting Type"},{"name":"status","label":"Status"},{"name":"startTime","label":"Start Time"},{"name":"endTime","label":"End Time"},{"name":"duration","label":"Duration (minutes)"},{"name":"meetingId","label":"Meeting ID"},{"name":"platform","label":"Platform"},{"name":"recordUrl","label":"Recording URL"},{"name":"secret","label":"Meeting Secret\/Password"},{"name":"url","label":"Meeting URL"}]',
        ]);
    }

    // ====================================
    // API SEARCH - Fetch MeetingDatas for list view
    // ====================================

    /**
     * API endpoint for searching MeetingDatas
     */
    protected function apiSearchAction(Request $request): JsonResponse
    {
        $this->denyAccessUnlessGranted(MeetingDataVoter::LIST);

        // This method uses the BaseApiController's handleSearchRequest
        // which integrates with API Platform's GetCollection operation
        return $this->handleSearchRequest($request);
    }

    // ====================================
    // NEW FORM ACTION - Display create form
    // ====================================

    /**
     * Display new meetingData form
     */
    protected function newFormAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(MeetingDataVoter::CREATE);

        $meetingData = new MeetingData();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($meetingData);

        $form = $this->createForm(MeetingDataFormType::class, $meetingData);

        return $this->render('meetingdata/_form_modal.html.twig', [
            'form' => $form,
            'meetingData' => $meetingData,
            'is_edit' => false,
        ]);
    }

    // ====================================
    // CREATE ACTION - Process create form submission
    // ====================================

    /**
     * Process new meetingData form submission
     */
    protected function createAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(MeetingDataVoter::CREATE);

        $meetingData = new MeetingData();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($meetingData);

        $form = $this->createForm(MeetingDataFormType::class, $meetingData);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before create hook
                $this->beforeCreate($meetingData);

                $this->entityManager->persist($meetingData);
                $this->entityManager->flush();

                // After create hook
                $this->afterCreate($meetingData);

                $this->addFlash('success', $this->translator->trans(
                    'meetingdata.flash.created_successfully',
                    ['%name%' => (string) $meetingData],
                    'meetingdata'
                ));

                return $this->redirectToRoute('meetingdata_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'meetingdata.flash.create_failed',
                    ['%error%' => $e->getMessage()],
                    'meetingdata'
                ));
            }
        }

        // Re-render with errors
        return $this->render('meetingdata/_form_modal.html.twig', [
            'form' => $form,
            'meetingData' => $meetingData,
            'is_edit' => false,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // EDIT FORM ACTION - Display edit form
    // ====================================

    /**
     * Display edit meetingData form
     */
    protected function editFormAction(MeetingData $meetingData, Request $request): Response
    {
        $this->denyAccessUnlessGranted(MeetingDataVoter::EDIT, $meetingData);

        $form = $this->createForm(MeetingDataFormType::class, $meetingData);

        return $this->render('meetingdata/_form_modal.html.twig', [
            'form' => $form,
            'meetingData' => $meetingData,
            'is_edit' => true,
        ]);
    }

    // ====================================
    // UPDATE ACTION - Process edit form submission
    // ====================================

    /**
     * Process edit meetingData form submission
     */
    protected function updateAction(MeetingData $meetingData, Request $request): Response
    {
        $this->denyAccessUnlessGranted(MeetingDataVoter::EDIT, $meetingData);

        $form = $this->createForm(MeetingDataFormType::class, $meetingData);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before update hook
                $this->beforeUpdate($meetingData);

                $this->entityManager->flush();

                // After update hook
                $this->afterUpdate($meetingData);

                $this->addFlash('success', $this->translator->trans(
                    'meetingdata.flash.updated_successfully',
                    ['%name%' => (string) $meetingData],
                    'meetingdata'
                ));

                return $this->redirectToRoute('meetingdata_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'meetingdata.flash.update_failed',
                    ['%error%' => $e->getMessage()],
                    'meetingdata'
                ));
            }
        }

        // Re-render with errors
        return $this->render('meetingdata/_form_modal.html.twig', [
            'form' => $form,
            'meetingData' => $meetingData,
            'is_edit' => true,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // DELETE ACTION - Delete meetingData
    // ====================================

    /**
     * Delete meetingData
     */
    protected function deleteAction(MeetingData $meetingData, Request $request): Response
    {
        $this->denyAccessUnlessGranted(MeetingDataVoter::DELETE, $meetingData);

        // Verify CSRF token
        $token = $request->request->get('_token');
        if (!$this->csrfTokenManager->isTokenValid(new CsrfToken('delete_meetingData_' . $meetingData->getId()->toString(), $token))) {
            throw new InvalidCsrfTokenException('Invalid CSRF token for delete operation.');
        }

        try {
            // Before delete hook
            $this->beforeDelete($meetingData);

            $name = (string) $meetingData;

            $this->entityManager->remove($meetingData);
            $this->entityManager->flush();

            // After delete hook
            $this->afterDelete();

            $this->addFlash('success', $this->translator->trans(
                'meetingdata.flash.deleted_successfully',
                ['%name%' => $name],
                'meetingdata'
            ));

        } catch (\Exception $e) {
            $this->addFlash('error', $this->translator->trans(
                'meetingdata.flash.delete_failed',
                ['%error%' => $e->getMessage()],
                'meetingdata'
            ));
        }

        return $this->redirectToRoute('meetingdata_index', [], Response::HTTP_SEE_OTHER);
    }

    // ====================================
    // SHOW ACTION - Display meetingData details
    // ====================================

    /**
     * Display meetingData details
     */
    protected function showAction(MeetingData $meetingData): Response
    {
        $this->denyAccessUnlessGranted(MeetingDataVoter::VIEW, $meetingData);

        return $this->render('meetingdata/show.html.twig', [
            'meetingData' => $meetingData,
        ]);
    }

    // ====================================
    // LIFECYCLE HOOKS
    // ====================================
    // Override these in MeetingDataController to add custom logic

    /**
     * Initialize new entity before creating form
     *
     * Note: Organization and Owner are set automatically by TenantEntityProcessor
     * Only use this for custom initialization logic
     */
    protected function initializeNewEntity(MeetingData $meetingData): void
    {
        // Organization and Owner are set automatically by TenantEntityProcessor
        // Add your custom initialization here
    }

    /**
     * Execute logic before creating entity
     */
    protected function beforeCreate(MeetingData $meetingData): void
    {
        // Override to add logic before create
    }

    /**
     * Execute logic after creating entity
     */
    protected function afterCreate(MeetingData $meetingData): void
    {
        // Override to add logic after create (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before updating entity
     */
    protected function beforeUpdate(MeetingData $meetingData): void
    {
        // Override to add logic before update
    }

    /**
     * Execute logic after updating entity
     */
    protected function afterUpdate(MeetingData $meetingData): void
    {
        // Override to add logic after update (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before deleting entity
     */
    protected function beforeDelete(MeetingData $meetingData): void
    {
        // Override to add logic before delete (e.g., check dependencies, archive)
    }

    /**
     * Execute logic after deleting entity
     */
    protected function afterDelete(): void
    {
        // Override to add logic after delete (e.g., cleanup, send notification)
    }
}
