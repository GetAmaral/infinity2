<?php

declare(strict_types=1);

namespace App\Controller\Generated;

use App\Entity\NotificationTypeTemplate;
use App\Form\NotificationTypeTemplateType;
use App\Repository\NotificationTypeTemplateRepository;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Attribute\Route;
use Symfony\Component\Security\Http\Attribute\IsGranted;

/**
 * NotificationTypeTemplate Controller (Generated Base Class)
 *
 * This class is ALWAYS regenerated from CSV. DO NOT edit this file.
 * Add custom actions to NotificationTypeTemplateController.php instead.
 *
 * @generated by Luminai Code Generator
 */
#[Route('/notification-type-template')]
abstract class NotificationTypeTemplateControllerGenerated extends AbstractController
{
    public function __construct(
        protected readonly NotificationTypeTemplateRepository $repository
    ) {}

    /**
     * List all NotificationTypeTemplates
     */
    #[Route('', name: 'notification_type_template_index', methods: ['GET'])]
        #[IsGranted('ROLE_SUPER_ADMIN')]
    public function index(Request $request): Response
    {
        $page = max(1, $request->query->getInt('page', 1));
        $search = $request->query->get('search', '');

        $notificationtypetemplates = $this->repository->findPaginated($page, 30);
        $total = $this->repository->count();

        return $this->render('notificationtypetemplate/index.html.twig', [
            'notificationtypetemplates' => $notificationtypetemplates,
            'total' => $total,
            'page' => $page,
            'pages' => ceil($total / 30),
            'search' => $search,
        ]);
    }

    /**
     * Show NotificationTypeTemplate details
     */
    #[Route('/{id}', name: 'notification_type_template_show', methods: ['GET'])]
        #[IsGranted('ROLE_SUPER_ADMIN')]
    public function show(NotificationTypeTemplate $notificationtypetemplate): Response
    {

        return $this->render('notificationtypetemplate/show.html.twig', [
            'notificationtypetemplate' => $notificationtypetemplate,
        ]);
    }

    /**
     * Create new NotificationTypeTemplate
     */
    #[Route('/new', name: 'notification_type_template_new', methods: ['GET', 'POST'])]
        #[IsGranted('ROLE_SUPER_ADMIN')]
    public function new(Request $request): Response
    {
        $notificationtypetemplate = new NotificationTypeTemplate();

        $form = $this->createForm(NotificationTypeTemplateType::class, $notificationtypetemplate);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $this->repository->save($notificationtypetemplate, true);

            $this->addFlash('success', 'NotificationTypeTemplate created successfully.');

            return $this->redirectToRoute('notification_type_template_index');
        }

        return $this->render('notificationtypetemplate/form.html.twig', [
            'notificationtypetemplate' => $notificationtypetemplate,
            'form' => $form,
            'is_edit' => false,
        ]);
    }

    /**
     * Edit NotificationTypeTemplate
     */
    #[Route('/{id}/edit', name: 'notification_type_template_edit', methods: ['GET', 'POST'])]
        #[IsGranted('ROLE_SUPER_ADMIN')]
    public function edit(Request $request, NotificationTypeTemplate $notificationtypetemplate): Response
    {

        $form = $this->createForm(NotificationTypeTemplateType::class, $notificationtypetemplate);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $this->repository->save($notificationtypetemplate, true);

            $this->addFlash('success', 'NotificationTypeTemplate updated successfully.');

            return $this->redirectToRoute('notification_type_template_index');
        }

        return $this->render('notificationtypetemplate/form.html.twig', [
            'notificationtypetemplate' => $notificationtypetemplate,
            'form' => $form,
            'is_edit' => true,
        ]);
    }

    /**
     * Delete NotificationTypeTemplate
     */
    #[Route('/{id}', name: 'notification_type_template_delete', methods: ['POST'])]
        #[IsGranted('ROLE_SUPER_ADMIN')]
    public function delete(Request $request, NotificationTypeTemplate $notificationtypetemplate): Response
    {

        if ($this->isCsrfTokenValid('delete_notification_type_template_' . $notificationtypetemplate->getId(), $request->request->get('_token'))) {
            $this->repository->remove($notificationtypetemplate, true);

            $this->addFlash('success', 'NotificationTypeTemplate deleted successfully.');
        }

        return $this->redirectToRoute('notification_type_template_index');
    }
}
