<?php

declare(strict_types=1);

namespace App\Controller\Generated;

use App\Entity\TimeZone;
use App\Form\TimeZoneType;
use App\Repository\TimeZoneRepository;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Attribute\Route;
use Symfony\Component\Security\Http\Attribute\IsGranted;

/**
 * TimeZone Controller (Generated Base Class)
 *
 * This class is ALWAYS regenerated from CSV. DO NOT edit this file.
 * Add custom actions to TimeZoneController.php instead.
 *
 * @generated by Luminai Code Generator
 */
#[Route('/time-zone')]
abstract class TimeZoneControllerGenerated extends AbstractController
{
    public function __construct(
        protected readonly TimeZoneRepository $repository
    ) {}

    /**
     * List all TimeZones
     */
    #[Route('', name: 'time_zone_index', methods: ['GET'])]
        #[IsGranted('ROLE_SUPER_ADMIN')]
    public function index(Request $request): Response
    {
        $page = max(1, $request->query->getInt('page', 1));
        $search = $request->query->get('search', '');

        $timezones = $this->repository->findPaginated($page, 30);
        $total = $this->repository->count();

        return $this->render('timezone/index.html.twig', [
            'timezones' => $timezones,
            'total' => $total,
            'page' => $page,
            'pages' => ceil($total / 30),
            'search' => $search,
        ]);
    }

    /**
     * Show TimeZone details
     */
    #[Route('/{id}', name: 'time_zone_show', methods: ['GET'])]
        #[IsGranted('ROLE_SUPER_ADMIN')]
    public function show(TimeZone $timezone): Response
    {

        return $this->render('timezone/show.html.twig', [
            'timezone' => $timezone,
        ]);
    }

    /**
     * Create new TimeZone
     */
    #[Route('/new', name: 'time_zone_new', methods: ['GET', 'POST'])]
        #[IsGranted('ROLE_SUPER_ADMIN')]
    public function new(Request $request): Response
    {
        $timezone = new TimeZone();

        $form = $this->createForm(TimeZoneType::class, $timezone);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $this->repository->save($timezone, true);

            $this->addFlash('success', 'TimeZone created successfully.');

            return $this->redirectToRoute('time_zone_index');
        }

        return $this->render('timezone/form.html.twig', [
            'timezone' => $timezone,
            'form' => $form,
            'is_edit' => false,
        ]);
    }

    /**
     * Edit TimeZone
     */
    #[Route('/{id}/edit', name: 'time_zone_edit', methods: ['GET', 'POST'])]
        #[IsGranted('ROLE_SUPER_ADMIN')]
    public function edit(Request $request, TimeZone $timezone): Response
    {

        $form = $this->createForm(TimeZoneType::class, $timezone);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $this->repository->save($timezone, true);

            $this->addFlash('success', 'TimeZone updated successfully.');

            return $this->redirectToRoute('time_zone_index');
        }

        return $this->render('timezone/form.html.twig', [
            'timezone' => $timezone,
            'form' => $form,
            'is_edit' => true,
        ]);
    }

    /**
     * Delete TimeZone
     */
    #[Route('/{id}', name: 'time_zone_delete', methods: ['POST'])]
        #[IsGranted('ROLE_SUPER_ADMIN')]
    public function delete(Request $request, TimeZone $timezone): Response
    {

        if ($this->isCsrfTokenValid('delete_time_zone_' . $timezone->getId(), $request->request->get('_token'))) {
            $this->repository->remove($timezone, true);

            $this->addFlash('success', 'TimeZone deleted successfully.');
        }

        return $this->redirectToRoute('time_zone_index');
    }
}
