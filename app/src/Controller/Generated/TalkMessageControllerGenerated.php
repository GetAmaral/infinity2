<?php

declare(strict_types=1);

namespace App\Controller\Generated;

use App\Controller\Base\BaseApiController;
use App\Entity\TalkMessage;
use App\Repository\TalkMessageRepository;
use App\Security\Voter\TalkMessageVoter;
use App\Form\TalkMessageFormType;
use App\Service\ListPreferencesService;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Security\Csrf\CsrfToken;
use Symfony\Component\Security\Csrf\CsrfTokenManagerInterface;
use Symfony\Component\Security\Core\Exception\InvalidCsrfTokenException;
use Symfony\Contracts\Translation\TranslatorInterface;

/**
 * Generated Base Controller for TalkMessage
 *
 * ⚠️ WARNING: This file is ALWAYS regenerated by Genmax
 * DO NOT EDIT THIS FILE - Edit TalkMessageController instead
 *
 * @generated
 * @codeCoverageIgnore
 */
abstract class TalkMessageControllerGenerated extends BaseApiController
{
    public function __construct(
        protected readonly EntityManagerInterface $entityManager,
        protected readonly TalkMessageRepository $repository,
        protected readonly ListPreferencesService $listPreferencesService,
        protected readonly TranslatorInterface $translator,
        protected readonly CsrfTokenManagerInterface $csrfTokenManager,
    ) {}

    // ====================================
    // ABSTRACT METHOD IMPLEMENTATIONS
    // ====================================

    /**
     * Get the repository for this entity
     */
    protected function getRepository(): TalkMessageRepository
    {
        return $this->repository;
    }

    /**
     * Get the plural name for this entity
     */
    protected function getEntityPluralName(): string
    {
        return 'talkMessages';
    }

    /**
     * Convert entity to array for API responses
     */
    protected function entityToArray(object $entity): array
    {
        if (!$entity instanceof TalkMessage) {
            throw new \InvalidArgumentException('Expected TalkMessage instance');
        }

        return [
            'id' => $entity->getId()->toString(),
            'organization' => ($organizationRel = $entity->getOrganization()) ? [
                'id' => $organizationRel->getId()->toString(),
                'display' => (string) $organizationRel,
            ] : null,
            'talk' => ($talkRel = $entity->getTalk()) ? [
                'id' => $talkRel->getId()->toString(),
                'display' => (string) $talkRel,
            ] : null,
            'fromContact' => ($fromContactRel = $entity->getFromContact()) ? [
                'id' => $fromContactRel->getId()->toString(),
                'display' => (string) $fromContactRel,
            ] : null,
            'fromUser' => ($fromUserRel = $entity->getFromUser()) ? [
                'id' => $fromUserRel->getId()->toString(),
                'display' => (string) $fromUserRel,
            ] : null,
            'fromAgent' => ($fromAgentRel = $entity->getFromAgent()) ? [
                'id' => $fromAgentRel->getId()->toString(),
                'display' => (string) $fromAgentRel,
            ] : null,
            'sentAt' => $entity->getSentAt()?->format('M d, Y'),
            'body' => $entity->getBody(),
            'messageType' => $entity->getMessageType(),
            'attachments' => ($attachmentsRel = $entity->getAttachments()) ? [
                'id' => $attachmentsRel->getId()->toString(),
                'display' => (string) $attachmentsRel,
            ] : null,
            'read' => $entity->getRead(),
            'readAt' => $entity->getReadAt()?->format('M d, Y'),
            'sentiment' => $entity->getSentiment(),
            'parentMessage' => ($parentMessageRel = $entity->getParentMessage()) ? [
                'id' => $parentMessageRel->getId()->toString(),
                'display' => (string) $parentMessageRel,
            ] : null,
            'edited' => $entity->getEdited(),
            'notification' => ($notificationRel = $entity->getNotification()) ? [
                'id' => $notificationRel->getId()->toString(),
                'display' => (string) $notificationRel,
            ] : null,
            'direction' => $entity->getDirection(),
            'deliveredAt' => $entity->getDeliveredAt()?->format('M d, Y'),
            'internal' => $entity->getInternal(),
            'system' => $entity->getSystem(),
            'editedAt' => $entity->getEditedAt()?->format('M d, Y'),
            'channel' => $entity->getChannel(),
            'subject' => $entity->getSubject(),
            'metadata' => $entity->getMetadata(),
        ];
    }

    // ====================================
    // INDEX ACTION - List all TalkMessages
    // ====================================

    /**
     * List TalkMessages
     */
    protected function indexAction(): Response
    {
        $this->denyAccessUnlessGranted(TalkMessageVoter::LIST);

        $preferences = $this->listPreferencesService->getEntityPreferences('talkMessages');
        $savedView = $preferences['view'] ?? 'grid';

        return $this->render('talkmessage/index.html.twig', [
            'entities' => [],  // Loaded via API
            'entity_name' => 'talkMessage',
            'entity_name_plural' => 'talkMessages',
            'page_icon' => 'bi-chat-text',
            'default_view' => $savedView,

            // List configuration from GeneratorProperty
            'enable_search' => true,
            'enable_filters' => true,
            'enable_sorting' => true,
            'enable_create_button' => true,

            // Property metadata for client-side rendering (as JSON strings)
            'list_fields' => '[{"name":"talk","label":"Talk","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getTalk"},{"name":"fromContact","label":"FromContact","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getFromContact"},{"name":"fromUser","label":"FromUser","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getFromUser"},{"name":"fromAgent","label":"FromAgent","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getFromAgent"},{"name":"sentAt","label":"Sent At","type":"datetime","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getSentAt"},{"name":"body","label":"Message Body","type":"text","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getBody"},{"name":"messageType","label":"Message Type","type":"string","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getMessageType"},{"name":"attachments","label":"Attachments","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getAttachments"},{"name":"read","label":"Is Read","type":"boolean","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getRead"},{"name":"readAt","label":"ReadAt","type":"datetime","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getReadAt"},{"name":"sentiment","label":"Sentiment","type":"string","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getSentiment"},{"name":"parentMessage","label":"ParentMessage","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getParentMessage"},{"name":"edited","label":"Edited","type":"boolean","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getEdited"},{"name":"notification","label":"Notification","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getNotification"},{"name":"direction","label":"Direction","type":"string","sortable":true,"searchable":true,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDirection"},{"name":"deliveredAt","label":"Delivered At","type":"datetime","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDeliveredAt"},{"name":"internal","label":"Internal Note","type":"boolean","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getInternal"},{"name":"system","label":"System Message","type":"boolean","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getSystem"},{"name":"channel","label":"Communication Channel","type":"string","sortable":true,"searchable":true,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getChannel"},{"name":"subject","label":"Subject","type":"string","sortable":true,"searchable":true,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getSubject"}]',
            'searchable_fields' => '[{"name":"body","label":"Message Body","type":"text"},{"name":"direction","label":"Direction","type":"string"},{"name":"channel","label":"Communication Channel","type":"string"},{"name":"subject","label":"Subject","type":"string"}]',
            'filterable_fields' => '[{"name":"direction","label":"Direction","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"deliveredAt","label":"Delivered At","type":"datetime","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"internal","label":"Internal Note","type":"boolean","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"system","label":"System Message","type":"boolean","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"channel","label":"Communication Channel","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"subject","label":"Subject","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false}]',
            'sortable_fields' => '[{"name":"talk","label":"Talk"},{"name":"fromContact","label":"FromContact"},{"name":"fromUser","label":"FromUser"},{"name":"fromAgent","label":"FromAgent"},{"name":"sentAt","label":"Sent At"},{"name":"body","label":"Message Body"},{"name":"messageType","label":"Message Type"},{"name":"attachments","label":"Attachments"},{"name":"read","label":"Is Read"},{"name":"readAt","label":"ReadAt"},{"name":"sentiment","label":"Sentiment"},{"name":"parentMessage","label":"ParentMessage"},{"name":"edited","label":"Edited"},{"name":"notification","label":"Notification"},{"name":"direction","label":"Direction"},{"name":"deliveredAt","label":"Delivered At"},{"name":"internal","label":"Internal Note"},{"name":"system","label":"System Message"},{"name":"editedAt","label":"Edited At"},{"name":"channel","label":"Communication Channel"},{"name":"subject","label":"Subject"}]',
        ]);
    }

    // ====================================
    // API SEARCH - Fetch TalkMessages for list view
    // ====================================

    /**
     * API endpoint for searching TalkMessages
     */
    protected function apiSearchAction(Request $request): JsonResponse
    {
        $this->denyAccessUnlessGranted(TalkMessageVoter::LIST);

        // This method uses the BaseApiController's handleSearchRequest
        // which integrates with API Platform's GetCollection operation
        return $this->handleSearchRequest($request);
    }

    // ====================================
    // NEW FORM ACTION - Display create form
    // ====================================

    /**
     * Display new talkMessage form
     */
    protected function newFormAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(TalkMessageVoter::CREATE);

        $talkMessage = new TalkMessage();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($talkMessage);

        $form = $this->createForm(TalkMessageFormType::class, $talkMessage);

        return $this->render('talkmessage/_form_modal.html.twig', [
            'form' => $form,
            'talkMessage' => $talkMessage,
            'is_edit' => false,
        ]);
    }

    // ====================================
    // CREATE ACTION - Process create form submission
    // ====================================

    /**
     * Process new talkMessage form submission
     */
    protected function createAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(TalkMessageVoter::CREATE);

        $talkMessage = new TalkMessage();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($talkMessage);

        $form = $this->createForm(TalkMessageFormType::class, $talkMessage);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before create hook
                $this->beforeCreate($talkMessage);

                $this->entityManager->persist($talkMessage);
                $this->entityManager->flush();

                // After create hook
                $this->afterCreate($talkMessage);

                $this->addFlash('success', $this->translator->trans(
                    'talkmessage.flash.created_successfully',
                    ['%name%' => (string) $talkMessage],
                    'talkmessage'
                ));

                return $this->redirectToRoute('talkmessage_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'talkmessage.flash.create_failed',
                    ['%error%' => $e->getMessage()],
                    'talkmessage'
                ));
            }
        }

        // Re-render with errors
        return $this->render('talkmessage/_form_modal.html.twig', [
            'form' => $form,
            'talkMessage' => $talkMessage,
            'is_edit' => false,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // EDIT FORM ACTION - Display edit form
    // ====================================

    /**
     * Display edit talkMessage form
     */
    protected function editFormAction(TalkMessage $talkMessage, Request $request): Response
    {
        $this->denyAccessUnlessGranted(TalkMessageVoter::EDIT, $talkMessage);

        $form = $this->createForm(TalkMessageFormType::class, $talkMessage);

        return $this->render('talkmessage/_form_modal.html.twig', [
            'form' => $form,
            'talkMessage' => $talkMessage,
            'is_edit' => true,
        ]);
    }

    // ====================================
    // UPDATE ACTION - Process edit form submission
    // ====================================

    /**
     * Process edit talkMessage form submission
     */
    protected function updateAction(TalkMessage $talkMessage, Request $request): Response
    {
        $this->denyAccessUnlessGranted(TalkMessageVoter::EDIT, $talkMessage);

        $form = $this->createForm(TalkMessageFormType::class, $talkMessage);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before update hook
                $this->beforeUpdate($talkMessage);

                $this->entityManager->flush();

                // After update hook
                $this->afterUpdate($talkMessage);

                $this->addFlash('success', $this->translator->trans(
                    'talkmessage.flash.updated_successfully',
                    ['%name%' => (string) $talkMessage],
                    'talkmessage'
                ));

                return $this->redirectToRoute('talkmessage_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'talkmessage.flash.update_failed',
                    ['%error%' => $e->getMessage()],
                    'talkmessage'
                ));
            }
        }

        // Re-render with errors
        return $this->render('talkmessage/_form_modal.html.twig', [
            'form' => $form,
            'talkMessage' => $talkMessage,
            'is_edit' => true,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // DELETE ACTION - Delete talkMessage
    // ====================================

    /**
     * Delete talkMessage
     */
    protected function deleteAction(TalkMessage $talkMessage, Request $request): Response
    {
        $this->denyAccessUnlessGranted(TalkMessageVoter::DELETE, $talkMessage);

        // Verify CSRF token
        $token = $request->request->get('_token');
        if (!$this->csrfTokenManager->isTokenValid(new CsrfToken('delete_talkMessage_' . $talkMessage->getId()->toString(), $token))) {
            throw new InvalidCsrfTokenException('Invalid CSRF token for delete operation.');
        }

        try {
            // Before delete hook
            $this->beforeDelete($talkMessage);

            $name = (string) $talkMessage;

            $this->entityManager->remove($talkMessage);
            $this->entityManager->flush();

            // After delete hook
            $this->afterDelete();

            $this->addFlash('success', $this->translator->trans(
                'talkmessage.flash.deleted_successfully',
                ['%name%' => $name],
                'talkmessage'
            ));

        } catch (\Exception $e) {
            $this->addFlash('error', $this->translator->trans(
                'talkmessage.flash.delete_failed',
                ['%error%' => $e->getMessage()],
                'talkmessage'
            ));
        }

        return $this->redirectToRoute('talkmessage_index', [], Response::HTTP_SEE_OTHER);
    }

    // ====================================
    // SHOW ACTION - Display talkMessage details
    // ====================================

    /**
     * Display talkMessage details
     */
    protected function showAction(TalkMessage $talkMessage): Response
    {
        $this->denyAccessUnlessGranted(TalkMessageVoter::VIEW, $talkMessage);

        return $this->render('talkmessage/show.html.twig', [
            'talkMessage' => $talkMessage,
        ]);
    }

    // ====================================
    // LIFECYCLE HOOKS
    // ====================================
    // Override these in TalkMessageController to add custom logic

    /**
     * Initialize new entity before creating form
     *
     * Note: Organization and Owner are set automatically by TenantEntityProcessor
     * Only use this for custom initialization logic
     */
    protected function initializeNewEntity(TalkMessage $talkMessage): void
    {
        // Organization and Owner are set automatically by TenantEntityProcessor
        // Add your custom initialization here
    }

    /**
     * Execute logic before creating entity
     */
    protected function beforeCreate(TalkMessage $talkMessage): void
    {
        // Override to add logic before create
    }

    /**
     * Execute logic after creating entity
     */
    protected function afterCreate(TalkMessage $talkMessage): void
    {
        // Override to add logic after create (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before updating entity
     */
    protected function beforeUpdate(TalkMessage $talkMessage): void
    {
        // Override to add logic before update
    }

    /**
     * Execute logic after updating entity
     */
    protected function afterUpdate(TalkMessage $talkMessage): void
    {
        // Override to add logic after update (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before deleting entity
     */
    protected function beforeDelete(TalkMessage $talkMessage): void
    {
        // Override to add logic before delete (e.g., check dependencies, archive)
    }

    /**
     * Execute logic after deleting entity
     */
    protected function afterDelete(): void
    {
        // Override to add logic after delete (e.g., cleanup, send notification)
    }
}
