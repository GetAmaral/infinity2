<?php

declare(strict_types=1);

namespace App\Controller\Generated;

use App\Controller\Base\BaseApiController;
use App\Entity\Event;
use App\Repository\EventRepository;
use App\Security\Voter\EventVoter;
use App\Form\EventFormType;
use App\Service\ListPreferencesService;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Security\Csrf\CsrfToken;
use Symfony\Component\Security\Csrf\CsrfTokenManagerInterface;
use Symfony\Component\Security\Core\Exception\InvalidCsrfTokenException;
use Symfony\Contracts\Translation\TranslatorInterface;

/**
 * Generated Base Controller for Event
 *
 * ⚠️ WARNING: This file is ALWAYS regenerated by Genmax
 * DO NOT EDIT THIS FILE - Edit EventController instead
 *
 * @generated
 * @codeCoverageIgnore
 */
abstract class EventControllerGenerated extends BaseApiController
{
    public function __construct(
        protected readonly EntityManagerInterface $entityManager,
        protected readonly EventRepository $repository,
        protected readonly ListPreferencesService $listPreferencesService,
        protected readonly TranslatorInterface $translator,
        protected readonly CsrfTokenManagerInterface $csrfTokenManager,
    ) {}

    // ====================================
    // ABSTRACT METHOD IMPLEMENTATIONS
    // ====================================

    /**
     * Get the repository for this entity
     */
    protected function getRepository(): EventRepository
    {
        return $this->repository;
    }

    /**
     * Get the plural name for this entity
     */
    protected function getEntityPluralName(): string
    {
        return 'events';
    }

    /**
     * Convert entity to array for API responses
     *
     * ⚠️ IMPORTANT: Enum Properties Stored as Strings
     * -------------------------------------------------
     * Properties with enum-backed types (like InputType) are stored as STRINGS
     * in the database and getters return strings directly, NOT enum objects.
     *
     * ❌ WRONG:   $entity->getType()->value   (Error: "Attempt to read property 'value' on string")
     * ✅ CORRECT: $entity->getType()          (Already a string - 'fully_completed')
     *
     * If you need the enum object for business logic, use:
     *    InputType::from($entity->getType())
     */
    protected function entityToArray(object $entity): array
    {
        if (!$entity instanceof Event) {
            throw new \InvalidArgumentException('Expected Event instance');
        }

        return [
            'id' => $entity->getId()->toString(),
            'organization' => ($organizationRel = $entity->getOrganization()) ? [
                'id' => $organizationRel->getId()->toString(),
                'display' => (string) $organizationRel,
            ] : null,
            'name' => $entity->getName(),
            'startTime' => $entity->getStartTime()?->format('M d, Y'),
            'description' => $entity->getDescription(),
            'endTime' => $entity->getEndTime()?->format('M d, Y'),
            'allDay' => $entity->getAllDay(),
            'location' => $entity->getLocation(),
            'meetingUrl' => $entity->getMeetingUrl(),
            'calendar' => ($calendarRel = $entity->getCalendar()) ? [
                'id' => $calendarRel->getId()->toString(),
                'display' => (string) $calendarRel,
            ] : null,
            'organizer' => ($organizerRel = $entity->getOrganizer()) ? [
                'id' => $organizerRel->getId()->toString(),
                'display' => (string) $organizerRel,
            ] : null,
            'attendees' => ($attendeesRel = $entity->getAttendees()) ? [
                'id' => $attendeesRel->getId()->toString(),
                'display' => (string) $attendeesRel,
            ] : null,
            'categories' => ($categoriesRel = $entity->getCategories()) ? [
                'id' => $categoriesRel->getId()->toString(),
                'display' => (string) $categoriesRel,
            ] : null,
            'attachments' => ($attachmentsRel = $entity->getAttachments()) ? [
                'id' => $attachmentsRel->getId()->toString(),
                'display' => (string) $attachmentsRel,
            ] : null,
            'reminders' => ($remindersRel = $entity->getReminders()) ? [
                'id' => $remindersRel->getId()->toString(),
                'display' => (string) $remindersRel,
            ] : null,
            'resourceBookings' => ($resourceBookingsRel = $entity->getResourceBookings()) ? [
                'id' => $resourceBookingsRel->getId()->toString(),
                'display' => (string) $resourceBookingsRel,
            ] : null,
            'parentEvent' => ($parentEventRel = $entity->getParentEvent()) ? [
                'id' => $parentEventRel->getId()->toString(),
                'display' => (string) $parentEventRel,
            ] : null,
            'childrenEvents' => ($childrenEventsRel = $entity->getChildrenEvents()) ? [
                'id' => $childrenEventsRel->getId()->toString(),
                'display' => (string) $childrenEventsRel,
            ] : null,
            'originalStartTime' => $entity->getOriginalStartTime()?->format('M d, Y'),
            'sequence' => $entity->getSequence(),
            'conferenceData' => $entity->getConferenceData(),
            'extendedProperties' => $entity->getExtendedProperties(),
            'source' => $entity->getSource(),
            'workingHours' => ($workingHoursRel = $entity->getWorkingHours()) ? [
                'id' => $workingHoursRel->getId()->toString(),
                'display' => (string) $workingHoursRel,
            ] : null,
            'subject' => $entity->getSubject(),
            'notifications' => ($notificationsRel = $entity->getNotifications()) ? [
                'id' => $notificationsRel->getId()->toString(),
                'display' => (string) $notificationsRel,
            ] : null,
            'meetingDatas' => ($meetingDatasRel = $entity->getMeetingDatas()) ? [
                'id' => $meetingDatasRel->getId()->toString(),
                'display' => (string) $meetingDatasRel,
            ] : null,
            'holidays' => ($holidaysRel = $entity->getHolidays()) ? [
                'id' => $holidaysRel->getId()->toString(),
                'display' => (string) $holidaysRel,
            ] : null,
            'status' => $entity->getStatus(),
            'showAs' => $entity->getShowAs(),
            'eventType' => $entity->getEventType(),
            'importance' => $entity->getImportance(),
            'sensitivity' => $entity->getSensitivity(),
            'timezone' => $entity->getTimezone(),
            'startTimezone' => $entity->getStartTimezone(),
            'endTimezone' => $entity->getEndTimezone(),
            'duration' => $entity->getDuration(),
            'locationDisplayName' => $entity->getLocationDisplayName(),
            'locationUrl' => $entity->getLocationUrl(),
            'locationCoordinates' => $entity->getLocationCoordinates(),
            'onlineMeeting' => $entity->getOnlineMeeting(),
            'onlineMeetingProvider' => $entity->getOnlineMeetingProvider(),
            'meetingId' => $entity->getMeetingId(),
            'meetingPassword' => $entity->getMeetingPassword(),
            'recurring' => $entity->getRecurring(),
            'recurrenceRule' => $entity->getRecurrenceRule(),
            'recurrenceExceptions' => $entity->getRecurrenceExceptions(),
            'cancelled' => $entity->getCancelled(),
            'draft' => $entity->getDraft(),
            'responseStatus' => $entity->getResponseStatus(),
            'responseRequested' => $entity->getResponseRequested(),
            'allowNewTimeProposals' => $entity->getAllowNewTimeProposals(),
            'hideAttendees' => $entity->getHideAttendees(),
            'guestsCanModify' => $entity->getGuestsCanModify(),
            'guestsCanInviteOthers' => $entity->getGuestsCanInviteOthers(),
            'guestsCanSeeOtherGuests' => $entity->getGuestsCanSeeOtherGuests(),
            'transparency' => $entity->getTransparency(),
            'reminderMinutes' => $entity->getReminderMinutes(),
            'externalCalendarId' => $entity->getExternalCalendarId(),
            'externalCalendarProvider' => $entity->getExternalCalendarProvider(),
            'icalUid' => $entity->getIcalUid(),
            'webLink' => $entity->getWebLink(),
            'htmlLink' => $entity->getHtmlLink(),
            'colorId' => $entity->getColorId(),
            'locked' => $entity->getLocked(),
            'assignedTo' => ($assignedToRel = $entity->getAssignedTo()) ? [
                'id' => $assignedToRel->getId()->toString(),
                'display' => (string) $assignedToRel,
            ] : null,
            'contact' => ($contactRel = $entity->getContact()) ? [
                'id' => $contactRel->getId()->toString(),
                'display' => (string) $contactRel,
            ] : null,
            'company' => ($companyRel = $entity->getCompany()) ? [
                'id' => $companyRel->getId()->toString(),
                'display' => (string) $companyRel,
            ] : null,
            'deal' => ($dealRel = $entity->getDeal()) ? [
                'id' => $dealRel->getId()->toString(),
                'display' => (string) $dealRel,
            ] : null,
        ];
    }

    // ====================================
    // INDEX ACTION - List all Events
    // ====================================

    /**
     * List Events
     */
    protected function indexAction(): Response
    {
        $this->denyAccessUnlessGranted(EventVoter::LIST);

        $preferences = $this->listPreferencesService->getEntityPreferences('events');
        $savedView = $preferences['view'] ?? 'grid';

        return $this->render('event/index.html.twig', [
            'entities' => [],  // Loaded via API
            'entity_name' => 'event',
            'entity_name_plural' => 'events',
            'page_icon' => 'bi-calendar-event',
            'default_view' => $savedView,

            // List configuration from GeneratorProperty
            'enable_search' => true,
            'enable_filters' => false,
            'enable_sorting' => true,
            'enable_create_button' => true,

            // Property metadata for client-side rendering (as JSON strings)
            'list_fields' => '[{"name":"name","label":"Event Title\/Subject","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getName"},{"name":"startTime","label":"Event Start Date\/Time","type":"datetime","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getStartTime"},{"name":"description","label":"Event Details\/Body","type":"text","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDescription"},{"name":"endTime","label":"Event End Date\/Time","type":"datetime","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getEndTime"},{"name":"allDay","label":"All-day Event Flag","type":"boolean","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getAllDay"},{"name":"location","label":"Physical Location String","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getLocation"},{"name":"meetingUrl","label":"Meeting URL (Zoom, Teams, etc.)","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getMeetingUrl"},{"name":"calendar","label":"Parent Calendar","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCalendar"},{"name":"organizer","label":"Event Creator\/Organizer","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getOrganizer"},{"name":"attendees","label":"Event Attendees","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getAttendees"},{"name":"categories","label":"Event Categories","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCategories"},{"name":"attachments","label":"Event Attachments","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getAttachments"},{"name":"reminders","label":"Event Reminders","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getReminders"},{"name":"resourceBookings","label":"Room\/Equipment Bookings","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getResourceBookings"},{"name":"parentEvent","label":"Parent for Recurring Event Instances","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getParentEvent"},{"name":"childrenEvents","label":"Child Recurring Instances","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getChildrenEvents"},{"name":"originalStartTime","label":"Original Start for Modified Recurring Instances","type":"datetime","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getOriginalStartTime"},{"name":"sequence","label":"iCalendar Sequence Number","type":"integer","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getSequence"},{"name":"conferenceData","label":"Google conferenceData JSON Structure","type":"json","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getConferenceData"},{"name":"extendedProperties","label":"Extended Properties for API Sync","type":"json","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getExtendedProperties"},{"name":"source","label":"External Source Information","type":"json","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getSource"},{"name":"subject","label":"Event Subject (Salesforce\/Outlook)","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getSubject"},{"name":"status","label":"Event Lifecycle Status","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getStatus"},{"name":"showAs","label":"Free\/Busy Status","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getShowAs"},{"name":"eventType","label":"Event Type\/Category","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getEventType"},{"name":"importance","label":"Event Importance\/Priority","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getImportance"},{"name":"sensitivity","label":"Confidentiality Level","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getSensitivity"},{"name":"timezone","label":"Event Timezone","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getTimezone"},{"name":"startTimezone","label":"Start Timezone","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getStartTimezone"},{"name":"endTimezone","label":"End Timezone","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getEndTimezone"},{"name":"duration","label":"Duration in Minutes","type":"integer","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDuration"},{"name":"locationDisplayName","label":"Formatted Location Name","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getLocationDisplayName"},{"name":"locationUrl","label":"Location URL","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getLocationUrl"},{"name":"locationCoordinates","label":"Location Coordinates","type":"json","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getLocationCoordinates"},{"name":"onlineMeeting","label":"Online Meeting Flag","type":"boolean","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getOnlineMeeting"},{"name":"onlineMeetingProvider","label":"Meeting Provider","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getOnlineMeetingProvider"},{"name":"meetingId","label":"Meeting ID","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getMeetingId"},{"name":"meetingPassword","label":"Meeting Password","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getMeetingPassword"},{"name":"recurring","label":"Recurring Event Flag","type":"boolean","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getRecurring"},{"name":"recurrenceRule","label":"RFC 5545 RRULE String","type":"text","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getRecurrenceRule"},{"name":"recurrenceExceptions","label":"Recurrence Exception Dates","type":"json","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getRecurrenceExceptions"},{"name":"cancelled","label":"Cancelled Event Flag","type":"boolean","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCancelled"},{"name":"draft","label":"Draft Event Flag","type":"boolean","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDraft"},{"name":"responseStatus","label":"Organizer Response Status","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getResponseStatus"},{"name":"responseRequested","label":"Response Requested Flag","type":"boolean","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getResponseRequested"},{"name":"allowNewTimeProposals","label":"Allow Time Proposals","type":"boolean","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getAllowNewTimeProposals"},{"name":"hideAttendees","label":"Hide Attendee List","type":"boolean","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getHideAttendees"},{"name":"guestsCanModify","label":"Guests Can Modify","type":"boolean","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getGuestsCanModify"},{"name":"guestsCanInviteOthers","label":"Guests Can Invite Others","type":"boolean","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getGuestsCanInviteOthers"},{"name":"guestsCanSeeOtherGuests","label":"Guests Can See Other Guests","type":"boolean","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getGuestsCanSeeOtherGuests"},{"name":"transparency","label":"Calendar Transparency","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getTransparency"},{"name":"reminderMinutes","label":"Default Reminder Minutes","type":"integer","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getReminderMinutes"},{"name":"externalCalendarId","label":"External Calendar Event ID","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getExternalCalendarId"},{"name":"externalCalendarProvider","label":"External Calendar Provider","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getExternalCalendarProvider"},{"name":"icalUid","label":"iCalendar UID","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getIcalUid"},{"name":"webLink","label":"External Calendar Web Link","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getWebLink"},{"name":"htmlLink","label":"HTML Link to Event","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getHtmlLink"},{"name":"colorId","label":"Google Calendar Color ID","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getColorId"},{"name":"locked","label":"Event Locked Flag","type":"boolean","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getLocked"},{"name":"assignedTo","label":"Assigned To User","type":"ManyToOne","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getAssignedTo"},{"name":"contact","label":"Related Contact","type":"ManyToOne","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getContact"},{"name":"company","label":"Related Company","type":"ManyToOne","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCompany"},{"name":"deal","label":"Related Deal","type":"ManyToOne","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDeal"}]',
            'searchable_fields' => '[{"name":"name","label":"Event Title\/Subject","type":"string"},{"name":"description","label":"Event Details\/Body","type":"text"},{"name":"location","label":"Physical Location String","type":"string"},{"name":"meetingUrl","label":"Meeting URL (Zoom, Teams, etc.)","type":"string"}]',
            'filterable_fields' => '[]',
            'sortable_fields' => '[{"name":"name","label":"Event Title\/Subject"},{"name":"startTime","label":"Event Start Date\/Time"},{"name":"description","label":"Event Details\/Body"},{"name":"endTime","label":"Event End Date\/Time"},{"name":"allDay","label":"All-day Event Flag"},{"name":"location","label":"Physical Location String"},{"name":"meetingUrl","label":"Meeting URL (Zoom, Teams, etc.)"},{"name":"calendar","label":"Parent Calendar"},{"name":"organizer","label":"Event Creator\/Organizer"},{"name":"attendees","label":"Event Attendees"},{"name":"categories","label":"Event Categories"},{"name":"attachments","label":"Event Attachments"},{"name":"reminders","label":"Event Reminders"},{"name":"resourceBookings","label":"Room\/Equipment Bookings"},{"name":"parentEvent","label":"Parent for Recurring Event Instances"},{"name":"childrenEvents","label":"Child Recurring Instances"},{"name":"originalStartTime","label":"Original Start for Modified Recurring Instances"},{"name":"sequence","label":"iCalendar Sequence Number"},{"name":"conferenceData","label":"Google conferenceData JSON Structure"},{"name":"extendedProperties","label":"Extended Properties for API Sync"},{"name":"source","label":"External Source Information"}]',
        ]);
    }

    // ====================================
    // API SEARCH - Fetch Events for list view
    // ====================================

    /**
     * API endpoint for searching Events
     */
    protected function apiSearchAction(Request $request): JsonResponse
    {
        $this->denyAccessUnlessGranted(EventVoter::LIST);

        // This method uses the BaseApiController's handleSearchRequest
        // which integrates with API Platform's GetCollection operation
        return $this->handleSearchRequest($request);
    }

    // ====================================
    // NEW FORM ACTION - Display create form
    // ====================================

    /**
     * Display new event form
     */
    protected function newFormAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(EventVoter::CREATE);

        $event = new Event();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($event);

        $form = $this->createForm(EventFormType::class, $event);

        return $this->render('event/_form_modal.html.twig', [
            'form' => $form,
            'event' => $event,
            'is_edit' => false,
        ]);
    }

    // ====================================
    // CREATE ACTION - Process create form submission
    // ====================================

    /**
     * Process new event form submission
     */
    protected function createAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(EventVoter::CREATE);

        $event = new Event();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($event);

        $form = $this->createForm(EventFormType::class, $event);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before create hook
                $this->beforeCreate($event);

                $this->entityManager->persist($event);
                $this->entityManager->flush();

                // After create hook
                $this->afterCreate($event);

                $this->addFlash('success', $this->translator->trans(
                    'event.flash.created_successfully',
                    ['%name%' => (string) $event],
                    'event'
                ));

                return $this->redirectToRoute('event_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'event.flash.create_failed',
                    ['%error%' => $e->getMessage()],
                    'event'
                ));
            }
        }

        // Re-render with errors
        return $this->render('event/_form_modal.html.twig', [
            'form' => $form,
            'event' => $event,
            'is_edit' => false,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // EDIT FORM ACTION - Display edit form
    // ====================================

    /**
     * Display edit event form
     */
    protected function editFormAction(Event $event, Request $request): Response
    {
        $this->denyAccessUnlessGranted(EventVoter::EDIT, $event);

        $form = $this->createForm(EventFormType::class, $event);

        return $this->render('event/_form_modal.html.twig', [
            'form' => $form,
            'event' => $event,
            'is_edit' => true,
        ]);
    }

    // ====================================
    // UPDATE ACTION - Process edit form submission
    // ====================================

    /**
     * Process edit event form submission
     */
    protected function updateAction(Event $event, Request $request): Response
    {
        $this->denyAccessUnlessGranted(EventVoter::EDIT, $event);

        $form = $this->createForm(EventFormType::class, $event);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before update hook
                $this->beforeUpdate($event);

                $this->entityManager->flush();

                // After update hook
                $this->afterUpdate($event);

                $this->addFlash('success', $this->translator->trans(
                    'event.flash.updated_successfully',
                    ['%name%' => (string) $event],
                    'event'
                ));

                return $this->redirectToRoute('event_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'event.flash.update_failed',
                    ['%error%' => $e->getMessage()],
                    'event'
                ));
            }
        }

        // Re-render with errors
        return $this->render('event/_form_modal.html.twig', [
            'form' => $form,
            'event' => $event,
            'is_edit' => true,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // DELETE ACTION - Delete event
    // ====================================

    /**
     * Delete event
     */
    protected function deleteAction(Event $event, Request $request): Response
    {
        $this->denyAccessUnlessGranted(EventVoter::DELETE, $event);

        // Verify CSRF token
        $token = $request->request->get('_token');
        if (!$this->csrfTokenManager->isTokenValid(new CsrfToken('delete_event_' . $event->getId()->toString(), $token))) {
            throw new InvalidCsrfTokenException('Invalid CSRF token for delete operation.');
        }

        try {
            // Before delete hook
            $this->beforeDelete($event);

            $name = (string) $event;

            $this->entityManager->remove($event);
            $this->entityManager->flush();

            // After delete hook
            $this->afterDelete();

            $this->addFlash('success', $this->translator->trans(
                'event.flash.deleted_successfully',
                ['%name%' => $name],
                'event'
            ));

        } catch (\Exception $e) {
            $this->addFlash('error', $this->translator->trans(
                'event.flash.delete_failed',
                ['%error%' => $e->getMessage()],
                'event'
            ));
        }

        return $this->redirectToRoute('event_index', [], Response::HTTP_SEE_OTHER);
    }

    // ====================================
    // SHOW ACTION - Display event details
    // ====================================

    /**
     * Display event details
     */
    protected function showAction(Event $event): Response
    {
        $this->denyAccessUnlessGranted(EventVoter::VIEW, $event);

        return $this->render('event/show.html.twig', [
            'event' => $event,
        ]);
    }

    // ====================================
    // LIFECYCLE HOOKS
    // ====================================
    // Override these in EventController to add custom logic

    /**
     * Initialize new entity before creating form
     *
     * Note: Organization and Owner are set automatically by TenantEntityProcessor
     * Only use this for custom initialization logic
     */
    protected function initializeNewEntity(Event $event): void
    {
        // Organization and Owner are set automatically by TenantEntityProcessor
        // Add your custom initialization here
    }

    /**
     * Execute logic before creating entity
     */
    protected function beforeCreate(Event $event): void
    {
        // Override to add logic before create
    }

    /**
     * Execute logic after creating entity
     */
    protected function afterCreate(Event $event): void
    {
        // Override to add logic after create (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before updating entity
     */
    protected function beforeUpdate(Event $event): void
    {
        // Override to add logic before update
    }

    /**
     * Execute logic after updating entity
     */
    protected function afterUpdate(Event $event): void
    {
        // Override to add logic after update (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before deleting entity
     */
    protected function beforeDelete(Event $event): void
    {
        // Override to add logic before delete (e.g., check dependencies, archive)
    }

    /**
     * Execute logic after deleting entity
     */
    protected function afterDelete(): void
    {
        // Override to add logic after delete (e.g., cleanup, send notification)
    }
}
