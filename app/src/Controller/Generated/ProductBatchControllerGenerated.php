<?php

declare(strict_types=1);

namespace App\Controller\Generated;

use App\Controller\Base\BaseApiController;
use App\Entity\ProductBatch;
use App\Repository\ProductBatchRepository;
use App\Security\Voter\ProductBatchVoter;
use App\Form\ProductBatchFormType;
use App\Service\ListPreferencesService;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Security\Csrf\CsrfToken;
use Symfony\Component\Security\Csrf\CsrfTokenManagerInterface;
use Symfony\Component\Security\Core\Exception\InvalidCsrfTokenException;
use Symfony\Contracts\Translation\TranslatorInterface;

/**
 * Generated Base Controller for ProductBatch
 *
 * ⚠️ WARNING: This file is ALWAYS regenerated by Genmax
 * DO NOT EDIT THIS FILE - Edit ProductBatchController instead
 *
 * @generated
 * @codeCoverageIgnore
 */
abstract class ProductBatchControllerGenerated extends BaseApiController
{
    public function __construct(
        protected readonly EntityManagerInterface $entityManager,
        protected readonly ProductBatchRepository $repository,
        protected readonly ListPreferencesService $listPreferencesService,
        protected readonly TranslatorInterface $translator,
        protected readonly CsrfTokenManagerInterface $csrfTokenManager,
    ) {}

    // ====================================
    // ABSTRACT METHOD IMPLEMENTATIONS
    // ====================================

    /**
     * Get the repository for this entity
     */
    protected function getRepository(): ProductBatchRepository
    {
        return $this->repository;
    }

    /**
     * Get the plural name for this entity
     */
    protected function getEntityPluralName(): string
    {
        return 'productBatches';
    }

    /**
     * Convert entity to array for API responses
     */
    protected function entityToArray(object $entity): array
    {
        if (!$entity instanceof ProductBatch) {
            throw new \InvalidArgumentException('Expected ProductBatch instance');
        }

        return [
            'id' => $entity->getId()->toString(),
            'organization' => ($organizationRel = $entity->getOrganization()) ? [
                'id' => $organizationRel->getId()->toString(),
                'display' => (string) $organizationRel,
            ] : null,
            'batchNumber' => $entity->getBatchNumber(),
            'name' => $entity->getName(),
            'manufacturingDate' => $entity->getManufacturingDate()?->format('M d, Y'),
            'lotNumber' => $entity->getLotNumber(),
            'serialNumber' => $entity->getSerialNumber(),
            'expired' => $entity->getExpired(),
            'supplier' => $entity->getSupplier(),
            'qualityStatus' => $entity->getQualityStatus(),
            'notes' => $entity->getNotes(),
            'availableQuantity' => $entity->getAvailableQuantity(),
            'active' => $entity->getActive(),
            'commissionAmount' => $entity->getCommissionAmount(),
            'commissionRate' => $entity->getCommissionRate(),
            'costPrice' => $entity->getCostPrice(),
            'currency' => $entity->getCurrency(),
            'discountAmount' => $entity->getDiscountAmount(),
            'discountPercentage' => $entity->getDiscountPercentage(),
            'exchangeRate' => $entity->getExchangeRate(),
            'expirationDate' => $entity->getExpirationDate()?->format('M d, Y'),
            'listPrice' => $entity->getListPrice(),
            'marginPercentage' => $entity->getMarginPercentage(),
            'maximumDiscount' => $entity->getMaximumDiscount(),
            'minimumPrice' => $entity->getMinimumPrice(),
            'product' => ($productRel = $entity->getProduct()) ? [
                'id' => $productRel->getId()->toString(),
                'display' => (string) $productRel,
            ] : null,
            'reservedQuantity' => $entity->getReservedQuantity(),
            'stockQuantity' => $entity->getStockQuantity(),
        ];
    }

    // ====================================
    // INDEX ACTION - List all ProductBatches
    // ====================================

    /**
     * List ProductBatches
     */
    protected function indexAction(): Response
    {
        $this->denyAccessUnlessGranted(ProductBatchVoter::LIST);

        $preferences = $this->listPreferencesService->getEntityPreferences('productBatches');
        $savedView = $preferences['view'] ?? 'grid';

        return $this->render('productbatch/index.html.twig', [
            'entities' => [],  // Loaded via API
            'entity_name' => 'productBatch',
            'entity_name_plural' => 'productBatches',
            'page_icon' => 'bi-stack',
            'default_view' => $savedView,

            // List configuration from GeneratorProperty
            'enable_search' => true,
            'enable_filters' => true,
            'enable_sorting' => true,
            'enable_create_button' => true,

            // Property metadata for client-side rendering (as JSON strings)
            'list_fields' => '[{"name":"batchNumber","label":"Batch Number","type":"string","sortable":true,"searchable":true,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getBatchNumber"},{"name":"name","label":"Name","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getName"},{"name":"manufacturingDate","label":"Manufacturing Date","type":"date","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getManufacturingDate"},{"name":"lotNumber","label":"Lot Number","type":"string","sortable":true,"searchable":true,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getLotNumber"},{"name":"expired","label":"Expired","type":"boolean","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getExpired"},{"name":"supplier","label":"Supplier","type":"string","sortable":true,"searchable":true,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getSupplier"},{"name":"qualityStatus","label":"Quality Status","type":"string","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getQualityStatus"},{"name":"availableQuantity","label":"AvailableQuantity","type":"integer","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getAvailableQuantity"},{"name":"active","label":"Active","type":"boolean","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getActive"},{"name":"commissionAmount","label":"CommissionAmount","type":"decimal","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCommissionAmount"},{"name":"commissionRate","label":"CommissionRate","type":"decimal","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCommissionRate"},{"name":"costPrice","label":"CostPrice","type":"decimal","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCostPrice"},{"name":"currency","label":"Currency","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCurrency"},{"name":"discountAmount","label":"DiscountAmount","type":"decimal","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDiscountAmount"},{"name":"discountPercentage","label":"DiscountPercentage","type":"decimal","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDiscountPercentage"},{"name":"exchangeRate","label":"ExchangeRate","type":"float","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getExchangeRate"},{"name":"expirationDate","label":"ExpirationDate","type":"date","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getExpirationDate"},{"name":"listPrice","label":"ListPrice","type":"decimal","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getListPrice"},{"name":"marginPercentage","label":"MarginPercentage","type":"decimal","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getMarginPercentage"},{"name":"maximumDiscount","label":"MaximumDiscount","type":"decimal","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getMaximumDiscount"},{"name":"minimumPrice","label":"MinimumPrice","type":"decimal","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getMinimumPrice"},{"name":"product","label":"Product","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getProduct"},{"name":"reservedQuantity","label":"ReservedQuantity","type":"integer","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getReservedQuantity"},{"name":"stockQuantity","label":"StockQuantity","type":"integer","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getStockQuantity"}]',
            'searchable_fields' => '[{"name":"batchNumber","label":"Batch Number","type":"string"},{"name":"name","label":"Name","type":"string"},{"name":"lotNumber","label":"Lot Number","type":"string"},{"name":"serialNumber","label":"Serial Number","type":"string"},{"name":"supplier","label":"Supplier","type":"string"},{"name":"notes","label":"Notes","type":"text"},{"name":"currency","label":"Currency","type":"string"}]',
            'filterable_fields' => '[{"name":"batchNumber","label":"Batch Number","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"manufacturingDate","label":"Manufacturing Date","type":"date","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"lotNumber","label":"Lot Number","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"serialNumber","label":"Serial Number","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"expired","label":"Expired","type":"boolean","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"supplier","label":"Supplier","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"qualityStatus","label":"Quality Status","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"active","label":"Active","type":"boolean","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false}]',
            'sortable_fields' => '[{"name":"batchNumber","label":"Batch Number"},{"name":"name","label":"Name"},{"name":"manufacturingDate","label":"Manufacturing Date"},{"name":"lotNumber","label":"Lot Number"},{"name":"serialNumber","label":"Serial Number"},{"name":"expired","label":"Expired"},{"name":"supplier","label":"Supplier"},{"name":"qualityStatus","label":"Quality Status"},{"name":"availableQuantity","label":"AvailableQuantity"},{"name":"active","label":"Active"},{"name":"commissionAmount","label":"CommissionAmount"},{"name":"commissionRate","label":"CommissionRate"},{"name":"costPrice","label":"CostPrice"},{"name":"currency","label":"Currency"},{"name":"discountAmount","label":"DiscountAmount"},{"name":"discountPercentage","label":"DiscountPercentage"},{"name":"exchangeRate","label":"ExchangeRate"},{"name":"expirationDate","label":"ExpirationDate"},{"name":"listPrice","label":"ListPrice"},{"name":"marginPercentage","label":"MarginPercentage"},{"name":"maximumDiscount","label":"MaximumDiscount"},{"name":"minimumPrice","label":"MinimumPrice"},{"name":"product","label":"Product"},{"name":"reservedQuantity","label":"ReservedQuantity"},{"name":"stockQuantity","label":"StockQuantity"}]',
        ]);
    }

    // ====================================
    // API SEARCH - Fetch ProductBatches for list view
    // ====================================

    /**
     * API endpoint for searching ProductBatches
     */
    protected function apiSearchAction(Request $request): JsonResponse
    {
        $this->denyAccessUnlessGranted(ProductBatchVoter::LIST);

        // This method uses the BaseApiController's handleSearchRequest
        // which integrates with API Platform's GetCollection operation
        return $this->handleSearchRequest($request);
    }

    // ====================================
    // NEW FORM ACTION - Display create form
    // ====================================

    /**
     * Display new productBatch form
     */
    protected function newFormAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(ProductBatchVoter::CREATE);

        $productBatch = new ProductBatch();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($productBatch);

        $form = $this->createForm(ProductBatchFormType::class, $productBatch);

        return $this->render('productbatch/_form_modal.html.twig', [
            'form' => $form,
            'productBatch' => $productBatch,
            'is_edit' => false,
        ]);
    }

    // ====================================
    // CREATE ACTION - Process create form submission
    // ====================================

    /**
     * Process new productBatch form submission
     */
    protected function createAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(ProductBatchVoter::CREATE);

        $productBatch = new ProductBatch();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($productBatch);

        $form = $this->createForm(ProductBatchFormType::class, $productBatch);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before create hook
                $this->beforeCreate($productBatch);

                $this->entityManager->persist($productBatch);
                $this->entityManager->flush();

                // After create hook
                $this->afterCreate($productBatch);

                $this->addFlash('success', $this->translator->trans(
                    'productbatch.flash.created_successfully',
                    ['%name%' => (string) $productBatch],
                    'productbatch'
                ));

                return $this->redirectToRoute('productbatch_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'productbatch.flash.create_failed',
                    ['%error%' => $e->getMessage()],
                    'productbatch'
                ));
            }
        }

        // Re-render with errors
        return $this->render('productbatch/_form_modal.html.twig', [
            'form' => $form,
            'productBatch' => $productBatch,
            'is_edit' => false,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // EDIT FORM ACTION - Display edit form
    // ====================================

    /**
     * Display edit productBatch form
     */
    protected function editFormAction(ProductBatch $productBatch, Request $request): Response
    {
        $this->denyAccessUnlessGranted(ProductBatchVoter::EDIT, $productBatch);

        $form = $this->createForm(ProductBatchFormType::class, $productBatch);

        return $this->render('productbatch/_form_modal.html.twig', [
            'form' => $form,
            'productBatch' => $productBatch,
            'is_edit' => true,
        ]);
    }

    // ====================================
    // UPDATE ACTION - Process edit form submission
    // ====================================

    /**
     * Process edit productBatch form submission
     */
    protected function updateAction(ProductBatch $productBatch, Request $request): Response
    {
        $this->denyAccessUnlessGranted(ProductBatchVoter::EDIT, $productBatch);

        $form = $this->createForm(ProductBatchFormType::class, $productBatch);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before update hook
                $this->beforeUpdate($productBatch);

                $this->entityManager->flush();

                // After update hook
                $this->afterUpdate($productBatch);

                $this->addFlash('success', $this->translator->trans(
                    'productbatch.flash.updated_successfully',
                    ['%name%' => (string) $productBatch],
                    'productbatch'
                ));

                return $this->redirectToRoute('productbatch_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'productbatch.flash.update_failed',
                    ['%error%' => $e->getMessage()],
                    'productbatch'
                ));
            }
        }

        // Re-render with errors
        return $this->render('productbatch/_form_modal.html.twig', [
            'form' => $form,
            'productBatch' => $productBatch,
            'is_edit' => true,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // DELETE ACTION - Delete productBatch
    // ====================================

    /**
     * Delete productBatch
     */
    protected function deleteAction(ProductBatch $productBatch, Request $request): Response
    {
        $this->denyAccessUnlessGranted(ProductBatchVoter::DELETE, $productBatch);

        // Verify CSRF token
        $token = $request->request->get('_token');
        if (!$this->csrfTokenManager->isTokenValid(new CsrfToken('delete_productBatch_' . $productBatch->getId()->toString(), $token))) {
            throw new InvalidCsrfTokenException('Invalid CSRF token for delete operation.');
        }

        try {
            // Before delete hook
            $this->beforeDelete($productBatch);

            $name = (string) $productBatch;

            $this->entityManager->remove($productBatch);
            $this->entityManager->flush();

            // After delete hook
            $this->afterDelete();

            $this->addFlash('success', $this->translator->trans(
                'productbatch.flash.deleted_successfully',
                ['%name%' => $name],
                'productbatch'
            ));

        } catch (\Exception $e) {
            $this->addFlash('error', $this->translator->trans(
                'productbatch.flash.delete_failed',
                ['%error%' => $e->getMessage()],
                'productbatch'
            ));
        }

        return $this->redirectToRoute('productbatch_index', [], Response::HTTP_SEE_OTHER);
    }

    // ====================================
    // SHOW ACTION - Display productBatch details
    // ====================================

    /**
     * Display productBatch details
     */
    protected function showAction(ProductBatch $productBatch): Response
    {
        $this->denyAccessUnlessGranted(ProductBatchVoter::VIEW, $productBatch);

        return $this->render('productbatch/show.html.twig', [
            'productBatch' => $productBatch,
        ]);
    }

    // ====================================
    // LIFECYCLE HOOKS
    // ====================================
    // Override these in ProductBatchController to add custom logic

    /**
     * Initialize new entity before creating form
     *
     * Note: Organization and Owner are set automatically by TenantEntityProcessor
     * Only use this for custom initialization logic
     */
    protected function initializeNewEntity(ProductBatch $productBatch): void
    {
        // Organization and Owner are set automatically by TenantEntityProcessor
        // Add your custom initialization here
    }

    /**
     * Execute logic before creating entity
     */
    protected function beforeCreate(ProductBatch $productBatch): void
    {
        // Override to add logic before create
    }

    /**
     * Execute logic after creating entity
     */
    protected function afterCreate(ProductBatch $productBatch): void
    {
        // Override to add logic after create (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before updating entity
     */
    protected function beforeUpdate(ProductBatch $productBatch): void
    {
        // Override to add logic before update
    }

    /**
     * Execute logic after updating entity
     */
    protected function afterUpdate(ProductBatch $productBatch): void
    {
        // Override to add logic after update (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before deleting entity
     */
    protected function beforeDelete(ProductBatch $productBatch): void
    {
        // Override to add logic before delete (e.g., check dependencies, archive)
    }

    /**
     * Execute logic after deleting entity
     */
    protected function afterDelete(): void
    {
        // Override to add logic after delete (e.g., cleanup, send notification)
    }
}
