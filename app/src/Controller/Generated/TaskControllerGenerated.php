<?php

declare(strict_types=1);

namespace App\Controller\Generated;

use App\Controller\Base\BaseApiController;
use App\Entity\Task;
use App\Repository\TaskRepository;
use App\Security\Voter\TaskVoter;
use App\Form\TaskFormType;
use App\Service\ListPreferencesService;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Security\Csrf\CsrfToken;
use Symfony\Component\Security\Csrf\CsrfTokenManagerInterface;
use Symfony\Component\Security\Core\Exception\InvalidCsrfTokenException;
use Symfony\Contracts\Translation\TranslatorInterface;

/**
 * Generated Base Controller for Task
 *
 * ⚠️ WARNING: This file is ALWAYS regenerated by Genmax
 * DO NOT EDIT THIS FILE - Edit TaskController instead
 *
 * @generated
 * @codeCoverageIgnore
 */
abstract class TaskControllerGenerated extends BaseApiController
{
    public function __construct(
        protected readonly EntityManagerInterface $entityManager,
        protected readonly TaskRepository $repository,
        protected readonly ListPreferencesService $listPreferencesService,
        protected readonly TranslatorInterface $translator,
        protected readonly CsrfTokenManagerInterface $csrfTokenManager,
    ) {}

    // ====================================
    // ABSTRACT METHOD IMPLEMENTATIONS
    // ====================================

    /**
     * Get the repository for this entity
     */
    protected function getRepository(): TaskRepository
    {
        return $this->repository;
    }

    /**
     * Get the plural name for this entity
     */
    protected function getEntityPluralName(): string
    {
        return 'tasks';
    }

    /**
     * Convert entity to array for API responses
     */
    protected function entityToArray(object $entity): array
    {
        if (!$entity instanceof Task) {
            throw new \InvalidArgumentException('Expected Task instance');
        }

        return [
            'id' => $entity->getId()->toString(),
            'organization' => ($organizationRel = $entity->getOrganization()) ? [
                'id' => $organizationRel->getId()->toString(),
                'display' => (string) $organizationRel,
            ] : null,
            'name' => $entity->getName(),
            'description' => $entity->getDescription(),
            'startDate' => $entity->getStartDate()?->format('M d, Y'),
            'completionPercentage' => $entity->getCompletionPercentage(),
            'category' => $entity->getCategory(),
            'notificationSent' => $entity->getNotificationSent(),
            'archived' => $entity->getArchived(),
            'command' => $entity->getCommand(),
            'completedDate' => $entity->getCompletedDate()?->format('M d, Y'),
            'contact' => ($contactRel = $entity->getContact()) ? [
                'id' => $contactRel->getId()->toString(),
                'display' => (string) $contactRel,
            ] : null,
            'deal' => ($dealRel = $entity->getDeal()) ? [
                'id' => $dealRel->getId()->toString(),
                'display' => (string) $dealRel,
            ] : null,
            'durationMinutes' => $entity->getDurationMinutes(),
            'location' => $entity->getLocation(),
            'pipelineStage' => ($pipelineStageRel = $entity->getPipelineStage()) ? [
                'id' => $pipelineStageRel->getId()->toString(),
                'display' => (string) $pipelineStageRel,
            ] : null,
            'priority' => $entity->getPriority(),
            'scheduledDate' => $entity->getScheduledDate()?->format('M d, Y'),
            'completed' => $entity->getCompleted(),
            'company' => ($companyRel = $entity->getCompany()) ? [
                'id' => $companyRel->getId()->toString(),
                'display' => (string) $companyRel,
            ] : null,
            'reminderDate' => $entity->getReminderDate()?->format('M d, Y'),
            'reminder' => $entity->getReminder(),
            'recurring' => $entity->getRecurring(),
            'recurrenceRule' => $entity->getRecurrenceRule(),
            'overdue' => $entity->getOverdue(),
            'queue' => $entity->getQueue(),
            'emailSubject' => $entity->getEmailSubject(),
            'taskStatus' => $entity->getTaskStatus(),
            'phoneNumber' => $entity->getPhoneNumber(),
            'meetingUrl' => $entity->getMeetingUrl(),
            'outcome' => $entity->getOutcome(),
            'notes' => $entity->getNotes(),
            'type' => ($typeRel = $entity->getType()) ? [
                'id' => $typeRel->getId()->toString(),
                'display' => (string) $typeRel,
            ] : null,
            'user' => ($userRel = $entity->getUser()) ? [
                'id' => $userRel->getId()->toString(),
                'display' => (string) $userRel,
            ] : null,
        ];
    }

    // ====================================
    // INDEX ACTION - List all Tasks
    // ====================================

    /**
     * List Tasks
     */
    protected function indexAction(): Response
    {
        $this->denyAccessUnlessGranted(TaskVoter::LIST);

        $preferences = $this->listPreferencesService->getEntityPreferences('tasks');
        $savedView = $preferences['view'] ?? 'grid';

        return $this->render('task/index.html.twig', [
            'entities' => [],  // Loaded via API
            'entity_name' => 'task',
            'entity_name_plural' => 'tasks',
            'page_icon' => 'bi-check-square',
            'default_view' => $savedView,

            // List configuration from GeneratorProperty
            'enable_search' => true,
            'enable_filters' => true,
            'enable_sorting' => true,
            'enable_create_button' => true,

            // Property metadata for client-side rendering (as JSON strings)
            'list_fields' => '[{"name":"name","label":"Subject","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getName"},{"name":"description","label":"Description","type":"text","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDescription"},{"name":"startDate","label":"Start Date","type":"datetime","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getStartDate"},{"name":"completionPercentage","label":"Completion %","type":"integer","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCompletionPercentage"},{"name":"category","label":"Category","type":"string","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCategory"},{"name":"archived","label":"Archived","type":"boolean","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getArchived"},{"name":"command","label":"Command","type":"text","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCommand"},{"name":"completedDate","label":"Completed Date","type":"datetime","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCompletedDate"},{"name":"contact","label":"Contact","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getContact"},{"name":"deal","label":"Deal","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDeal"},{"name":"durationMinutes","label":"Duration Minutes","type":"integer","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDurationMinutes"},{"name":"location","label":"Location","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getLocation"},{"name":"pipelineStage","label":"Pipeline Stage","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getPipelineStage"},{"name":"priority","label":"Priority","type":"integer","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getPriority"},{"name":"scheduledDate","label":"Due Date","type":"datetime","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getScheduledDate"},{"name":"completed","label":"Completed","type":"boolean","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCompleted"},{"name":"company","label":"Company","type":"","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCompany"},{"name":"reminderDate","label":"Reminder Date","type":"datetime","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getReminderDate"},{"name":"reminder","label":"Reminder","type":"boolean","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getReminder"},{"name":"recurring","label":"Recurring","type":"boolean","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getRecurring"},{"name":"recurrenceRule","label":"Recurrence Rule","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getRecurrenceRule"},{"name":"overdue","label":"Overdue","type":"boolean","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getOverdue"},{"name":"queue","label":"Queue","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getQueue"},{"name":"emailSubject","label":"Email Subject","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getEmailSubject"},{"name":"taskStatus","label":"Status","type":"string","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getTaskStatus"},{"name":"phoneNumber","label":"Phone Number","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getPhoneNumber"},{"name":"meetingUrl","label":"Meeting URL","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getMeetingUrl"},{"name":"outcome","label":"Outcome","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getOutcome"},{"name":"notes","label":"Notes","type":"text","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getNotes"},{"name":"type","label":"Task Type","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getType"},{"name":"user","label":"Assigned To","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getUser"}]',
            'searchable_fields' => '[{"name":"name","label":"Subject","type":"string"},{"name":"description","label":"Description","type":"text"},{"name":"command","label":"Command","type":"text"},{"name":"location","label":"Location","type":"string"}]',
            'filterable_fields' => '[{"name":"startDate","label":"Start Date","type":"datetime","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"completionPercentage","label":"Completion %","type":"integer","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"category","label":"Category","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false}]',
            'sortable_fields' => '[{"name":"name","label":"Subject"},{"name":"description","label":"Description"},{"name":"startDate","label":"Start Date"},{"name":"completionPercentage","label":"Completion %"},{"name":"category","label":"Category"},{"name":"archived","label":"Archived"},{"name":"command","label":"Command"},{"name":"completedDate","label":"Completed Date"},{"name":"contact","label":"Contact"},{"name":"deal","label":"Deal"},{"name":"durationMinutes","label":"Duration Minutes"},{"name":"location","label":"Location"},{"name":"pipelineStage","label":"Pipeline Stage"},{"name":"priority","label":"Priority"},{"name":"scheduledDate","label":"Due Date"},{"name":"taskStatus","label":"Status"},{"name":"type","label":"Task Type"},{"name":"user","label":"Assigned To"}]',
        ]);
    }

    // ====================================
    // API SEARCH - Fetch Tasks for list view
    // ====================================

    /**
     * API endpoint for searching Tasks
     */
    protected function apiSearchAction(Request $request): JsonResponse
    {
        $this->denyAccessUnlessGranted(TaskVoter::LIST);

        // This method uses the BaseApiController's handleSearchRequest
        // which integrates with API Platform's GetCollection operation
        return $this->handleSearchRequest($request);
    }

    // ====================================
    // NEW FORM ACTION - Display create form
    // ====================================

    /**
     * Display new task form
     */
    protected function newFormAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(TaskVoter::CREATE);

        $task = new Task();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($task);

        $form = $this->createForm(TaskFormType::class, $task);

        return $this->render('task/_form_modal.html.twig', [
            'form' => $form,
            'task' => $task,
            'is_edit' => false,
        ]);
    }

    // ====================================
    // CREATE ACTION - Process create form submission
    // ====================================

    /**
     * Process new task form submission
     */
    protected function createAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(TaskVoter::CREATE);

        $task = new Task();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($task);

        $form = $this->createForm(TaskFormType::class, $task);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before create hook
                $this->beforeCreate($task);

                $this->entityManager->persist($task);
                $this->entityManager->flush();

                // After create hook
                $this->afterCreate($task);

                $this->addFlash('success', $this->translator->trans(
                    'task.flash.created_successfully',
                    ['%name%' => (string) $task],
                    'task'
                ));

                return $this->redirectToRoute('task_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'task.flash.create_failed',
                    ['%error%' => $e->getMessage()],
                    'task'
                ));
            }
        }

        // Re-render with errors
        return $this->render('task/_form_modal.html.twig', [
            'form' => $form,
            'task' => $task,
            'is_edit' => false,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // EDIT FORM ACTION - Display edit form
    // ====================================

    /**
     * Display edit task form
     */
    protected function editFormAction(Task $task, Request $request): Response
    {
        $this->denyAccessUnlessGranted(TaskVoter::EDIT, $task);

        $form = $this->createForm(TaskFormType::class, $task);

        return $this->render('task/_form_modal.html.twig', [
            'form' => $form,
            'task' => $task,
            'is_edit' => true,
        ]);
    }

    // ====================================
    // UPDATE ACTION - Process edit form submission
    // ====================================

    /**
     * Process edit task form submission
     */
    protected function updateAction(Task $task, Request $request): Response
    {
        $this->denyAccessUnlessGranted(TaskVoter::EDIT, $task);

        $form = $this->createForm(TaskFormType::class, $task);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before update hook
                $this->beforeUpdate($task);

                $this->entityManager->flush();

                // After update hook
                $this->afterUpdate($task);

                $this->addFlash('success', $this->translator->trans(
                    'task.flash.updated_successfully',
                    ['%name%' => (string) $task],
                    'task'
                ));

                return $this->redirectToRoute('task_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'task.flash.update_failed',
                    ['%error%' => $e->getMessage()],
                    'task'
                ));
            }
        }

        // Re-render with errors
        return $this->render('task/_form_modal.html.twig', [
            'form' => $form,
            'task' => $task,
            'is_edit' => true,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // DELETE ACTION - Delete task
    // ====================================

    /**
     * Delete task
     */
    protected function deleteAction(Task $task, Request $request): Response
    {
        $this->denyAccessUnlessGranted(TaskVoter::DELETE, $task);

        // Verify CSRF token
        $token = $request->request->get('_token');
        if (!$this->csrfTokenManager->isTokenValid(new CsrfToken('delete_task_' . $task->getId()->toString(), $token))) {
            throw new InvalidCsrfTokenException('Invalid CSRF token for delete operation.');
        }

        try {
            // Before delete hook
            $this->beforeDelete($task);

            $name = (string) $task;

            $this->entityManager->remove($task);
            $this->entityManager->flush();

            // After delete hook
            $this->afterDelete();

            $this->addFlash('success', $this->translator->trans(
                'task.flash.deleted_successfully',
                ['%name%' => $name],
                'task'
            ));

        } catch (\Exception $e) {
            $this->addFlash('error', $this->translator->trans(
                'task.flash.delete_failed',
                ['%error%' => $e->getMessage()],
                'task'
            ));
        }

        return $this->redirectToRoute('task_index', [], Response::HTTP_SEE_OTHER);
    }

    // ====================================
    // SHOW ACTION - Display task details
    // ====================================

    /**
     * Display task details
     */
    protected function showAction(Task $task): Response
    {
        $this->denyAccessUnlessGranted(TaskVoter::VIEW, $task);

        return $this->render('task/show.html.twig', [
            'task' => $task,
        ]);
    }

    // ====================================
    // LIFECYCLE HOOKS
    // ====================================
    // Override these in TaskController to add custom logic

    /**
     * Initialize new entity before creating form
     *
     * Note: Organization and Owner are set automatically by TenantEntityProcessor
     * Only use this for custom initialization logic
     */
    protected function initializeNewEntity(Task $task): void
    {
        // Organization and Owner are set automatically by TenantEntityProcessor
        // Add your custom initialization here
    }

    /**
     * Execute logic before creating entity
     */
    protected function beforeCreate(Task $task): void
    {
        // Override to add logic before create
    }

    /**
     * Execute logic after creating entity
     */
    protected function afterCreate(Task $task): void
    {
        // Override to add logic after create (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before updating entity
     */
    protected function beforeUpdate(Task $task): void
    {
        // Override to add logic before update
    }

    /**
     * Execute logic after updating entity
     */
    protected function afterUpdate(Task $task): void
    {
        // Override to add logic after update (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before deleting entity
     */
    protected function beforeDelete(Task $task): void
    {
        // Override to add logic before delete (e.g., check dependencies, archive)
    }

    /**
     * Execute logic after deleting entity
     */
    protected function afterDelete(): void
    {
        // Override to add logic after delete (e.g., cleanup, send notification)
    }
}
