<?php

declare(strict_types=1);

namespace App\Controller\Generated;

use App\Controller\Base\BaseApiController;
use App\Entity\Course;
use App\Repository\CourseRepository;
use App\Security\Voter\CourseVoter;
use App\Form\CourseFormType;
use App\Service\ListPreferencesService;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Security\Csrf\CsrfToken;
use Symfony\Component\Security\Csrf\CsrfTokenManagerInterface;
use Symfony\Component\Security\Core\Exception\InvalidCsrfTokenException;
use Symfony\Contracts\Translation\TranslatorInterface;

/**
 * Generated Base Controller for Course
 *
 * ⚠️ WARNING: This file is ALWAYS regenerated by Genmax
 * DO NOT EDIT THIS FILE - Edit CourseController instead
 *
 * @generated
 * @codeCoverageIgnore
 */
abstract class CourseControllerGenerated extends BaseApiController
{
    public function __construct(
        protected readonly EntityManagerInterface $entityManager,
        protected readonly CourseRepository $repository,
        protected readonly ListPreferencesService $listPreferencesService,
        protected readonly TranslatorInterface $translator,
        protected readonly CsrfTokenManagerInterface $csrfTokenManager,
    ) {}

    // ====================================
    // ABSTRACT METHOD IMPLEMENTATIONS
    // ====================================

    /**
     * Get the repository for this entity
     */
    protected function getRepository(): CourseRepository
    {
        return $this->repository;
    }

    /**
     * Get the plural name for this entity
     */
    protected function getEntityPluralName(): string
    {
        return 'courses';
    }

    /**
     * Convert entity to array for API responses
     *
     * ⚠️ IMPORTANT: Enum Properties Stored as Strings
     * -------------------------------------------------
     * Properties with enum-backed types (like InputType) are stored as STRINGS
     * in the database and getters return strings directly, NOT enum objects.
     *
     * ❌ WRONG:   $entity->getType()->value   (Error: "Attempt to read property 'value' on string")
     * ✅ CORRECT: $entity->getType()          (Already a string - 'fully_completed')
     *
     * If you need the enum object for business logic, use:
     *    InputType::from($entity->getType())
     */
    protected function entityToArray(object $entity): array
    {
        if (!$entity instanceof Course) {
            throw new \InvalidArgumentException('Expected Course instance');
        }

        return [
            'id' => $entity->getId()->toString(),
            'organization' => ($organizationRel = $entity->getOrganization()) ? [
                'id' => $organizationRel->getId()->toString(),
                'display' => (string) $organizationRel,
            ] : null,
            'releaseDate' => $entity->getReleaseDate()?->format('M d, Y'),
            'name' => $entity->getName(),
            'description' => $entity->getDescription(),
            'modules' => ($modulesRel = $entity->getModules()) ? [
                'id' => $modulesRel->getId()->toString(),
                'display' => (string) $modulesRel,
            ] : null,
            'active' => $entity->getActive(),
            'owner' => ($ownerRel = $entity->getOwner()) ? [
                'id' => $ownerRel->getId()->toString(),
                'display' => (string) $ownerRel,
            ] : null,
            'studentCourses' => ($studentCoursesRel = $entity->getStudentCourses()) ? [
                'id' => $studentCoursesRel->getId()->toString(),
                'display' => (string) $studentCoursesRel,
            ] : null,
            'totalLengthSeconds' => $entity->getTotalLengthSeconds(),
        ];
    }

    // ====================================
    // INDEX ACTION - List all Courses
    // ====================================

    /**
     * List Courses
     */
    protected function indexAction(): Response
    {
        $this->denyAccessUnlessGranted(CourseVoter::LIST);

        $preferences = $this->listPreferencesService->getEntityPreferences('courses');
        $savedView = $preferences['view'] ?? 'grid';

        return $this->render('course/index.html.twig', [
            'entities' => [],  // Loaded via API
            'entity_name' => 'course',
            'entity_name_plural' => 'courses',
            'page_icon' => 'bi-book',
            'default_view' => $savedView,

            // List configuration from GeneratorProperty
            'enable_search' => true,
            'enable_filters' => false,
            'enable_sorting' => true,
            'enable_create_button' => true,

            // Property metadata for client-side rendering (as JSON strings)
            'list_fields' => '[{"name":"name","label":"Name","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getName"},{"name":"modules","label":"Modules","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getModules"},{"name":"active","label":"Active","type":"boolean","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getActive"},{"name":"owner","label":"Owner","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getOwner"},{"name":"studentCourses","label":"Student Courses","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getStudentCourses"}]',
            'searchable_fields' => '[{"name":"name","label":"Name","type":"string"},{"name":"description","label":"Description","type":"text"}]',
            'filterable_fields' => '[]',
            'sortable_fields' => '[{"name":"name","label":"Name"},{"name":"description","label":"Description"},{"name":"modules","label":"Modules"},{"name":"active","label":"Active"},{"name":"owner","label":"Owner"},{"name":"studentCourses","label":"Student Courses"},{"name":"totalLengthSeconds","label":"Total Length Seconds"}]',
        ]);
    }

    // ====================================
    // API SEARCH - Fetch Courses for list view
    // ====================================

    /**
     * API endpoint for searching Courses
     */
    protected function apiSearchAction(Request $request): JsonResponse
    {
        $this->denyAccessUnlessGranted(CourseVoter::LIST);

        // This method uses the BaseApiController's handleSearchRequest
        // which integrates with API Platform's GetCollection operation
        return $this->handleSearchRequest($request);
    }

    // ====================================
    // NEW FORM ACTION - Display create form
    // ====================================

    /**
     * Display new course form
     */
    protected function newFormAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(CourseVoter::CREATE);

        $course = new Course();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($course);

        $form = $this->createForm(CourseFormType::class, $course);

        return $this->render('course/_form_modal.html.twig', [
            'form' => $form,
            'course' => $course,
            'is_edit' => false,
        ]);
    }

    // ====================================
    // CREATE ACTION - Process create form submission
    // ====================================

    /**
     * Process new course form submission
     */
    protected function createAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(CourseVoter::CREATE);

        $course = new Course();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($course);

        $form = $this->createForm(CourseFormType::class, $course);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before create hook
                $this->beforeCreate($course);

                $this->entityManager->persist($course);
                $this->entityManager->flush();

                // After create hook
                $this->afterCreate($course);

                $this->addFlash('success', $this->translator->trans(
                    'course.flash.created_successfully',
                    ['%name%' => (string) $course],
                    'course'
                ));

                return $this->redirectToRoute('course_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'course.flash.create_failed',
                    ['%error%' => $e->getMessage()],
                    'course'
                ));
            }
        }

        // Re-render with errors
        return $this->render('course/_form_modal.html.twig', [
            'form' => $form,
            'course' => $course,
            'is_edit' => false,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // EDIT FORM ACTION - Display edit form
    // ====================================

    /**
     * Display edit course form
     */
    protected function editFormAction(Course $course, Request $request): Response
    {
        $this->denyAccessUnlessGranted(CourseVoter::EDIT, $course);

        $form = $this->createForm(CourseFormType::class, $course);

        return $this->render('course/_form_modal.html.twig', [
            'form' => $form,
            'course' => $course,
            'is_edit' => true,
        ]);
    }

    // ====================================
    // UPDATE ACTION - Process edit form submission
    // ====================================

    /**
     * Process edit course form submission
     */
    protected function updateAction(Course $course, Request $request): Response
    {
        $this->denyAccessUnlessGranted(CourseVoter::EDIT, $course);

        $form = $this->createForm(CourseFormType::class, $course);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before update hook
                $this->beforeUpdate($course);

                $this->entityManager->flush();

                // After update hook
                $this->afterUpdate($course);

                $this->addFlash('success', $this->translator->trans(
                    'course.flash.updated_successfully',
                    ['%name%' => (string) $course],
                    'course'
                ));

                return $this->redirectToRoute('course_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'course.flash.update_failed',
                    ['%error%' => $e->getMessage()],
                    'course'
                ));
            }
        }

        // Re-render with errors
        return $this->render('course/_form_modal.html.twig', [
            'form' => $form,
            'course' => $course,
            'is_edit' => true,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // DELETE ACTION - Delete course
    // ====================================

    /**
     * Delete course
     */
    protected function deleteAction(Course $course, Request $request): Response
    {
        $this->denyAccessUnlessGranted(CourseVoter::DELETE, $course);

        // Verify CSRF token
        $token = $request->request->get('_token');
        if (!$this->csrfTokenManager->isTokenValid(new CsrfToken('delete_course_' . $course->getId()->toString(), $token))) {
            throw new InvalidCsrfTokenException('Invalid CSRF token for delete operation.');
        }

        try {
            // Before delete hook
            $this->beforeDelete($course);

            $name = (string) $course;

            $this->entityManager->remove($course);
            $this->entityManager->flush();

            // After delete hook
            $this->afterDelete();

            $this->addFlash('success', $this->translator->trans(
                'course.flash.deleted_successfully',
                ['%name%' => $name],
                'course'
            ));

        } catch (\Exception $e) {
            $this->addFlash('error', $this->translator->trans(
                'course.flash.delete_failed',
                ['%error%' => $e->getMessage()],
                'course'
            ));
        }

        return $this->redirectToRoute('course_index', [], Response::HTTP_SEE_OTHER);
    }

    // ====================================
    // SHOW ACTION - Display course details
    // ====================================

    /**
     * Display course details
     */
    protected function showAction(Course $course): Response
    {
        $this->denyAccessUnlessGranted(CourseVoter::VIEW, $course);

        return $this->render('course/show.html.twig', [
            'course' => $course,
        ]);
    }

    // ====================================
    // LIFECYCLE HOOKS
    // ====================================
    // Override these in CourseController to add custom logic

    /**
     * Initialize new entity before creating form
     *
     * Note: Organization and Owner are set automatically by TenantEntityProcessor
     * Only use this for custom initialization logic
     */
    protected function initializeNewEntity(Course $course): void
    {
        // Organization and Owner are set automatically by TenantEntityProcessor
        // Add your custom initialization here
    }

    /**
     * Execute logic before creating entity
     */
    protected function beforeCreate(Course $course): void
    {
        // Override to add logic before create
    }

    /**
     * Execute logic after creating entity
     */
    protected function afterCreate(Course $course): void
    {
        // Override to add logic after create (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before updating entity
     */
    protected function beforeUpdate(Course $course): void
    {
        // Override to add logic before update
    }

    /**
     * Execute logic after updating entity
     */
    protected function afterUpdate(Course $course): void
    {
        // Override to add logic after update (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before deleting entity
     */
    protected function beforeDelete(Course $course): void
    {
        // Override to add logic before delete (e.g., check dependencies, archive)
    }

    /**
     * Execute logic after deleting entity
     */
    protected function afterDelete(): void
    {
        // Override to add logic after delete (e.g., cleanup, send notification)
    }
}
