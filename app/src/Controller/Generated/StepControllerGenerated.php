<?php

declare(strict_types=1);

namespace App\Controller\Generated;

use App\Controller\Base\BaseApiController;
use App\Entity\Step;
use App\Repository\StepRepository;
use App\Security\Voter\StepVoter;
use App\Form\StepFormType;
use App\Service\ListPreferencesService;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Security\Csrf\CsrfToken;
use Symfony\Component\Security\Csrf\CsrfTokenManagerInterface;
use Symfony\Component\Security\Core\Exception\InvalidCsrfTokenException;
use Symfony\Contracts\Translation\TranslatorInterface;

/**
 * Generated Base Controller for Step
 *
 * ⚠️ WARNING: This file is ALWAYS regenerated by Genmax
 * DO NOT EDIT THIS FILE - Edit StepController instead
 *
 * @generated
 * @codeCoverageIgnore
 */
abstract class StepControllerGenerated extends BaseApiController
{
    public function __construct(
        protected readonly EntityManagerInterface $entityManager,
        protected readonly StepRepository $repository,
        protected readonly ListPreferencesService $listPreferencesService,
        protected readonly TranslatorInterface $translator,
        protected readonly CsrfTokenManagerInterface $csrfTokenManager,
    ) {}

    // ====================================
    // ABSTRACT METHOD IMPLEMENTATIONS
    // ====================================

    /**
     * Get the repository for this entity
     */
    protected function getRepository(): StepRepository
    {
        return $this->repository;
    }

    /**
     * Get the plural name for this entity
     */
    protected function getEntityPluralName(): string
    {
        return 'steps';
    }

    /**
     * Convert entity to array for API responses
     */
    protected function entityToArray(object $entity): array
    {
        if (!$entity instanceof Step) {
            throw new \InvalidArgumentException('Expected Step instance');
        }

        return [
            'id' => $entity->getId()->toString(),
            'name' => $entity->getName(),
            'treeFlow' => ($treeFlowRel = $entity->getTreeFlow()) ? [
                'id' => $treeFlowRel->getId()->toString(),
                'display' => (string) $treeFlowRel,
            ] : null,
            'first' => $entity->getFirst(),
            'slug' => $entity->getSlug(),
            'objective' => $entity->getObjective(),
            'prompt' => $entity->getPrompt(),
            'viewOrder' => $entity->getViewOrder(),
            'positionX' => $entity->getPositionX(),
            'positionY' => $entity->getPositionY(),
            'questions' => ($questionsRel = $entity->getQuestions()) ? [
                'id' => $questionsRel->getId()->toString(),
                'display' => (string) $questionsRel,
            ] : null,
            'outputs' => ($outputsRel = $entity->getOutputs()) ? [
                'id' => $outputsRel->getId()->toString(),
                'display' => (string) $outputsRel,
            ] : null,
            'inputs' => ($inputsRel = $entity->getInputs()) ? [
                'id' => $inputsRel->getId()->toString(),
                'display' => (string) $inputsRel,
            ] : null,
        ];
    }

    // ====================================
    // INDEX ACTION - List all Steps
    // ====================================

    /**
     * List Steps
     */
    protected function indexAction(): Response
    {
        $this->denyAccessUnlessGranted(StepVoter::LIST);

        $preferences = $this->listPreferencesService->getEntityPreferences('steps');
        $savedView = $preferences['view'] ?? 'grid';

        return $this->render('step/index.html.twig', [
            'entities' => [],  // Loaded via API
            'entity_name' => 'step',
            'entity_name_plural' => 'steps',
            'page_icon' => 'bi-signpost',
            'default_view' => $savedView,

            // List configuration from GeneratorProperty
            'enable_search' => true,
            'enable_filters' => true,
            'enable_sorting' => true,
            'enable_create_button' => true,

            // Property metadata for client-side rendering (as JSON strings)
            'list_fields' => '[{"name":"name","label":"Name","type":"string","sortable":true,"searchable":true,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getName"},{"name":"first","label":"First","type":"boolean","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getFirst"}]',
            'searchable_fields' => '[{"name":"name","label":"Name","type":"string"},{"name":"treeFlow","label":"TreeFlow","type":"string"},{"name":"slug","label":"Slug","type":"string"},{"name":"objective","label":"Objective","type":"text"},{"name":"prompt","label":"Prompt","type":"text"},{"name":"questions","label":"Questions","type":"string"},{"name":"outputs","label":"Outputs","type":"string"},{"name":"inputs","label":"Inputs","type":"string"}]',
            'filterable_fields' => '[{"name":"name","label":"Name","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"treeFlow","label":"TreeFlow","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"first","label":"First","type":"boolean","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"slug","label":"Slug","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"objective","label":"Objective","type":"text","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"prompt","label":"Prompt","type":"text","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"viewOrder","label":"ViewOrder","type":"integer","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"positionX","label":"PositionX","type":"integer","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"positionY","label":"PositionY","type":"integer","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"questions","label":"Questions","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"outputs","label":"Outputs","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"inputs","label":"Inputs","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false}]',
            'sortable_fields' => '[{"name":"name","label":"Name"},{"name":"treeFlow","label":"TreeFlow"},{"name":"first","label":"First"},{"name":"slug","label":"Slug"},{"name":"objective","label":"Objective"},{"name":"prompt","label":"Prompt"},{"name":"viewOrder","label":"ViewOrder"},{"name":"positionX","label":"PositionX"},{"name":"positionY","label":"PositionY"},{"name":"questions","label":"Questions"},{"name":"outputs","label":"Outputs"},{"name":"inputs","label":"Inputs"}]',
        ]);
    }


    // ====================================
    // NEW FORM ACTION - Display create form
    // ====================================

    /**
     * Display new step form
     */
    protected function newFormAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(StepVoter::CREATE);

        $step = new Step();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($step);

        $form = $this->createForm(StepFormType::class, $step);

        return $this->render('step/_form_modal.html.twig', [
            'form' => $form,
            'step' => $step,
            'is_edit' => false,
        ]);
    }

    // ====================================
    // CREATE ACTION - Process create form submission
    // ====================================

    /**
     * Process new step form submission
     */
    protected function createAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(StepVoter::CREATE);

        $step = new Step();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($step);

        $form = $this->createForm(StepFormType::class, $step);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before create hook
                $this->beforeCreate($step);

                $this->entityManager->persist($step);
                $this->entityManager->flush();

                // After create hook
                $this->afterCreate($step);

                $this->addFlash('success', $this->translator->trans(
                    'step.flash.created_successfully',
                    ['%name%' => (string) $step],
                    'step'
                ));

                return $this->redirectToRoute('step_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'step.flash.create_failed',
                    ['%error%' => $e->getMessage()],
                    'step'
                ));
            }
        }

        // Re-render with errors
        return $this->render('step/_form_modal.html.twig', [
            'form' => $form,
            'step' => $step,
            'is_edit' => false,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // EDIT FORM ACTION - Display edit form
    // ====================================

    /**
     * Display edit step form
     */
    protected function editFormAction(Step $step, Request $request): Response
    {
        $this->denyAccessUnlessGranted(StepVoter::EDIT, $step);

        $form = $this->createForm(StepFormType::class, $step);

        return $this->render('step/_form_modal.html.twig', [
            'form' => $form,
            'step' => $step,
            'is_edit' => true,
        ]);
    }

    // ====================================
    // UPDATE ACTION - Process edit form submission
    // ====================================

    /**
     * Process edit step form submission
     */
    protected function updateAction(Step $step, Request $request): Response
    {
        $this->denyAccessUnlessGranted(StepVoter::EDIT, $step);

        $form = $this->createForm(StepFormType::class, $step);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before update hook
                $this->beforeUpdate($step);

                $this->entityManager->flush();

                // After update hook
                $this->afterUpdate($step);

                $this->addFlash('success', $this->translator->trans(
                    'step.flash.updated_successfully',
                    ['%name%' => (string) $step],
                    'step'
                ));

                return $this->redirectToRoute('step_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'step.flash.update_failed',
                    ['%error%' => $e->getMessage()],
                    'step'
                ));
            }
        }

        // Re-render with errors
        return $this->render('step/_form_modal.html.twig', [
            'form' => $form,
            'step' => $step,
            'is_edit' => true,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // DELETE ACTION - Delete step
    // ====================================

    /**
     * Delete step
     */
    protected function deleteAction(Step $step, Request $request): Response
    {
        $this->denyAccessUnlessGranted(StepVoter::DELETE, $step);

        // Verify CSRF token
        $token = $request->request->get('_token');
        if (!$this->csrfTokenManager->isTokenValid(new CsrfToken('delete_step_' . $step->getId()->toString(), $token))) {
            throw new InvalidCsrfTokenException('Invalid CSRF token for delete operation.');
        }

        try {
            // Before delete hook
            $this->beforeDelete($step);

            $name = (string) $step;

            $this->entityManager->remove($step);
            $this->entityManager->flush();

            // After delete hook
            $this->afterDelete();

            $this->addFlash('success', $this->translator->trans(
                'step.flash.deleted_successfully',
                ['%name%' => $name],
                'step'
            ));

        } catch (\Exception $e) {
            $this->addFlash('error', $this->translator->trans(
                'step.flash.delete_failed',
                ['%error%' => $e->getMessage()],
                'step'
            ));
        }

        return $this->redirectToRoute('step_index', [], Response::HTTP_SEE_OTHER);
    }

    // ====================================
    // SHOW ACTION - Display step details
    // ====================================

    /**
     * Display step details
     */
    protected function showAction(Step $step): Response
    {
        $this->denyAccessUnlessGranted(StepVoter::VIEW, $step);

        return $this->render('step/show.html.twig', [
            'step' => $step,
        ]);
    }

    // ====================================
    // LIFECYCLE HOOKS
    // ====================================
    // Override these in StepController to add custom logic

    /**
     * Initialize new entity before creating form
     *
     * Note: Organization and Owner are set automatically by TenantEntityProcessor
     * Only use this for custom initialization logic
     */
    protected function initializeNewEntity(Step $step): void
    {
        // Organization and Owner are set automatically by TenantEntityProcessor
        // Add your custom initialization here
    }

    /**
     * Execute logic before creating entity
     */
    protected function beforeCreate(Step $step): void
    {
        // Override to add logic before create
    }

    /**
     * Execute logic after creating entity
     */
    protected function afterCreate(Step $step): void
    {
        // Override to add logic after create (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before updating entity
     */
    protected function beforeUpdate(Step $step): void
    {
        // Override to add logic before update
    }

    /**
     * Execute logic after updating entity
     */
    protected function afterUpdate(Step $step): void
    {
        // Override to add logic after update (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before deleting entity
     */
    protected function beforeDelete(Step $step): void
    {
        // Override to add logic before delete (e.g., check dependencies, archive)
    }

    /**
     * Execute logic after deleting entity
     */
    protected function afterDelete(): void
    {
        // Override to add logic after delete (e.g., cleanup, send notification)
    }
}
