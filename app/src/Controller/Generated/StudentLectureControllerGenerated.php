<?php

declare(strict_types=1);

namespace App\Controller\Generated;

use App\Controller\Base\BaseApiController;
use App\Entity\StudentLecture;
use App\Repository\StudentLectureRepository;
use App\Security\Voter\StudentLectureVoter;
use App\Form\StudentLectureFormType;
use App\Service\ListPreferencesService;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Security\Csrf\CsrfToken;
use Symfony\Component\Security\Csrf\CsrfTokenManagerInterface;
use Symfony\Component\Security\Core\Exception\InvalidCsrfTokenException;
use Symfony\Contracts\Translation\TranslatorInterface;

/**
 * Generated Base Controller for StudentLecture
 *
 * ⚠️ WARNING: This file is ALWAYS regenerated by Genmax
 * DO NOT EDIT THIS FILE - Edit StudentLectureController instead
 *
 * @generated
 * @codeCoverageIgnore
 */
abstract class StudentLectureControllerGenerated extends BaseApiController
{
    public function __construct(
        protected readonly EntityManagerInterface $entityManager,
        protected readonly StudentLectureRepository $repository,
        protected readonly ListPreferencesService $listPreferencesService,
        protected readonly TranslatorInterface $translator,
        protected readonly CsrfTokenManagerInterface $csrfTokenManager,
    ) {}

    // ====================================
    // ABSTRACT METHOD IMPLEMENTATIONS
    // ====================================

    /**
     * Get the repository for this entity
     */
    protected function getRepository(): StudentLectureRepository
    {
        return $this->repository;
    }

    /**
     * Get the plural name for this entity
     */
    protected function getEntityPluralName(): string
    {
        return 'studentLectures';
    }

    /**
     * Convert entity to array for API responses
     *
     * ⚠️ IMPORTANT: Enum Properties Stored as Strings
     * -------------------------------------------------
     * Properties with enum-backed types (like InputType) are stored as STRINGS
     * in the database and getters return strings directly, NOT enum objects.
     *
     * ❌ WRONG:   $entity->getType()->value   (Error: "Attempt to read property 'value' on string")
     * ✅ CORRECT: $entity->getType()          (Already a string - 'fully_completed')
     *
     * If you need the enum object for business logic, use:
     *    InputType::from($entity->getType())
     */
    protected function entityToArray(object $entity): array
    {
        if (!$entity instanceof StudentLecture) {
            throw new \InvalidArgumentException('Expected StudentLecture instance');
        }

        return [
            'id' => $entity->getId()->toString(),
            'student' => ($studentRel = $entity->getStudent()) ? [
                'id' => $studentRel->getId()->toString(),
                'display' => (string) $studentRel,
            ] : null,
            'lecture' => ($lectureRel = $entity->getLecture()) ? [
                'id' => $lectureRel->getId()->toString(),
                'display' => (string) $lectureRel,
            ] : null,
            'studentCourse' => ($studentCourseRel = $entity->getStudentCourse()) ? [
                'id' => $studentCourseRel->getId()->toString(),
                'display' => (string) $studentCourseRel,
            ] : null,
            'watchedSeconds' => $entity->getWatchedSeconds(),
            'lastPositionSeconds' => $entity->getLastPositionSeconds(),
            'completionPercentage' => $entity->getCompletionPercentage(),
            'completed' => $entity->getCompleted(),
            'lastWatchedAt' => $entity->getLastWatchedAt()?->format('M d, Y'),
            'completedAt' => $entity->getCompletedAt()?->format('M d, Y'),
        ];
    }

    // ====================================
    // INDEX ACTION - List all StudentLectures
    // ====================================

    /**
     * List StudentLectures
     */
    protected function indexAction(): Response
    {
        $this->denyAccessUnlessGranted(StudentLectureVoter::LIST);

        $preferences = $this->listPreferencesService->getEntityPreferences('studentLectures');
        $savedView = $preferences['view'] ?? 'grid';

        return $this->render('studentlecture/index.html.twig', [
            'entities' => [],  // Loaded via API
            'entity_name' => 'studentLecture',
            'entity_name_plural' => 'studentLectures',
            'page_icon' => 'bi-play-btn',
            'default_view' => $savedView,

            // List configuration from GeneratorProperty
            'enable_search' => true,
            'enable_filters' => true,
            'enable_sorting' => true,
            'enable_create_button' => true,

            // Property metadata for client-side rendering (as JSON strings)
            'list_fields' => '[{"name":"student","label":"Student","type":"string","sortable":true,"searchable":true,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getStudent"},{"name":"lecture","label":"Lecture","type":"string","sortable":true,"searchable":true,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getLecture"},{"name":"completionPercentage","label":"CompletionPercentage","type":"decimal","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCompletionPercentage"},{"name":"completed","label":"Completed","type":"boolean","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCompleted"}]',
            'searchable_fields' => '[{"name":"student","label":"Student","type":"string"},{"name":"lecture","label":"Lecture","type":"string"},{"name":"studentCourse","label":"StudentCourse","type":"string"}]',
            'filterable_fields' => '[{"name":"student","label":"Student","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"lecture","label":"Lecture","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"studentCourse","label":"StudentCourse","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"watchedSeconds","label":"WatchedSeconds","type":"integer","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"lastPositionSeconds","label":"LastPositionSeconds","type":"integer","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"completionPercentage","label":"CompletionPercentage","type":"decimal","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"completed","label":"Completed","type":"boolean","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"lastWatchedAt","label":"LastWatchedAt","type":"datetime_immutable","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"completedAt","label":"CompletedAt","type":"datetime_immutable","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false}]',
            'sortable_fields' => '[{"name":"student","label":"Student"},{"name":"lecture","label":"Lecture"},{"name":"studentCourse","label":"StudentCourse"},{"name":"watchedSeconds","label":"WatchedSeconds"},{"name":"lastPositionSeconds","label":"LastPositionSeconds"},{"name":"completionPercentage","label":"CompletionPercentage"},{"name":"completed","label":"Completed"},{"name":"lastWatchedAt","label":"LastWatchedAt"},{"name":"completedAt","label":"CompletedAt"}]',
        ]);
    }

    // ====================================
    // API SEARCH - Fetch StudentLectures for list view
    // ====================================

    /**
     * API endpoint for searching StudentLectures
     */
    protected function apiSearchAction(Request $request): JsonResponse
    {
        $this->denyAccessUnlessGranted(StudentLectureVoter::LIST);

        // This method uses the BaseApiController's handleSearchRequest
        // which integrates with API Platform's GetCollection operation
        return $this->handleSearchRequest($request);
    }

    // ====================================
    // NEW FORM ACTION - Display create form
    // ====================================

    /**
     * Display new studentLecture form
     */
    protected function newFormAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(StudentLectureVoter::CREATE);

        $studentLecture = new StudentLecture();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($studentLecture);

        $form = $this->createForm(StudentLectureFormType::class, $studentLecture);

        return $this->render('studentlecture/_form_modal.html.twig', [
            'form' => $form,
            'studentLecture' => $studentLecture,
            'is_edit' => false,
        ]);
    }

    // ====================================
    // CREATE ACTION - Process create form submission
    // ====================================

    /**
     * Process new studentLecture form submission
     */
    protected function createAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(StudentLectureVoter::CREATE);

        $studentLecture = new StudentLecture();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($studentLecture);

        $form = $this->createForm(StudentLectureFormType::class, $studentLecture);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before create hook
                $this->beforeCreate($studentLecture);

                $this->entityManager->persist($studentLecture);
                $this->entityManager->flush();

                // After create hook
                $this->afterCreate($studentLecture);

                $this->addFlash('success', $this->translator->trans(
                    'studentlecture.flash.created_successfully',
                    ['%name%' => (string) $studentLecture],
                    'studentlecture'
                ));

                return $this->redirectToRoute('studentlecture_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'studentlecture.flash.create_failed',
                    ['%error%' => $e->getMessage()],
                    'studentlecture'
                ));
            }
        }

        // Re-render with errors
        return $this->render('studentlecture/_form_modal.html.twig', [
            'form' => $form,
            'studentLecture' => $studentLecture,
            'is_edit' => false,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // EDIT FORM ACTION - Display edit form
    // ====================================

    /**
     * Display edit studentLecture form
     */
    protected function editFormAction(StudentLecture $studentLecture, Request $request): Response
    {
        $this->denyAccessUnlessGranted(StudentLectureVoter::EDIT, $studentLecture);

        $form = $this->createForm(StudentLectureFormType::class, $studentLecture);

        return $this->render('studentlecture/_form_modal.html.twig', [
            'form' => $form,
            'studentLecture' => $studentLecture,
            'is_edit' => true,
        ]);
    }

    // ====================================
    // UPDATE ACTION - Process edit form submission
    // ====================================

    /**
     * Process edit studentLecture form submission
     */
    protected function updateAction(StudentLecture $studentLecture, Request $request): Response
    {
        $this->denyAccessUnlessGranted(StudentLectureVoter::EDIT, $studentLecture);

        $form = $this->createForm(StudentLectureFormType::class, $studentLecture);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before update hook
                $this->beforeUpdate($studentLecture);

                $this->entityManager->flush();

                // After update hook
                $this->afterUpdate($studentLecture);

                $this->addFlash('success', $this->translator->trans(
                    'studentlecture.flash.updated_successfully',
                    ['%name%' => (string) $studentLecture],
                    'studentlecture'
                ));

                return $this->redirectToRoute('studentlecture_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'studentlecture.flash.update_failed',
                    ['%error%' => $e->getMessage()],
                    'studentlecture'
                ));
            }
        }

        // Re-render with errors
        return $this->render('studentlecture/_form_modal.html.twig', [
            'form' => $form,
            'studentLecture' => $studentLecture,
            'is_edit' => true,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // DELETE ACTION - Delete studentLecture
    // ====================================

    /**
     * Delete studentLecture
     */
    protected function deleteAction(StudentLecture $studentLecture, Request $request): Response
    {
        $this->denyAccessUnlessGranted(StudentLectureVoter::DELETE, $studentLecture);

        // Verify CSRF token
        $token = $request->request->get('_token');
        if (!$this->csrfTokenManager->isTokenValid(new CsrfToken('delete_studentLecture_' . $studentLecture->getId()->toString(), $token))) {
            throw new InvalidCsrfTokenException('Invalid CSRF token for delete operation.');
        }

        try {
            // Before delete hook
            $this->beforeDelete($studentLecture);

            $name = (string) $studentLecture;

            $this->entityManager->remove($studentLecture);
            $this->entityManager->flush();

            // After delete hook
            $this->afterDelete();

            $this->addFlash('success', $this->translator->trans(
                'studentlecture.flash.deleted_successfully',
                ['%name%' => $name],
                'studentlecture'
            ));

        } catch (\Exception $e) {
            $this->addFlash('error', $this->translator->trans(
                'studentlecture.flash.delete_failed',
                ['%error%' => $e->getMessage()],
                'studentlecture'
            ));
        }

        return $this->redirectToRoute('studentlecture_index', [], Response::HTTP_SEE_OTHER);
    }

    // ====================================
    // SHOW ACTION - Display studentLecture details
    // ====================================

    /**
     * Display studentLecture details
     */
    protected function showAction(StudentLecture $studentLecture): Response
    {
        $this->denyAccessUnlessGranted(StudentLectureVoter::VIEW, $studentLecture);

        return $this->render('studentlecture/show.html.twig', [
            'studentLecture' => $studentLecture,
        ]);
    }

    // ====================================
    // LIFECYCLE HOOKS
    // ====================================
    // Override these in StudentLectureController to add custom logic

    /**
     * Initialize new entity before creating form
     *
     * Note: Organization and Owner are set automatically by TenantEntityProcessor
     * Only use this for custom initialization logic
     */
    protected function initializeNewEntity(StudentLecture $studentLecture): void
    {
        // Organization and Owner are set automatically by TenantEntityProcessor
        // Add your custom initialization here
    }

    /**
     * Execute logic before creating entity
     */
    protected function beforeCreate(StudentLecture $studentLecture): void
    {
        // Override to add logic before create
    }

    /**
     * Execute logic after creating entity
     */
    protected function afterCreate(StudentLecture $studentLecture): void
    {
        // Override to add logic after create (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before updating entity
     */
    protected function beforeUpdate(StudentLecture $studentLecture): void
    {
        // Override to add logic before update
    }

    /**
     * Execute logic after updating entity
     */
    protected function afterUpdate(StudentLecture $studentLecture): void
    {
        // Override to add logic after update (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before deleting entity
     */
    protected function beforeDelete(StudentLecture $studentLecture): void
    {
        // Override to add logic before delete (e.g., check dependencies, archive)
    }

    /**
     * Execute logic after deleting entity
     */
    protected function afterDelete(): void
    {
        // Override to add logic after delete (e.g., cleanup, send notification)
    }
}
