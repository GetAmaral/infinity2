<?php

declare(strict_types=1);

namespace App\Controller\Generated;

use App\Controller\Base\BaseApiController;
use App\Entity\EventResourceBooking;
use App\Repository\EventResourceBookingRepository;
use App\Security\Voter\EventResourceBookingVoter;
use App\Form\EventResourceBookingFormType;
use App\Service\ListPreferencesService;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Security\Csrf\CsrfToken;
use Symfony\Component\Security\Csrf\CsrfTokenManagerInterface;
use Symfony\Component\Security\Core\Exception\InvalidCsrfTokenException;
use Symfony\Contracts\Translation\TranslatorInterface;

/**
 * Generated Base Controller for EventResourceBooking
 *
 * ⚠️ WARNING: This file is ALWAYS regenerated by Genmax
 * DO NOT EDIT THIS FILE - Edit EventResourceBookingController instead
 *
 * @generated
 * @codeCoverageIgnore
 */
abstract class EventResourceBookingControllerGenerated extends BaseApiController
{
    public function __construct(
        protected readonly EntityManagerInterface $entityManager,
        protected readonly EventResourceBookingRepository $repository,
        protected readonly ListPreferencesService $listPreferencesService,
        protected readonly TranslatorInterface $translator,
        protected readonly CsrfTokenManagerInterface $csrfTokenManager,
    ) {}

    // ====================================
    // ABSTRACT METHOD IMPLEMENTATIONS
    // ====================================

    /**
     * Get the repository for this entity
     */
    protected function getRepository(): EventResourceBookingRepository
    {
        return $this->repository;
    }

    /**
     * Get the plural name for this entity
     */
    protected function getEntityPluralName(): string
    {
        return 'eventResourceBookings';
    }

    /**
     * Convert entity to array for API responses
     */
    protected function entityToArray(object $entity): array
    {
        if (!$entity instanceof EventResourceBooking) {
            throw new \InvalidArgumentException('Expected EventResourceBooking instance');
        }

        return [
            'id' => $entity->getId()->toString(),
            'organization' => ($organizationRel = $entity->getOrganization()) ? [
                'id' => $organizationRel->getId()->toString(),
                'display' => (string) $organizationRel,
            ] : null,
            'startTime' => $entity->getStartTime()?->format('M d, Y'),
            'bookedBy' => ($bookedByRel = $entity->getBookedBy()) ? [
                'id' => $bookedByRel->getId()->toString(),
                'display' => (string) $bookedByRel,
            ] : null,
            'endTime' => $entity->getEndTime()?->format('M d, Y'),
            'confirmed' => $entity->getConfirmed(),
            'cancelled' => $entity->getCancelled(),
            'paid' => $entity->getPaid(),
            'depositAmount' => $entity->getDepositAmount(),
            'totalAmount' => $entity->getTotalAmount(),
            'confirmedAt' => $entity->getConfirmedAt()?->format('M d, Y'),
            'cancelledAt' => $entity->getCancelledAt()?->format('M d, Y'),
            'cancellationReason' => $entity->getCancellationReason(),
            'event' => ($eventRel = $entity->getEvent()) ? [
                'id' => $eventRel->getId()->toString(),
                'display' => (string) $eventRel,
            ] : null,
            'reminderSent' => $entity->getReminderSent(),
            'notes' => $entity->getNotes(),
            'quantity' => $entity->getQuantity(),
            'resource' => ($resourceRel = $entity->getResource()) ? [
                'id' => $resourceRel->getId()->toString(),
                'display' => (string) $resourceRel,
            ] : null,
            'status' => $entity->getStatus(),
        ];
    }

    // ====================================
    // INDEX ACTION - List all EventResourceBookings
    // ====================================

    /**
     * List EventResourceBookings
     */
    protected function indexAction(): Response
    {
        $this->denyAccessUnlessGranted(EventResourceBookingVoter::LIST);

        $preferences = $this->listPreferencesService->getEntityPreferences('eventResourceBookings');
        $savedView = $preferences['view'] ?? 'grid';

        return $this->render('eventresourcebooking/index.html.twig', [
            'entities' => [],  // Loaded via API
            'entity_name' => 'eventResourceBooking',
            'entity_name_plural' => 'eventResourceBookings',
            'page_icon' => 'bi-calendar-check',
            'default_view' => $savedView,

            // List configuration from GeneratorProperty
            'enable_search' => true,
            'enable_filters' => true,
            'enable_sorting' => true,
            'enable_create_button' => true,

            // Property metadata for client-side rendering (as JSON strings)
            'list_fields' => '[{"name":"startTime","label":"Start Time","type":"datetime","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getStartTime"},{"name":"bookedBy","label":"Booked By","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getBookedBy"},{"name":"endTime","label":"End Time","type":"datetime","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getEndTime"},{"name":"confirmed","label":"Confirmed","type":"boolean","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getConfirmed"},{"name":"cancelled","label":"Cancelled","type":"boolean","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCancelled"},{"name":"paid","label":"Paid","type":"boolean","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getPaid"},{"name":"depositAmount","label":"Deposit Amount","type":"decimal","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDepositAmount"},{"name":"totalAmount","label":"Total Amount","type":"decimal","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getTotalAmount"},{"name":"confirmedAt","label":"Confirmed At","type":"datetime","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getConfirmedAt"},{"name":"cancelledAt","label":"Cancelled At","type":"datetime","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCancelledAt"},{"name":"event","label":"Event","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getEvent"},{"name":"notes","label":"Notes","type":"text","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getNotes"},{"name":"quantity","label":"Quantity","type":"integer","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getQuantity"},{"name":"resource","label":"Resource","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getResource"},{"name":"status","label":"Status","type":"string","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getStatus"}]',
            'searchable_fields' => '[{"name":"cancellationReason","label":"Cancellation Reason","type":"text"},{"name":"notes","label":"Notes","type":"text"}]',
            'filterable_fields' => '[{"name":"startTime","label":"Start Time","type":"datetime","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"endTime","label":"End Time","type":"datetime","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"confirmed","label":"Confirmed","type":"boolean","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"cancelled","label":"Cancelled","type":"boolean","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"paid","label":"Paid","type":"boolean","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"depositAmount","label":"Deposit Amount","type":"decimal","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"totalAmount","label":"Total Amount","type":"decimal","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"confirmedAt","label":"Confirmed At","type":"datetime","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"cancelledAt","label":"Cancelled At","type":"datetime","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"reminderSent","label":"Reminder Sent","type":"boolean","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false}]',
            'sortable_fields' => '[{"name":"startTime","label":"Start Time"},{"name":"bookedBy","label":"Booked By"},{"name":"endTime","label":"End Time"},{"name":"confirmed","label":"Confirmed"},{"name":"cancelled","label":"Cancelled"},{"name":"paid","label":"Paid"},{"name":"depositAmount","label":"Deposit Amount"},{"name":"totalAmount","label":"Total Amount"},{"name":"confirmedAt","label":"Confirmed At"},{"name":"cancelledAt","label":"Cancelled At"},{"name":"event","label":"Event"},{"name":"reminderSent","label":"Reminder Sent"},{"name":"notes","label":"Notes"},{"name":"quantity","label":"Quantity"},{"name":"resource","label":"Resource"},{"name":"status","label":"Status"}]',
        ]);
    }

    // ====================================
    // API SEARCH - Fetch EventResourceBookings for list view
    // ====================================

    /**
     * API endpoint for searching EventResourceBookings
     */
    protected function apiSearchAction(Request $request): JsonResponse
    {
        $this->denyAccessUnlessGranted(EventResourceBookingVoter::LIST);

        // This method uses the BaseApiController's handleSearchRequest
        // which integrates with API Platform's GetCollection operation
        return $this->handleSearchRequest($request);
    }

    // ====================================
    // NEW FORM ACTION - Display create form
    // ====================================

    /**
     * Display new eventResourceBooking form
     */
    protected function newFormAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(EventResourceBookingVoter::CREATE);

        $eventResourceBooking = new EventResourceBooking();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($eventResourceBooking);

        $form = $this->createForm(EventResourceBookingFormType::class, $eventResourceBooking);

        return $this->render('eventresourcebooking/_form_modal.html.twig', [
            'form' => $form,
            'eventResourceBooking' => $eventResourceBooking,
            'is_edit' => false,
        ]);
    }

    // ====================================
    // CREATE ACTION - Process create form submission
    // ====================================

    /**
     * Process new eventResourceBooking form submission
     */
    protected function createAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(EventResourceBookingVoter::CREATE);

        $eventResourceBooking = new EventResourceBooking();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($eventResourceBooking);

        $form = $this->createForm(EventResourceBookingFormType::class, $eventResourceBooking);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before create hook
                $this->beforeCreate($eventResourceBooking);

                $this->entityManager->persist($eventResourceBooking);
                $this->entityManager->flush();

                // After create hook
                $this->afterCreate($eventResourceBooking);

                $this->addFlash('success', $this->translator->trans(
                    'eventresourcebooking.flash.created_successfully',
                    ['%name%' => (string) $eventResourceBooking],
                    'eventresourcebooking'
                ));

                return $this->redirectToRoute('eventresourcebooking_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'eventresourcebooking.flash.create_failed',
                    ['%error%' => $e->getMessage()],
                    'eventresourcebooking'
                ));
            }
        }

        // Re-render with errors
        return $this->render('eventresourcebooking/_form_modal.html.twig', [
            'form' => $form,
            'eventResourceBooking' => $eventResourceBooking,
            'is_edit' => false,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // EDIT FORM ACTION - Display edit form
    // ====================================

    /**
     * Display edit eventResourceBooking form
     */
    protected function editFormAction(EventResourceBooking $eventResourceBooking, Request $request): Response
    {
        $this->denyAccessUnlessGranted(EventResourceBookingVoter::EDIT, $eventResourceBooking);

        $form = $this->createForm(EventResourceBookingFormType::class, $eventResourceBooking);

        return $this->render('eventresourcebooking/_form_modal.html.twig', [
            'form' => $form,
            'eventResourceBooking' => $eventResourceBooking,
            'is_edit' => true,
        ]);
    }

    // ====================================
    // UPDATE ACTION - Process edit form submission
    // ====================================

    /**
     * Process edit eventResourceBooking form submission
     */
    protected function updateAction(EventResourceBooking $eventResourceBooking, Request $request): Response
    {
        $this->denyAccessUnlessGranted(EventResourceBookingVoter::EDIT, $eventResourceBooking);

        $form = $this->createForm(EventResourceBookingFormType::class, $eventResourceBooking);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before update hook
                $this->beforeUpdate($eventResourceBooking);

                $this->entityManager->flush();

                // After update hook
                $this->afterUpdate($eventResourceBooking);

                $this->addFlash('success', $this->translator->trans(
                    'eventresourcebooking.flash.updated_successfully',
                    ['%name%' => (string) $eventResourceBooking],
                    'eventresourcebooking'
                ));

                return $this->redirectToRoute('eventresourcebooking_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'eventresourcebooking.flash.update_failed',
                    ['%error%' => $e->getMessage()],
                    'eventresourcebooking'
                ));
            }
        }

        // Re-render with errors
        return $this->render('eventresourcebooking/_form_modal.html.twig', [
            'form' => $form,
            'eventResourceBooking' => $eventResourceBooking,
            'is_edit' => true,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // DELETE ACTION - Delete eventResourceBooking
    // ====================================

    /**
     * Delete eventResourceBooking
     */
    protected function deleteAction(EventResourceBooking $eventResourceBooking, Request $request): Response
    {
        $this->denyAccessUnlessGranted(EventResourceBookingVoter::DELETE, $eventResourceBooking);

        // Verify CSRF token
        $token = $request->request->get('_token');
        if (!$this->csrfTokenManager->isTokenValid(new CsrfToken('delete_eventResourceBooking_' . $eventResourceBooking->getId()->toString(), $token))) {
            throw new InvalidCsrfTokenException('Invalid CSRF token for delete operation.');
        }

        try {
            // Before delete hook
            $this->beforeDelete($eventResourceBooking);

            $name = (string) $eventResourceBooking;

            $this->entityManager->remove($eventResourceBooking);
            $this->entityManager->flush();

            // After delete hook
            $this->afterDelete();

            $this->addFlash('success', $this->translator->trans(
                'eventresourcebooking.flash.deleted_successfully',
                ['%name%' => $name],
                'eventresourcebooking'
            ));

        } catch (\Exception $e) {
            $this->addFlash('error', $this->translator->trans(
                'eventresourcebooking.flash.delete_failed',
                ['%error%' => $e->getMessage()],
                'eventresourcebooking'
            ));
        }

        return $this->redirectToRoute('eventresourcebooking_index', [], Response::HTTP_SEE_OTHER);
    }

    // ====================================
    // SHOW ACTION - Display eventResourceBooking details
    // ====================================

    /**
     * Display eventResourceBooking details
     */
    protected function showAction(EventResourceBooking $eventResourceBooking): Response
    {
        $this->denyAccessUnlessGranted(EventResourceBookingVoter::VIEW, $eventResourceBooking);

        return $this->render('eventresourcebooking/show.html.twig', [
            'eventResourceBooking' => $eventResourceBooking,
        ]);
    }

    // ====================================
    // LIFECYCLE HOOKS
    // ====================================
    // Override these in EventResourceBookingController to add custom logic

    /**
     * Initialize new entity before creating form
     *
     * Note: Organization and Owner are set automatically by TenantEntityProcessor
     * Only use this for custom initialization logic
     */
    protected function initializeNewEntity(EventResourceBooking $eventResourceBooking): void
    {
        // Organization and Owner are set automatically by TenantEntityProcessor
        // Add your custom initialization here
    }

    /**
     * Execute logic before creating entity
     */
    protected function beforeCreate(EventResourceBooking $eventResourceBooking): void
    {
        // Override to add logic before create
    }

    /**
     * Execute logic after creating entity
     */
    protected function afterCreate(EventResourceBooking $eventResourceBooking): void
    {
        // Override to add logic after create (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before updating entity
     */
    protected function beforeUpdate(EventResourceBooking $eventResourceBooking): void
    {
        // Override to add logic before update
    }

    /**
     * Execute logic after updating entity
     */
    protected function afterUpdate(EventResourceBooking $eventResourceBooking): void
    {
        // Override to add logic after update (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before deleting entity
     */
    protected function beforeDelete(EventResourceBooking $eventResourceBooking): void
    {
        // Override to add logic before delete (e.g., check dependencies, archive)
    }

    /**
     * Execute logic after deleting entity
     */
    protected function afterDelete(): void
    {
        // Override to add logic after delete (e.g., cleanup, send notification)
    }
}
