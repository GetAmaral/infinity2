<?php

declare(strict_types=1);

namespace App\Controller\Generated;

use App\Controller\Base\BaseApiController;
use App\Entity\Brand;
use App\Repository\BrandRepository;
use App\Security\Voter\BrandVoter;
use App\Form\BrandFormType;
use App\Service\ListPreferencesService;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Security\Csrf\CsrfToken;
use Symfony\Component\Security\Csrf\CsrfTokenManagerInterface;
use Symfony\Component\Security\Core\Exception\InvalidCsrfTokenException;
use Symfony\Contracts\Translation\TranslatorInterface;

/**
 * Generated Base Controller for Brand
 *
 * ⚠️ WARNING: This file is ALWAYS regenerated by Genmax
 * DO NOT EDIT THIS FILE - Edit BrandController instead
 *
 * @generated
 * @codeCoverageIgnore
 */
abstract class BrandControllerGenerated extends BaseApiController
{
    public function __construct(
        protected readonly EntityManagerInterface $entityManager,
        protected readonly BrandRepository $repository,
        protected readonly ListPreferencesService $listPreferencesService,
        protected readonly TranslatorInterface $translator,
        protected readonly CsrfTokenManagerInterface $csrfTokenManager,
    ) {}

    // ====================================
    // ABSTRACT METHOD IMPLEMENTATIONS
    // ====================================

    /**
     * Get the repository for this entity
     */
    protected function getRepository(): BrandRepository
    {
        return $this->repository;
    }

    /**
     * Get the plural name for this entity
     */
    protected function getEntityPluralName(): string
    {
        return 'brands';
    }

    /**
     * Convert entity to array for API responses
     */
    protected function entityToArray(object $entity): array
    {
        if (!$entity instanceof Brand) {
            throw new \InvalidArgumentException('Expected Brand instance');
        }

        return [
            'id' => $entity->getId()->toString(),
            'organization' => ($organizationRel = $entity->getOrganization()) ? [
                'id' => $organizationRel->getId()->toString(),
                'display' => (string) $organizationRel,
            ] : null,
            'name' => $entity->getName(),
            'description' => $entity->getDescription(),
            'tagline' => $entity->getTagline(),
            'logoUrl' => $entity->getLogoUrl(),
            'primaryColor' => $entity->getPrimaryColor(),
            'industry' => $entity->getIndustry(),
            'positioning' => $entity->getPositioning(),
            'targetMarket' => $entity->getTargetMarket(),
            'marketShare' => $entity->getMarketShare(),
            'brandValue' => $entity->getBrandValue(),
            'countryOfOrigin' => $entity->getCountryOfOrigin(),
            'foundedYear' => $entity->getFoundedYear(),
            'website' => $entity->getWebsite(),
            'active' => $entity->getActive(),
            'products' => ($productsRel = $entity->getProducts()) ? [
                'id' => $productsRel->getId()->toString(),
                'display' => (string) $productsRel,
            ] : null,
            'manufacturers' => ($manufacturersRel = $entity->getManufacturers()) ? [
                'id' => $manufacturersRel->getId()->toString(),
                'display' => (string) $manufacturersRel,
            ] : null,
            'suppliers' => ($suppliersRel = $entity->getSuppliers()) ? [
                'id' => $suppliersRel->getId()->toString(),
                'display' => (string) $suppliersRel,
            ] : null,
        ];
    }

    // ====================================
    // INDEX ACTION - List all Brands
    // ====================================

    /**
     * List Brands
     */
    protected function indexAction(): Response
    {
        $this->denyAccessUnlessGranted(BrandVoter::LIST);

        $preferences = $this->listPreferencesService->getEntityPreferences('brands');
        $savedView = $preferences['view'] ?? 'grid';

        return $this->render('brand/index.html.twig', [
            'entities' => [],  // Loaded via API
            'entity_name' => 'brand',
            'entity_name_plural' => 'brands',
            'page_icon' => 'bi-award',
            'default_view' => $savedView,

            // List configuration from GeneratorProperty
            'enable_search' => true,
            'enable_filters' => true,
            'enable_sorting' => true,
            'enable_create_button' => true,

            // Property metadata for client-side rendering (as JSON strings)
            'list_fields' => '[{"name":"name","label":"Name","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getName"},{"name":"description","label":"Description","type":"text","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDescription"},{"name":"logoUrl","label":"LogoUrl","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getLogoUrl"},{"name":"industry","label":"Industry","type":"string","sortable":true,"searchable":true,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getIndustry"},{"name":"marketShare","label":"Market Share","type":"decimal","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getMarketShare"},{"name":"brandValue","label":"Brand Value","type":"decimal","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getBrandValue"},{"name":"countryOfOrigin","label":"Country of Origin","type":"string","sortable":true,"searchable":true,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCountryOfOrigin"},{"name":"foundedYear","label":"Founded Year","type":"integer","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getFoundedYear"},{"name":"website","label":"Website","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getWebsite"},{"name":"active","label":"Active","type":"boolean","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getActive"},{"name":"products","label":"Products","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getProducts"},{"name":"manufacturers","label":"Manufacturers","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getManufacturers"},{"name":"suppliers","label":"Suppliers","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getSuppliers"}]',
            'searchable_fields' => '[{"name":"name","label":"Name","type":"string"},{"name":"description","label":"Description","type":"text"},{"name":"tagline","label":"Tagline","type":"string"},{"name":"logoUrl","label":"LogoUrl","type":"string"},{"name":"industry","label":"Industry","type":"string"},{"name":"positioning","label":"Brand Positioning","type":"text"},{"name":"targetMarket","label":"Target Market","type":"text"},{"name":"countryOfOrigin","label":"Country of Origin","type":"string"},{"name":"website","label":"Website","type":"string"}]',
            'filterable_fields' => '[{"name":"industry","label":"Industry","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"countryOfOrigin","label":"Country of Origin","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"active","label":"Active","type":"boolean","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false}]',
            'sortable_fields' => '[{"name":"name","label":"Name"},{"name":"description","label":"Description"},{"name":"logoUrl","label":"LogoUrl"},{"name":"industry","label":"Industry"},{"name":"marketShare","label":"Market Share"},{"name":"brandValue","label":"Brand Value"},{"name":"countryOfOrigin","label":"Country of Origin"},{"name":"foundedYear","label":"Founded Year"},{"name":"website","label":"Website"},{"name":"active","label":"Active"},{"name":"products","label":"Products"},{"name":"manufacturers","label":"Manufacturers"},{"name":"suppliers","label":"Suppliers"}]',
        ]);
    }

    // ====================================
    // API SEARCH - Fetch Brands for list view
    // ====================================

    /**
     * API endpoint for searching Brands
     */
    protected function apiSearchAction(Request $request): JsonResponse
    {
        $this->denyAccessUnlessGranted(BrandVoter::LIST);

        // This method uses the BaseApiController's handleSearchRequest
        // which integrates with API Platform's GetCollection operation
        return $this->handleSearchRequest($request);
    }

    // ====================================
    // NEW FORM ACTION - Display create form
    // ====================================

    /**
     * Display new brand form
     */
    protected function newFormAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(BrandVoter::CREATE);

        $brand = new Brand();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($brand);

        $form = $this->createForm(BrandFormType::class, $brand);

        return $this->render('brand/_form_modal.html.twig', [
            'form' => $form,
            'brand' => $brand,
            'is_edit' => false,
        ]);
    }

    // ====================================
    // CREATE ACTION - Process create form submission
    // ====================================

    /**
     * Process new brand form submission
     */
    protected function createAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(BrandVoter::CREATE);

        $brand = new Brand();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($brand);

        $form = $this->createForm(BrandFormType::class, $brand);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before create hook
                $this->beforeCreate($brand);

                $this->entityManager->persist($brand);
                $this->entityManager->flush();

                // After create hook
                $this->afterCreate($brand);

                $this->addFlash('success', $this->translator->trans(
                    'brand.flash.created_successfully',
                    ['%name%' => (string) $brand],
                    'brand'
                ));

                return $this->redirectToRoute('brand_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'brand.flash.create_failed',
                    ['%error%' => $e->getMessage()],
                    'brand'
                ));
            }
        }

        // Re-render with errors
        return $this->render('brand/_form_modal.html.twig', [
            'form' => $form,
            'brand' => $brand,
            'is_edit' => false,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // EDIT FORM ACTION - Display edit form
    // ====================================

    /**
     * Display edit brand form
     */
    protected function editFormAction(Brand $brand, Request $request): Response
    {
        $this->denyAccessUnlessGranted(BrandVoter::EDIT, $brand);

        $form = $this->createForm(BrandFormType::class, $brand);

        return $this->render('brand/_form_modal.html.twig', [
            'form' => $form,
            'brand' => $brand,
            'is_edit' => true,
        ]);
    }

    // ====================================
    // UPDATE ACTION - Process edit form submission
    // ====================================

    /**
     * Process edit brand form submission
     */
    protected function updateAction(Brand $brand, Request $request): Response
    {
        $this->denyAccessUnlessGranted(BrandVoter::EDIT, $brand);

        $form = $this->createForm(BrandFormType::class, $brand);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before update hook
                $this->beforeUpdate($brand);

                $this->entityManager->flush();

                // After update hook
                $this->afterUpdate($brand);

                $this->addFlash('success', $this->translator->trans(
                    'brand.flash.updated_successfully',
                    ['%name%' => (string) $brand],
                    'brand'
                ));

                return $this->redirectToRoute('brand_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'brand.flash.update_failed',
                    ['%error%' => $e->getMessage()],
                    'brand'
                ));
            }
        }

        // Re-render with errors
        return $this->render('brand/_form_modal.html.twig', [
            'form' => $form,
            'brand' => $brand,
            'is_edit' => true,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // DELETE ACTION - Delete brand
    // ====================================

    /**
     * Delete brand
     */
    protected function deleteAction(Brand $brand, Request $request): Response
    {
        $this->denyAccessUnlessGranted(BrandVoter::DELETE, $brand);

        // Verify CSRF token
        $token = $request->request->get('_token');
        if (!$this->csrfTokenManager->isTokenValid(new CsrfToken('delete_brand_' . $brand->getId()->toString(), $token))) {
            throw new InvalidCsrfTokenException('Invalid CSRF token for delete operation.');
        }

        try {
            // Before delete hook
            $this->beforeDelete($brand);

            $name = (string) $brand;

            $this->entityManager->remove($brand);
            $this->entityManager->flush();

            // After delete hook
            $this->afterDelete();

            $this->addFlash('success', $this->translator->trans(
                'brand.flash.deleted_successfully',
                ['%name%' => $name],
                'brand'
            ));

        } catch (\Exception $e) {
            $this->addFlash('error', $this->translator->trans(
                'brand.flash.delete_failed',
                ['%error%' => $e->getMessage()],
                'brand'
            ));
        }

        return $this->redirectToRoute('brand_index', [], Response::HTTP_SEE_OTHER);
    }

    // ====================================
    // SHOW ACTION - Display brand details
    // ====================================

    /**
     * Display brand details
     */
    protected function showAction(Brand $brand): Response
    {
        $this->denyAccessUnlessGranted(BrandVoter::VIEW, $brand);

        return $this->render('brand/show.html.twig', [
            'brand' => $brand,
        ]);
    }

    // ====================================
    // LIFECYCLE HOOKS
    // ====================================
    // Override these in BrandController to add custom logic

    /**
     * Initialize new entity before creating form
     *
     * Note: Organization and Owner are set automatically by TenantEntityProcessor
     * Only use this for custom initialization logic
     */
    protected function initializeNewEntity(Brand $brand): void
    {
        // Organization and Owner are set automatically by TenantEntityProcessor
        // Add your custom initialization here
    }

    /**
     * Execute logic before creating entity
     */
    protected function beforeCreate(Brand $brand): void
    {
        // Override to add logic before create
    }

    /**
     * Execute logic after creating entity
     */
    protected function afterCreate(Brand $brand): void
    {
        // Override to add logic after create (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before updating entity
     */
    protected function beforeUpdate(Brand $brand): void
    {
        // Override to add logic before update
    }

    /**
     * Execute logic after updating entity
     */
    protected function afterUpdate(Brand $brand): void
    {
        // Override to add logic after update (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before deleting entity
     */
    protected function beforeDelete(Brand $brand): void
    {
        // Override to add logic before delete (e.g., check dependencies, archive)
    }

    /**
     * Execute logic after deleting entity
     */
    protected function afterDelete(): void
    {
        // Override to add logic after delete (e.g., cleanup, send notification)
    }
}
