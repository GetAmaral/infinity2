<?php

declare(strict_types=1);

namespace App\Controller\Generated;

use App\Controller\Base\BaseApiController;
use App\Entity\User;
use App\Repository\UserRepository;
use App\Security\Voter\UserVoter;
use App\Form\UserFormType;
use App\Service\ListPreferencesService;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Security\Csrf\CsrfToken;
use Symfony\Component\Security\Csrf\CsrfTokenManagerInterface;
use Symfony\Component\Security\Core\Exception\InvalidCsrfTokenException;
use Symfony\Contracts\Translation\TranslatorInterface;

/**
 * Generated Base Controller for User
 *
 * ⚠️ WARNING: This file is ALWAYS regenerated by Genmax
 * DO NOT EDIT THIS FILE - Edit UserController instead
 *
 * @generated
 * @codeCoverageIgnore
 */
abstract class UserControllerGenerated extends BaseApiController
{
    public function __construct(
        protected readonly EntityManagerInterface $entityManager,
        protected readonly UserRepository $repository,
        protected readonly ListPreferencesService $listPreferencesService,
        protected readonly TranslatorInterface $translator,
        protected readonly CsrfTokenManagerInterface $csrfTokenManager,
    ) {}

    // ====================================
    // ABSTRACT METHOD IMPLEMENTATIONS
    // ====================================

    /**
     * Get the repository for this entity
     */
    protected function getRepository(): UserRepository
    {
        return $this->repository;
    }

    /**
     * Get the plural name for this entity
     */
    protected function getEntityPluralName(): string
    {
        return 'users';
    }

    /**
     * Convert entity to array for API responses
     */
    protected function entityToArray(object $entity): array
    {
        if (!$entity instanceof User) {
            throw new \InvalidArgumentException('Expected User instance');
        }

        return [
            'id' => $entity->getId()->toString(),
            'organization' => ($organizationRel = $entity->getOrganization()) ? [
                'id' => $organizationRel->getId()->toString(),
                'display' => (string) $organizationRel,
            ] : null,
            'name' => $entity->getName(),
            'agents' => ($agentsRel = $entity->getAgents()) ? [
                'id' => $agentsRel->getId()->toString(),
                'display' => (string) $agentsRel,
            ] : null,
            'active' => $entity->getActive(),
            'avatarUrl' => $entity->getAvatarUrl(),
            'birthDate' => $entity->getBirthDate(),
            'calendars' => ($calendarsRel = $entity->getCalendars()) ? [
                'id' => $calendarsRel->getId()->toString(),
                'display' => (string) $calendarsRel,
            ] : null,
            'campaigns' => ($campaignsRel = $entity->getCampaigns()) ? [
                'id' => $campaignsRel->getId()->toString(),
                'display' => (string) $campaignsRel,
            ] : null,
            'celPhone' => $entity->getCelPhone(),
            'contacts' => ($contactsRel = $entity->getContacts()) ? [
                'id' => $contactsRel->getId()->toString(),
                'display' => (string) $contactsRel,
            ] : null,
            'deals' => ($dealsRel = $entity->getDeals()) ? [
                'id' => $dealsRel->getId()->toString(),
                'display' => (string) $dealsRel,
            ] : null,
            'email' => $entity->getEmail(),
            'ownedDeals' => ($ownedDealsRel = $entity->getOwnedDeals()) ? [
                'id' => $ownedDealsRel->getId()->toString(),
                'display' => (string) $ownedDealsRel,
            ] : null,
            'calendarExternalLinks' => ($calendarExternalLinksRel = $entity->getCalendarExternalLinks()) ? [
                'id' => $calendarExternalLinksRel->getId()->toString(),
                'display' => (string) $calendarExternalLinksRel,
            ] : null,
            'grantedRoles' => ($grantedRolesRel = $entity->getGrantedRoles()) ? [
                'id' => $grantedRolesRel->getId()->toString(),
                'display' => (string) $grantedRolesRel,
            ] : null,
            'resourceBookings' => ($resourceBookingsRel = $entity->getResourceBookings()) ? [
                'id' => $resourceBookingsRel->getId()->toString(),
                'display' => (string) $resourceBookingsRel,
            ] : null,
            'emailVerifiedAt' => $entity->getEmailVerifiedAt()?->format('M d, Y'),
            'eventAttendances' => ($eventAttendancesRel = $entity->getEventAttendances()) ? [
                'id' => $eventAttendancesRel->getId()->toString(),
                'display' => (string) $eventAttendancesRel,
            ] : null,
            'verified' => $entity->getVerified(),
            'termsSigned' => $entity->getTermsSigned(),
            'termsSignedAt' => $entity->getTermsSignedAt()?->format('M d, Y'),
            'verificationToken' => $entity->getVerificationToken(),
            'failedLoginAttempts' => $entity->getFailedLoginAttempts(),
            'apiToken' => $entity->getApiToken(),
            'apiTokenExpiresAt' => $entity->getApiTokenExpiresAt()?->format('M d, Y'),
            'openAiApiKey' => $entity->getOpenAiApiKey(),
            'gender' => $entity->getGender(),
            'lastLoginAt' => $entity->getLastLoginAt()?->format('M d, Y'),
            'lockedUntil' => $entity->getLockedUntil()?->format('M d, Y'),
            'uiSettings' => $entity->getUiSettings(),
            'listPreferences' => $entity->getListPreferences(),
            'twoFactorEnabled' => $entity->getTwoFactorEnabled(),
            'lastPasswordChange' => $entity->getLastPasswordChange()?->format('M d, Y'),
            'twoFactorSecret' => $entity->getTwoFactorSecret(),
            'twoFactorBackupCodes' => $entity->getTwoFactorBackupCodes(),
            'passwordResetToken' => $entity->getPasswordResetToken(),
            'passwordResetExpiry' => $entity->getPasswordResetExpiry()?->format('M d, Y'),
            'sessionToken' => $entity->getSessionToken(),
            'lastPasswordChangeAt' => $entity->getLastPasswordChangeAt()?->format('M d, Y'),
            'passwordExpiresAt' => $entity->getPasswordExpiresAt()?->format('M d, Y'),
            'mustChangePassword' => $entity->getMustChangePassword(),
            'passkeyEnabled' => $entity->getPasskeyEnabled(),
            'managedCampaigns' => ($managedCampaignsRel = $entity->getManagedCampaigns()) ? [
                'id' => $managedCampaignsRel->getId()->toString(),
                'display' => (string) $managedCampaignsRel,
            ] : null,
            'passkeyCredentials' => $entity->getPasskeyCredentials(),
            'ownedCampaigns' => ($ownedCampaignsRel = $entity->getOwnedCampaigns()) ? [
                'id' => $ownedCampaignsRel->getId()->toString(),
                'display' => (string) $ownedCampaignsRel,
            ] : null,
            'managedCompanies' => ($managedCompaniesRel = $entity->getManagedCompanies()) ? [
                'id' => $managedCompaniesRel->getId()->toString(),
                'display' => (string) $managedCompaniesRel,
            ] : null,
            'managedContacts' => ($managedContactsRel = $entity->getManagedContacts()) ? [
                'id' => $managedContactsRel->getId()->toString(),
                'display' => (string) $managedContactsRel,
            ] : null,
            'username' => $entity->getUsername(),
            'managedDeals' => ($managedDealsRel = $entity->getManagedDeals()) ? [
                'id' => $managedDealsRel->getId()->toString(),
                'display' => (string) $managedDealsRel,
            ] : null,
            'phone' => $entity->getPhone(),
            'mobilePhone' => $entity->getMobilePhone(),
            'jobTitle' => $entity->getJobTitle(),
            'department' => $entity->getDepartment(),
            'timezone' => $entity->getTimezone(),
            'locale' => $entity->getLocale(),
            'preferredLanguage' => $entity->getPreferredLanguage(),
            'emailSignature' => $entity->getEmailSignature(),
            'emailNotificationsEnabled' => $entity->getEmailNotificationsEnabled(),
            'smsNotificationsEnabled' => $entity->getSmsNotificationsEnabled(),
            'calendarSyncEnabled' => $entity->getCalendarSyncEnabled(),
            'workingHours' => $entity->getWorkingHours(),
            'defaultCurrency' => $entity->getDefaultCurrency(),
            'dateFormat' => $entity->getDateFormat(),
            'organizedEvents' => ($organizedEventsRel = $entity->getOrganizedEvents()) ? [
                'id' => $organizedEventsRel->getId()->toString(),
                'display' => (string) $organizedEventsRel,
            ] : null,
            'manager' => ($managerRel = $entity->getManager()) ? [
                'id' => $managerRel->getId()->toString(),
                'display' => (string) $managerRel,
            ] : null,
            'salesTeam' => $entity->getSalesTeam(),
            'quotaAmount' => $entity->getQuotaAmount(),
            'commissionRate' => $entity->getCommissionRate(),
            'agent' => $entity->getAgent(),
            'agentType' => $entity->getAgentType(),
            'deletedAt' => $entity->getDeletedAt()?->format('M d, Y'),
            'ownedCourses' => ($ownedCoursesRel = $entity->getOwnedCourses()) ? [
                'id' => $ownedCoursesRel->getId()->toString(),
                'display' => (string) $ownedCoursesRel,
            ] : null,
            'avatar' => $entity->getAvatar(),
            'password' => $entity->getPassword(),
            'title' => $entity->getTitle(),
            'firstName' => $entity->getFirstName(),
            'lastName' => $entity->getLastName(),
            'middleName' => $entity->getMiddleName(),
            'suffix' => $entity->getSuffix(),
            'nickname' => $entity->getNickname(),
            'position' => $entity->getPosition(),
            'secondaryEmail' => $entity->getSecondaryEmail(),
            'workPhone' => $entity->getWorkPhone(),
            'homePhone' => $entity->getHomePhone(),
            'phoneExtension' => $entity->getPhoneExtension(),
            'fax' => $entity->getFax(),
            'website' => $entity->getWebsite(),
            'linkedinUrl' => $entity->getLinkedinUrl(),
            'twitterHandle' => $entity->getTwitterHandle(),
            'address' => $entity->getAddress(),
            'profilePictureUrl' => $entity->getProfilePictureUrl(),
            'city' => $entity->getCity(),
            'state' => $entity->getState(),
            'postalCode' => $entity->getPostalCode(),
            'country' => $entity->getCountry(),
            'region' => $entity->getRegion(),
            'officeLocation' => $entity->getOfficeLocation(),
            'profiles' => ($profilesRel = $entity->getProfiles()) ? [
                'id' => $profilesRel->getId()->toString(),
                'display' => (string) $profilesRel,
            ] : null,
            'employeeId' => $entity->getEmployeeId(),
            'hireDate' => $entity->getHireDate(),
            'terminationDate' => $entity->getTerminationDate(),
            'employmentStatus' => $entity->getEmploymentStatus(),
            'costCenter' => $entity->getCostCenter(),
            'division' => $entity->getDivision(),
            'businessUnit' => $entity->getBusinessUnit(),
            'salary' => $entity->getSalary(),
            'salaryFrequency' => $entity->getSalaryFrequency(),
            'socialMedias' => ($socialMediasRel = $entity->getSocialMedias()) ? [
                'id' => $socialMediasRel->getId()->toString(),
                'display' => (string) $socialMediasRel,
            ] : null,
            'skills' => $entity->getSkills(),
            'certifications' => $entity->getCertifications(),
            'languages' => $entity->getLanguages(),
            'bio' => $entity->getBio(),
            'notes' => $entity->getNotes(),
            'tags' => $entity->getTags(),
            'studentCourses' => ($studentCoursesRel = $entity->getStudentCourses()) ? [
                'id' => $studentCoursesRel->getId()->toString(),
                'display' => (string) $studentCoursesRel,
            ] : null,
            'loginCount' => $entity->getLoginCount(),
            'lastIpAddress' => $entity->getLastIpAddress(),
            'lastUserAgent' => $entity->getLastUserAgent(),
            'visible' => $entity->getVisible(),
            'profileCompleteness' => $entity->getProfileCompleteness(),
            'lastActivityAt' => $entity->getLastActivityAt()?->format('M d, Y'),
            'status' => $entity->getStatus(),
            'talks' => ($talksRel = $entity->getTalks()) ? [
                'id' => $talksRel->getId()->toString(),
                'display' => (string) $talksRel,
            ] : null,
            'statusMessage' => $entity->getStatusMessage(),
            'locked' => $entity->getLocked(),
            'tasks' => ($tasksRel = $entity->getTasks()) ? [
                'id' => $tasksRel->getId()->toString(),
                'display' => (string) $tasksRel,
            ] : null,
            'lockedReason' => $entity->getLockedReason(),
            'lockedAt' => $entity->getLockedAt()?->format('M d, Y'),
            'customFields' => $entity->getCustomFields(),
            'managedPipelines' => ($managedPipelinesRel = $entity->getManagedPipelines()) ? [
                'id' => $managedPipelinesRel->getId()->toString(),
                'display' => (string) $managedPipelinesRel,
            ] : null,
        ];
    }

    // ====================================
    // INDEX ACTION - List all Users
    // ====================================

    /**
     * List Users
     */
    protected function indexAction(): Response
    {
        $this->denyAccessUnlessGranted(UserVoter::LIST);

        $preferences = $this->listPreferencesService->getEntityPreferences('users');
        $savedView = $preferences['view'] ?? 'grid';

        return $this->render('user/index.html.twig', [
            'entities' => [],  // Loaded via API
            'entity_name' => 'user',
            'entity_name_plural' => 'users',
            'page_icon' => 'bi-person-circle',
            'default_view' => $savedView,

            // List configuration from GeneratorProperty
            'enable_search' => true,
            'enable_filters' => false,
            'enable_sorting' => true,
            'enable_create_button' => true,

            // Property metadata for client-side rendering (as JSON strings)
            'list_fields' => '[{"name":"name","label":"Name","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getName"},{"name":"agents","label":"Agents","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getAgents"},{"name":"active","label":"Active","type":"boolean","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getActive"},{"name":"avatarUrl","label":"AvatarUrl","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getAvatarUrl"},{"name":"birthDate","label":"BirthDate","type":"date_immutable","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getBirthDate"},{"name":"calendars","label":"Calendars","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCalendars"},{"name":"campaigns","label":"Campaigns","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCampaigns"},{"name":"celPhone","label":"CelPhone","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCelPhone"},{"name":"contacts","label":"Contacts","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getContacts"},{"name":"deals","label":"Deals","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDeals"},{"name":"email","label":"Email","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getEmail"},{"name":"grantedRoles","label":"Granted Roles","type":"","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getGrantedRoles"},{"name":"emailVerifiedAt","label":"EmailVerifiedAt","type":"datetime_immutable","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getEmailVerifiedAt"},{"name":"eventAttendances","label":"EventAttendances","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getEventAttendances"},{"name":"verified","label":"Verified","type":"boolean","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getVerified"},{"name":"termsSigned","label":"Terms Signed","type":"boolean","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getTermsSigned"},{"name":"termsSignedAt","label":"Terms Signed At","type":"datetime_immutable","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getTermsSignedAt"},{"name":"gender","label":"Gender","type":"integer","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getGender"},{"name":"lastLoginAt","label":"Last Login At","type":"datetime_immutable","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getLastLoginAt"},{"name":"lockedUntil","label":"Locked Until","type":"datetime_immutable","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getLockedUntil"},{"name":"twoFactorEnabled","label":"Two Factor Enabled","type":"boolean","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getTwoFactorEnabled"},{"name":"lastPasswordChange","label":"LastPasswordChange","type":"datetime_immutable","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getLastPasswordChange"},{"name":"lastPasswordChangeAt","label":"Last Password Change At","type":"datetime_immutable","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getLastPasswordChangeAt"},{"name":"passwordExpiresAt","label":"Password Expires At","type":"datetime_immutable","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getPasswordExpiresAt"},{"name":"mustChangePassword","label":"Must Change Password","type":"boolean","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getMustChangePassword"},{"name":"passkeyEnabled","label":"Passkey Enabled","type":"boolean","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getPasskeyEnabled"},{"name":"managedCampaigns","label":"ManagedCampaigns","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getManagedCampaigns"},{"name":"ownedCampaigns","label":"OwnedCampaigns","type":"","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getOwnedCampaigns"},{"name":"managedCompanies","label":"ManagedCompanies","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getManagedCompanies"},{"name":"managedContacts","label":"ManagedContacts","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getManagedContacts"},{"name":"username","label":"Username","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getUsername"},{"name":"managedDeals","label":"ManagedDeals","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getManagedDeals"},{"name":"phone","label":"Phone","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getPhone"},{"name":"mobilePhone","label":"Mobile Phone","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getMobilePhone"},{"name":"jobTitle","label":"Job Title","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getJobTitle"},{"name":"department","label":"Department","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDepartment"},{"name":"timezone","label":"Timezone","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getTimezone"},{"name":"locale","label":"Locale","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getLocale"},{"name":"preferredLanguage","label":"Preferred Language","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getPreferredLanguage"},{"name":"emailNotificationsEnabled","label":"Email Notifications Enabled","type":"boolean","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getEmailNotificationsEnabled"},{"name":"smsNotificationsEnabled","label":"SMS Notifications Enabled","type":"boolean","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getSmsNotificationsEnabled"},{"name":"calendarSyncEnabled","label":"Calendar Sync Enabled","type":"boolean","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCalendarSyncEnabled"},{"name":"defaultCurrency","label":"Default Currency","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDefaultCurrency"},{"name":"dateFormat","label":"Date Format","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDateFormat"},{"name":"organizedEvents","label":"OrganizedEvents","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getOrganizedEvents"},{"name":"manager","label":"Manager","type":"","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getManager"},{"name":"salesTeam","label":"Sales Team","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getSalesTeam"},{"name":"quotaAmount","label":"Quota Amount","type":"decimal","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getQuotaAmount"},{"name":"commissionRate","label":"Commission Rate","type":"decimal","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCommissionRate"},{"name":"agent","label":"Agent","type":"boolean","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getAgent"},{"name":"agentType","label":"Agent Type","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getAgentType"},{"name":"deletedAt","label":"Deleted At","type":"datetime_immutable","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDeletedAt"},{"name":"ownedCourses","label":"OwnedCourses","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getOwnedCourses"},{"name":"avatar","label":"Avatar","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getAvatar"},{"name":"title","label":"Title","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getTitle"},{"name":"firstName","label":"First Name","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getFirstName"},{"name":"lastName","label":"Last Name","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getLastName"},{"name":"middleName","label":"Middle Name","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getMiddleName"},{"name":"suffix","label":"Suffix","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getSuffix"},{"name":"nickname","label":"Nickname","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getNickname"},{"name":"position","label":"Position","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getPosition"},{"name":"secondaryEmail","label":"Secondary Email","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getSecondaryEmail"},{"name":"workPhone","label":"Work Phone","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getWorkPhone"},{"name":"homePhone","label":"Home Phone","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getHomePhone"},{"name":"phoneExtension","label":"Phone Extension","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getPhoneExtension"},{"name":"fax","label":"Fax","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getFax"},{"name":"website","label":"Website","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getWebsite"},{"name":"linkedinUrl","label":"LinkedIn URL","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getLinkedinUrl"},{"name":"twitterHandle","label":"Twitter Handle","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getTwitterHandle"},{"name":"profilePictureUrl","label":"ProfilePictureUrl","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getProfilePictureUrl"},{"name":"city","label":"City","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCity"},{"name":"state","label":"State","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getState"},{"name":"postalCode","label":"Postal Code","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getPostalCode"},{"name":"country","label":"Country","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCountry"},{"name":"region","label":"Region","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getRegion"},{"name":"officeLocation","label":"Office Location","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getOfficeLocation"},{"name":"profiles","label":"Profiles","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getProfiles"},{"name":"employeeId","label":"Employee ID","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getEmployeeId"},{"name":"hireDate","label":"Hire Date","type":"date_immutable","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getHireDate"},{"name":"terminationDate","label":"Termination Date","type":"date_immutable","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getTerminationDate"},{"name":"employmentStatus","label":"Employment Status","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getEmploymentStatus"},{"name":"costCenter","label":"Cost Center","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCostCenter"},{"name":"division","label":"Division","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDivision"},{"name":"businessUnit","label":"Business Unit","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getBusinessUnit"},{"name":"salaryFrequency","label":"Salary Frequency","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getSalaryFrequency"},{"name":"socialMedias","label":"SocialMedias","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getSocialMedias"},{"name":"tags","label":"Tags","type":"json","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getTags"},{"name":"studentCourses","label":"Student Courses","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getStudentCourses"},{"name":"loginCount","label":"Login Count","type":"integer","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getLoginCount"},{"name":"lastIpAddress","label":"Last IP Address","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getLastIpAddress"},{"name":"visible","label":"Visible","type":"boolean","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getVisible"},{"name":"profileCompleteness","label":"Profile Completeness","type":"integer","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getProfileCompleteness"},{"name":"lastActivityAt","label":"Last Activity At","type":"datetime_immutable","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getLastActivityAt"},{"name":"status","label":"Status","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getStatus"},{"name":"talks","label":"Talks","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getTalks"},{"name":"locked","label":"Locked","type":"boolean","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getLocked"},{"name":"tasks","label":"Tasks","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getTasks"},{"name":"lockedAt","label":"Locked At","type":"datetime_immutable","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getLockedAt"}]',
            'searchable_fields' => '[{"name":"name","label":"Name","type":"string"},{"name":"avatarUrl","label":"AvatarUrl","type":"string"},{"name":"celPhone","label":"CelPhone","type":"string"},{"name":"email","label":"Email","type":"string"},{"name":"password","label":"Password","type":"string"},{"name":"position","label":"Position","type":"string"},{"name":"profilePictureUrl","label":"ProfilePictureUrl","type":"string"}]',
            'filterable_fields' => '[]',
            'sortable_fields' => '[{"name":"name","label":"Name"},{"name":"agents","label":"Agents"},{"name":"active","label":"Active"},{"name":"avatarUrl","label":"AvatarUrl"},{"name":"birthDate","label":"BirthDate"},{"name":"calendars","label":"Calendars"},{"name":"campaigns","label":"Campaigns"},{"name":"celPhone","label":"CelPhone"},{"name":"contacts","label":"Contacts"},{"name":"deals","label":"Deals"},{"name":"email","label":"Email"},{"name":"emailVerifiedAt","label":"EmailVerifiedAt"},{"name":"eventAttendances","label":"EventAttendances"},{"name":"failedLoginAttempts","label":"FailedLoginAttempts"},{"name":"gender","label":"Gender"},{"name":"lastPasswordChange","label":"LastPasswordChange"},{"name":"managedCampaigns","label":"ManagedCampaigns"},{"name":"managedCompanies","label":"ManagedCompanies"},{"name":"managedContacts","label":"ManagedContacts"},{"name":"managedDeals","label":"ManagedDeals"},{"name":"organizedEvents","label":"OrganizedEvents"},{"name":"ownedCourses","label":"OwnedCourses"},{"name":"password","label":"Password"},{"name":"position","label":"Position"},{"name":"profilePictureUrl","label":"ProfilePictureUrl"},{"name":"profiles","label":"Profiles"},{"name":"socialMedias","label":"SocialMedias"},{"name":"studentCourses","label":"Student Courses"},{"name":"talks","label":"Talks"},{"name":"tasks","label":"Tasks"}]',
        ]);
    }

    // ====================================
    // API SEARCH - Fetch Users for list view
    // ====================================

    /**
     * API endpoint for searching Users
     */
    protected function apiSearchAction(Request $request): JsonResponse
    {
        $this->denyAccessUnlessGranted(UserVoter::LIST);

        // This method uses the BaseApiController's handleSearchRequest
        // which integrates with API Platform's GetCollection operation
        return $this->handleSearchRequest($request);
    }

    // ====================================
    // NEW FORM ACTION - Display create form
    // ====================================

    /**
     * Display new user form
     */
    protected function newFormAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(UserVoter::CREATE);

        $user = new User();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($user);

        $form = $this->createForm(UserFormType::class, $user);

        return $this->render('user/_form_modal.html.twig', [
            'form' => $form,
            'user' => $user,
            'is_edit' => false,
        ]);
    }

    // ====================================
    // CREATE ACTION - Process create form submission
    // ====================================

    /**
     * Process new user form submission
     */
    protected function createAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(UserVoter::CREATE);

        $user = new User();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($user);

        $form = $this->createForm(UserFormType::class, $user);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before create hook
                $this->beforeCreate($user);

                $this->entityManager->persist($user);
                $this->entityManager->flush();

                // After create hook
                $this->afterCreate($user);

                $this->addFlash('success', $this->translator->trans(
                    'user.flash.created_successfully',
                    ['%name%' => (string) $user],
                    'user'
                ));

                return $this->redirectToRoute('user_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'user.flash.create_failed',
                    ['%error%' => $e->getMessage()],
                    'user'
                ));
            }
        }

        // Re-render with errors
        return $this->render('user/_form_modal.html.twig', [
            'form' => $form,
            'user' => $user,
            'is_edit' => false,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // EDIT FORM ACTION - Display edit form
    // ====================================

    /**
     * Display edit user form
     */
    protected function editFormAction(User $user, Request $request): Response
    {
        $this->denyAccessUnlessGranted(UserVoter::EDIT, $user);

        $form = $this->createForm(UserFormType::class, $user);

        return $this->render('user/_form_modal.html.twig', [
            'form' => $form,
            'user' => $user,
            'is_edit' => true,
        ]);
    }

    // ====================================
    // UPDATE ACTION - Process edit form submission
    // ====================================

    /**
     * Process edit user form submission
     */
    protected function updateAction(User $user, Request $request): Response
    {
        $this->denyAccessUnlessGranted(UserVoter::EDIT, $user);

        $form = $this->createForm(UserFormType::class, $user);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before update hook
                $this->beforeUpdate($user);

                $this->entityManager->flush();

                // After update hook
                $this->afterUpdate($user);

                $this->addFlash('success', $this->translator->trans(
                    'user.flash.updated_successfully',
                    ['%name%' => (string) $user],
                    'user'
                ));

                return $this->redirectToRoute('user_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'user.flash.update_failed',
                    ['%error%' => $e->getMessage()],
                    'user'
                ));
            }
        }

        // Re-render with errors
        return $this->render('user/_form_modal.html.twig', [
            'form' => $form,
            'user' => $user,
            'is_edit' => true,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // DELETE ACTION - Delete user
    // ====================================

    /**
     * Delete user
     */
    protected function deleteAction(User $user, Request $request): Response
    {
        $this->denyAccessUnlessGranted(UserVoter::DELETE, $user);

        // Verify CSRF token
        $token = $request->request->get('_token');
        if (!$this->csrfTokenManager->isTokenValid(new CsrfToken('delete_user_' . $user->getId()->toString(), $token))) {
            throw new InvalidCsrfTokenException('Invalid CSRF token for delete operation.');
        }

        try {
            // Before delete hook
            $this->beforeDelete($user);

            $name = (string) $user;

            $this->entityManager->remove($user);
            $this->entityManager->flush();

            // After delete hook
            $this->afterDelete();

            $this->addFlash('success', $this->translator->trans(
                'user.flash.deleted_successfully',
                ['%name%' => $name],
                'user'
            ));

        } catch (\Exception $e) {
            $this->addFlash('error', $this->translator->trans(
                'user.flash.delete_failed',
                ['%error%' => $e->getMessage()],
                'user'
            ));
        }

        return $this->redirectToRoute('user_index', [], Response::HTTP_SEE_OTHER);
    }

    // ====================================
    // SHOW ACTION - Display user details
    // ====================================

    /**
     * Display user details
     */
    protected function showAction(User $user): Response
    {
        $this->denyAccessUnlessGranted(UserVoter::VIEW, $user);

        return $this->render('user/show.html.twig', [
            'user' => $user,
        ]);
    }

    // ====================================
    // LIFECYCLE HOOKS
    // ====================================
    // Override these in UserController to add custom logic

    /**
     * Initialize new entity before creating form
     *
     * Note: Organization and Owner are set automatically by TenantEntityProcessor
     * Only use this for custom initialization logic
     */
    protected function initializeNewEntity(User $user): void
    {
        // Organization and Owner are set automatically by TenantEntityProcessor
        // Add your custom initialization here
    }

    /**
     * Execute logic before creating entity
     */
    protected function beforeCreate(User $user): void
    {
        // Override to add logic before create
    }

    /**
     * Execute logic after creating entity
     */
    protected function afterCreate(User $user): void
    {
        // Override to add logic after create (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before updating entity
     */
    protected function beforeUpdate(User $user): void
    {
        // Override to add logic before update
    }

    /**
     * Execute logic after updating entity
     */
    protected function afterUpdate(User $user): void
    {
        // Override to add logic after update (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before deleting entity
     */
    protected function beforeDelete(User $user): void
    {
        // Override to add logic before delete (e.g., check dependencies, archive)
    }

    /**
     * Execute logic after deleting entity
     */
    protected function afterDelete(): void
    {
        // Override to add logic after delete (e.g., cleanup, send notification)
    }
}
