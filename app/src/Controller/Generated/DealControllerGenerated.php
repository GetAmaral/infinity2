<?php

declare(strict_types=1);

namespace App\Controller\Generated;

use App\Controller\Base\BaseApiController;
use App\Entity\Deal;
use App\Repository\DealRepository;
use App\Security\Voter\DealVoter;
use App\Form\DealFormType;
use App\Service\ListPreferencesService;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Security\Csrf\CsrfToken;
use Symfony\Component\Security\Csrf\CsrfTokenManagerInterface;
use Symfony\Component\Security\Core\Exception\InvalidCsrfTokenException;
use Symfony\Contracts\Translation\TranslatorInterface;

/**
 * Generated Base Controller for Deal
 *
 * ⚠️ WARNING: This file is ALWAYS regenerated by Genmax
 * DO NOT EDIT THIS FILE - Edit DealController instead
 *
 * @generated
 * @codeCoverageIgnore
 */
abstract class DealControllerGenerated extends BaseApiController
{
    public function __construct(
        protected readonly EntityManagerInterface $entityManager,
        protected readonly DealRepository $repository,
        protected readonly ListPreferencesService $listPreferencesService,
        protected readonly TranslatorInterface $translator,
        protected readonly CsrfTokenManagerInterface $csrfTokenManager,
    ) {}

    // ====================================
    // ABSTRACT METHOD IMPLEMENTATIONS
    // ====================================

    /**
     * Get the repository for this entity
     */
    protected function getRepository(): DealRepository
    {
        return $this->repository;
    }

    /**
     * Get the plural name for this entity
     */
    protected function getEntityPluralName(): string
    {
        return 'deals';
    }

    /**
     * Convert entity to array for API responses
     */
    protected function entityToArray(object $entity): array
    {
        if (!$entity instanceof Deal) {
            throw new \InvalidArgumentException('Expected Deal instance');
        }

        return [
            'id' => $entity->getId()->toString(),
            'organization' => ($organizationRel = $entity->getOrganization()) ? [
                'id' => $organizationRel->getId()->toString(),
                'display' => (string) $organizationRel,
            ] : null,
            'name' => $entity->getName(),
            'description' => $entity->getDescription(),
            'company' => ($companyRel = $entity->getCompany()) ? [
                'id' => $companyRel->getId()->toString(),
                'display' => (string) $companyRel,
            ] : null,
            'dealStatus' => $entity->getDealStatus(),
            'currentStage' => ($currentStageRel = $entity->getCurrentStage()) ? [
                'id' => $currentStageRel->getId()->toString(),
                'display' => (string) $currentStageRel,
            ] : null,
            'probability' => $entity->getProbability(),
            'pipeline' => ($pipelineRel = $entity->getPipeline()) ? [
                'id' => $pipelineRel->getId()->toString(),
                'display' => (string) $pipelineRel,
            ] : null,
            'dealType' => ($dealTypeRel = $entity->getDealType()) ? [
                'id' => $dealTypeRel->getId()->toString(),
                'display' => (string) $dealTypeRel,
            ] : null,
            'priority' => $entity->getPriority(),
            'category' => ($categoryRel = $entity->getCategory()) ? [
                'id' => $categoryRel->getId()->toString(),
                'display' => (string) $categoryRel,
            ] : null,
            'dealNumber' => $entity->getDealNumber(),
            'expectedAmount' => $entity->getExpectedAmount(),
            'weightedAmount' => $entity->getWeightedAmount(),
            'closureAmount' => $entity->getClosureAmount(),
            'initialAmount' => $entity->getInitialAmount(),
            'currency' => $entity->getCurrency(),
            'exchangeRate' => $entity->getExchangeRate(),
            'discountPercentage' => $entity->getDiscountPercentage(),
            'discountAmount' => $entity->getDiscountAmount(),
            'commissionRate' => $entity->getCommissionRate(),
            'commissionAmount' => $entity->getCommissionAmount(),
            'expectedClosureDate' => $entity->getExpectedClosureDate()?->format('M d, Y'),
            'closureDate' => $entity->getClosureDate()?->format('M d, Y'),
            'products' => ($productsRel = $entity->getProducts()) ? [
                'id' => $productsRel->getId()->toString(),
                'display' => (string) $productsRel,
            ] : null,
            'initialDate' => $entity->getInitialDate()?->format('M d, Y'),
            'lastActivityDate' => $entity->getLastActivityDate()?->format('M d, Y'),
            'nextFollowUp' => $entity->getNextFollowUp()?->format('M d, Y'),
            'daysInCurrentStage' => $entity->getDaysInCurrentStage(),
            'forecastCategory' => $entity->getForecastCategory(),
            'manager' => ($managerRel = $entity->getManager()) ? [
                'id' => $managerRel->getId()->toString(),
                'display' => (string) $managerRel,
            ] : null,
            'team' => ($teamRel = $entity->getTeam()) ? [
                'id' => $teamRel->getId()->toString(),
                'display' => (string) $teamRel,
            ] : null,
            'owner' => ($ownerRel = $entity->getOwner()) ? [
                'id' => $ownerRel->getId()->toString(),
                'display' => (string) $ownerRel,
            ] : null,
            'primaryContact' => ($primaryContactRel = $entity->getPrimaryContact()) ? [
                'id' => $primaryContactRel->getId()->toString(),
                'display' => (string) $primaryContactRel,
            ] : null,
            'contacts' => ($contactsRel = $entity->getContacts()) ? [
                'id' => $contactsRel->getId()->toString(),
                'display' => (string) $contactsRel,
            ] : null,
            'leadSource' => ($leadSourceRel = $entity->getLeadSource()) ? [
                'id' => $leadSourceRel->getId()->toString(),
                'display' => (string) $leadSourceRel,
            ] : null,
            'campaign' => ($campaignRel = $entity->getCampaign()) ? [
                'id' => $campaignRel->getId()->toString(),
                'display' => (string) $campaignRel,
            ] : null,
            'sourceDetails' => $entity->getSourceDetails(),
            'notes' => $entity->getNotes(),
            'dealStages' => ($dealStagesRel = $entity->getDealStages()) ? [
                'id' => $dealStagesRel->getId()->toString(),
                'display' => (string) $dealStagesRel,
            ] : null,
            'talks' => ($talksRel = $entity->getTalks()) ? [
                'id' => $talksRel->getId()->toString(),
                'display' => (string) $talksRel,
            ] : null,
            'tasks' => ($tasksRel = $entity->getTasks()) ? [
                'id' => $tasksRel->getId()->toString(),
                'display' => (string) $tasksRel,
            ] : null,
            'competitors' => ($competitorsRel = $entity->getCompetitors()) ? [
                'id' => $competitorsRel->getId()->toString(),
                'display' => (string) $competitorsRel,
            ] : null,
            'tags' => ($tagsRel = $entity->getTags()) ? [
                'id' => $tagsRel->getId()->toString(),
                'display' => (string) $tagsRel,
            ] : null,
            'customFields' => $entity->getCustomFields(),
            'lostReason' => ($lostReasonRel = $entity->getLostReason()) ? [
                'id' => $lostReasonRel->getId()->toString(),
                'display' => (string) $lostReasonRel,
            ] : null,
            'winReason' => ($winReasonRel = $entity->getWinReason()) ? [
                'id' => $winReasonRel->getId()->toString(),
                'display' => (string) $winReasonRel,
            ] : null,
            'actualClosureDate' => $entity->getActualClosureDate()?->format('M d, Y'),
        ];
    }

    // ====================================
    // INDEX ACTION - List all Deals
    // ====================================

    /**
     * List Deals
     */
    protected function indexAction(): Response
    {
        $this->denyAccessUnlessGranted(DealVoter::LIST);

        $preferences = $this->listPreferencesService->getEntityPreferences('deals');
        $savedView = $preferences['view'] ?? 'grid';

        return $this->render('deal/index.html.twig', [
            'entities' => [],  // Loaded via API
            'entity_name' => 'deal',
            'entity_name_plural' => 'deals',
            'page_icon' => 'bi-currency-dollar',
            'default_view' => $savedView,

            // List configuration from GeneratorProperty
            'enable_search' => true,
            'enable_filters' => true,
            'enable_sorting' => true,
            'enable_create_button' => true,

            // Property metadata for client-side rendering (as JSON strings)
            'list_fields' => '[{"name":"name","label":"Name","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getName"},{"name":"description","label":"Description","type":"text","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDescription"},{"name":"company","label":"Company","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCompany"},{"name":"dealStatus","label":"DealStatus","type":"string","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDealStatus"},{"name":"currentStage","label":"CurrentStage","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCurrentStage"},{"name":"probability","label":"Probability","type":"decimal","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getProbability"},{"name":"pipeline","label":"Pipeline","type":"","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getPipeline"},{"name":"dealType","label":"DealType","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDealType"},{"name":"priority","label":"Priority","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getPriority"},{"name":"category","label":"Category","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCategory"},{"name":"dealNumber","label":"DealNumber","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDealNumber"},{"name":"expectedAmount","label":"ExpectedAmount","type":"decimal","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getExpectedAmount"},{"name":"weightedAmount","label":"WeightedAmount","type":"decimal","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getWeightedAmount"},{"name":"closureAmount","label":"ClosureAmount","type":"decimal","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getClosureAmount"},{"name":"initialAmount","label":"InitialAmount","type":"decimal","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getInitialAmount"},{"name":"currency","label":"Currency","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCurrency"},{"name":"exchangeRate","label":"ExchangeRate","type":"float","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getExchangeRate"},{"name":"discountPercentage","label":"DiscountPercentage","type":"decimal","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDiscountPercentage"},{"name":"discountAmount","label":"DiscountAmount","type":"decimal","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDiscountAmount"},{"name":"commissionRate","label":"CommissionRate","type":"decimal","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCommissionRate"},{"name":"commissionAmount","label":"CommissionAmount","type":"decimal","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCommissionAmount"},{"name":"expectedClosureDate","label":"ExpectedClosureDate","type":"datetime","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getExpectedClosureDate"},{"name":"closureDate","label":"ClosureDate","type":"datetime","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getClosureDate"},{"name":"products","label":"Products","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getProducts"},{"name":"initialDate","label":"InitialDate","type":"datetime","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getInitialDate"},{"name":"lastActivityDate","label":"LastActivityDate","type":"datetime","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getLastActivityDate"},{"name":"nextFollowUp","label":"NextFollowUp","type":"datetime","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getNextFollowUp"},{"name":"daysInCurrentStage","label":"DaysInCurrentStage","type":"float","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDaysInCurrentStage"},{"name":"forecastCategory","label":"ForecastCategory","type":"integer","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getForecastCategory"},{"name":"manager","label":"Manager","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getManager"},{"name":"team","label":"Team","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getTeam"},{"name":"owner","label":"Deal Owner","type":"","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getOwner"},{"name":"primaryContact","label":"PrimaryContact","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getPrimaryContact"},{"name":"contacts","label":"Contacts","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getContacts"},{"name":"leadSource","label":"LeadSource","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getLeadSource"},{"name":"campaign","label":"Campaign","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCampaign"},{"name":"sourceDetails","label":"SourceDetails","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getSourceDetails"},{"name":"notes","label":"Notes","type":"text","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getNotes"},{"name":"dealStages","label":"DealStages","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDealStages"},{"name":"talks","label":"Talks","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getTalks"},{"name":"tasks","label":"Tasks","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getTasks"},{"name":"competitors","label":"Competitors","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCompetitors"},{"name":"tags","label":"Tags","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getTags"},{"name":"customFields","label":"CustomFields","type":"json","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCustomFields"},{"name":"lostReason","label":"LostReason","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getLostReason"},{"name":"winReason","label":"WinReason","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getWinReason"},{"name":"actualClosureDate","label":"Actual Closure Date","type":"datetime","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getActualClosureDate"}]',
            'searchable_fields' => '[{"name":"name","label":"Name","type":"string"},{"name":"description","label":"Description","type":"text"},{"name":"priority","label":"Priority","type":"string"},{"name":"dealNumber","label":"DealNumber","type":"string"},{"name":"currency","label":"Currency","type":"string"},{"name":"sourceDetails","label":"SourceDetails","type":"string"},{"name":"notes","label":"Notes","type":"text"}]',
            'filterable_fields' => '[{"name":"pipeline","label":"Pipeline","type":"","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"owner","label":"Deal Owner","type":"","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"actualClosureDate","label":"Actual Closure Date","type":"datetime","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false}]',
            'sortable_fields' => '[{"name":"name","label":"Name"},{"name":"description","label":"Description"},{"name":"company","label":"Company"},{"name":"dealStatus","label":"DealStatus"},{"name":"currentStage","label":"CurrentStage"},{"name":"pipeline","label":"Pipeline"},{"name":"dealType","label":"DealType"},{"name":"priority","label":"Priority"},{"name":"category","label":"Category"},{"name":"dealNumber","label":"DealNumber"},{"name":"expectedAmount","label":"ExpectedAmount"},{"name":"weightedAmount","label":"WeightedAmount"},{"name":"closureAmount","label":"ClosureAmount"},{"name":"initialAmount","label":"InitialAmount"},{"name":"currency","label":"Currency"},{"name":"exchangeRate","label":"ExchangeRate"},{"name":"discountPercentage","label":"DiscountPercentage"},{"name":"discountAmount","label":"DiscountAmount"},{"name":"commissionRate","label":"CommissionRate"},{"name":"commissionAmount","label":"CommissionAmount"},{"name":"expectedClosureDate","label":"ExpectedClosureDate"},{"name":"closureDate","label":"ClosureDate"},{"name":"products","label":"Products"},{"name":"initialDate","label":"InitialDate"},{"name":"lastActivityDate","label":"LastActivityDate"},{"name":"nextFollowUp","label":"NextFollowUp"},{"name":"daysInCurrentStage","label":"DaysInCurrentStage"},{"name":"forecastCategory","label":"ForecastCategory"},{"name":"manager","label":"Manager"},{"name":"team","label":"Team"},{"name":"owner","label":"Deal Owner"},{"name":"primaryContact","label":"PrimaryContact"},{"name":"contacts","label":"Contacts"},{"name":"leadSource","label":"LeadSource"},{"name":"campaign","label":"Campaign"},{"name":"sourceDetails","label":"SourceDetails"},{"name":"notes","label":"Notes"},{"name":"dealStages","label":"DealStages"},{"name":"talks","label":"Talks"},{"name":"tasks","label":"Tasks"},{"name":"competitors","label":"Competitors"},{"name":"tags","label":"Tags"},{"name":"customFields","label":"CustomFields"},{"name":"lostReason","label":"LostReason"},{"name":"winReason","label":"WinReason"},{"name":"actualClosureDate","label":"Actual Closure Date"}]',
        ]);
    }

    // ====================================
    // API SEARCH - Fetch Deals for list view
    // ====================================

    /**
     * API endpoint for searching Deals
     */
    protected function apiSearchAction(Request $request): JsonResponse
    {
        $this->denyAccessUnlessGranted(DealVoter::LIST);

        // This method uses the BaseApiController's handleSearchRequest
        // which integrates with API Platform's GetCollection operation
        return $this->handleSearchRequest($request);
    }

    // ====================================
    // NEW FORM ACTION - Display create form
    // ====================================

    /**
     * Display new deal form
     */
    protected function newFormAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(DealVoter::CREATE);

        $deal = new Deal();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($deal);

        $form = $this->createForm(DealFormType::class, $deal);

        return $this->render('deal/_form_modal.html.twig', [
            'form' => $form,
            'deal' => $deal,
            'is_edit' => false,
        ]);
    }

    // ====================================
    // CREATE ACTION - Process create form submission
    // ====================================

    /**
     * Process new deal form submission
     */
    protected function createAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(DealVoter::CREATE);

        $deal = new Deal();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($deal);

        $form = $this->createForm(DealFormType::class, $deal);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before create hook
                $this->beforeCreate($deal);

                $this->entityManager->persist($deal);
                $this->entityManager->flush();

                // After create hook
                $this->afterCreate($deal);

                $this->addFlash('success', $this->translator->trans(
                    'deal.flash.created_successfully',
                    ['%name%' => (string) $deal],
                    'deal'
                ));

                return $this->redirectToRoute('deal_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'deal.flash.create_failed',
                    ['%error%' => $e->getMessage()],
                    'deal'
                ));
            }
        }

        // Re-render with errors
        return $this->render('deal/_form_modal.html.twig', [
            'form' => $form,
            'deal' => $deal,
            'is_edit' => false,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // EDIT FORM ACTION - Display edit form
    // ====================================

    /**
     * Display edit deal form
     */
    protected function editFormAction(Deal $deal, Request $request): Response
    {
        $this->denyAccessUnlessGranted(DealVoter::EDIT, $deal);

        $form = $this->createForm(DealFormType::class, $deal);

        return $this->render('deal/_form_modal.html.twig', [
            'form' => $form,
            'deal' => $deal,
            'is_edit' => true,
        ]);
    }

    // ====================================
    // UPDATE ACTION - Process edit form submission
    // ====================================

    /**
     * Process edit deal form submission
     */
    protected function updateAction(Deal $deal, Request $request): Response
    {
        $this->denyAccessUnlessGranted(DealVoter::EDIT, $deal);

        $form = $this->createForm(DealFormType::class, $deal);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before update hook
                $this->beforeUpdate($deal);

                $this->entityManager->flush();

                // After update hook
                $this->afterUpdate($deal);

                $this->addFlash('success', $this->translator->trans(
                    'deal.flash.updated_successfully',
                    ['%name%' => (string) $deal],
                    'deal'
                ));

                return $this->redirectToRoute('deal_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'deal.flash.update_failed',
                    ['%error%' => $e->getMessage()],
                    'deal'
                ));
            }
        }

        // Re-render with errors
        return $this->render('deal/_form_modal.html.twig', [
            'form' => $form,
            'deal' => $deal,
            'is_edit' => true,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // DELETE ACTION - Delete deal
    // ====================================

    /**
     * Delete deal
     */
    protected function deleteAction(Deal $deal, Request $request): Response
    {
        $this->denyAccessUnlessGranted(DealVoter::DELETE, $deal);

        // Verify CSRF token
        $token = $request->request->get('_token');
        if (!$this->csrfTokenManager->isTokenValid(new CsrfToken('delete_deal_' . $deal->getId()->toString(), $token))) {
            throw new InvalidCsrfTokenException('Invalid CSRF token for delete operation.');
        }

        try {
            // Before delete hook
            $this->beforeDelete($deal);

            $name = (string) $deal;

            $this->entityManager->remove($deal);
            $this->entityManager->flush();

            // After delete hook
            $this->afterDelete();

            $this->addFlash('success', $this->translator->trans(
                'deal.flash.deleted_successfully',
                ['%name%' => $name],
                'deal'
            ));

        } catch (\Exception $e) {
            $this->addFlash('error', $this->translator->trans(
                'deal.flash.delete_failed',
                ['%error%' => $e->getMessage()],
                'deal'
            ));
        }

        return $this->redirectToRoute('deal_index', [], Response::HTTP_SEE_OTHER);
    }

    // ====================================
    // SHOW ACTION - Display deal details
    // ====================================

    /**
     * Display deal details
     */
    protected function showAction(Deal $deal): Response
    {
        $this->denyAccessUnlessGranted(DealVoter::VIEW, $deal);

        return $this->render('deal/show.html.twig', [
            'deal' => $deal,
        ]);
    }

    // ====================================
    // LIFECYCLE HOOKS
    // ====================================
    // Override these in DealController to add custom logic

    /**
     * Initialize new entity before creating form
     *
     * Note: Organization and Owner are set automatically by TenantEntityProcessor
     * Only use this for custom initialization logic
     */
    protected function initializeNewEntity(Deal $deal): void
    {
        // Organization and Owner are set automatically by TenantEntityProcessor
        // Add your custom initialization here
    }

    /**
     * Execute logic before creating entity
     */
    protected function beforeCreate(Deal $deal): void
    {
        // Override to add logic before create
    }

    /**
     * Execute logic after creating entity
     */
    protected function afterCreate(Deal $deal): void
    {
        // Override to add logic after create (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before updating entity
     */
    protected function beforeUpdate(Deal $deal): void
    {
        // Override to add logic before update
    }

    /**
     * Execute logic after updating entity
     */
    protected function afterUpdate(Deal $deal): void
    {
        // Override to add logic after update (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before deleting entity
     */
    protected function beforeDelete(Deal $deal): void
    {
        // Override to add logic before delete (e.g., check dependencies, archive)
    }

    /**
     * Execute logic after deleting entity
     */
    protected function afterDelete(): void
    {
        // Override to add logic after delete (e.g., cleanup, send notification)
    }
}
