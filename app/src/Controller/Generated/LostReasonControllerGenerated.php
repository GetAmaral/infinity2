<?php

declare(strict_types=1);

namespace App\Controller\Generated;

use App\Controller\Base\BaseApiController;
use App\Entity\LostReason;
use App\Repository\LostReasonRepository;
use App\Security\Voter\LostReasonVoter;
use App\Form\LostReasonFormType;
use App\Service\ListPreferencesService;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Security\Csrf\CsrfToken;
use Symfony\Component\Security\Csrf\CsrfTokenManagerInterface;
use Symfony\Component\Security\Core\Exception\InvalidCsrfTokenException;
use Symfony\Contracts\Translation\TranslatorInterface;

/**
 * Generated Base Controller for LostReason
 *
 * ⚠️ WARNING: This file is ALWAYS regenerated by Genmax
 * DO NOT EDIT THIS FILE - Edit LostReasonController instead
 *
 * @generated
 * @codeCoverageIgnore
 */
abstract class LostReasonControllerGenerated extends BaseApiController
{
    public function __construct(
        protected readonly EntityManagerInterface $entityManager,
        protected readonly LostReasonRepository $repository,
        protected readonly ListPreferencesService $listPreferencesService,
        protected readonly TranslatorInterface $translator,
        protected readonly CsrfTokenManagerInterface $csrfTokenManager,
    ) {}

    // ====================================
    // ABSTRACT METHOD IMPLEMENTATIONS
    // ====================================

    /**
     * Get the repository for this entity
     */
    protected function getRepository(): LostReasonRepository
    {
        return $this->repository;
    }

    /**
     * Get the plural name for this entity
     */
    protected function getEntityPluralName(): string
    {
        return 'lostReasa';
    }

    /**
     * Convert entity to array for API responses
     *
     * ⚠️ IMPORTANT: Enum Properties Stored as Strings
     * -------------------------------------------------
     * Properties with enum-backed types (like InputType) are stored as STRINGS
     * in the database and getters return strings directly, NOT enum objects.
     *
     * ❌ WRONG:   $entity->getType()->value   (Error: "Attempt to read property 'value' on string")
     * ✅ CORRECT: $entity->getType()          (Already a string - 'fully_completed')
     *
     * If you need the enum object for business logic, use:
     *    InputType::from($entity->getType())
     */
    protected function entityToArray(object $entity): array
    {
        if (!$entity instanceof LostReason) {
            throw new \InvalidArgumentException('Expected LostReason instance');
        }

        return [
            'id' => $entity->getId()->toString(),
            'organization' => ($organizationRel = $entity->getOrganization()) ? [
                'id' => $organizationRel->getId()->toString(),
                'display' => (string) $organizationRel,
            ] : null,
            'name' => $entity->getName(),
            'description' => $entity->getDescription(),
            'category' => $entity->getCategory(),
            'deals' => ($dealsRel = $entity->getDeals()) ? [
                'id' => $dealsRel->getId()->toString(),
                'display' => (string) $dealsRel,
            ] : null,
            'active' => $entity->getActive(),
            'default' => $entity->getDefault(),
            'sortOrder' => $entity->getSortOrder(),
            'requiresNotes' => $entity->getRequiresNotes(),
            'color' => $entity->getColor(),
            'critical' => $entity->getCritical(),
            'impact' => $entity->getImpact(),
            'winBackPotential' => $entity->getWinBackPotential(),
            'actionable' => $entity->getActionable(),
            'internal' => $entity->getInternal(),
            'competitorName' => $entity->getCompetitorName(),
            'automationRule' => $entity->getAutomationRule(),
        ];
    }

    // ====================================
    // INDEX ACTION - List all LostReasa
    // ====================================

    /**
     * List LostReasa
     */
    protected function indexAction(): Response
    {
        $this->denyAccessUnlessGranted(LostReasonVoter::LIST);

        $preferences = $this->listPreferencesService->getEntityPreferences('lostReasa');
        $savedView = $preferences['view'] ?? 'grid';

        return $this->render('lostreason/index.html.twig', [
            'entities' => [],  // Loaded via API
            'entity_name' => 'lostReason',
            'entity_name_plural' => 'lostReasa',
            'page_icon' => 'bi-x-circle',
            'default_view' => $savedView,

            // List configuration from GeneratorProperty
            'enable_search' => true,
            'enable_filters' => true,
            'enable_sorting' => true,
            'enable_create_button' => true,

            // Property metadata for client-side rendering (as JSON strings)
            'list_fields' => '[{"name":"name","label":"Name","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getName"},{"name":"description","label":"Description","type":"text","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDescription"},{"name":"category","label":"Category","type":"string","sortable":true,"searchable":true,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCategory"},{"name":"deals","label":"Deals","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDeals"},{"name":"active","label":"Active","type":"boolean","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getActive"},{"name":"default","label":"Default","type":"boolean","sortable":false,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDefault"},{"name":"sortOrder","label":"Sort Order","type":"integer","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getSortOrder"},{"name":"requiresNotes","label":"Requires Notes","type":"boolean","sortable":false,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getRequiresNotes"},{"name":"color","label":"Color","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getColor"},{"name":"critical","label":"Critical","type":"boolean","sortable":false,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCritical"},{"name":"impact","label":"Impact","type":"string","sortable":true,"searchable":true,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getImpact"},{"name":"winBackPotential","label":"Win-Back Potential","type":"string","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getWinBackPotential"},{"name":"actionable","label":"Actionable","type":"boolean","sortable":false,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getActionable"},{"name":"internal","label":"Internal Only","type":"boolean","sortable":false,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getInternal"},{"name":"competitorName","label":"Competitor Name","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCompetitorName"}]',
            'searchable_fields' => '[{"name":"name","label":"Name","type":"string"},{"name":"description","label":"Description","type":"text"},{"name":"category","label":"Category","type":"string"},{"name":"impact","label":"Impact","type":"string"},{"name":"competitorName","label":"Competitor Name","type":"string"}]',
            'filterable_fields' => '[{"name":"category","label":"Category","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"active","label":"Active","type":"boolean","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"default","label":"Default","type":"boolean","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"sortOrder","label":"Sort Order","type":"integer","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"requiresNotes","label":"Requires Notes","type":"boolean","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"critical","label":"Critical","type":"boolean","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"impact","label":"Impact","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"winBackPotential","label":"Win-Back Potential","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"actionable","label":"Actionable","type":"boolean","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"internal","label":"Internal Only","type":"boolean","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false}]',
            'sortable_fields' => '[{"name":"name","label":"Name"},{"name":"description","label":"Description"},{"name":"category","label":"Category"},{"name":"deals","label":"Deals"},{"name":"active","label":"Active"},{"name":"sortOrder","label":"Sort Order"},{"name":"impact","label":"Impact"},{"name":"winBackPotential","label":"Win-Back Potential"},{"name":"competitorName","label":"Competitor Name"}]',
        ]);
    }

    // ====================================
    // API SEARCH - Fetch LostReasa for list view
    // ====================================

    /**
     * API endpoint for searching LostReasa
     */
    protected function apiSearchAction(Request $request): JsonResponse
    {
        $this->denyAccessUnlessGranted(LostReasonVoter::LIST);

        // This method uses the BaseApiController's handleSearchRequest
        // which integrates with API Platform's GetCollection operation
        return $this->handleSearchRequest($request);
    }

    // ====================================
    // NEW FORM ACTION - Display create form
    // ====================================

    /**
     * Display new lostReason form
     */
    protected function newFormAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(LostReasonVoter::CREATE);

        $lostReason = new LostReason();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($lostReason);

        $form = $this->createForm(LostReasonFormType::class, $lostReason);

        return $this->render('lostreason/_form_modal.html.twig', [
            'form' => $form,
            'lostReason' => $lostReason,
            'is_edit' => false,
        ]);
    }

    // ====================================
    // CREATE ACTION - Process create form submission
    // ====================================

    /**
     * Process new lostReason form submission
     */
    protected function createAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(LostReasonVoter::CREATE);

        $lostReason = new LostReason();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($lostReason);

        $form = $this->createForm(LostReasonFormType::class, $lostReason);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before create hook
                $this->beforeCreate($lostReason);

                $this->entityManager->persist($lostReason);
                $this->entityManager->flush();

                // After create hook
                $this->afterCreate($lostReason);

                $this->addFlash('success', $this->translator->trans(
                    'lostreason.flash.created_successfully',
                    ['%name%' => (string) $lostReason],
                    'lostreason'
                ));

                return $this->redirectToRoute('lostreason_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'lostreason.flash.create_failed',
                    ['%error%' => $e->getMessage()],
                    'lostreason'
                ));
            }
        }

        // Re-render with errors
        return $this->render('lostreason/_form_modal.html.twig', [
            'form' => $form,
            'lostReason' => $lostReason,
            'is_edit' => false,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // EDIT FORM ACTION - Display edit form
    // ====================================

    /**
     * Display edit lostReason form
     */
    protected function editFormAction(LostReason $lostReason, Request $request): Response
    {
        $this->denyAccessUnlessGranted(LostReasonVoter::EDIT, $lostReason);

        $form = $this->createForm(LostReasonFormType::class, $lostReason);

        return $this->render('lostreason/_form_modal.html.twig', [
            'form' => $form,
            'lostReason' => $lostReason,
            'is_edit' => true,
        ]);
    }

    // ====================================
    // UPDATE ACTION - Process edit form submission
    // ====================================

    /**
     * Process edit lostReason form submission
     */
    protected function updateAction(LostReason $lostReason, Request $request): Response
    {
        $this->denyAccessUnlessGranted(LostReasonVoter::EDIT, $lostReason);

        $form = $this->createForm(LostReasonFormType::class, $lostReason);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before update hook
                $this->beforeUpdate($lostReason);

                $this->entityManager->flush();

                // After update hook
                $this->afterUpdate($lostReason);

                $this->addFlash('success', $this->translator->trans(
                    'lostreason.flash.updated_successfully',
                    ['%name%' => (string) $lostReason],
                    'lostreason'
                ));

                return $this->redirectToRoute('lostreason_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'lostreason.flash.update_failed',
                    ['%error%' => $e->getMessage()],
                    'lostreason'
                ));
            }
        }

        // Re-render with errors
        return $this->render('lostreason/_form_modal.html.twig', [
            'form' => $form,
            'lostReason' => $lostReason,
            'is_edit' => true,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // DELETE ACTION - Delete lostReason
    // ====================================

    /**
     * Delete lostReason
     */
    protected function deleteAction(LostReason $lostReason, Request $request): Response
    {
        $this->denyAccessUnlessGranted(LostReasonVoter::DELETE, $lostReason);

        // Verify CSRF token
        $token = $request->request->get('_token');
        if (!$this->csrfTokenManager->isTokenValid(new CsrfToken('delete_lostReason_' . $lostReason->getId()->toString(), $token))) {
            throw new InvalidCsrfTokenException('Invalid CSRF token for delete operation.');
        }

        try {
            // Before delete hook
            $this->beforeDelete($lostReason);

            $name = (string) $lostReason;

            $this->entityManager->remove($lostReason);
            $this->entityManager->flush();

            // After delete hook
            $this->afterDelete();

            $this->addFlash('success', $this->translator->trans(
                'lostreason.flash.deleted_successfully',
                ['%name%' => $name],
                'lostreason'
            ));

        } catch (\Exception $e) {
            $this->addFlash('error', $this->translator->trans(
                'lostreason.flash.delete_failed',
                ['%error%' => $e->getMessage()],
                'lostreason'
            ));
        }

        return $this->redirectToRoute('lostreason_index', [], Response::HTTP_SEE_OTHER);
    }

    // ====================================
    // SHOW ACTION - Display lostReason details
    // ====================================

    /**
     * Display lostReason details
     */
    protected function showAction(LostReason $lostReason): Response
    {
        $this->denyAccessUnlessGranted(LostReasonVoter::VIEW, $lostReason);

        return $this->render('lostreason/show.html.twig', [
            'lostReason' => $lostReason,
        ]);
    }

    // ====================================
    // LIFECYCLE HOOKS
    // ====================================
    // Override these in LostReasonController to add custom logic

    /**
     * Initialize new entity before creating form
     *
     * Note: Organization and Owner are set automatically by TenantEntityProcessor
     * Only use this for custom initialization logic
     */
    protected function initializeNewEntity(LostReason $lostReason): void
    {
        // Organization and Owner are set automatically by TenantEntityProcessor
        // Add your custom initialization here
    }

    /**
     * Execute logic before creating entity
     */
    protected function beforeCreate(LostReason $lostReason): void
    {
        // Override to add logic before create
    }

    /**
     * Execute logic after creating entity
     */
    protected function afterCreate(LostReason $lostReason): void
    {
        // Override to add logic after create (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before updating entity
     */
    protected function beforeUpdate(LostReason $lostReason): void
    {
        // Override to add logic before update
    }

    /**
     * Execute logic after updating entity
     */
    protected function afterUpdate(LostReason $lostReason): void
    {
        // Override to add logic after update (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before deleting entity
     */
    protected function beforeDelete(LostReason $lostReason): void
    {
        // Override to add logic before delete (e.g., check dependencies, archive)
    }

    /**
     * Execute logic after deleting entity
     */
    protected function afterDelete(): void
    {
        // Override to add logic after delete (e.g., cleanup, send notification)
    }
}
