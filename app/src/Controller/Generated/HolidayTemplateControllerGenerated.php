<?php

declare(strict_types=1);

namespace App\Controller\Generated;

use App\Entity\HolidayTemplate;
use App\Form\HolidayTemplateType;
use App\Repository\HolidayTemplateRepository;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Attribute\Route;
use Symfony\Component\Security\Http\Attribute\IsGranted;

/**
 * HolidayTemplate Controller (Generated Base Class)
 *
 * This class is ALWAYS regenerated from CSV. DO NOT edit this file.
 * Add custom actions to HolidayTemplateController.php instead.
 *
 * @generated by Luminai Code Generator
 */
#[Route('/holiday-template')]
abstract class HolidayTemplateControllerGenerated extends AbstractController
{
    public function __construct(
        protected readonly HolidayTemplateRepository $repository
    ) {}

    /**
     * List all HolidayTemplates
     */
    #[Route('', name: 'holiday_template_index', methods: ['GET'])]
        #[IsGranted('ROLE_SUPER_ADMIN')]
    public function index(Request $request): Response
    {
        $page = max(1, $request->query->getInt('page', 1));
        $search = $request->query->get('search', '');

        $holidaytemplates = $this->repository->findPaginated($page, 30);
        $total = $this->repository->count();

        return $this->render('holidaytemplate/index.html.twig', [
            'holidaytemplates' => $holidaytemplates,
            'total' => $total,
            'page' => $page,
            'pages' => ceil($total / 30),
            'search' => $search,
        ]);
    }

    /**
     * Show HolidayTemplate details
     */
    #[Route('/{id}', name: 'holiday_template_show', methods: ['GET'])]
        #[IsGranted('ROLE_SUPER_ADMIN')]
    public function show(HolidayTemplate $holidaytemplate): Response
    {

        return $this->render('holidaytemplate/show.html.twig', [
            'holidaytemplate' => $holidaytemplate,
        ]);
    }

    /**
     * Create new HolidayTemplate
     */
    #[Route('/new', name: 'holiday_template_new', methods: ['GET', 'POST'])]
        #[IsGranted('ROLE_SUPER_ADMIN')]
    public function new(Request $request): Response
    {
        $holidaytemplate = new HolidayTemplate();

        $form = $this->createForm(HolidayTemplateType::class, $holidaytemplate);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $this->repository->save($holidaytemplate, true);

            $this->addFlash('success', 'HolidayTemplate created successfully.');

            return $this->redirectToRoute('holiday_template_index');
        }

        return $this->render('holidaytemplate/form.html.twig', [
            'holidaytemplate' => $holidaytemplate,
            'form' => $form,
            'is_edit' => false,
        ]);
    }

    /**
     * Edit HolidayTemplate
     */
    #[Route('/{id}/edit', name: 'holiday_template_edit', methods: ['GET', 'POST'])]
        #[IsGranted('ROLE_SUPER_ADMIN')]
    public function edit(Request $request, HolidayTemplate $holidaytemplate): Response
    {

        $form = $this->createForm(HolidayTemplateType::class, $holidaytemplate);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $this->repository->save($holidaytemplate, true);

            $this->addFlash('success', 'HolidayTemplate updated successfully.');

            return $this->redirectToRoute('holiday_template_index');
        }

        return $this->render('holidaytemplate/form.html.twig', [
            'holidaytemplate' => $holidaytemplate,
            'form' => $form,
            'is_edit' => true,
        ]);
    }

    /**
     * Delete HolidayTemplate
     */
    #[Route('/{id}', name: 'holiday_template_delete', methods: ['POST'])]
        #[IsGranted('ROLE_SUPER_ADMIN')]
    public function delete(Request $request, HolidayTemplate $holidaytemplate): Response
    {

        if ($this->isCsrfTokenValid('delete_holiday_template_' . $holidaytemplate->getId(), $request->request->get('_token'))) {
            $this->repository->remove($holidaytemplate, true);

            $this->addFlash('success', 'HolidayTemplate deleted successfully.');
        }

        return $this->redirectToRoute('holiday_template_index');
    }
}
