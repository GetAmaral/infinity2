<?php

declare(strict_types=1);

namespace App\Controller\Generated;

use App\Controller\Base\BaseApiController;
use App\Entity\HolidayTemplate;
use App\Repository\HolidayTemplateRepository;
use App\Security\Voter\HolidayTemplateVoter;
use App\Form\HolidayTemplateFormType;
use App\Service\ListPreferencesService;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Security\Csrf\CsrfToken;
use Symfony\Component\Security\Csrf\CsrfTokenManagerInterface;
use Symfony\Component\Security\Core\Exception\InvalidCsrfTokenException;
use Symfony\Contracts\Translation\TranslatorInterface;

/**
 * Generated Base Controller for HolidayTemplate
 *
 * ⚠️ WARNING: This file is ALWAYS regenerated by Genmax
 * DO NOT EDIT THIS FILE - Edit HolidayTemplateController instead
 *
 * @generated
 * @codeCoverageIgnore
 */
abstract class HolidayTemplateControllerGenerated extends BaseApiController
{
    public function __construct(
        protected readonly EntityManagerInterface $entityManager,
        protected readonly HolidayTemplateRepository $repository,
        protected readonly ListPreferencesService $listPreferencesService,
        protected readonly TranslatorInterface $translator,
        protected readonly CsrfTokenManagerInterface $csrfTokenManager,
    ) {}

    // ====================================
    // ABSTRACT METHOD IMPLEMENTATIONS
    // ====================================

    /**
     * Get the repository for this entity
     */
    protected function getRepository(): HolidayTemplateRepository
    {
        return $this->repository;
    }

    /**
     * Get the plural name for this entity
     */
    protected function getEntityPluralName(): string
    {
        return 'holidayTemplates';
    }

    /**
     * Convert entity to array for API responses
     */
    protected function entityToArray(object $entity): array
    {
        if (!$entity instanceof HolidayTemplate) {
            throw new \InvalidArgumentException('Expected HolidayTemplate instance');
        }

        return [
            'id' => $entity->getId()->toString(),
            'name' => $entity->getName(),
            'blocksScheduling' => $entity->getBlocksScheduling(),
            'city' => ($cityRel = $entity->getCity()) ? [
                'id' => $cityRel->getId()->toString(),
                'display' => (string) $cityRel,
            ] : null,
            'country' => ($countryRel = $entity->getCountry()) ? [
                'id' => $countryRel->getId()->toString(),
                'display' => (string) $countryRel,
            ] : null,
            'recurrenceFrequency' => $entity->getRecurrenceFrequency(),
            'recurrenceInterval' => $entity->getRecurrenceInterval(),
            'sentAt' => $entity->getSentAt()?->format('M d, Y'),
        ];
    }

    // ====================================
    // INDEX ACTION - List all HolidayTemplates
    // ====================================

    /**
     * List HolidayTemplates
     */
    protected function indexAction(): Response
    {
        $this->denyAccessUnlessGranted(HolidayTemplateVoter::LIST);

        $preferences = $this->listPreferencesService->getEntityPreferences('holidayTemplates');
        $savedView = $preferences['view'] ?? 'grid';

        return $this->render('holidaytemplate/index.html.twig', [
            'entities' => [],  // Loaded via API
            'entity_name' => 'holidayTemplate',
            'entity_name_plural' => 'holidayTemplates',
            'page_icon' => 'bi-calendar-x',
            'default_view' => $savedView,

            // List configuration from GeneratorProperty
            'enable_search' => false,
            'enable_filters' => false,
            'enable_sorting' => true,
            'enable_create_button' => true,

            // Property metadata for client-side rendering (as JSON strings)
            'list_fields' => '[{"name":"name","label":"Name","type":"string","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getName"},{"name":"blocksScheduling","label":"Blocks Scheduling","type":"boolean","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getBlocksScheduling"},{"name":"city","label":"City","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCity"},{"name":"country","label":"Country","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCountry"},{"name":"recurrenceFrequency","label":"RecurrenceFrequency","type":"integer","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getRecurrenceFrequency"},{"name":"recurrenceInterval","label":"RecurrenceInterval","type":"integer","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getRecurrenceInterval"},{"name":"sentAt","label":"Sent At","type":"date","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getSentAt"}]',
            'searchable_fields' => '[]',
            'filterable_fields' => '[]',
            'sortable_fields' => '[{"name":"name","label":"Name"},{"name":"blocksScheduling","label":"Blocks Scheduling"},{"name":"city","label":"City"},{"name":"country","label":"Country"},{"name":"recurrenceFrequency","label":"RecurrenceFrequency"},{"name":"recurrenceInterval","label":"RecurrenceInterval"},{"name":"sentAt","label":"Sent At"}]',
        ]);
    }

    // ====================================
    // API SEARCH - Fetch HolidayTemplates for list view
    // ====================================

    /**
     * API endpoint for searching HolidayTemplates
     */
    protected function apiSearchAction(Request $request): JsonResponse
    {
        $this->denyAccessUnlessGranted(HolidayTemplateVoter::LIST);

        // This method uses the BaseApiController's handleSearchRequest
        // which integrates with API Platform's GetCollection operation
        return $this->handleSearchRequest($request);
    }

    // ====================================
    // NEW FORM ACTION - Display create form
    // ====================================

    /**
     * Display new holidayTemplate form
     */
    protected function newFormAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(HolidayTemplateVoter::CREATE);

        $holidayTemplate = new HolidayTemplate();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($holidayTemplate);

        $form = $this->createForm(HolidayTemplateFormType::class, $holidayTemplate);

        return $this->render('holidaytemplate/_form_modal.html.twig', [
            'form' => $form,
            'holidayTemplate' => $holidayTemplate,
            'is_edit' => false,
        ]);
    }

    // ====================================
    // CREATE ACTION - Process create form submission
    // ====================================

    /**
     * Process new holidayTemplate form submission
     */
    protected function createAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(HolidayTemplateVoter::CREATE);

        $holidayTemplate = new HolidayTemplate();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($holidayTemplate);

        $form = $this->createForm(HolidayTemplateFormType::class, $holidayTemplate);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before create hook
                $this->beforeCreate($holidayTemplate);

                $this->entityManager->persist($holidayTemplate);
                $this->entityManager->flush();

                // After create hook
                $this->afterCreate($holidayTemplate);

                $this->addFlash('success', $this->translator->trans(
                    'holidaytemplate.flash.created_successfully',
                    ['%name%' => (string) $holidayTemplate],
                    'holidaytemplate'
                ));

                return $this->redirectToRoute('holidaytemplate_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'holidaytemplate.flash.create_failed',
                    ['%error%' => $e->getMessage()],
                    'holidaytemplate'
                ));
            }
        }

        // Re-render with errors
        return $this->render('holidaytemplate/_form_modal.html.twig', [
            'form' => $form,
            'holidayTemplate' => $holidayTemplate,
            'is_edit' => false,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // EDIT FORM ACTION - Display edit form
    // ====================================

    /**
     * Display edit holidayTemplate form
     */
    protected function editFormAction(HolidayTemplate $holidayTemplate, Request $request): Response
    {
        $this->denyAccessUnlessGranted(HolidayTemplateVoter::EDIT, $holidayTemplate);

        $form = $this->createForm(HolidayTemplateFormType::class, $holidayTemplate);

        return $this->render('holidaytemplate/_form_modal.html.twig', [
            'form' => $form,
            'holidayTemplate' => $holidayTemplate,
            'is_edit' => true,
        ]);
    }

    // ====================================
    // UPDATE ACTION - Process edit form submission
    // ====================================

    /**
     * Process edit holidayTemplate form submission
     */
    protected function updateAction(HolidayTemplate $holidayTemplate, Request $request): Response
    {
        $this->denyAccessUnlessGranted(HolidayTemplateVoter::EDIT, $holidayTemplate);

        $form = $this->createForm(HolidayTemplateFormType::class, $holidayTemplate);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before update hook
                $this->beforeUpdate($holidayTemplate);

                $this->entityManager->flush();

                // After update hook
                $this->afterUpdate($holidayTemplate);

                $this->addFlash('success', $this->translator->trans(
                    'holidaytemplate.flash.updated_successfully',
                    ['%name%' => (string) $holidayTemplate],
                    'holidaytemplate'
                ));

                return $this->redirectToRoute('holidaytemplate_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'holidaytemplate.flash.update_failed',
                    ['%error%' => $e->getMessage()],
                    'holidaytemplate'
                ));
            }
        }

        // Re-render with errors
        return $this->render('holidaytemplate/_form_modal.html.twig', [
            'form' => $form,
            'holidayTemplate' => $holidayTemplate,
            'is_edit' => true,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // DELETE ACTION - Delete holidayTemplate
    // ====================================

    /**
     * Delete holidayTemplate
     */
    protected function deleteAction(HolidayTemplate $holidayTemplate, Request $request): Response
    {
        $this->denyAccessUnlessGranted(HolidayTemplateVoter::DELETE, $holidayTemplate);

        // Verify CSRF token
        $token = $request->request->get('_token');
        if (!$this->csrfTokenManager->isTokenValid(new CsrfToken('delete_holidayTemplate_' . $holidayTemplate->getId()->toString(), $token))) {
            throw new InvalidCsrfTokenException('Invalid CSRF token for delete operation.');
        }

        try {
            // Before delete hook
            $this->beforeDelete($holidayTemplate);

            $name = (string) $holidayTemplate;

            $this->entityManager->remove($holidayTemplate);
            $this->entityManager->flush();

            // After delete hook
            $this->afterDelete();

            $this->addFlash('success', $this->translator->trans(
                'holidaytemplate.flash.deleted_successfully',
                ['%name%' => $name],
                'holidaytemplate'
            ));

        } catch (\Exception $e) {
            $this->addFlash('error', $this->translator->trans(
                'holidaytemplate.flash.delete_failed',
                ['%error%' => $e->getMessage()],
                'holidaytemplate'
            ));
        }

        return $this->redirectToRoute('holidaytemplate_index', [], Response::HTTP_SEE_OTHER);
    }

    // ====================================
    // SHOW ACTION - Display holidayTemplate details
    // ====================================

    /**
     * Display holidayTemplate details
     */
    protected function showAction(HolidayTemplate $holidayTemplate): Response
    {
        $this->denyAccessUnlessGranted(HolidayTemplateVoter::VIEW, $holidayTemplate);

        return $this->render('holidaytemplate/show.html.twig', [
            'holidayTemplate' => $holidayTemplate,
        ]);
    }

    // ====================================
    // LIFECYCLE HOOKS
    // ====================================
    // Override these in HolidayTemplateController to add custom logic

    /**
     * Initialize new entity before creating form
     *
     * Note: Organization and Owner are set automatically by TenantEntityProcessor
     * Only use this for custom initialization logic
     */
    protected function initializeNewEntity(HolidayTemplate $holidayTemplate): void
    {
        // Organization and Owner are set automatically by TenantEntityProcessor
        // Add your custom initialization here
    }

    /**
     * Execute logic before creating entity
     */
    protected function beforeCreate(HolidayTemplate $holidayTemplate): void
    {
        // Override to add logic before create
    }

    /**
     * Execute logic after creating entity
     */
    protected function afterCreate(HolidayTemplate $holidayTemplate): void
    {
        // Override to add logic after create (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before updating entity
     */
    protected function beforeUpdate(HolidayTemplate $holidayTemplate): void
    {
        // Override to add logic before update
    }

    /**
     * Execute logic after updating entity
     */
    protected function afterUpdate(HolidayTemplate $holidayTemplate): void
    {
        // Override to add logic after update (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before deleting entity
     */
    protected function beforeDelete(HolidayTemplate $holidayTemplate): void
    {
        // Override to add logic before delete (e.g., check dependencies, archive)
    }

    /**
     * Execute logic after deleting entity
     */
    protected function afterDelete(): void
    {
        // Override to add logic after delete (e.g., cleanup, send notification)
    }
}
