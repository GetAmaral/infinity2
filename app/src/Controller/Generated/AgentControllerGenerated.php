<?php

declare(strict_types=1);

namespace App\Controller\Generated;

use App\Controller\Base\BaseApiController;
use App\Entity\Agent;
use App\Repository\AgentRepository;
use App\Security\Voter\AgentVoter;
use App\Form\AgentFormType;
use App\Service\ListPreferencesService;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Security\Csrf\CsrfToken;
use Symfony\Component\Security\Csrf\CsrfTokenManagerInterface;
use Symfony\Component\Security\Core\Exception\InvalidCsrfTokenException;
use Symfony\Contracts\Translation\TranslatorInterface;

/**
 * Generated Base Controller for Agent
 *
 * ⚠️ WARNING: This file is ALWAYS regenerated by Genmax
 * DO NOT EDIT THIS FILE - Edit AgentController instead
 *
 * @generated
 * @codeCoverageIgnore
 */
abstract class AgentControllerGenerated extends BaseApiController
{
    public function __construct(
        protected readonly EntityManagerInterface $entityManager,
        protected readonly AgentRepository $repository,
        protected readonly ListPreferencesService $listPreferencesService,
        protected readonly TranslatorInterface $translator,
        protected readonly CsrfTokenManagerInterface $csrfTokenManager,
    ) {}

    // ====================================
    // ABSTRACT METHOD IMPLEMENTATIONS
    // ====================================

    /**
     * Get the repository for this entity
     */
    protected function getRepository(): AgentRepository
    {
        return $this->repository;
    }

    /**
     * Get the plural name for this entity
     */
    protected function getEntityPluralName(): string
    {
        return 'agents';
    }

    /**
     * Convert entity to array for API responses
     */
    protected function entityToArray(object $entity): array
    {
        if (!$entity instanceof Agent) {
            throw new \InvalidArgumentException('Expected Agent instance');
        }

        return [
            'id' => $entity->getId()->toString(),
            'organization' => ($organizationRel = $entity->getOrganization()) ? [
                'id' => $organizationRel->getId()->toString(),
                'display' => (string) $organizationRel,
            ] : null,
            'name' => $entity->getName(),
            'phone' => $entity->getPhone(),
            'title' => $entity->getTitle(),
            'active' => $entity->getActive(),
            'available' => $entity->getAvailable(),
            'territory' => $entity->getTerritory(),
            'quota' => $entity->getQuota(),
            'user' => ($userRel = $entity->getUser()) ? [
                'id' => $userRel->getId()->toString(),
                'display' => (string) $userRel,
            ] : null,
            'agentType' => ($agentTypeRel = $entity->getAgentType()) ? [
                'id' => $agentTypeRel->getId()->toString(),
                'display' => (string) $agentTypeRel,
            ] : null,
            'commissionRate' => $entity->getCommissionRate(),
            'startDate' => $entity->getStartDate()?->format('M d, Y'),
            'endDate' => $entity->getEndDate()?->format('M d, Y'),
            'specialization' => $entity->getSpecialization(),
            'languages' => $entity->getLanguages(),
            'certifications' => $entity->getCertifications(),
            'totalSales' => $entity->getTotalSales(),
            'currentMonthSales' => $entity->getCurrentMonthSales(),
            'conversionRate' => $entity->getConversionRate(),
            'customerSatisfactionScore' => $entity->getCustomerSatisfactionScore(),
            'maxConcurrentCustomers' => $entity->getMaxConcurrentCustomers(),
            'currentCustomerCount' => $entity->getCurrentCustomerCount(),
            'averageResponseTime' => $entity->getAverageResponseTime(),
            'skills' => $entity->getSkills(),
            'prompt' => $entity->getPrompt(),
            'talks' => ($talksRel = $entity->getTalks()) ? [
                'id' => $talksRel->getId()->toString(),
                'display' => (string) $talksRel,
            ] : null,
        ];
    }

    // ====================================
    // INDEX ACTION - List all Agents
    // ====================================

    /**
     * List Agents
     */
    protected function indexAction(): Response
    {
        $this->denyAccessUnlessGranted(AgentVoter::LIST);

        $preferences = $this->listPreferencesService->getEntityPreferences('agents');
        $savedView = $preferences['view'] ?? 'grid';

        return $this->render('agent/index.html.twig', [
            'entities' => [],  // Loaded via API
            'entity_name' => 'agent',
            'entity_name_plural' => 'agents',
            'page_icon' => 'bi-headset',
            'default_view' => $savedView,

            // List configuration from GeneratorProperty
            'enable_search' => true,
            'enable_filters' => false,
            'enable_sorting' => true,
            'enable_create_button' => true,

            // Property metadata for client-side rendering (as JSON strings)
            'list_fields' => '[{"name":"name","label":"Name","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":"partial","filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getName"},{"name":"phone","label":"Phone","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":"exact","filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getPhone"},{"name":"title","label":"Job Title","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":"partial","filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getTitle"},{"name":"active","label":"Active","type":"boolean","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":true,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getActive"},{"name":"available","label":"Available","type":"boolean","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":true,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getAvailable"},{"name":"territory","label":"Territory","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":"exact","filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getTerritory"},{"name":"quota","label":"Sales Quota","type":"decimal","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":true,"filterExists":false,"getter":"getQuota"},{"name":"user","label":"User","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":true,"getter":"getUser"},{"name":"agentType","label":"AgentType","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":true,"getter":"getAgentType"},{"name":"commissionRate","label":"Commission Rate","type":"decimal","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":true,"filterExists":false,"getter":"getCommissionRate"},{"name":"startDate","label":"Start Date","type":"date","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":true,"filterNumericRange":false,"filterExists":false,"getter":"getStartDate"},{"name":"endDate","label":"End Date","type":"date","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":true,"filterNumericRange":false,"filterExists":false,"getter":"getEndDate"},{"name":"specialization","label":"Specialization","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":"partial","filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getSpecialization"},{"name":"languages","label":"Languages","type":"text","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getLanguages"},{"name":"certifications","label":"Certifications","type":"text","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCertifications"},{"name":"totalSales","label":"Total Sales","type":"decimal","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":true,"filterExists":false,"getter":"getTotalSales"},{"name":"currentMonthSales","label":"Current Month Sales","type":"decimal","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":true,"filterExists":false,"getter":"getCurrentMonthSales"},{"name":"conversionRate","label":"Conversion Rate","type":"decimal","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":true,"filterExists":false,"getter":"getConversionRate"},{"name":"customerSatisfactionScore","label":"CSAT Score","type":"decimal","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":true,"filterExists":false,"getter":"getCustomerSatisfactionScore"},{"name":"maxConcurrentCustomers","label":"Max Concurrent Customers","type":"integer","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":true,"filterExists":false,"getter":"getMaxConcurrentCustomers"},{"name":"currentCustomerCount","label":"Current Customer Count","type":"integer","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":true,"filterExists":false,"getter":"getCurrentCustomerCount"},{"name":"averageResponseTime","label":"Avg Response Time","type":"integer","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":true,"filterExists":false,"getter":"getAverageResponseTime"},{"name":"skills","label":"Skills","type":"text","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getSkills"},{"name":"prompt","label":"AI Prompt","type":"text","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getPrompt"},{"name":"talks","label":"Talks","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getTalks"}]',
            'searchable_fields' => '[{"name":"name","label":"Name","type":"string"},{"name":"prompt","label":"AI Prompt","type":"text"}]',
            'filterable_fields' => '[]',
            'sortable_fields' => '[{"name":"name","label":"Name"},{"name":"user","label":"User"},{"name":"agentType","label":"AgentType"},{"name":"prompt","label":"AI Prompt"},{"name":"talks","label":"Talks"}]',
        ]);
    }

    // ====================================
    // API SEARCH - Fetch Agents for list view
    // ====================================

    /**
     * API endpoint for searching Agents
     */
    protected function apiSearchAction(Request $request): JsonResponse
    {
        $this->denyAccessUnlessGranted(AgentVoter::LIST);

        // This method uses the BaseApiController's handleSearchRequest
        // which integrates with API Platform's GetCollection operation
        return $this->handleSearchRequest($request);
    }

    // ====================================
    // NEW FORM ACTION - Display create form
    // ====================================

    /**
     * Display new agent form
     */
    protected function newFormAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(AgentVoter::CREATE);

        $agent = new Agent();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($agent);

        $form = $this->createForm(AgentFormType::class, $agent);

        return $this->render('agent/_form_modal.html.twig', [
            'form' => $form,
            'agent' => $agent,
            'is_edit' => false,
        ]);
    }

    // ====================================
    // CREATE ACTION - Process create form submission
    // ====================================

    /**
     * Process new agent form submission
     */
    protected function createAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(AgentVoter::CREATE);

        $agent = new Agent();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($agent);

        $form = $this->createForm(AgentFormType::class, $agent);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before create hook
                $this->beforeCreate($agent);

                $this->entityManager->persist($agent);
                $this->entityManager->flush();

                // After create hook
                $this->afterCreate($agent);

                $this->addFlash('success', $this->translator->trans(
                    'agent.flash.created_successfully',
                    ['%name%' => (string) $agent],
                    'agent'
                ));

                return $this->redirectToRoute('agent_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'agent.flash.create_failed',
                    ['%error%' => $e->getMessage()],
                    'agent'
                ));
            }
        }

        // Re-render with errors
        return $this->render('agent/_form_modal.html.twig', [
            'form' => $form,
            'agent' => $agent,
            'is_edit' => false,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // EDIT FORM ACTION - Display edit form
    // ====================================

    /**
     * Display edit agent form
     */
    protected function editFormAction(Agent $agent, Request $request): Response
    {
        $this->denyAccessUnlessGranted(AgentVoter::EDIT, $agent);

        $form = $this->createForm(AgentFormType::class, $agent);

        return $this->render('agent/_form_modal.html.twig', [
            'form' => $form,
            'agent' => $agent,
            'is_edit' => true,
        ]);
    }

    // ====================================
    // UPDATE ACTION - Process edit form submission
    // ====================================

    /**
     * Process edit agent form submission
     */
    protected function updateAction(Agent $agent, Request $request): Response
    {
        $this->denyAccessUnlessGranted(AgentVoter::EDIT, $agent);

        $form = $this->createForm(AgentFormType::class, $agent);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before update hook
                $this->beforeUpdate($agent);

                $this->entityManager->flush();

                // After update hook
                $this->afterUpdate($agent);

                $this->addFlash('success', $this->translator->trans(
                    'agent.flash.updated_successfully',
                    ['%name%' => (string) $agent],
                    'agent'
                ));

                return $this->redirectToRoute('agent_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'agent.flash.update_failed',
                    ['%error%' => $e->getMessage()],
                    'agent'
                ));
            }
        }

        // Re-render with errors
        return $this->render('agent/_form_modal.html.twig', [
            'form' => $form,
            'agent' => $agent,
            'is_edit' => true,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // DELETE ACTION - Delete agent
    // ====================================

    /**
     * Delete agent
     */
    protected function deleteAction(Agent $agent, Request $request): Response
    {
        $this->denyAccessUnlessGranted(AgentVoter::DELETE, $agent);

        // Verify CSRF token
        $token = $request->request->get('_token');
        if (!$this->csrfTokenManager->isTokenValid(new CsrfToken('delete_agent_' . $agent->getId()->toString(), $token))) {
            throw new InvalidCsrfTokenException('Invalid CSRF token for delete operation.');
        }

        try {
            // Before delete hook
            $this->beforeDelete($agent);

            $name = (string) $agent;

            $this->entityManager->remove($agent);
            $this->entityManager->flush();

            // After delete hook
            $this->afterDelete();

            $this->addFlash('success', $this->translator->trans(
                'agent.flash.deleted_successfully',
                ['%name%' => $name],
                'agent'
            ));

        } catch (\Exception $e) {
            $this->addFlash('error', $this->translator->trans(
                'agent.flash.delete_failed',
                ['%error%' => $e->getMessage()],
                'agent'
            ));
        }

        return $this->redirectToRoute('agent_index', [], Response::HTTP_SEE_OTHER);
    }

    // ====================================
    // SHOW ACTION - Display agent details
    // ====================================

    /**
     * Display agent details
     */
    protected function showAction(Agent $agent): Response
    {
        $this->denyAccessUnlessGranted(AgentVoter::VIEW, $agent);

        return $this->render('agent/show.html.twig', [
            'agent' => $agent,
        ]);
    }

    // ====================================
    // LIFECYCLE HOOKS
    // ====================================
    // Override these in AgentController to add custom logic

    /**
     * Initialize new entity before creating form
     *
     * Note: Organization and Owner are set automatically by TenantEntityProcessor
     * Only use this for custom initialization logic
     */
    protected function initializeNewEntity(Agent $agent): void
    {
        // Organization and Owner are set automatically by TenantEntityProcessor
        // Add your custom initialization here
    }

    /**
     * Execute logic before creating entity
     */
    protected function beforeCreate(Agent $agent): void
    {
        // Override to add logic before create
    }

    /**
     * Execute logic after creating entity
     */
    protected function afterCreate(Agent $agent): void
    {
        // Override to add logic after create (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before updating entity
     */
    protected function beforeUpdate(Agent $agent): void
    {
        // Override to add logic before update
    }

    /**
     * Execute logic after updating entity
     */
    protected function afterUpdate(Agent $agent): void
    {
        // Override to add logic after update (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before deleting entity
     */
    protected function beforeDelete(Agent $agent): void
    {
        // Override to add logic before delete (e.g., check dependencies, archive)
    }

    /**
     * Execute logic after deleting entity
     */
    protected function afterDelete(): void
    {
        // Override to add logic after delete (e.g., cleanup, send notification)
    }
}
