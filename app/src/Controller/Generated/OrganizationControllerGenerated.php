<?php

declare(strict_types=1);

namespace App\Controller\Generated;

use App\Controller\Base\BaseApiController;
use App\Entity\Organization;
use App\Repository\OrganizationRepository;
use App\Security\Voter\OrganizationVoter;
use App\Form\OrganizationFormType;
use App\Service\ListPreferencesService;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Security\Csrf\CsrfToken;
use Symfony\Component\Security\Csrf\CsrfTokenManagerInterface;
use Symfony\Component\Security\Core\Exception\InvalidCsrfTokenException;
use Symfony\Contracts\Translation\TranslatorInterface;

/**
 * Generated Base Controller for Organization
 *
 * ⚠️ WARNING: This file is ALWAYS regenerated by Genmax
 * DO NOT EDIT THIS FILE - Edit OrganizationController instead
 *
 * @generated
 * @codeCoverageIgnore
 */
abstract class OrganizationControllerGenerated extends BaseApiController
{
    public function __construct(
        protected readonly EntityManagerInterface $entityManager,
        protected readonly OrganizationRepository $repository,
        protected readonly ListPreferencesService $listPreferencesService,
        protected readonly TranslatorInterface $translator,
        protected readonly CsrfTokenManagerInterface $csrfTokenManager,
    ) {}

    // ====================================
    // ABSTRACT METHOD IMPLEMENTATIONS
    // ====================================

    /**
     * Get the repository for this entity
     */
    protected function getRepository(): OrganizationRepository
    {
        return $this->repository;
    }

    /**
     * Get the plural name for this entity
     */
    protected function getEntityPluralName(): string
    {
        return 'organizatia';
    }

    /**
     * Convert entity to array for API responses
     *
     * ⚠️ IMPORTANT: Enum Properties Stored as Strings
     * -------------------------------------------------
     * Properties with enum-backed types (like InputType) are stored as STRINGS
     * in the database and getters return strings directly, NOT enum objects.
     *
     * ❌ WRONG:   $entity->getType()->value   (Error: "Attempt to read property 'value' on string")
     * ✅ CORRECT: $entity->getType()          (Already a string - 'fully_completed')
     *
     * If you need the enum object for business logic, use:
     *    InputType::from($entity->getType())
     */
    protected function entityToArray(object $entity): array
    {
        if (!$entity instanceof Organization) {
            throw new \InvalidArgumentException('Expected Organization instance');
        }

        return [
            'id' => $entity->getId()->toString(),
            'logoPath' => $entity->getLogoPath(),
            'name' => $entity->getName(),
            'logoPathDark' => $entity->getLogoPathDark(),
            'description' => $entity->getDescription(),
            'studentCourses' => ($studentCoursesRel = $entity->getStudentCourses()) ? [
                'id' => $studentCoursesRel->getId()->toString(),
                'display' => (string) $studentCoursesRel,
            ] : null,
            'logoUrl' => $entity->getLogoUrl(),
            'industry' => $entity->getIndustry(),
            'address' => $entity->getAddress(),
            'website' => $entity->getWebsite(),
            'active' => $entity->getActive(),
            'agents' => ($agentsRel = $entity->getAgents()) ? [
                'id' => $agentsRel->getId()->toString(),
                'display' => (string) $agentsRel,
            ] : null,
            'products' => ($productsRel = $entity->getProducts()) ? [
                'id' => $productsRel->getId()->toString(),
                'display' => (string) $productsRel,
            ] : null,
            'billingFrequencies' => ($billingFrequenciesRel = $entity->getBillingFrequencies()) ? [
                'id' => $billingFrequenciesRel->getId()->toString(),
                'display' => (string) $billingFrequenciesRel,
            ] : null,
            'branding' => $entity->getBranding(),
            'brands' => ($brandsRel = $entity->getBrands()) ? [
                'id' => $brandsRel->getId()->toString(),
                'display' => (string) $brandsRel,
            ] : null,
            'businessPhone' => $entity->getBusinessPhone(),
            'businessSettings' => $entity->getBusinessSettings(),
            'calendars' => ($calendarsRel = $entity->getCalendars()) ? [
                'id' => $calendarsRel->getId()->toString(),
                'display' => (string) $calendarsRel,
            ] : null,
            'campaigns' => ($campaignsRel = $entity->getCampaigns()) ? [
                'id' => $campaignsRel->getId()->toString(),
                'display' => (string) $campaignsRel,
            ] : null,
            'pipelineStageTemplates' => ($pipelineStageTemplatesRel = $entity->getPipelineStageTemplates()) ? [
                'id' => $pipelineStageTemplatesRel->getId()->toString(),
                'display' => (string) $pipelineStageTemplatesRel,
            ] : null,
            'taskTemplates' => ($taskTemplatesRel = $entity->getTaskTemplates()) ? [
                'id' => $taskTemplatesRel->getId()->toString(),
                'display' => (string) $taskTemplatesRel,
            ] : null,
            'reminders' => ($remindersRel = $entity->getReminders()) ? [
                'id' => $remindersRel->getId()->toString(),
                'display' => (string) $remindersRel,
            ] : null,
            'celPhone' => $entity->getCelPhone(),
            'pipelineTemplates' => ($pipelineTemplatesRel = $entity->getPipelineTemplates()) ? [
                'id' => $pipelineTemplatesRel->getId()->toString(),
                'display' => (string) $pipelineTemplatesRel,
            ] : null,
            'winReasons' => ($winReasonsRel = $entity->getWinReasons()) ? [
                'id' => $winReasonsRel->getId()->toString(),
                'display' => (string) $winReasonsRel,
            ] : null,
            'treeFlows' => ($treeFlowsRel = $entity->getTreeFlows()) ? [
                'id' => $treeFlowsRel->getId()->toString(),
                'display' => (string) $treeFlowsRel,
            ] : null,
            'cities' => ($citiesRel = $entity->getCities()) ? [
                'id' => $citiesRel->getId()->toString(),
                'display' => (string) $citiesRel,
            ] : null,
            'calendarTypes' => ($calendarTypesRel = $entity->getCalendarTypes()) ? [
                'id' => $calendarTypesRel->getId()->toString(),
                'display' => (string) $calendarTypesRel,
            ] : null,
            'attachments' => ($attachmentsRel = $entity->getAttachments()) ? [
                'id' => $attachmentsRel->getId()->toString(),
                'display' => (string) $attachmentsRel,
            ] : null,
            'dealCategories' => ($dealCategoriesRel = $entity->getDealCategories()) ? [
                'id' => $dealCategoriesRel->getId()->toString(),
                'display' => (string) $dealCategoriesRel,
            ] : null,
            'dealTypes' => ($dealTypesRel = $entity->getDealTypes()) ? [
                'id' => $dealTypesRel->getId()->toString(),
                'display' => (string) $dealTypesRel,
            ] : null,
            'eventAttendees' => ($eventAttendeesRel = $entity->getEventAttendees()) ? [
                'id' => $eventAttendeesRel->getId()->toString(),
                'display' => (string) $eventAttendeesRel,
            ] : null,
            'lostReasons' => ($lostReasonsRel = $entity->getLostReasons()) ? [
                'id' => $lostReasonsRel->getId()->toString(),
                'display' => (string) $lostReasonsRel,
            ] : null,
            'meetingDatas' => ($meetingDatasRel = $entity->getMeetingDatas()) ? [
                'id' => $meetingDatasRel->getId()->toString(),
                'display' => (string) $meetingDatasRel,
            ] : null,
            'notifications' => ($notificationsRel = $entity->getNotifications()) ? [
                'id' => $notificationsRel->getId()->toString(),
                'display' => (string) $notificationsRel,
            ] : null,
            'city' => ($cityRel = $entity->getCity()) ? [
                'id' => $cityRel->getId()->toString(),
                'display' => (string) $cityRel,
            ] : null,
            'companies' => ($companiesRel = $entity->getCompanies()) ? [
                'id' => $companiesRel->getId()->toString(),
                'display' => (string) $companiesRel,
            ] : null,
            'companySize' => $entity->getCompanySize(),
            'competitors' => ($competitorsRel = $entity->getCompetitors()) ? [
                'id' => $competitorsRel->getId()->toString(),
                'display' => (string) $competitorsRel,
            ] : null,
            'contactName' => $entity->getContactName(),
            'contacts' => ($contactsRel = $entity->getContacts()) ? [
                'id' => $contactsRel->getId()->toString(),
                'display' => (string) $contactsRel,
            ] : null,
            'courses' => ($coursesRel = $entity->getCourses()) ? [
                'id' => $coursesRel->getId()->toString(),
                'display' => (string) $coursesRel,
            ] : null,
            'currency' => $entity->getCurrency(),
            'dealStages' => ($dealStagesRel = $entity->getDealStages()) ? [
                'id' => $dealStagesRel->getId()->toString(),
                'display' => (string) $dealStagesRel,
            ] : null,
            'deals' => ($dealsRel = $entity->getDeals()) ? [
                'id' => $dealsRel->getId()->toString(),
                'display' => (string) $dealsRel,
            ] : null,
            'eventCategories' => ($eventCategoriesRel = $entity->getEventCategories()) ? [
                'id' => $eventCategoriesRel->getId()->toString(),
                'display' => (string) $eventCategoriesRel,
            ] : null,
            'eventResourceBookings' => ($eventResourceBookingsRel = $entity->getEventResourceBookings()) ? [
                'id' => $eventResourceBookingsRel->getId()->toString(),
                'display' => (string) $eventResourceBookingsRel,
            ] : null,
            'eventResourceTypes' => ($eventResourceTypesRel = $entity->getEventResourceTypes()) ? [
                'id' => $eventResourceTypesRel->getId()->toString(),
                'display' => (string) $eventResourceTypesRel,
            ] : null,
            'eventResources' => ($eventResourcesRel = $entity->getEventResources()) ? [
                'id' => $eventResourcesRel->getId()->toString(),
                'display' => (string) $eventResourcesRel,
            ] : null,
            'events' => ($eventsRel = $entity->getEvents()) ? [
                'id' => $eventsRel->getId()->toString(),
                'display' => (string) $eventsRel,
            ] : null,
            'featureFlags' => $entity->getFeatureFlags(),
            'flags' => ($flagsRel = $entity->getFlags()) ? [
                'id' => $flagsRel->getId()->toString(),
                'display' => (string) $flagsRel,
            ] : null,
            'geo' => $entity->getGeo(),
            'holidays' => ($holidaysRel = $entity->getHolidays()) ? [
                'id' => $holidaysRel->getId()->toString(),
                'display' => (string) $holidaysRel,
            ] : null,
            'integrationConfig' => $entity->getIntegrationConfig(),
            'leadSources' => ($leadSourcesRel = $entity->getLeadSources()) ? [
                'id' => $leadSourcesRel->getId()->toString(),
                'display' => (string) $leadSourcesRel,
            ] : null,
            'modules' => ($modulesRel = $entity->getModules()) ? [
                'id' => $modulesRel->getId()->toString(),
                'display' => (string) $modulesRel,
            ] : null,
            'navConfig' => $entity->getNavConfig(),
            'notificationTypes' => ($notificationTypesRel = $entity->getNotificationTypes()) ? [
                'id' => $notificationTypesRel->getId()->toString(),
                'display' => (string) $notificationTypesRel,
            ] : null,
            'pipelineStages' => ($pipelineStagesRel = $entity->getPipelineStages()) ? [
                'id' => $pipelineStagesRel->getId()->toString(),
                'display' => (string) $pipelineStagesRel,
            ] : null,
            'pipelines' => ($pipelinesRel = $entity->getPipelines()) ? [
                'id' => $pipelinesRel->getId()->toString(),
                'display' => (string) $pipelinesRel,
            ] : null,
            'postalCode' => $entity->getPostalCode(),
            'productBatches' => ($productBatchesRel = $entity->getProductBatches()) ? [
                'id' => $productBatchesRel->getId()->toString(),
                'display' => (string) $productBatchesRel,
            ] : null,
            'productCategories' => ($productCategoriesRel = $entity->getProductCategories()) ? [
                'id' => $productCategoriesRel->getId()->toString(),
                'display' => (string) $productCategoriesRel,
            ] : null,
            'productLines' => ($productLinesRel = $entity->getProductLines()) ? [
                'id' => $productLinesRel->getId()->toString(),
                'display' => (string) $productLinesRel,
            ] : null,
            'profiles' => ($profilesRel = $entity->getProfiles()) ? [
                'id' => $profilesRel->getId()->toString(),
                'display' => (string) $profilesRel,
            ] : null,
            'securityConfig' => $entity->getSecurityConfig(),
            'slug' => $entity->getSlug(),
            'socialMedias' => ($socialMediasRel = $entity->getSocialMedias()) ? [
                'id' => $socialMediasRel->getId()->toString(),
                'display' => (string) $socialMediasRel,
            ] : null,
            'status' => $entity->getStatus(),
            'tags' => ($tagsRel = $entity->getTags()) ? [
                'id' => $tagsRel->getId()->toString(),
                'display' => (string) $tagsRel,
            ] : null,
            'talkMessages' => ($talkMessagesRel = $entity->getTalkMessages()) ? [
                'id' => $talkMessagesRel->getId()->toString(),
                'display' => (string) $talkMessagesRel,
            ] : null,
            'talkTypes' => ($talkTypesRel = $entity->getTalkTypes()) ? [
                'id' => $talkTypesRel->getId()->toString(),
                'display' => (string) $talkTypesRel,
            ] : null,
            'talks' => ($talksRel = $entity->getTalks()) ? [
                'id' => $talksRel->getId()->toString(),
                'display' => (string) $talksRel,
            ] : null,
            'taskTypes' => ($taskTypesRel = $entity->getTaskTypes()) ? [
                'id' => $taskTypesRel->getId()->toString(),
                'display' => (string) $taskTypesRel,
            ] : null,
            'tasks' => ($tasksRel = $entity->getTasks()) ? [
                'id' => $tasksRel->getId()->toString(),
                'display' => (string) $tasksRel,
            ] : null,
            'taxCategories' => ($taxCategoriesRel = $entity->getTaxCategories()) ? [
                'id' => $taxCategoriesRel->getId()->toString(),
                'display' => (string) $taxCategoriesRel,
            ] : null,
            'timeZone' => $entity->getTimeZone(),
            'uiPreferences' => $entity->getUiPreferences(),
            'users' => ($usersRel = $entity->getUsers()) ? [
                'id' => $usersRel->getId()->toString(),
                'display' => (string) $usersRel,
            ] : null,
            'workingHours' => ($workingHoursRel = $entity->getWorkingHours()) ? [
                'id' => $workingHoursRel->getId()->toString(),
                'display' => (string) $workingHoursRel,
            ] : null,
        ];
    }

    // ====================================
    // INDEX ACTION - List all Organizatia
    // ====================================

    /**
     * List Organizatia
     */
    protected function indexAction(): Response
    {
        $this->denyAccessUnlessGranted(OrganizationVoter::LIST);

        $preferences = $this->listPreferencesService->getEntityPreferences('organizatia');
        $savedView = $preferences['view'] ?? 'grid';

        return $this->render('organization/index.html.twig', [
            'entities' => [],  // Loaded via API
            'entity_name' => 'organization',
            'entity_name_plural' => 'organizatia',
            'page_icon' => 'bi-building-fill',
            'default_view' => $savedView,

            // List configuration from GeneratorProperty
            'enable_search' => true,
            'enable_filters' => false,
            'enable_sorting' => true,
            'enable_create_button' => true,

            // Property metadata for client-side rendering (as JSON strings)
            'list_fields' => '[{"name":"name","label":"Name","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getName"},{"name":"description","label":"Description","type":"text","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDescription"},{"name":"logoUrl","label":"LogoUrl","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getLogoUrl"},{"name":"industry","label":"Industry","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getIndustry"},{"name":"address","label":"Address","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getAddress"},{"name":"website","label":"Website","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getWebsite"},{"name":"active","label":"Is Active","type":"boolean","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getActive"},{"name":"agents","label":"Agents","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getAgents"},{"name":"products","label":"Products","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getProducts"},{"name":"billingFrequencies","label":"BillingFrequencies","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getBillingFrequencies"},{"name":"branding","label":"Branding","type":"json","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getBranding"},{"name":"brands","label":"Brands","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getBrands"},{"name":"businessPhone","label":"BusinessPhone","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getBusinessPhone"},{"name":"businessSettings","label":"BusinessSettings","type":"json","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getBusinessSettings"},{"name":"calendars","label":"Calendars","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCalendars"},{"name":"campaigns","label":"Campaigns","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCampaigns"},{"name":"celPhone","label":"CelPhone","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCelPhone"},{"name":"city","label":"City","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCity"},{"name":"companies","label":"Companies","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCompanies"},{"name":"companySize","label":"CompanySize","type":"integer","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCompanySize"},{"name":"competitors","label":"Competitors","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCompetitors"},{"name":"contactName","label":"ContactName","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getContactName"},{"name":"contacts","label":"Contacts","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getContacts"},{"name":"courses","label":"Courses","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCourses"},{"name":"currency","label":"Currency","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCurrency"},{"name":"dealStages","label":"DealStages","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDealStages"},{"name":"deals","label":"Deals","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDeals"},{"name":"eventCategories","label":"EventCategories","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getEventCategories"},{"name":"eventResourceBookings","label":"EventResourceBookings","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getEventResourceBookings"},{"name":"eventResourceTypes","label":"EventResourceTypes","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getEventResourceTypes"},{"name":"eventResources","label":"EventResources","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getEventResources"},{"name":"events","label":"Events","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getEvents"},{"name":"featureFlags","label":"FeatureFlags","type":"json","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getFeatureFlags"},{"name":"flags","label":"Flags","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getFlags"},{"name":"geo","label":"Geo","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getGeo"},{"name":"holidays","label":"Holidays","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getHolidays"},{"name":"integrationConfig","label":"IntegrationConfig","type":"json","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getIntegrationConfig"},{"name":"leadSources","label":"LeadSources","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getLeadSources"},{"name":"modules","label":"Modules","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getModules"},{"name":"navConfig","label":"NavConfig","type":"json","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getNavConfig"},{"name":"notificationTypes","label":"NotificationTypes","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getNotificationTypes"},{"name":"pipelineStages","label":"PipelineStages","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getPipelineStages"},{"name":"pipelines","label":"Pipelines","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getPipelines"},{"name":"postalCode","label":"PostalCode","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getPostalCode"},{"name":"productBatches","label":"ProductBatches","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getProductBatches"},{"name":"productCategories","label":"ProductCategories","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getProductCategories"},{"name":"productLines","label":"ProductLines","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getProductLines"},{"name":"profiles","label":"Profiles","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getProfiles"},{"name":"securityConfig","label":"SecurityConfig","type":"json","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getSecurityConfig"},{"name":"slug","label":"Slug","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getSlug"},{"name":"socialMedias","label":"SocialMedias","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getSocialMedias"},{"name":"status","label":"Status","type":"integer","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getStatus"},{"name":"tags","label":"Tags","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getTags"},{"name":"talkMessages","label":"TalkMessages","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getTalkMessages"},{"name":"talkTypes","label":"TalkTypes","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getTalkTypes"},{"name":"talks","label":"Talks","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getTalks"},{"name":"taskTypes","label":"TaskTypes","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getTaskTypes"},{"name":"tasks","label":"Tasks","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getTasks"},{"name":"taxCategories","label":"TaxCategories","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getTaxCategories"},{"name":"timeZone","label":"TimeZone","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getTimeZone"},{"name":"uiPreferences","label":"UiPreferences","type":"json","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getUiPreferences"},{"name":"users","label":"Users","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getUsers"},{"name":"workingHours","label":"WorkingHours","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getWorkingHours"}]',
            'searchable_fields' => '[{"name":"name","label":"Name","type":"string"},{"name":"description","label":"Description","type":"text"},{"name":"logoUrl","label":"LogoUrl","type":"string"},{"name":"industry","label":"Industry","type":"string"},{"name":"address","label":"Address","type":"string"},{"name":"website","label":"Website","type":"string"},{"name":"businessPhone","label":"BusinessPhone","type":"string"},{"name":"celPhone","label":"CelPhone","type":"string"},{"name":"contactName","label":"ContactName","type":"string"},{"name":"currency","label":"Currency","type":"string"},{"name":"geo","label":"Geo","type":"string"},{"name":"postalCode","label":"PostalCode","type":"string"},{"name":"slug","label":"Slug","type":"string"},{"name":"timeZone","label":"TimeZone","type":"string"}]',
            'filterable_fields' => '[]',
            'sortable_fields' => '[{"name":"name","label":"Name"},{"name":"description","label":"Description"},{"name":"logoUrl","label":"LogoUrl"},{"name":"industry","label":"Industry"},{"name":"address","label":"Address"},{"name":"website","label":"Website"},{"name":"agents","label":"Agents"},{"name":"products","label":"Products"},{"name":"billingFrequencies","label":"BillingFrequencies"},{"name":"branding","label":"Branding"},{"name":"brands","label":"Brands"},{"name":"businessPhone","label":"BusinessPhone"},{"name":"businessSettings","label":"BusinessSettings"},{"name":"calendars","label":"Calendars"},{"name":"campaigns","label":"Campaigns"},{"name":"celPhone","label":"CelPhone"},{"name":"city","label":"City"},{"name":"companies","label":"Companies"},{"name":"companySize","label":"CompanySize"},{"name":"competitors","label":"Competitors"},{"name":"contactName","label":"ContactName"},{"name":"contacts","label":"Contacts"},{"name":"courses","label":"Courses"},{"name":"currency","label":"Currency"},{"name":"dealStages","label":"DealStages"},{"name":"deals","label":"Deals"},{"name":"eventCategories","label":"EventCategories"},{"name":"eventResourceBookings","label":"EventResourceBookings"},{"name":"eventResourceTypes","label":"EventResourceTypes"},{"name":"eventResources","label":"EventResources"},{"name":"events","label":"Events"},{"name":"featureFlags","label":"FeatureFlags"},{"name":"flags","label":"Flags"},{"name":"geo","label":"Geo"},{"name":"holidays","label":"Holidays"},{"name":"integrationConfig","label":"IntegrationConfig"},{"name":"leadSources","label":"LeadSources"},{"name":"modules","label":"Modules"},{"name":"navConfig","label":"NavConfig"},{"name":"notificationTypes","label":"NotificationTypes"},{"name":"pipelineStages","label":"PipelineStages"},{"name":"pipelines","label":"Pipelines"},{"name":"postalCode","label":"PostalCode"},{"name":"productBatches","label":"ProductBatches"},{"name":"productCategories","label":"ProductCategories"},{"name":"productLines","label":"ProductLines"},{"name":"profiles","label":"Profiles"},{"name":"securityConfig","label":"SecurityConfig"},{"name":"slug","label":"Slug"},{"name":"socialMedias","label":"SocialMedias"},{"name":"status","label":"Status"},{"name":"tags","label":"Tags"},{"name":"talkMessages","label":"TalkMessages"},{"name":"talkTypes","label":"TalkTypes"},{"name":"talks","label":"Talks"},{"name":"taskTypes","label":"TaskTypes"},{"name":"tasks","label":"Tasks"},{"name":"taxCategories","label":"TaxCategories"},{"name":"timeZone","label":"TimeZone"},{"name":"uiPreferences","label":"UiPreferences"},{"name":"users","label":"Users"},{"name":"workingHours","label":"WorkingHours"}]',
        ]);
    }

    // ====================================
    // API SEARCH - Fetch Organizatia for list view
    // ====================================

    /**
     * API endpoint for searching Organizatia
     */
    protected function apiSearchAction(Request $request): JsonResponse
    {
        $this->denyAccessUnlessGranted(OrganizationVoter::LIST);

        // This method uses the BaseApiController's handleSearchRequest
        // which integrates with API Platform's GetCollection operation
        return $this->handleSearchRequest($request);
    }

    // ====================================
    // NEW FORM ACTION - Display create form
    // ====================================

    /**
     * Display new organization form
     */
    protected function newFormAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(OrganizationVoter::CREATE);

        $organization = new Organization();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($organization);

        $form = $this->createForm(OrganizationFormType::class, $organization);

        return $this->render('organization/_form_modal.html.twig', [
            'form' => $form,
            'organization' => $organization,
            'is_edit' => false,
        ]);
    }

    // ====================================
    // CREATE ACTION - Process create form submission
    // ====================================

    /**
     * Process new organization form submission
     */
    protected function createAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(OrganizationVoter::CREATE);

        $organization = new Organization();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($organization);

        $form = $this->createForm(OrganizationFormType::class, $organization);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before create hook
                $this->beforeCreate($organization);

                $this->entityManager->persist($organization);
                $this->entityManager->flush();

                // After create hook
                $this->afterCreate($organization);

                $this->addFlash('success', $this->translator->trans(
                    'organization.flash.created_successfully',
                    ['%name%' => (string) $organization],
                    'organization'
                ));

                return $this->redirectToRoute('organization_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'organization.flash.create_failed',
                    ['%error%' => $e->getMessage()],
                    'organization'
                ));
            }
        }

        // Re-render with errors
        return $this->render('organization/_form_modal.html.twig', [
            'form' => $form,
            'organization' => $organization,
            'is_edit' => false,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // EDIT FORM ACTION - Display edit form
    // ====================================

    /**
     * Display edit organization form
     */
    protected function editFormAction(Organization $organization, Request $request): Response
    {
        $this->denyAccessUnlessGranted(OrganizationVoter::EDIT, $organization);

        $form = $this->createForm(OrganizationFormType::class, $organization);

        return $this->render('organization/_form_modal.html.twig', [
            'form' => $form,
            'organization' => $organization,
            'is_edit' => true,
        ]);
    }

    // ====================================
    // UPDATE ACTION - Process edit form submission
    // ====================================

    /**
     * Process edit organization form submission
     */
    protected function updateAction(Organization $organization, Request $request): Response
    {
        $this->denyAccessUnlessGranted(OrganizationVoter::EDIT, $organization);

        $form = $this->createForm(OrganizationFormType::class, $organization);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before update hook
                $this->beforeUpdate($organization);

                $this->entityManager->flush();

                // After update hook
                $this->afterUpdate($organization);

                $this->addFlash('success', $this->translator->trans(
                    'organization.flash.updated_successfully',
                    ['%name%' => (string) $organization],
                    'organization'
                ));

                return $this->redirectToRoute('organization_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'organization.flash.update_failed',
                    ['%error%' => $e->getMessage()],
                    'organization'
                ));
            }
        }

        // Re-render with errors
        return $this->render('organization/_form_modal.html.twig', [
            'form' => $form,
            'organization' => $organization,
            'is_edit' => true,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // DELETE ACTION - Delete organization
    // ====================================

    /**
     * Delete organization
     */
    protected function deleteAction(Organization $organization, Request $request): Response
    {
        $this->denyAccessUnlessGranted(OrganizationVoter::DELETE, $organization);

        // Verify CSRF token
        $token = $request->request->get('_token');
        if (!$this->csrfTokenManager->isTokenValid(new CsrfToken('delete_organization_' . $organization->getId()->toString(), $token))) {
            throw new InvalidCsrfTokenException('Invalid CSRF token for delete operation.');
        }

        try {
            // Before delete hook
            $this->beforeDelete($organization);

            $name = (string) $organization;

            $this->entityManager->remove($organization);
            $this->entityManager->flush();

            // After delete hook
            $this->afterDelete();

            $this->addFlash('success', $this->translator->trans(
                'organization.flash.deleted_successfully',
                ['%name%' => $name],
                'organization'
            ));

        } catch (\Exception $e) {
            $this->addFlash('error', $this->translator->trans(
                'organization.flash.delete_failed',
                ['%error%' => $e->getMessage()],
                'organization'
            ));
        }

        return $this->redirectToRoute('organization_index', [], Response::HTTP_SEE_OTHER);
    }

    // ====================================
    // SHOW ACTION - Display organization details
    // ====================================

    /**
     * Display organization details
     */
    protected function showAction(Organization $organization): Response
    {
        $this->denyAccessUnlessGranted(OrganizationVoter::VIEW, $organization);

        return $this->render('organization/show.html.twig', [
            'organization' => $organization,
        ]);
    }

    // ====================================
    // LIFECYCLE HOOKS
    // ====================================
    // Override these in OrganizationController to add custom logic

    /**
     * Initialize new entity before creating form
     *
     * Note: Organization and Owner are set automatically by TenantEntityProcessor
     * Only use this for custom initialization logic
     */
    protected function initializeNewEntity(Organization $organization): void
    {
        // Organization and Owner are set automatically by TenantEntityProcessor
        // Add your custom initialization here
    }

    /**
     * Execute logic before creating entity
     */
    protected function beforeCreate(Organization $organization): void
    {
        // Override to add logic before create
    }

    /**
     * Execute logic after creating entity
     */
    protected function afterCreate(Organization $organization): void
    {
        // Override to add logic after create (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before updating entity
     */
    protected function beforeUpdate(Organization $organization): void
    {
        // Override to add logic before update
    }

    /**
     * Execute logic after updating entity
     */
    protected function afterUpdate(Organization $organization): void
    {
        // Override to add logic after update (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before deleting entity
     */
    protected function beforeDelete(Organization $organization): void
    {
        // Override to add logic before delete (e.g., check dependencies, archive)
    }

    /**
     * Execute logic after deleting entity
     */
    protected function afterDelete(): void
    {
        // Override to add logic after delete (e.g., cleanup, send notification)
    }
}
