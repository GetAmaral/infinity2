<?php

declare(strict_types=1);

namespace App\Controller\Generated;

use App\Controller\Base\BaseApiController;
use App\Entity\Notification;
use App\Repository\NotificationRepository;
use App\Security\Voter\NotificationVoter;
use App\Form\NotificationFormType;
use App\Service\ListPreferencesService;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Security\Csrf\CsrfToken;
use Symfony\Component\Security\Csrf\CsrfTokenManagerInterface;
use Symfony\Component\Security\Core\Exception\InvalidCsrfTokenException;
use Symfony\Contracts\Translation\TranslatorInterface;

/**
 * Generated Base Controller for Notification
 *
 * ⚠️ WARNING: This file is ALWAYS regenerated by Genmax
 * DO NOT EDIT THIS FILE - Edit NotificationController instead
 *
 * @generated
 * @codeCoverageIgnore
 */
abstract class NotificationControllerGenerated extends BaseApiController
{
    public function __construct(
        protected readonly EntityManagerInterface $entityManager,
        protected readonly NotificationRepository $repository,
        protected readonly ListPreferencesService $listPreferencesService,
        protected readonly TranslatorInterface $translator,
        protected readonly CsrfTokenManagerInterface $csrfTokenManager,
    ) {}

    // ====================================
    // ABSTRACT METHOD IMPLEMENTATIONS
    // ====================================

    /**
     * Get the repository for this entity
     */
    protected function getRepository(): NotificationRepository
    {
        return $this->repository;
    }

    /**
     * Get the plural name for this entity
     */
    protected function getEntityPluralName(): string
    {
        return 'notificatia';
    }

    /**
     * Convert entity to array for API responses
     */
    protected function entityToArray(object $entity): array
    {
        if (!$entity instanceof Notification) {
            throw new \InvalidArgumentException('Expected Notification instance');
        }

        return [
            'id' => $entity->getId()->toString(),
            'organization' => ($organizationRel = $entity->getOrganization()) ? [
                'id' => $organizationRel->getId()->toString(),
                'display' => (string) $organizationRel,
            ] : null,
            'title' => $entity->getTitle(),
            'recipient' => ($recipientRel = $entity->getRecipient()) ? [
                'id' => $recipientRel->getId()->toString(),
                'display' => (string) $recipientRel,
            ] : null,
            'sender' => ($senderRel = $entity->getSender()) ? [
                'id' => $senderRel->getId()->toString(),
                'display' => (string) $senderRel,
            ] : null,
            'priority' => $entity->getPriority(),
            'actionUrl' => $entity->getActionUrl(),
            'attendee' => ($attendeeRel = $entity->getAttendee()) ? [
                'id' => $attendeeRel->getId()->toString(),
                'display' => (string) $attendeeRel,
            ] : null,
            'read' => $entity->getRead(),
            'archived' => $entity->getArchived(),
            'readAt' => $entity->getReadAt()?->format('M d, Y'),
            'communicationMethod' => ($communicationMethodRel = $entity->getCommunicationMethod()) ? [
                'id' => $communicationMethodRel->getId()->toString(),
                'display' => (string) $communicationMethodRel,
            ] : null,
            'event' => ($eventRel = $entity->getEvent()) ? [
                'id' => $eventRel->getId()->toString(),
                'display' => (string) $eventRel,
            ] : null,
            'message' => $entity->getMessage(),
            'notificationStatus' => $entity->getNotificationStatus(),
            'reminder' => ($reminderRel = $entity->getReminder()) ? [
                'id' => $reminderRel->getId()->toString(),
                'display' => (string) $reminderRel,
            ] : null,
            'sentAt' => $entity->getSentAt()?->format('M d, Y'),
            'talkMessage' => ($talkMessageRel = $entity->getTalkMessage()) ? [
                'id' => $talkMessageRel->getId()->toString(),
                'display' => (string) $talkMessageRel,
            ] : null,
            'type' => ($typeRel = $entity->getType()) ? [
                'id' => $typeRel->getId()->toString(),
                'display' => (string) $typeRel,
            ] : null,
        ];
    }

    // ====================================
    // INDEX ACTION - List all Notificatia
    // ====================================

    /**
     * List Notificatia
     */
    protected function indexAction(): Response
    {
        $this->denyAccessUnlessGranted(NotificationVoter::LIST);

        $preferences = $this->listPreferencesService->getEntityPreferences('notificatia');
        $savedView = $preferences['view'] ?? 'grid';

        return $this->render('notification/index.html.twig', [
            'entities' => [],  // Loaded via API
            'entity_name' => 'notification',
            'entity_name_plural' => 'notificatia',
            'page_icon' => 'bi-bell',
            'default_view' => $savedView,

            // List configuration from GeneratorProperty
            'enable_search' => true,
            'enable_filters' => true,
            'enable_sorting' => true,
            'enable_create_button' => true,

            // Property metadata for client-side rendering (as JSON strings)
            'list_fields' => '[{"name":"title","label":"Title","type":"string","sortable":true,"searchable":true,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getTitle"},{"name":"recipient","label":"Recipient","type":"","sortable":false,"searchable":true,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getRecipient"},{"name":"sender","label":"Sender","type":"","sortable":false,"searchable":true,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getSender"},{"name":"priority","label":"Priority","type":"string","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getPriority"},{"name":"attendee","label":"Attendee","type":"","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getAttendee"},{"name":"read","label":"Read","type":"boolean","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getRead"},{"name":"readAt","label":"Read At","type":"datetime","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getReadAt"},{"name":"communicationMethod","label":"CommunicationMethod","type":"","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCommunicationMethod"},{"name":"event","label":"Event","type":"","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getEvent"},{"name":"message","label":"Message","type":"text","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getMessage"},{"name":"notificationStatus","label":"NotificationStatus","type":"integer","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getNotificationStatus"},{"name":"reminder","label":"Reminder","type":"","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getReminder"},{"name":"sentAt","label":"SentAt","type":"datetime","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getSentAt"},{"name":"talkMessage","label":"TalkMessage","type":"","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getTalkMessage"},{"name":"type","label":"Type","type":"","sortable":true,"searchable":true,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getType"}]',
            'searchable_fields' => '[{"name":"title","label":"Title","type":"string"},{"name":"recipient","label":"Recipient","type":""},{"name":"sender","label":"Sender","type":""},{"name":"message","label":"Message","type":"text"},{"name":"type","label":"Type","type":""}]',
            'filterable_fields' => '[{"name":"title","label":"Title","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"recipient","label":"Recipient","type":"","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"sender","label":"Sender","type":"","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"priority","label":"Priority","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"attendee","label":"Attendee","type":"","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"read","label":"Read","type":"boolean","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"archived","label":"Archived","type":"boolean","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"communicationMethod","label":"CommunicationMethod","type":"","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"event","label":"Event","type":"","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"reminder","label":"Reminder","type":"","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"sentAt","label":"SentAt","type":"datetime","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"talkMessage","label":"TalkMessage","type":"","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"type","label":"Type","type":"","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false}]',
            'sortable_fields' => '[{"name":"title","label":"Title"},{"name":"priority","label":"Priority"},{"name":"attendee","label":"Attendee"},{"name":"read","label":"Read"},{"name":"archived","label":"Archived"},{"name":"readAt","label":"Read At"},{"name":"communicationMethod","label":"CommunicationMethod"},{"name":"event","label":"Event"},{"name":"message","label":"Message"},{"name":"notificationStatus","label":"NotificationStatus"},{"name":"reminder","label":"Reminder"},{"name":"sentAt","label":"SentAt"},{"name":"talkMessage","label":"TalkMessage"},{"name":"type","label":"Type"}]',
        ]);
    }

    // ====================================
    // API SEARCH - Fetch Notificatia for list view
    // ====================================

    /**
     * API endpoint for searching Notificatia
     */
    protected function apiSearchAction(Request $request): JsonResponse
    {
        $this->denyAccessUnlessGranted(NotificationVoter::LIST);

        // This method uses the BaseApiController's handleSearchRequest
        // which integrates with API Platform's GetCollection operation
        return $this->handleSearchRequest($request);
    }

    // ====================================
    // NEW FORM ACTION - Display create form
    // ====================================

    /**
     * Display new notification form
     */
    protected function newFormAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(NotificationVoter::CREATE);

        $notification = new Notification();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($notification);

        $form = $this->createForm(NotificationFormType::class, $notification);

        return $this->render('notification/_form_modal.html.twig', [
            'form' => $form,
            'notification' => $notification,
            'is_edit' => false,
        ]);
    }

    // ====================================
    // CREATE ACTION - Process create form submission
    // ====================================

    /**
     * Process new notification form submission
     */
    protected function createAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(NotificationVoter::CREATE);

        $notification = new Notification();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($notification);

        $form = $this->createForm(NotificationFormType::class, $notification);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before create hook
                $this->beforeCreate($notification);

                $this->entityManager->persist($notification);
                $this->entityManager->flush();

                // After create hook
                $this->afterCreate($notification);

                $this->addFlash('success', $this->translator->trans(
                    'notification.flash.created_successfully',
                    ['%name%' => (string) $notification],
                    'notification'
                ));

                return $this->redirectToRoute('notification_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'notification.flash.create_failed',
                    ['%error%' => $e->getMessage()],
                    'notification'
                ));
            }
        }

        // Re-render with errors
        return $this->render('notification/_form_modal.html.twig', [
            'form' => $form,
            'notification' => $notification,
            'is_edit' => false,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // EDIT FORM ACTION - Display edit form
    // ====================================

    /**
     * Display edit notification form
     */
    protected function editFormAction(Notification $notification, Request $request): Response
    {
        $this->denyAccessUnlessGranted(NotificationVoter::EDIT, $notification);

        $form = $this->createForm(NotificationFormType::class, $notification);

        return $this->render('notification/_form_modal.html.twig', [
            'form' => $form,
            'notification' => $notification,
            'is_edit' => true,
        ]);
    }

    // ====================================
    // UPDATE ACTION - Process edit form submission
    // ====================================

    /**
     * Process edit notification form submission
     */
    protected function updateAction(Notification $notification, Request $request): Response
    {
        $this->denyAccessUnlessGranted(NotificationVoter::EDIT, $notification);

        $form = $this->createForm(NotificationFormType::class, $notification);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before update hook
                $this->beforeUpdate($notification);

                $this->entityManager->flush();

                // After update hook
                $this->afterUpdate($notification);

                $this->addFlash('success', $this->translator->trans(
                    'notification.flash.updated_successfully',
                    ['%name%' => (string) $notification],
                    'notification'
                ));

                return $this->redirectToRoute('notification_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'notification.flash.update_failed',
                    ['%error%' => $e->getMessage()],
                    'notification'
                ));
            }
        }

        // Re-render with errors
        return $this->render('notification/_form_modal.html.twig', [
            'form' => $form,
            'notification' => $notification,
            'is_edit' => true,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // DELETE ACTION - Delete notification
    // ====================================

    /**
     * Delete notification
     */
    protected function deleteAction(Notification $notification, Request $request): Response
    {
        $this->denyAccessUnlessGranted(NotificationVoter::DELETE, $notification);

        // Verify CSRF token
        $token = $request->request->get('_token');
        if (!$this->csrfTokenManager->isTokenValid(new CsrfToken('delete_notification_' . $notification->getId()->toString(), $token))) {
            throw new InvalidCsrfTokenException('Invalid CSRF token for delete operation.');
        }

        try {
            // Before delete hook
            $this->beforeDelete($notification);

            $name = (string) $notification;

            $this->entityManager->remove($notification);
            $this->entityManager->flush();

            // After delete hook
            $this->afterDelete();

            $this->addFlash('success', $this->translator->trans(
                'notification.flash.deleted_successfully',
                ['%name%' => $name],
                'notification'
            ));

        } catch (\Exception $e) {
            $this->addFlash('error', $this->translator->trans(
                'notification.flash.delete_failed',
                ['%error%' => $e->getMessage()],
                'notification'
            ));
        }

        return $this->redirectToRoute('notification_index', [], Response::HTTP_SEE_OTHER);
    }

    // ====================================
    // SHOW ACTION - Display notification details
    // ====================================

    /**
     * Display notification details
     */
    protected function showAction(Notification $notification): Response
    {
        $this->denyAccessUnlessGranted(NotificationVoter::VIEW, $notification);

        return $this->render('notification/show.html.twig', [
            'notification' => $notification,
        ]);
    }

    // ====================================
    // LIFECYCLE HOOKS
    // ====================================
    // Override these in NotificationController to add custom logic

    /**
     * Initialize new entity before creating form
     *
     * Note: Organization and Owner are set automatically by TenantEntityProcessor
     * Only use this for custom initialization logic
     */
    protected function initializeNewEntity(Notification $notification): void
    {
        // Organization and Owner are set automatically by TenantEntityProcessor
        // Add your custom initialization here
    }

    /**
     * Execute logic before creating entity
     */
    protected function beforeCreate(Notification $notification): void
    {
        // Override to add logic before create
    }

    /**
     * Execute logic after creating entity
     */
    protected function afterCreate(Notification $notification): void
    {
        // Override to add logic after create (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before updating entity
     */
    protected function beforeUpdate(Notification $notification): void
    {
        // Override to add logic before update
    }

    /**
     * Execute logic after updating entity
     */
    protected function afterUpdate(Notification $notification): void
    {
        // Override to add logic after update (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before deleting entity
     */
    protected function beforeDelete(Notification $notification): void
    {
        // Override to add logic before delete (e.g., check dependencies, archive)
    }

    /**
     * Execute logic after deleting entity
     */
    protected function afterDelete(): void
    {
        // Override to add logic after delete (e.g., cleanup, send notification)
    }
}
