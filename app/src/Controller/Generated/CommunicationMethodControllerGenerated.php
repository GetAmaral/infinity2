<?php

declare(strict_types=1);

namespace App\Controller\Generated;

use App\Controller\Base\BaseApiController;
use App\Entity\CommunicationMethod;
use App\Repository\CommunicationMethodRepository;
use App\Security\Voter\CommunicationMethodVoter;
use App\Form\CommunicationMethodFormType;
use App\Service\ListPreferencesService;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Security\Csrf\CsrfToken;
use Symfony\Component\Security\Csrf\CsrfTokenManagerInterface;
use Symfony\Component\Security\Core\Exception\InvalidCsrfTokenException;
use Symfony\Contracts\Translation\TranslatorInterface;

/**
 * Generated Base Controller for CommunicationMethod
 *
 * ⚠️ WARNING: This file is ALWAYS regenerated by Genmax
 * DO NOT EDIT THIS FILE - Edit CommunicationMethodController instead
 *
 * @generated
 * @codeCoverageIgnore
 */
abstract class CommunicationMethodControllerGenerated extends BaseApiController
{
    public function __construct(
        protected readonly EntityManagerInterface $entityManager,
        protected readonly CommunicationMethodRepository $repository,
        protected readonly ListPreferencesService $listPreferencesService,
        protected readonly TranslatorInterface $translator,
        protected readonly CsrfTokenManagerInterface $csrfTokenManager,
    ) {}

    // ====================================
    // ABSTRACT METHOD IMPLEMENTATIONS
    // ====================================

    /**
     * Get the repository for this entity
     */
    protected function getRepository(): CommunicationMethodRepository
    {
        return $this->repository;
    }

    /**
     * Get the plural name for this entity
     */
    protected function getEntityPluralName(): string
    {
        return 'communicationMethods';
    }

    /**
     * Convert entity to array for API responses
     */
    protected function entityToArray(object $entity): array
    {
        if (!$entity instanceof CommunicationMethod) {
            throw new \InvalidArgumentException('Expected CommunicationMethod instance');
        }

        return [
            'id' => $entity->getId()->toString(),
            'name' => $entity->getName(),
            'function' => $entity->getFunction(),
            'notifications' => ($notificationsRel = $entity->getNotifications()) ? [
                'id' => $notificationsRel->getId()->toString(),
                'display' => (string) $notificationsRel,
            ] : null,
            'property' => $entity->getProperty(),
            'reminders' => ($remindersRel = $entity->getReminders()) ? [
                'id' => $remindersRel->getId()->toString(),
                'display' => (string) $remindersRel,
            ] : null,
        ];
    }

    // ====================================
    // INDEX ACTION - List all CommunicationMethods
    // ====================================

    /**
     * List CommunicationMethods
     */
    protected function indexAction(): Response
    {
        $this->denyAccessUnlessGranted(CommunicationMethodVoter::LIST);

        $preferences = $this->listPreferencesService->getEntityPreferences('communicationMethods');
        $savedView = $preferences['view'] ?? 'grid';

        return $this->render('communicationmethod/index.html.twig', [
            'entities' => [],  // Loaded via API
            'entity_name' => 'communicationMethod',
            'entity_name_plural' => 'communicationMethods',
            'page_icon' => 'bi-chat-dots',
            'default_view' => $savedView,

            // List configuration from GeneratorProperty
            'enable_search' => true,
            'enable_filters' => false,
            'enable_sorting' => true,
            'enable_create_button' => true,

            // Property metadata for client-side rendering (as JSON strings)
            'list_fields' => '[{"name":"name","label":"Name","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getName"},{"name":"function","label":"Function","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getFunction"},{"name":"notifications","label":"Notifications","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getNotifications"},{"name":"property","label":"Property","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getProperty"},{"name":"reminders","label":"Reminders","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getReminders"}]',
            'searchable_fields' => '[{"name":"name","label":"Name","type":"string"},{"name":"function","label":"Function","type":"string"},{"name":"property","label":"Property","type":"string"}]',
            'filterable_fields' => '[]',
            'sortable_fields' => '[{"name":"name","label":"Name"},{"name":"function","label":"Function"},{"name":"notifications","label":"Notifications"},{"name":"property","label":"Property"},{"name":"reminders","label":"Reminders"}]',
        ]);
    }

    // ====================================
    // API SEARCH - Fetch CommunicationMethods for list view
    // ====================================

    /**
     * API endpoint for searching CommunicationMethods
     */
    protected function apiSearchAction(Request $request): JsonResponse
    {
        $this->denyAccessUnlessGranted(CommunicationMethodVoter::LIST);

        // This method uses the BaseApiController's handleSearchRequest
        // which integrates with API Platform's GetCollection operation
        return $this->handleSearchRequest($request);
    }

    // ====================================
    // NEW FORM ACTION - Display create form
    // ====================================

    /**
     * Display new communicationMethod form
     */
    protected function newFormAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(CommunicationMethodVoter::CREATE);

        $communicationMethod = new CommunicationMethod();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($communicationMethod);

        $form = $this->createForm(CommunicationMethodFormType::class, $communicationMethod);

        return $this->render('communicationmethod/_form_modal.html.twig', [
            'form' => $form,
            'communicationMethod' => $communicationMethod,
            'is_edit' => false,
        ]);
    }

    // ====================================
    // CREATE ACTION - Process create form submission
    // ====================================

    /**
     * Process new communicationMethod form submission
     */
    protected function createAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(CommunicationMethodVoter::CREATE);

        $communicationMethod = new CommunicationMethod();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($communicationMethod);

        $form = $this->createForm(CommunicationMethodFormType::class, $communicationMethod);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before create hook
                $this->beforeCreate($communicationMethod);

                $this->entityManager->persist($communicationMethod);
                $this->entityManager->flush();

                // After create hook
                $this->afterCreate($communicationMethod);

                $this->addFlash('success', $this->translator->trans(
                    'communicationmethod.flash.created_successfully',
                    ['%name%' => (string) $communicationMethod],
                    'communicationmethod'
                ));

                return $this->redirectToRoute('communicationmethod_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'communicationmethod.flash.create_failed',
                    ['%error%' => $e->getMessage()],
                    'communicationmethod'
                ));
            }
        }

        // Re-render with errors
        return $this->render('communicationmethod/_form_modal.html.twig', [
            'form' => $form,
            'communicationMethod' => $communicationMethod,
            'is_edit' => false,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // EDIT FORM ACTION - Display edit form
    // ====================================

    /**
     * Display edit communicationMethod form
     */
    protected function editFormAction(CommunicationMethod $communicationMethod, Request $request): Response
    {
        $this->denyAccessUnlessGranted(CommunicationMethodVoter::EDIT, $communicationMethod);

        $form = $this->createForm(CommunicationMethodFormType::class, $communicationMethod);

        return $this->render('communicationmethod/_form_modal.html.twig', [
            'form' => $form,
            'communicationMethod' => $communicationMethod,
            'is_edit' => true,
        ]);
    }

    // ====================================
    // UPDATE ACTION - Process edit form submission
    // ====================================

    /**
     * Process edit communicationMethod form submission
     */
    protected function updateAction(CommunicationMethod $communicationMethod, Request $request): Response
    {
        $this->denyAccessUnlessGranted(CommunicationMethodVoter::EDIT, $communicationMethod);

        $form = $this->createForm(CommunicationMethodFormType::class, $communicationMethod);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before update hook
                $this->beforeUpdate($communicationMethod);

                $this->entityManager->flush();

                // After update hook
                $this->afterUpdate($communicationMethod);

                $this->addFlash('success', $this->translator->trans(
                    'communicationmethod.flash.updated_successfully',
                    ['%name%' => (string) $communicationMethod],
                    'communicationmethod'
                ));

                return $this->redirectToRoute('communicationmethod_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'communicationmethod.flash.update_failed',
                    ['%error%' => $e->getMessage()],
                    'communicationmethod'
                ));
            }
        }

        // Re-render with errors
        return $this->render('communicationmethod/_form_modal.html.twig', [
            'form' => $form,
            'communicationMethod' => $communicationMethod,
            'is_edit' => true,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // DELETE ACTION - Delete communicationMethod
    // ====================================

    /**
     * Delete communicationMethod
     */
    protected function deleteAction(CommunicationMethod $communicationMethod, Request $request): Response
    {
        $this->denyAccessUnlessGranted(CommunicationMethodVoter::DELETE, $communicationMethod);

        // Verify CSRF token
        $token = $request->request->get('_token');
        if (!$this->csrfTokenManager->isTokenValid(new CsrfToken('delete_communicationMethod_' . $communicationMethod->getId()->toString(), $token))) {
            throw new InvalidCsrfTokenException('Invalid CSRF token for delete operation.');
        }

        try {
            // Before delete hook
            $this->beforeDelete($communicationMethod);

            $name = (string) $communicationMethod;

            $this->entityManager->remove($communicationMethod);
            $this->entityManager->flush();

            // After delete hook
            $this->afterDelete();

            $this->addFlash('success', $this->translator->trans(
                'communicationmethod.flash.deleted_successfully',
                ['%name%' => $name],
                'communicationmethod'
            ));

        } catch (\Exception $e) {
            $this->addFlash('error', $this->translator->trans(
                'communicationmethod.flash.delete_failed',
                ['%error%' => $e->getMessage()],
                'communicationmethod'
            ));
        }

        return $this->redirectToRoute('communicationmethod_index', [], Response::HTTP_SEE_OTHER);
    }

    // ====================================
    // SHOW ACTION - Display communicationMethod details
    // ====================================

    /**
     * Display communicationMethod details
     */
    protected function showAction(CommunicationMethod $communicationMethod): Response
    {
        $this->denyAccessUnlessGranted(CommunicationMethodVoter::VIEW, $communicationMethod);

        return $this->render('communicationmethod/show.html.twig', [
            'communicationMethod' => $communicationMethod,
        ]);
    }

    // ====================================
    // LIFECYCLE HOOKS
    // ====================================
    // Override these in CommunicationMethodController to add custom logic

    /**
     * Initialize new entity before creating form
     *
     * Note: Organization and Owner are set automatically by TenantEntityProcessor
     * Only use this for custom initialization logic
     */
    protected function initializeNewEntity(CommunicationMethod $communicationMethod): void
    {
        // Organization and Owner are set automatically by TenantEntityProcessor
        // Add your custom initialization here
    }

    /**
     * Execute logic before creating entity
     */
    protected function beforeCreate(CommunicationMethod $communicationMethod): void
    {
        // Override to add logic before create
    }

    /**
     * Execute logic after creating entity
     */
    protected function afterCreate(CommunicationMethod $communicationMethod): void
    {
        // Override to add logic after create (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before updating entity
     */
    protected function beforeUpdate(CommunicationMethod $communicationMethod): void
    {
        // Override to add logic before update
    }

    /**
     * Execute logic after updating entity
     */
    protected function afterUpdate(CommunicationMethod $communicationMethod): void
    {
        // Override to add logic after update (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before deleting entity
     */
    protected function beforeDelete(CommunicationMethod $communicationMethod): void
    {
        // Override to add logic before delete (e.g., check dependencies, archive)
    }

    /**
     * Execute logic after deleting entity
     */
    protected function afterDelete(): void
    {
        // Override to add logic after delete (e.g., cleanup, send notification)
    }
}
