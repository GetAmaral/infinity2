<?php

declare(strict_types=1);

namespace App\Controller\Generated;

use App\Controller\Base\BaseApiController;
use App\Entity\Contact;
use App\Repository\ContactRepository;
use App\Security\Voter\ContactVoter;
use App\Form\ContactFormType;
use App\Service\ListPreferencesService;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Security\Csrf\CsrfToken;
use Symfony\Component\Security\Csrf\CsrfTokenManagerInterface;
use Symfony\Component\Security\Core\Exception\InvalidCsrfTokenException;
use Symfony\Contracts\Translation\TranslatorInterface;

/**
 * Generated Base Controller for Contact
 *
 * ⚠️ WARNING: This file is ALWAYS regenerated by Genmax
 * DO NOT EDIT THIS FILE - Edit ContactController instead
 *
 * @generated
 * @codeCoverageIgnore
 */
abstract class ContactControllerGenerated extends BaseApiController
{
    public function __construct(
        protected readonly EntityManagerInterface $entityManager,
        protected readonly ContactRepository $repository,
        protected readonly ListPreferencesService $listPreferencesService,
        protected readonly TranslatorInterface $translator,
        protected readonly CsrfTokenManagerInterface $csrfTokenManager,
    ) {}

    // ====================================
    // ABSTRACT METHOD IMPLEMENTATIONS
    // ====================================

    /**
     * Get the repository for this entity
     */
    protected function getRepository(): ContactRepository
    {
        return $this->repository;
    }

    /**
     * Get the plural name for this entity
     */
    protected function getEntityPluralName(): string
    {
        return 'contacts';
    }

    /**
     * Convert entity to array for API responses
     *
     * ⚠️ IMPORTANT: Enum Properties Stored as Strings
     * -------------------------------------------------
     * Properties with enum-backed types (like InputType) are stored as STRINGS
     * in the database and getters return strings directly, NOT enum objects.
     *
     * ❌ WRONG:   $entity->getType()->value   (Error: "Attempt to read property 'value' on string")
     * ✅ CORRECT: $entity->getType()          (Already a string - 'fully_completed')
     *
     * If you need the enum object for business logic, use:
     *    InputType::from($entity->getType())
     */
    protected function entityToArray(object $entity): array
    {
        if (!$entity instanceof Contact) {
            throw new \InvalidArgumentException('Expected Contact instance');
        }

        return [
            'id' => $entity->getId()->toString(),
            'organization' => ($organizationRel = $entity->getOrganization()) ? [
                'id' => $organizationRel->getId()->toString(),
                'display' => (string) $organizationRel,
            ] : null,
            'firstName' => $entity->getFirstName(),
            'name' => $entity->getName(),
            'lastName' => $entity->getLastName(),
            'accountManager' => ($accountManagerRel = $entity->getAccountManager()) ? [
                'id' => $accountManagerRel->getId()->toString(),
                'display' => (string) $accountManagerRel,
            ] : null,
            'website' => $entity->getWebsite(),
            'accountTeam' => ($accountTeamRel = $entity->getAccountTeam()) ? [
                'id' => $accountTeamRel->getId()->toString(),
                'display' => (string) $accountTeamRel,
            ] : null,
            'address' => $entity->getAddress(),
            'billingAddress' => $entity->getBillingAddress(),
            'billingCity' => ($billingCityRel = $entity->getBillingCity()) ? [
                'id' => $billingCityRel->getId()->toString(),
                'display' => (string) $billingCityRel,
            ] : null,
            'birthDate' => $entity->getBirthDate()?->format('M d, Y'),
            'campaigns' => ($campaignsRel = $entity->getCampaigns()) ? [
                'id' => $campaignsRel->getId()->toString(),
                'display' => (string) $campaignsRel,
            ] : null,
            'city' => ($cityRel = $entity->getCity()) ? [
                'id' => $cityRel->getId()->toString(),
                'display' => (string) $cityRel,
            ] : null,
            'company' => ($companyRel = $entity->getCompany()) ? [
                'id' => $companyRel->getId()->toString(),
                'display' => (string) $companyRel,
            ] : null,
            'deals' => ($dealsRel = $entity->getDeals()) ? [
                'id' => $dealsRel->getId()->toString(),
                'display' => (string) $dealsRel,
            ] : null,
            'mobilePhone' => $entity->getMobilePhone(),
            'linkedinUrl' => $entity->getLinkedinUrl(),
            'title' => $entity->getTitle(),
            'department' => $entity->getDepartment(),
            'emailOptOut' => $entity->getEmailOptOut(),
            'leadSource' => $entity->getLeadSource(),
            'doNotCall' => $entity->getDoNotCall(),
            'preferredContactMethod' => $entity->getPreferredContactMethod(),
            'lastContactDate' => $entity->getLastContactDate()?->format('M d, Y'),
            'document' => $entity->getDocument(),
            'email' => $entity->getEmail(),
            'eventAttendances' => ($eventAttendancesRel = $entity->getEventAttendances()) ? [
                'id' => $eventAttendancesRel->getId()->toString(),
                'display' => (string) $eventAttendancesRel,
            ] : null,
            'firstTalkDate' => $entity->getFirstTalkDate()?->format('M d, Y'),
            'gender' => $entity->getGender(),
            'geo' => $entity->getGeo(),
            'lastTalkDate' => $entity->getLastTalkDate()?->format('M d, Y'),
            'neighborhood' => $entity->getNeighborhood(),
            'nickname' => $entity->getNickname(),
            'notes' => $entity->getNotes(),
            'origin' => $entity->getOrigin(),
            'phone' => $entity->getPhone(),
            'postalCode' => $entity->getPostalCode(),
            'primaryDeals' => ($primaryDealsRel = $entity->getPrimaryDeals()) ? [
                'id' => $primaryDealsRel->getId()->toString(),
                'display' => (string) $primaryDealsRel,
            ] : null,
            'profilePictureUrl' => $entity->getProfilePictureUrl(),
            'ranking' => $entity->getRanking(),
            'score' => $entity->getScore(),
            'socialMedias' => ($socialMediasRel = $entity->getSocialMedias()) ? [
                'id' => $socialMediasRel->getId()->toString(),
                'display' => (string) $socialMediasRel,
            ] : null,
            'status' => $entity->getStatus(),
            'talks' => ($talksRel = $entity->getTalks()) ? [
                'id' => $talksRel->getId()->toString(),
                'display' => (string) $talksRel,
            ] : null,
            'tasks' => ($tasksRel = $entity->getTasks()) ? [
                'id' => $tasksRel->getId()->toString(),
                'display' => (string) $tasksRel,
            ] : null,
        ];
    }

    // ====================================
    // INDEX ACTION - List all Contacts
    // ====================================

    /**
     * List Contacts
     */
    protected function indexAction(): Response
    {
        $this->denyAccessUnlessGranted(ContactVoter::LIST);

        $preferences = $this->listPreferencesService->getEntityPreferences('contacts');
        $savedView = $preferences['view'] ?? 'grid';

        return $this->render('contact/index.html.twig', [
            'entities' => [],  // Loaded via API
            'entity_name' => 'contact',
            'entity_name_plural' => 'contacts',
            'page_icon' => 'bi-person',
            'default_view' => $savedView,

            // List configuration from GeneratorProperty
            'enable_search' => true,
            'enable_filters' => true,
            'enable_sorting' => true,
            'enable_create_button' => true,

            // Property metadata for client-side rendering (as JSON strings)
            'list_fields' => '[{"name":"firstName","label":"First Name","type":"string","sortable":true,"searchable":true,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getFirstName"},{"name":"name","label":"Name","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getName"},{"name":"lastName","label":"Last Name","type":"string","sortable":true,"searchable":true,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getLastName"},{"name":"accountManager","label":"AccountManager","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getAccountManager"},{"name":"accountTeam","label":"AccountTeam","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getAccountTeam"},{"name":"address","label":"Address","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getAddress"},{"name":"billingAddress","label":"BillingAddress","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getBillingAddress"},{"name":"billingCity","label":"BillingCity","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getBillingCity"},{"name":"birthDate","label":"BirthDate","type":"date","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getBirthDate"},{"name":"campaigns","label":"Campaigns","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCampaigns"},{"name":"city","label":"City","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCity"},{"name":"company","label":"Company","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCompany"},{"name":"deals","label":"Deals","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDeals"},{"name":"mobilePhone","label":"Mobile Phone","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getMobilePhone"},{"name":"title","label":"Job Title","type":"string","sortable":false,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getTitle"},{"name":"emailOptOut","label":"Email Opt-Out","type":"boolean","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getEmailOptOut"},{"name":"leadSource","label":"Lead Source","type":"string","sortable":true,"searchable":true,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getLeadSource"},{"name":"doNotCall","label":"Do Not Call","type":"boolean","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDoNotCall"},{"name":"lastContactDate","label":"Last Contact Date","type":"datetime","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getLastContactDate"},{"name":"document","label":"Document","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDocument"},{"name":"email","label":"Email","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getEmail"},{"name":"eventAttendances","label":"EventAttendances","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getEventAttendances"},{"name":"firstTalkDate","label":"FirstTalkDate","type":"datetime","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getFirstTalkDate"},{"name":"gender","label":"Gender","type":"integer","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getGender"},{"name":"geo","label":"Geo","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getGeo"},{"name":"lastTalkDate","label":"LastTalkDate","type":"datetime","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getLastTalkDate"},{"name":"neighborhood","label":"Neighborhood","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getNeighborhood"},{"name":"nickname","label":"Nickname","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getNickname"},{"name":"notes","label":"Notes","type":"text","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getNotes"},{"name":"origin","label":"Origin","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getOrigin"},{"name":"phone","label":"Phone","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getPhone"},{"name":"postalCode","label":"PostalCode","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getPostalCode"},{"name":"primaryDeals","label":"PrimaryDeals","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getPrimaryDeals"},{"name":"profilePictureUrl","label":"ProfilePictureUrl","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getProfilePictureUrl"},{"name":"ranking","label":"Ranking","type":"integer","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getRanking"},{"name":"score","label":"Score","type":"integer","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getScore"},{"name":"socialMedias","label":"SocialMedias","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getSocialMedias"},{"name":"status","label":"Status","type":"integer","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getStatus"},{"name":"talks","label":"Talks","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getTalks"},{"name":"tasks","label":"Tasks","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getTasks"}]',
            'searchable_fields' => '[{"name":"firstName","label":"First Name","type":"string"},{"name":"name","label":"Name","type":"string"},{"name":"lastName","label":"Last Name","type":"string"},{"name":"address","label":"Address","type":"string"},{"name":"billingAddress","label":"BillingAddress","type":"string"},{"name":"title","label":"Job Title","type":"string"},{"name":"department","label":"Department","type":"string"},{"name":"leadSource","label":"Lead Source","type":"string"},{"name":"document","label":"Document","type":"string"},{"name":"email","label":"Email","type":"string"},{"name":"geo","label":"Geo","type":"string"},{"name":"neighborhood","label":"Neighborhood","type":"string"},{"name":"nickname","label":"Nickname","type":"string"},{"name":"notes","label":"Notes","type":"text"},{"name":"origin","label":"Origin","type":"string"},{"name":"phone","label":"Phone","type":"string"},{"name":"postalCode","label":"PostalCode","type":"string"},{"name":"profilePictureUrl","label":"ProfilePictureUrl","type":"string"}]',
            'filterable_fields' => '[{"name":"firstName","label":"First Name","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"lastName","label":"Last Name","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"department","label":"Department","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"leadSource","label":"Lead Source","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"score","label":"Score","type":"integer","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false}]',
            'sortable_fields' => '[{"name":"firstName","label":"First Name"},{"name":"name","label":"Name"},{"name":"lastName","label":"Last Name"},{"name":"accountManager","label":"AccountManager"},{"name":"accountTeam","label":"AccountTeam"},{"name":"address","label":"Address"},{"name":"billingAddress","label":"BillingAddress"},{"name":"billingCity","label":"BillingCity"},{"name":"birthDate","label":"BirthDate"},{"name":"campaigns","label":"Campaigns"},{"name":"city","label":"City"},{"name":"company","label":"Company"},{"name":"deals","label":"Deals"},{"name":"department","label":"Department"},{"name":"leadSource","label":"Lead Source"},{"name":"lastContactDate","label":"Last Contact Date"},{"name":"document","label":"Document"},{"name":"email","label":"Email"},{"name":"eventAttendances","label":"EventAttendances"},{"name":"firstTalkDate","label":"FirstTalkDate"},{"name":"gender","label":"Gender"},{"name":"geo","label":"Geo"},{"name":"lastTalkDate","label":"LastTalkDate"},{"name":"neighborhood","label":"Neighborhood"},{"name":"nickname","label":"Nickname"},{"name":"notes","label":"Notes"},{"name":"origin","label":"Origin"},{"name":"phone","label":"Phone"},{"name":"postalCode","label":"PostalCode"},{"name":"primaryDeals","label":"PrimaryDeals"},{"name":"profilePictureUrl","label":"ProfilePictureUrl"},{"name":"ranking","label":"Ranking"},{"name":"score","label":"Score"},{"name":"socialMedias","label":"SocialMedias"},{"name":"status","label":"Status"},{"name":"talks","label":"Talks"},{"name":"tasks","label":"Tasks"}]',
        ]);
    }

    // ====================================
    // API SEARCH - Fetch Contacts for list view
    // ====================================

    /**
     * API endpoint for searching Contacts
     */
    protected function apiSearchAction(Request $request): JsonResponse
    {
        $this->denyAccessUnlessGranted(ContactVoter::LIST);

        // This method uses the BaseApiController's handleSearchRequest
        // which integrates with API Platform's GetCollection operation
        return $this->handleSearchRequest($request);
    }

    // ====================================
    // NEW FORM ACTION - Display create form
    // ====================================

    /**
     * Display new contact form
     */
    protected function newFormAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(ContactVoter::CREATE);

        $contact = new Contact();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($contact);

        $form = $this->createForm(ContactFormType::class, $contact);

        return $this->render('contact/_form_modal.html.twig', [
            'form' => $form,
            'contact' => $contact,
            'is_edit' => false,
        ]);
    }

    // ====================================
    // CREATE ACTION - Process create form submission
    // ====================================

    /**
     * Process new contact form submission
     */
    protected function createAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(ContactVoter::CREATE);

        $contact = new Contact();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($contact);

        $form = $this->createForm(ContactFormType::class, $contact);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before create hook
                $this->beforeCreate($contact);

                $this->entityManager->persist($contact);
                $this->entityManager->flush();

                // After create hook
                $this->afterCreate($contact);

                $this->addFlash('success', $this->translator->trans(
                    'contact.flash.created_successfully',
                    ['%name%' => (string) $contact],
                    'contact'
                ));

                return $this->redirectToRoute('contact_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'contact.flash.create_failed',
                    ['%error%' => $e->getMessage()],
                    'contact'
                ));
            }
        }

        // Re-render with errors
        return $this->render('contact/_form_modal.html.twig', [
            'form' => $form,
            'contact' => $contact,
            'is_edit' => false,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // EDIT FORM ACTION - Display edit form
    // ====================================

    /**
     * Display edit contact form
     */
    protected function editFormAction(Contact $contact, Request $request): Response
    {
        $this->denyAccessUnlessGranted(ContactVoter::EDIT, $contact);

        $form = $this->createForm(ContactFormType::class, $contact);

        return $this->render('contact/_form_modal.html.twig', [
            'form' => $form,
            'contact' => $contact,
            'is_edit' => true,
        ]);
    }

    // ====================================
    // UPDATE ACTION - Process edit form submission
    // ====================================

    /**
     * Process edit contact form submission
     */
    protected function updateAction(Contact $contact, Request $request): Response
    {
        $this->denyAccessUnlessGranted(ContactVoter::EDIT, $contact);

        $form = $this->createForm(ContactFormType::class, $contact);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before update hook
                $this->beforeUpdate($contact);

                $this->entityManager->flush();

                // After update hook
                $this->afterUpdate($contact);

                $this->addFlash('success', $this->translator->trans(
                    'contact.flash.updated_successfully',
                    ['%name%' => (string) $contact],
                    'contact'
                ));

                return $this->redirectToRoute('contact_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'contact.flash.update_failed',
                    ['%error%' => $e->getMessage()],
                    'contact'
                ));
            }
        }

        // Re-render with errors
        return $this->render('contact/_form_modal.html.twig', [
            'form' => $form,
            'contact' => $contact,
            'is_edit' => true,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // DELETE ACTION - Delete contact
    // ====================================

    /**
     * Delete contact
     */
    protected function deleteAction(Contact $contact, Request $request): Response
    {
        $this->denyAccessUnlessGranted(ContactVoter::DELETE, $contact);

        // Verify CSRF token
        $token = $request->request->get('_token');
        if (!$this->csrfTokenManager->isTokenValid(new CsrfToken('delete_contact_' . $contact->getId()->toString(), $token))) {
            throw new InvalidCsrfTokenException('Invalid CSRF token for delete operation.');
        }

        try {
            // Before delete hook
            $this->beforeDelete($contact);

            $name = (string) $contact;

            $this->entityManager->remove($contact);
            $this->entityManager->flush();

            // After delete hook
            $this->afterDelete();

            $this->addFlash('success', $this->translator->trans(
                'contact.flash.deleted_successfully',
                ['%name%' => $name],
                'contact'
            ));

        } catch (\Exception $e) {
            $this->addFlash('error', $this->translator->trans(
                'contact.flash.delete_failed',
                ['%error%' => $e->getMessage()],
                'contact'
            ));
        }

        return $this->redirectToRoute('contact_index', [], Response::HTTP_SEE_OTHER);
    }

    // ====================================
    // SHOW ACTION - Display contact details
    // ====================================

    /**
     * Display contact details
     */
    protected function showAction(Contact $contact): Response
    {
        $this->denyAccessUnlessGranted(ContactVoter::VIEW, $contact);

        return $this->render('contact/show.html.twig', [
            'contact' => $contact,
        ]);
    }

    // ====================================
    // LIFECYCLE HOOKS
    // ====================================
    // Override these in ContactController to add custom logic

    /**
     * Initialize new entity before creating form
     *
     * Note: Organization and Owner are set automatically by TenantEntityProcessor
     * Only use this for custom initialization logic
     */
    protected function initializeNewEntity(Contact $contact): void
    {
        // Organization and Owner are set automatically by TenantEntityProcessor
        // Add your custom initialization here
    }

    /**
     * Execute logic before creating entity
     */
    protected function beforeCreate(Contact $contact): void
    {
        // Override to add logic before create
    }

    /**
     * Execute logic after creating entity
     */
    protected function afterCreate(Contact $contact): void
    {
        // Override to add logic after create (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before updating entity
     */
    protected function beforeUpdate(Contact $contact): void
    {
        // Override to add logic before update
    }

    /**
     * Execute logic after updating entity
     */
    protected function afterUpdate(Contact $contact): void
    {
        // Override to add logic after update (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before deleting entity
     */
    protected function beforeDelete(Contact $contact): void
    {
        // Override to add logic before delete (e.g., check dependencies, archive)
    }

    /**
     * Execute logic after deleting entity
     */
    protected function afterDelete(): void
    {
        // Override to add logic after delete (e.g., cleanup, send notification)
    }
}
