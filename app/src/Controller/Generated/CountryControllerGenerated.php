<?php

declare(strict_types=1);

namespace App\Controller\Generated;

use App\Controller\Base\BaseApiController;
use App\Entity\Country;
use App\Repository\CountryRepository;
use App\Security\Voter\CountryVoter;
use App\Form\CountryFormType;
use App\Service\ListPreferencesService;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Security\Csrf\CsrfToken;
use Symfony\Component\Security\Csrf\CsrfTokenManagerInterface;
use Symfony\Component\Security\Core\Exception\InvalidCsrfTokenException;
use Symfony\Contracts\Translation\TranslatorInterface;

/**
 * Generated Base Controller for Country
 *
 * ⚠️ WARNING: This file is ALWAYS regenerated by Genmax
 * DO NOT EDIT THIS FILE - Edit CountryController instead
 *
 * @generated
 * @codeCoverageIgnore
 */
abstract class CountryControllerGenerated extends BaseApiController
{
    public function __construct(
        protected readonly EntityManagerInterface $entityManager,
        protected readonly CountryRepository $repository,
        protected readonly ListPreferencesService $listPreferencesService,
        protected readonly TranslatorInterface $translator,
        protected readonly CsrfTokenManagerInterface $csrfTokenManager,
    ) {}

    // ====================================
    // ABSTRACT METHOD IMPLEMENTATIONS
    // ====================================

    /**
     * Get the repository for this entity
     */
    protected function getRepository(): CountryRepository
    {
        return $this->repository;
    }

    /**
     * Get the plural name for this entity
     */
    protected function getEntityPluralName(): string
    {
        return 'ries';
    }

    /**
     * Convert entity to array for API responses
     */
    protected function entityToArray(object $entity): array
    {
        if (!$entity instanceof Country) {
            throw new \InvalidArgumentException('Expected Country instance');
        }

        return [
            'id' => $entity->getId()->toString(),
            'iso2' => $entity->getIso2(),
            'name' => $entity->getName(),
            'iso3' => $entity->getIso3(),
            'numericCode' => $entity->getNumericCode(),
            'currencyCode' => $entity->getCurrencyCode(),
            'phoneCode' => $entity->getPhoneCode(),
            'continent' => $entity->getContinent(),
            'capital' => $entity->getCapital(),
            'currencySymbol' => $entity->getCurrencySymbol(),
            'euMember' => $entity->getEuMember(),
            'region' => $entity->getRegion(),
            'nativeName' => $entity->getNativeName(),
            'officialName' => $entity->getOfficialName(),
            'active' => $entity->getActive(),
            'subregion' => $entity->getSubregion(),
            'latitude' => $entity->getLatitude(),
            'longitude' => $entity->getLongitude(),
            'timezones' => $entity->getTimezones(),
            'languages' => $entity->getLanguages(),
            'tld' => $entity->getTld(),
            'nationalityName' => $entity->getNationalityName(),
            'availableForShipping' => $entity->getAvailableForShipping(),
            'availableForBilling' => $entity->getAvailableForBilling(),
            'schengenMember' => $entity->getSchengenMember(),
            'oecdMember' => $entity->getOecdMember(),
            'dataResidencyRequired' => $entity->getDataResidencyRequired(),
            'postalCodeFormat' => $entity->getPostalCodeFormat(),
            'postalCodeRequired' => $entity->getPostalCodeRequired(),
            'addressFormat' => $entity->getAddressFormat(),
            'taxIdRequired' => $entity->getTaxIdRequired(),
            'population' => $entity->getPopulation(),
            'area' => $entity->getArea(),
            'unMemberSince' => $entity->getUnMemberSince(),
            'flagEmoji' => $entity->getFlagEmoji(),
            'flagSvgUrl' => $entity->getFlagSvgUrl(),
            'holidayTemplates' => ($holidayTemplatesRel = $entity->getHolidayTemplates()) ? [
                'id' => $holidayTemplatesRel->getId()->toString(),
                'display' => (string) $holidayTemplatesRel,
            ] : null,
        ];
    }

    // ====================================
    // INDEX ACTION - List all ries
    // ====================================

    /**
     * List ries
     */
    protected function indexAction(): Response
    {
        $this->denyAccessUnlessGranted(CountryVoter::LIST);

        $preferences = $this->listPreferencesService->getEntityPreferences('ries');
        $savedView = $preferences['view'] ?? 'grid';

        return $this->render('country/index.html.twig', [
            'entities' => [],  // Loaded via API
            'entity_name' => 'country',
            'entity_name_plural' => 'ries',
            'page_icon' => 'bi-globe',
            'default_view' => $savedView,

            // List configuration from GeneratorProperty
            'enable_search' => true,
            'enable_filters' => false,
            'enable_sorting' => true,
            'enable_create_button' => true,

            // Property metadata for client-side rendering (as JSON strings)
            'list_fields' => '[{"name":"iso2","label":"ISO 3166-1 Alpha-2","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":"exact","filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getIso2"},{"name":"name","label":"Name","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":"partial","filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getName"},{"name":"iso3","label":"ISO 3166-1 Alpha-3","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":"exact","filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getIso3"},{"name":"numericCode","label":"ISO Numeric Code","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":"exact","filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getNumericCode"},{"name":"currencyCode","label":"Currency Code","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":"exact","filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCurrencyCode"},{"name":"phoneCode","label":"Phone Code","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":"partial","filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getPhoneCode"},{"name":"continent","label":"Continent","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":"exact","filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getContinent"},{"name":"capital","label":"Capital City","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":"partial","filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCapital"},{"name":"currencySymbol","label":"Currency Symbol","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCurrencySymbol"},{"name":"euMember","label":"EU Member","type":"boolean","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":true,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getEuMember"},{"name":"region","label":"Region","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":"exact","filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getRegion"},{"name":"nativeName","label":"Native Name","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getNativeName"},{"name":"officialName","label":"Official Name","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getOfficialName"},{"name":"active","label":"Active","type":"boolean","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":true,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getActive"},{"name":"subregion","label":"Subregion","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getSubregion"},{"name":"latitude","label":"Latitude","type":"decimal","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getLatitude"},{"name":"longitude","label":"Longitude","type":"decimal","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getLongitude"},{"name":"timezones","label":"Timezones","type":"json","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getTimezones"},{"name":"languages","label":"Languages","type":"json","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getLanguages"},{"name":"tld","label":"TLD","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getTld"},{"name":"nationalityName","label":"Nationality","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getNationalityName"},{"name":"availableForShipping","label":"Available for Shipping","type":"boolean","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":true,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getAvailableForShipping"},{"name":"availableForBilling","label":"Available for Billing","type":"boolean","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":true,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getAvailableForBilling"},{"name":"schengenMember","label":"Schengen Member","type":"boolean","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":true,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getSchengenMember"},{"name":"oecdMember","label":"OECD Member","type":"boolean","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":true,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getOecdMember"},{"name":"dataResidencyRequired","label":"Data Residency Required","type":"boolean","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":true,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDataResidencyRequired"},{"name":"postalCodeFormat","label":"Postal Code Format","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getPostalCodeFormat"},{"name":"postalCodeRequired","label":"Postal Code Required","type":"boolean","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":true,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getPostalCodeRequired"},{"name":"addressFormat","label":"Address Format","type":"text","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getAddressFormat"},{"name":"taxIdRequired","label":"Tax ID Required","type":"boolean","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":true,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getTaxIdRequired"},{"name":"population","label":"Population","type":"integer","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":true,"filterExists":false,"getter":"getPopulation"},{"name":"area","label":"Area (km\u00b2)","type":"decimal","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":true,"filterExists":false,"getter":"getArea"},{"name":"unMemberSince","label":"UN Member Since","type":"integer","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getUnMemberSince"},{"name":"flagEmoji","label":"Flag Emoji","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getFlagEmoji"},{"name":"flagSvgUrl","label":"Flag SVG URL","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getFlagSvgUrl"}]',
            'searchable_fields' => '[{"name":"name","label":"Name","type":"string"}]',
            'filterable_fields' => '[]',
            'sortable_fields' => '[{"name":"name","label":"Name"}]',
        ]);
    }

    // ====================================
    // API SEARCH - Fetch ries for list view
    // ====================================

    /**
     * API endpoint for searching ries
     */
    protected function apiSearchAction(Request $request): JsonResponse
    {
        $this->denyAccessUnlessGranted(CountryVoter::LIST);

        // This method uses the BaseApiController's handleSearchRequest
        // which integrates with API Platform's GetCollection operation
        return $this->handleSearchRequest($request);
    }

    // ====================================
    // NEW FORM ACTION - Display create form
    // ====================================

    /**
     * Display new country form
     */
    protected function newFormAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(CountryVoter::CREATE);

        $country = new Country();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($country);

        $form = $this->createForm(CountryFormType::class, $country);

        return $this->render('country/_form_modal.html.twig', [
            'form' => $form,
            'country' => $country,
            'is_edit' => false,
        ]);
    }

    // ====================================
    // CREATE ACTION - Process create form submission
    // ====================================

    /**
     * Process new country form submission
     */
    protected function createAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(CountryVoter::CREATE);

        $country = new Country();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($country);

        $form = $this->createForm(CountryFormType::class, $country);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before create hook
                $this->beforeCreate($country);

                $this->entityManager->persist($country);
                $this->entityManager->flush();

                // After create hook
                $this->afterCreate($country);

                $this->addFlash('success', $this->translator->trans(
                    'country.flash.created_successfully',
                    ['%name%' => (string) $country],
                    'country'
                ));

                return $this->redirectToRoute('country_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'country.flash.create_failed',
                    ['%error%' => $e->getMessage()],
                    'country'
                ));
            }
        }

        // Re-render with errors
        return $this->render('country/_form_modal.html.twig', [
            'form' => $form,
            'country' => $country,
            'is_edit' => false,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // EDIT FORM ACTION - Display edit form
    // ====================================

    /**
     * Display edit country form
     */
    protected function editFormAction(Country $country, Request $request): Response
    {
        $this->denyAccessUnlessGranted(CountryVoter::EDIT, $country);

        $form = $this->createForm(CountryFormType::class, $country);

        return $this->render('country/_form_modal.html.twig', [
            'form' => $form,
            'country' => $country,
            'is_edit' => true,
        ]);
    }

    // ====================================
    // UPDATE ACTION - Process edit form submission
    // ====================================

    /**
     * Process edit country form submission
     */
    protected function updateAction(Country $country, Request $request): Response
    {
        $this->denyAccessUnlessGranted(CountryVoter::EDIT, $country);

        $form = $this->createForm(CountryFormType::class, $country);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before update hook
                $this->beforeUpdate($country);

                $this->entityManager->flush();

                // After update hook
                $this->afterUpdate($country);

                $this->addFlash('success', $this->translator->trans(
                    'country.flash.updated_successfully',
                    ['%name%' => (string) $country],
                    'country'
                ));

                return $this->redirectToRoute('country_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'country.flash.update_failed',
                    ['%error%' => $e->getMessage()],
                    'country'
                ));
            }
        }

        // Re-render with errors
        return $this->render('country/_form_modal.html.twig', [
            'form' => $form,
            'country' => $country,
            'is_edit' => true,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // DELETE ACTION - Delete country
    // ====================================

    /**
     * Delete country
     */
    protected function deleteAction(Country $country, Request $request): Response
    {
        $this->denyAccessUnlessGranted(CountryVoter::DELETE, $country);

        // Verify CSRF token
        $token = $request->request->get('_token');
        if (!$this->csrfTokenManager->isTokenValid(new CsrfToken('delete_country_' . $country->getId()->toString(), $token))) {
            throw new InvalidCsrfTokenException('Invalid CSRF token for delete operation.');
        }

        try {
            // Before delete hook
            $this->beforeDelete($country);

            $name = (string) $country;

            $this->entityManager->remove($country);
            $this->entityManager->flush();

            // After delete hook
            $this->afterDelete();

            $this->addFlash('success', $this->translator->trans(
                'country.flash.deleted_successfully',
                ['%name%' => $name],
                'country'
            ));

        } catch (\Exception $e) {
            $this->addFlash('error', $this->translator->trans(
                'country.flash.delete_failed',
                ['%error%' => $e->getMessage()],
                'country'
            ));
        }

        return $this->redirectToRoute('country_index', [], Response::HTTP_SEE_OTHER);
    }

    // ====================================
    // SHOW ACTION - Display country details
    // ====================================

    /**
     * Display country details
     */
    protected function showAction(Country $country): Response
    {
        $this->denyAccessUnlessGranted(CountryVoter::VIEW, $country);

        return $this->render('country/show.html.twig', [
            'country' => $country,
        ]);
    }

    // ====================================
    // LIFECYCLE HOOKS
    // ====================================
    // Override these in CountryController to add custom logic

    /**
     * Initialize new entity before creating form
     *
     * Note: Organization and Owner are set automatically by TenantEntityProcessor
     * Only use this for custom initialization logic
     */
    protected function initializeNewEntity(Country $country): void
    {
        // Organization and Owner are set automatically by TenantEntityProcessor
        // Add your custom initialization here
    }

    /**
     * Execute logic before creating entity
     */
    protected function beforeCreate(Country $country): void
    {
        // Override to add logic before create
    }

    /**
     * Execute logic after creating entity
     */
    protected function afterCreate(Country $country): void
    {
        // Override to add logic after create (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before updating entity
     */
    protected function beforeUpdate(Country $country): void
    {
        // Override to add logic before update
    }

    /**
     * Execute logic after updating entity
     */
    protected function afterUpdate(Country $country): void
    {
        // Override to add logic after update (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before deleting entity
     */
    protected function beforeDelete(Country $country): void
    {
        // Override to add logic before delete (e.g., check dependencies, archive)
    }

    /**
     * Execute logic after deleting entity
     */
    protected function afterDelete(): void
    {
        // Override to add logic after delete (e.g., cleanup, send notification)
    }
}
