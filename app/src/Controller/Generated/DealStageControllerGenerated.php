<?php

declare(strict_types=1);

namespace App\Controller\Generated;

use App\Controller\Base\BaseApiController;
use App\Entity\DealStage;
use App\Repository\DealStageRepository;
use App\Security\Voter\DealStageVoter;
use App\Form\DealStageFormType;
use App\Service\ListPreferencesService;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Security\Csrf\CsrfToken;
use Symfony\Component\Security\Csrf\CsrfTokenManagerInterface;
use Symfony\Component\Security\Core\Exception\InvalidCsrfTokenException;
use Symfony\Contracts\Translation\TranslatorInterface;

/**
 * Generated Base Controller for DealStage
 *
 * ⚠️ WARNING: This file is ALWAYS regenerated by Genmax
 * DO NOT EDIT THIS FILE - Edit DealStageController instead
 *
 * @generated
 * @codeCoverageIgnore
 */
abstract class DealStageControllerGenerated extends BaseApiController
{
    public function __construct(
        protected readonly EntityManagerInterface $entityManager,
        protected readonly DealStageRepository $repository,
        protected readonly ListPreferencesService $listPreferencesService,
        protected readonly TranslatorInterface $translator,
        protected readonly CsrfTokenManagerInterface $csrfTokenManager,
    ) {}

    // ====================================
    // ABSTRACT METHOD IMPLEMENTATIONS
    // ====================================

    /**
     * Get the repository for this entity
     */
    protected function getRepository(): DealStageRepository
    {
        return $this->repository;
    }

    /**
     * Get the plural name for this entity
     */
    protected function getEntityPluralName(): string
    {
        return 'dealStages';
    }

    /**
     * Convert entity to array for API responses
     */
    protected function entityToArray(object $entity): array
    {
        if (!$entity instanceof DealStage) {
            throw new \InvalidArgumentException('Expected DealStage instance');
        }

        return [
            'id' => $entity->getId()->toString(),
            'organization' => ($organizationRel = $entity->getOrganization()) ? [
                'id' => $organizationRel->getId()->toString(),
                'display' => (string) $organizationRel,
            ] : null,
            'stageName' => $entity->getStageName(),
            'probability' => $entity->getProbability(),
            'rottenDays' => $entity->getRottenDays(),
            'rotten' => $entity->getRotten(),
            'enteredBy' => ($enteredByRel = $entity->getEnteredBy()) ? [
                'id' => $enteredByRel->getId()->toString(),
                'display' => (string) $enteredByRel,
            ] : null,
            'exitedBy' => ($exitedByRel = $entity->getExitedBy()) ? [
                'id' => $exitedByRel->getId()->toString(),
                'display' => (string) $exitedByRel,
            ] : null,
            'expectedCloseDate' => $entity->getExpectedCloseDate()?->format('M d, Y'),
            'stageValue' => $entity->getStageValue(),
            'daysInStage' => $entity->getDaysInStage(),
            'weightedValue' => $entity->getWeightedValue(),
            'active' => $entity->getActive(),
            'deal' => ($dealRel = $entity->getDeal()) ? [
                'id' => $dealRel->getId()->toString(),
                'display' => (string) $dealRel,
            ] : null,
            'endedAt' => $entity->getEndedAt()?->format('M d, Y'),
            'lastUpdatedAt' => $entity->getLastUpdatedAt()?->format('M d, Y'),
            'notes' => $entity->getNotes(),
            'pipelineStage' => ($pipelineStageRel = $entity->getPipelineStage()) ? [
                'id' => $pipelineStageRel->getId()->toString(),
                'display' => (string) $pipelineStageRel,
            ] : null,
            'startedAt' => $entity->getStartedAt()?->format('M d, Y'),
        ];
    }

    // ====================================
    // INDEX ACTION - List all DealStages
    // ====================================

    /**
     * List DealStages
     */
    protected function indexAction(): Response
    {
        $this->denyAccessUnlessGranted(DealStageVoter::LIST);

        $preferences = $this->listPreferencesService->getEntityPreferences('dealStages');
        $savedView = $preferences['view'] ?? 'grid';

        return $this->render('dealstage/index.html.twig', [
            'entities' => [],  // Loaded via API
            'entity_name' => 'dealStage',
            'entity_name_plural' => 'dealStages',
            'page_icon' => 'bi-bar-chart-steps',
            'default_view' => $savedView,

            // List configuration from GeneratorProperty
            'enable_search' => true,
            'enable_filters' => true,
            'enable_sorting' => true,
            'enable_create_button' => true,

            // Property metadata for client-side rendering (as JSON strings)
            'list_fields' => '[{"name":"stageName","label":"Stage Name","type":"string","sortable":true,"searchable":true,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getStageName"},{"name":"probability","label":"Win Probability (%)","type":"decimal","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":true,"filterExists":false,"getter":"getProbability"},{"name":"rottenDays","label":"Rotten Days Threshold","type":"integer","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":true,"filterExists":false,"getter":"getRottenDays"},{"name":"rotten","label":"Is Rotten","type":"boolean","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":true,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getRotten"},{"name":"enteredBy","label":"Entered By","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getEnteredBy"},{"name":"exitedBy","label":"Exited By","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getExitedBy"},{"name":"expectedCloseDate","label":"Expected Close Date","type":"date","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":true,"filterNumericRange":false,"filterExists":false,"getter":"getExpectedCloseDate"},{"name":"stageValue","label":"Stage Value","type":"decimal","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":true,"filterExists":false,"getter":"getStageValue"},{"name":"daysInStage","label":"Days in Stage","type":"float","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDaysInStage"},{"name":"weightedValue","label":"Weighted Value","type":"decimal","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":true,"filterExists":false,"getter":"getWeightedValue"},{"name":"active","label":"Active","type":"boolean","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":true,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getActive"},{"name":"deal","label":"Deal","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDeal"},{"name":"endedAt","label":"Ended At","type":"datetime","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getEndedAt"},{"name":"lastUpdatedAt","label":"Last Updated At","type":"datetime","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getLastUpdatedAt"},{"name":"notes","label":"Notes","type":"text","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getNotes"},{"name":"pipelineStage","label":"Pipeline Stage","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getPipelineStage"},{"name":"startedAt","label":"Started At","type":"datetime","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getStartedAt"}]',
            'searchable_fields' => '[{"name":"stageName","label":"Stage Name","type":"string"},{"name":"notes","label":"Notes","type":"text"}]',
            'filterable_fields' => '[{"name":"stageName","label":"Stage Name","type":"string","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"probability","label":"Win Probability (%)","type":"decimal","strategy":null,"boolean":false,"date":false,"numericRange":true,"exists":false},{"name":"rottenDays","label":"Rotten Days Threshold","type":"integer","strategy":null,"boolean":false,"date":false,"numericRange":true,"exists":false},{"name":"rotten","label":"Is Rotten","type":"boolean","strategy":null,"boolean":true,"date":false,"numericRange":false,"exists":false},{"name":"expectedCloseDate","label":"Expected Close Date","type":"date","strategy":null,"boolean":false,"date":true,"numericRange":false,"exists":false},{"name":"stageValue","label":"Stage Value","type":"decimal","strategy":null,"boolean":false,"date":false,"numericRange":true,"exists":false},{"name":"weightedValue","label":"Weighted Value","type":"decimal","strategy":null,"boolean":false,"date":false,"numericRange":true,"exists":false},{"name":"active","label":"Active","type":"boolean","strategy":null,"boolean":true,"date":false,"numericRange":false,"exists":false}]',
            'sortable_fields' => '[{"name":"stageName","label":"Stage Name"},{"name":"probability","label":"Win Probability (%)"},{"name":"rottenDays","label":"Rotten Days Threshold"},{"name":"rotten","label":"Is Rotten"},{"name":"enteredBy","label":"Entered By"},{"name":"exitedBy","label":"Exited By"},{"name":"expectedCloseDate","label":"Expected Close Date"},{"name":"stageValue","label":"Stage Value"},{"name":"daysInStage","label":"Days in Stage"},{"name":"weightedValue","label":"Weighted Value"},{"name":"active","label":"Active"},{"name":"deal","label":"Deal"},{"name":"endedAt","label":"Ended At"},{"name":"lastUpdatedAt","label":"Last Updated At"},{"name":"notes","label":"Notes"},{"name":"pipelineStage","label":"Pipeline Stage"},{"name":"startedAt","label":"Started At"}]',
        ]);
    }

    // ====================================
    // API SEARCH - Fetch DealStages for list view
    // ====================================

    /**
     * API endpoint for searching DealStages
     */
    protected function apiSearchAction(Request $request): JsonResponse
    {
        $this->denyAccessUnlessGranted(DealStageVoter::LIST);

        // This method uses the BaseApiController's handleSearchRequest
        // which integrates with API Platform's GetCollection operation
        return $this->handleSearchRequest($request);
    }

    // ====================================
    // NEW FORM ACTION - Display create form
    // ====================================

    /**
     * Display new dealStage form
     */
    protected function newFormAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(DealStageVoter::CREATE);

        $dealStage = new DealStage();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($dealStage);

        $form = $this->createForm(DealStageFormType::class, $dealStage);

        return $this->render('dealstage/_form_modal.html.twig', [
            'form' => $form,
            'dealStage' => $dealStage,
            'is_edit' => false,
        ]);
    }

    // ====================================
    // CREATE ACTION - Process create form submission
    // ====================================

    /**
     * Process new dealStage form submission
     */
    protected function createAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(DealStageVoter::CREATE);

        $dealStage = new DealStage();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($dealStage);

        $form = $this->createForm(DealStageFormType::class, $dealStage);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before create hook
                $this->beforeCreate($dealStage);

                $this->entityManager->persist($dealStage);
                $this->entityManager->flush();

                // After create hook
                $this->afterCreate($dealStage);

                $this->addFlash('success', $this->translator->trans(
                    'dealstage.flash.created_successfully',
                    ['%name%' => (string) $dealStage],
                    'dealstage'
                ));

                return $this->redirectToRoute('dealstage_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'dealstage.flash.create_failed',
                    ['%error%' => $e->getMessage()],
                    'dealstage'
                ));
            }
        }

        // Re-render with errors
        return $this->render('dealstage/_form_modal.html.twig', [
            'form' => $form,
            'dealStage' => $dealStage,
            'is_edit' => false,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // EDIT FORM ACTION - Display edit form
    // ====================================

    /**
     * Display edit dealStage form
     */
    protected function editFormAction(DealStage $dealStage, Request $request): Response
    {
        $this->denyAccessUnlessGranted(DealStageVoter::EDIT, $dealStage);

        $form = $this->createForm(DealStageFormType::class, $dealStage);

        return $this->render('dealstage/_form_modal.html.twig', [
            'form' => $form,
            'dealStage' => $dealStage,
            'is_edit' => true,
        ]);
    }

    // ====================================
    // UPDATE ACTION - Process edit form submission
    // ====================================

    /**
     * Process edit dealStage form submission
     */
    protected function updateAction(DealStage $dealStage, Request $request): Response
    {
        $this->denyAccessUnlessGranted(DealStageVoter::EDIT, $dealStage);

        $form = $this->createForm(DealStageFormType::class, $dealStage);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before update hook
                $this->beforeUpdate($dealStage);

                $this->entityManager->flush();

                // After update hook
                $this->afterUpdate($dealStage);

                $this->addFlash('success', $this->translator->trans(
                    'dealstage.flash.updated_successfully',
                    ['%name%' => (string) $dealStage],
                    'dealstage'
                ));

                return $this->redirectToRoute('dealstage_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'dealstage.flash.update_failed',
                    ['%error%' => $e->getMessage()],
                    'dealstage'
                ));
            }
        }

        // Re-render with errors
        return $this->render('dealstage/_form_modal.html.twig', [
            'form' => $form,
            'dealStage' => $dealStage,
            'is_edit' => true,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // DELETE ACTION - Delete dealStage
    // ====================================

    /**
     * Delete dealStage
     */
    protected function deleteAction(DealStage $dealStage, Request $request): Response
    {
        $this->denyAccessUnlessGranted(DealStageVoter::DELETE, $dealStage);

        // Verify CSRF token
        $token = $request->request->get('_token');
        if (!$this->csrfTokenManager->isTokenValid(new CsrfToken('delete_dealStage_' . $dealStage->getId()->toString(), $token))) {
            throw new InvalidCsrfTokenException('Invalid CSRF token for delete operation.');
        }

        try {
            // Before delete hook
            $this->beforeDelete($dealStage);

            $name = (string) $dealStage;

            $this->entityManager->remove($dealStage);
            $this->entityManager->flush();

            // After delete hook
            $this->afterDelete();

            $this->addFlash('success', $this->translator->trans(
                'dealstage.flash.deleted_successfully',
                ['%name%' => $name],
                'dealstage'
            ));

        } catch (\Exception $e) {
            $this->addFlash('error', $this->translator->trans(
                'dealstage.flash.delete_failed',
                ['%error%' => $e->getMessage()],
                'dealstage'
            ));
        }

        return $this->redirectToRoute('dealstage_index', [], Response::HTTP_SEE_OTHER);
    }

    // ====================================
    // SHOW ACTION - Display dealStage details
    // ====================================

    /**
     * Display dealStage details
     */
    protected function showAction(DealStage $dealStage): Response
    {
        $this->denyAccessUnlessGranted(DealStageVoter::VIEW, $dealStage);

        return $this->render('dealstage/show.html.twig', [
            'dealStage' => $dealStage,
        ]);
    }

    // ====================================
    // LIFECYCLE HOOKS
    // ====================================
    // Override these in DealStageController to add custom logic

    /**
     * Initialize new entity before creating form
     *
     * Note: Organization and Owner are set automatically by TenantEntityProcessor
     * Only use this for custom initialization logic
     */
    protected function initializeNewEntity(DealStage $dealStage): void
    {
        // Organization and Owner are set automatically by TenantEntityProcessor
        // Add your custom initialization here
    }

    /**
     * Execute logic before creating entity
     */
    protected function beforeCreate(DealStage $dealStage): void
    {
        // Override to add logic before create
    }

    /**
     * Execute logic after creating entity
     */
    protected function afterCreate(DealStage $dealStage): void
    {
        // Override to add logic after create (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before updating entity
     */
    protected function beforeUpdate(DealStage $dealStage): void
    {
        // Override to add logic before update
    }

    /**
     * Execute logic after updating entity
     */
    protected function afterUpdate(DealStage $dealStage): void
    {
        // Override to add logic after update (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before deleting entity
     */
    protected function beforeDelete(DealStage $dealStage): void
    {
        // Override to add logic before delete (e.g., check dependencies, archive)
    }

    /**
     * Execute logic after deleting entity
     */
    protected function afterDelete(): void
    {
        // Override to add logic after delete (e.g., cleanup, send notification)
    }
}
