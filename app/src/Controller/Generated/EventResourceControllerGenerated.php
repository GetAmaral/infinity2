<?php

declare(strict_types=1);

namespace App\Controller\Generated;

use App\Controller\Base\BaseApiController;
use App\Entity\EventResource;
use App\Repository\EventResourceRepository;
use App\Security\Voter\EventResourceVoter;
use App\Form\EventResourceFormType;
use App\Service\ListPreferencesService;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Security\Csrf\CsrfToken;
use Symfony\Component\Security\Csrf\CsrfTokenManagerInterface;
use Symfony\Component\Security\Core\Exception\InvalidCsrfTokenException;
use Symfony\Contracts\Translation\TranslatorInterface;

/**
 * Generated Base Controller for EventResource
 *
 * ⚠️ WARNING: This file is ALWAYS regenerated by Genmax
 * DO NOT EDIT THIS FILE - Edit EventResourceController instead
 *
 * @generated
 * @codeCoverageIgnore
 */
abstract class EventResourceControllerGenerated extends BaseApiController
{
    public function __construct(
        protected readonly EntityManagerInterface $entityManager,
        protected readonly EventResourceRepository $repository,
        protected readonly ListPreferencesService $listPreferencesService,
        protected readonly TranslatorInterface $translator,
        protected readonly CsrfTokenManagerInterface $csrfTokenManager,
    ) {}

    // ====================================
    // ABSTRACT METHOD IMPLEMENTATIONS
    // ====================================

    /**
     * Get the repository for this entity
     */
    protected function getRepository(): EventResourceRepository
    {
        return $this->repository;
    }

    /**
     * Get the plural name for this entity
     */
    protected function getEntityPluralName(): string
    {
        return 'eventResources';
    }

    /**
     * Convert entity to array for API responses
     */
    protected function entityToArray(object $entity): array
    {
        if (!$entity instanceof EventResource) {
            throw new \InvalidArgumentException('Expected EventResource instance');
        }

        return [
            'id' => $entity->getId()->toString(),
            'organization' => ($organizationRel = $entity->getOrganization()) ? [
                'id' => $organizationRel->getId()->toString(),
                'display' => (string) $organizationRel,
            ] : null,
            'name' => $entity->getName(),
            'description' => $entity->getDescription(),
            'availabilitySchedule' => $entity->getAvailabilitySchedule(),
            'available' => $entity->getAvailable(),
            'active' => $entity->getActive(),
            'bookable' => $entity->getBookable(),
            'timezone' => $entity->getTimezone(),
            'requiresApproval' => $entity->getRequiresApproval(),
            'autoConfirm' => $entity->getAutoConfirm(),
            'minimumBookingDuration' => $entity->getMinimumBookingDuration(),
            'maximumBookingDuration' => $entity->getMaximumBookingDuration(),
            'pricePerHour' => $entity->getPricePerHour(),
            'bookingRules' => $entity->getBookingRules(),
            'pricePerDay' => $entity->getPricePerDay(),
            'imageUrl' => $entity->getImageUrl(),
            'thumbnailUrl' => $entity->getThumbnailUrl(),
            'tags' => $entity->getTags(),
            'capacity' => $entity->getCapacity(),
            'city' => ($cityRel = $entity->getCity()) ? [
                'id' => $cityRel->getId()->toString(),
                'display' => (string) $cityRel,
            ] : null,
            'equipment' => $entity->getEquipment(),
            'eventBookings' => ($eventBookingsRel = $entity->getEventBookings()) ? [
                'id' => $eventBookingsRel->getId()->toString(),
                'display' => (string) $eventBookingsRel,
            ] : null,
            'geoCoordinates' => $entity->getGeoCoordinates(),
            'location' => $entity->getLocation(),
            'type' => ($typeRel = $entity->getType()) ? [
                'id' => $typeRel->getId()->toString(),
                'display' => (string) $typeRel,
            ] : null,
        ];
    }

    // ====================================
    // INDEX ACTION - List all EventResources
    // ====================================

    /**
     * List EventResources
     */
    protected function indexAction(): Response
    {
        $this->denyAccessUnlessGranted(EventResourceVoter::LIST);

        $preferences = $this->listPreferencesService->getEntityPreferences('eventResources');
        $savedView = $preferences['view'] ?? 'grid';

        return $this->render('eventresource/index.html.twig', [
            'entities' => [],  // Loaded via API
            'entity_name' => 'eventResource',
            'entity_name_plural' => 'eventResources',
            'page_icon' => 'bi-door-open',
            'default_view' => $savedView,

            // List configuration from GeneratorProperty
            'enable_search' => true,
            'enable_filters' => true,
            'enable_sorting' => true,
            'enable_create_button' => true,

            // Property metadata for client-side rendering (as JSON strings)
            'list_fields' => '[{"name":"name","label":"Name","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getName"},{"name":"description","label":"Description","type":"text","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDescription"},{"name":"availabilitySchedule","label":"AvailabilitySchedule","type":"json","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getAvailabilitySchedule"},{"name":"available","label":"Available","type":"boolean","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getAvailable"},{"name":"active","label":"Active","type":"boolean","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getActive"},{"name":"bookable","label":"Bookable","type":"boolean","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getBookable"},{"name":"requiresApproval","label":"Requires Approval","type":"boolean","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getRequiresApproval"},{"name":"autoConfirm","label":"Auto Confirm","type":"boolean","sortable":true,"searchable":false,"filterable":true,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getAutoConfirm"},{"name":"pricePerHour","label":"Price Per Hour","type":"decimal","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getPricePerHour"},{"name":"bookingRules","label":"BookingRules","type":"json","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getBookingRules"},{"name":"pricePerDay","label":"Price Per Day","type":"decimal","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getPricePerDay"},{"name":"capacity","label":"Capacity","type":"integer","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCapacity"},{"name":"city","label":"City","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCity"},{"name":"equipment","label":"Equipment","type":"json","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getEquipment"},{"name":"eventBookings","label":"EventBookings","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getEventBookings"},{"name":"geoCoordinates","label":"Geo Coordinates","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getGeoCoordinates"},{"name":"location","label":"Location","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getLocation"},{"name":"type","label":"Type","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getType"}]',
            'searchable_fields' => '[{"name":"name","label":"Name","type":"string"},{"name":"description","label":"Description","type":"text"},{"name":"geoCoordinates","label":"Geo Coordinates","type":"string"},{"name":"location","label":"Location","type":"string"}]',
            'filterable_fields' => '[{"name":"available","label":"Available","type":"boolean","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"bookable","label":"Bookable","type":"boolean","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"requiresApproval","label":"Requires Approval","type":"boolean","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false},{"name":"autoConfirm","label":"Auto Confirm","type":"boolean","strategy":null,"boolean":false,"date":false,"numericRange":false,"exists":false}]',
            'sortable_fields' => '[{"name":"name","label":"Name"},{"name":"description","label":"Description"},{"name":"availabilitySchedule","label":"AvailabilitySchedule"},{"name":"available","label":"Available"},{"name":"active","label":"Active"},{"name":"bookable","label":"Bookable"},{"name":"requiresApproval","label":"Requires Approval"},{"name":"autoConfirm","label":"Auto Confirm"},{"name":"pricePerHour","label":"Price Per Hour"},{"name":"bookingRules","label":"BookingRules"},{"name":"pricePerDay","label":"Price Per Day"},{"name":"capacity","label":"Capacity"},{"name":"city","label":"City"},{"name":"equipment","label":"Equipment"},{"name":"eventBookings","label":"EventBookings"},{"name":"geoCoordinates","label":"Geo Coordinates"},{"name":"location","label":"Location"},{"name":"type","label":"Type"}]',
        ]);
    }

    // ====================================
    // API SEARCH - Fetch EventResources for list view
    // ====================================

    /**
     * API endpoint for searching EventResources
     */
    protected function apiSearchAction(Request $request): JsonResponse
    {
        $this->denyAccessUnlessGranted(EventResourceVoter::LIST);

        // This method uses the BaseApiController's handleSearchRequest
        // which integrates with API Platform's GetCollection operation
        return $this->handleSearchRequest($request);
    }

    // ====================================
    // NEW FORM ACTION - Display create form
    // ====================================

    /**
     * Display new eventResource form
     */
    protected function newFormAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(EventResourceVoter::CREATE);

        $eventResource = new EventResource();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($eventResource);

        $form = $this->createForm(EventResourceFormType::class, $eventResource);

        return $this->render('eventresource/_form_modal.html.twig', [
            'form' => $form,
            'eventResource' => $eventResource,
            'is_edit' => false,
        ]);
    }

    // ====================================
    // CREATE ACTION - Process create form submission
    // ====================================

    /**
     * Process new eventResource form submission
     */
    protected function createAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(EventResourceVoter::CREATE);

        $eventResource = new EventResource();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($eventResource);

        $form = $this->createForm(EventResourceFormType::class, $eventResource);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before create hook
                $this->beforeCreate($eventResource);

                $this->entityManager->persist($eventResource);
                $this->entityManager->flush();

                // After create hook
                $this->afterCreate($eventResource);

                $this->addFlash('success', $this->translator->trans(
                    'eventresource.flash.created_successfully',
                    ['%name%' => (string) $eventResource],
                    'eventresource'
                ));

                return $this->redirectToRoute('eventresource_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'eventresource.flash.create_failed',
                    ['%error%' => $e->getMessage()],
                    'eventresource'
                ));
            }
        }

        // Re-render with errors
        return $this->render('eventresource/_form_modal.html.twig', [
            'form' => $form,
            'eventResource' => $eventResource,
            'is_edit' => false,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // EDIT FORM ACTION - Display edit form
    // ====================================

    /**
     * Display edit eventResource form
     */
    protected function editFormAction(EventResource $eventResource, Request $request): Response
    {
        $this->denyAccessUnlessGranted(EventResourceVoter::EDIT, $eventResource);

        $form = $this->createForm(EventResourceFormType::class, $eventResource);

        return $this->render('eventresource/_form_modal.html.twig', [
            'form' => $form,
            'eventResource' => $eventResource,
            'is_edit' => true,
        ]);
    }

    // ====================================
    // UPDATE ACTION - Process edit form submission
    // ====================================

    /**
     * Process edit eventResource form submission
     */
    protected function updateAction(EventResource $eventResource, Request $request): Response
    {
        $this->denyAccessUnlessGranted(EventResourceVoter::EDIT, $eventResource);

        $form = $this->createForm(EventResourceFormType::class, $eventResource);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before update hook
                $this->beforeUpdate($eventResource);

                $this->entityManager->flush();

                // After update hook
                $this->afterUpdate($eventResource);

                $this->addFlash('success', $this->translator->trans(
                    'eventresource.flash.updated_successfully',
                    ['%name%' => (string) $eventResource],
                    'eventresource'
                ));

                return $this->redirectToRoute('eventresource_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'eventresource.flash.update_failed',
                    ['%error%' => $e->getMessage()],
                    'eventresource'
                ));
            }
        }

        // Re-render with errors
        return $this->render('eventresource/_form_modal.html.twig', [
            'form' => $form,
            'eventResource' => $eventResource,
            'is_edit' => true,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // DELETE ACTION - Delete eventResource
    // ====================================

    /**
     * Delete eventResource
     */
    protected function deleteAction(EventResource $eventResource, Request $request): Response
    {
        $this->denyAccessUnlessGranted(EventResourceVoter::DELETE, $eventResource);

        // Verify CSRF token
        $token = $request->request->get('_token');
        if (!$this->csrfTokenManager->isTokenValid(new CsrfToken('delete_eventResource_' . $eventResource->getId()->toString(), $token))) {
            throw new InvalidCsrfTokenException('Invalid CSRF token for delete operation.');
        }

        try {
            // Before delete hook
            $this->beforeDelete($eventResource);

            $name = (string) $eventResource;

            $this->entityManager->remove($eventResource);
            $this->entityManager->flush();

            // After delete hook
            $this->afterDelete();

            $this->addFlash('success', $this->translator->trans(
                'eventresource.flash.deleted_successfully',
                ['%name%' => $name],
                'eventresource'
            ));

        } catch (\Exception $e) {
            $this->addFlash('error', $this->translator->trans(
                'eventresource.flash.delete_failed',
                ['%error%' => $e->getMessage()],
                'eventresource'
            ));
        }

        return $this->redirectToRoute('eventresource_index', [], Response::HTTP_SEE_OTHER);
    }

    // ====================================
    // SHOW ACTION - Display eventResource details
    // ====================================

    /**
     * Display eventResource details
     */
    protected function showAction(EventResource $eventResource): Response
    {
        $this->denyAccessUnlessGranted(EventResourceVoter::VIEW, $eventResource);

        return $this->render('eventresource/show.html.twig', [
            'eventResource' => $eventResource,
        ]);
    }

    // ====================================
    // LIFECYCLE HOOKS
    // ====================================
    // Override these in EventResourceController to add custom logic

    /**
     * Initialize new entity before creating form
     *
     * Note: Organization and Owner are set automatically by TenantEntityProcessor
     * Only use this for custom initialization logic
     */
    protected function initializeNewEntity(EventResource $eventResource): void
    {
        // Organization and Owner are set automatically by TenantEntityProcessor
        // Add your custom initialization here
    }

    /**
     * Execute logic before creating entity
     */
    protected function beforeCreate(EventResource $eventResource): void
    {
        // Override to add logic before create
    }

    /**
     * Execute logic after creating entity
     */
    protected function afterCreate(EventResource $eventResource): void
    {
        // Override to add logic after create (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before updating entity
     */
    protected function beforeUpdate(EventResource $eventResource): void
    {
        // Override to add logic before update
    }

    /**
     * Execute logic after updating entity
     */
    protected function afterUpdate(EventResource $eventResource): void
    {
        // Override to add logic after update (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before deleting entity
     */
    protected function beforeDelete(EventResource $eventResource): void
    {
        // Override to add logic before delete (e.g., check dependencies, archive)
    }

    /**
     * Execute logic after deleting entity
     */
    protected function afterDelete(): void
    {
        // Override to add logic after delete (e.g., cleanup, send notification)
    }
}
