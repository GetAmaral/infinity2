<?php

declare(strict_types=1);

namespace App\Controller\Generated;

use App\Entity\TaskTemplate;
use App\Form\TaskTemplateType;
use App\Repository\TaskTemplateRepository;
use App\Service\OrganizationContext;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Attribute\Route;
use Symfony\Component\Security\Http\Attribute\IsGranted;

/**
 * TaskTemplate Controller (Generated Base Class)
 *
 * This class is ALWAYS regenerated from CSV. DO NOT edit this file.
 * Add custom actions to TaskTemplateController.php instead.
 *
 * @generated by Luminai Code Generator
 */
#[Route('/task-template')]
abstract class TaskTemplateControllerGenerated extends AbstractController
{
    public function __construct(
        protected readonly TaskTemplateRepository $repository,
        protected readonly OrganizationContext $organizationContext
    ) {}

    /**
     * List all TaskTemplates
     */
    #[Route('', name: 'task_template_index', methods: ['GET'])]
        #[IsGranted('ROLE_ORGANIZATION_ADMIN')]
    public function index(Request $request): Response
    {
        $page = max(1, $request->query->getInt('page', 1));
        $search = $request->query->get('search', '');

        $tasktemplates = $this->repository->findPaginated($page, 30);
        $total = $this->repository->count();

        return $this->render('tasktemplate/index.html.twig', [
            'tasktemplates' => $tasktemplates,
            'total' => $total,
            'page' => $page,
            'pages' => ceil($total / 30),
            'search' => $search,
        ]);
    }

    /**
     * Show TaskTemplate details
     */
    #[Route('/{id}', name: 'task_template_show', methods: ['GET'])]
        #[IsGranted('ROLE_ORGANIZATION_ADMIN')]
    public function show(TaskTemplate $tasktemplate): Response
    {
        $this->denyAccessUnlessGranted('VIEW', $tasktemplate);

        return $this->render('tasktemplate/show.html.twig', [
            'tasktemplate' => $tasktemplate,
        ]);
    }

    /**
     * Create new TaskTemplate
     */
    #[Route('/new', name: 'task_template_new', methods: ['GET', 'POST'])]
        #[IsGranted('ROLE_ORGANIZATION_ADMIN')]
    public function new(Request $request): Response
    {
        $tasktemplate = new TaskTemplate();

        // Set organization from context
        $organization = $this->organizationContext->getOrganization();
        if ($organization) {
            $tasktemplate->setOrganization($organization);
        }

        $form = $this->createForm(TaskTemplateType::class, $tasktemplate);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $this->repository->save($tasktemplate, true);

            $this->addFlash('success', 'TaskTemplate created successfully.');

            return $this->redirectToRoute('task_template_index');
        }

        return $this->render('tasktemplate/form.html.twig', [
            'tasktemplate' => $tasktemplate,
            'form' => $form,
            'is_edit' => false,
        ]);
    }

    /**
     * Edit TaskTemplate
     */
    #[Route('/{id}/edit', name: 'task_template_edit', methods: ['GET', 'POST'])]
        #[IsGranted('ROLE_ORGANIZATION_ADMIN')]
    public function edit(Request $request, TaskTemplate $tasktemplate): Response
    {
        $this->denyAccessUnlessGranted('EDIT', $tasktemplate);

        $form = $this->createForm(TaskTemplateType::class, $tasktemplate);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $this->repository->save($tasktemplate, true);

            $this->addFlash('success', 'TaskTemplate updated successfully.');

            return $this->redirectToRoute('task_template_index');
        }

        return $this->render('tasktemplate/form.html.twig', [
            'tasktemplate' => $tasktemplate,
            'form' => $form,
            'is_edit' => true,
        ]);
    }

    /**
     * Delete TaskTemplate
     */
    #[Route('/{id}', name: 'task_template_delete', methods: ['POST'])]
        #[IsGranted('ROLE_ORGANIZATION_ADMIN')]
    public function delete(Request $request, TaskTemplate $tasktemplate): Response
    {
        $this->denyAccessUnlessGranted('DELETE', $tasktemplate);

        if ($this->isCsrfTokenValid('delete_task_template_' . $tasktemplate->getId(), $request->request->get('_token'))) {
            $this->repository->remove($tasktemplate, true);

            $this->addFlash('success', 'TaskTemplate deleted successfully.');
        }

        return $this->redirectToRoute('task_template_index');
    }
}
