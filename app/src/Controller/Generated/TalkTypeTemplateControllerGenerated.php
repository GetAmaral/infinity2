<?php

declare(strict_types=1);

namespace App\Controller\Generated;

use App\Entity\TalkTypeTemplate;
use App\Form\TalkTypeTemplateType;
use App\Repository\TalkTypeTemplateRepository;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Attribute\Route;
use Symfony\Component\Security\Http\Attribute\IsGranted;

/**
 * TalkTypeTemplate Controller (Generated Base Class)
 *
 * This class is ALWAYS regenerated from CSV. DO NOT edit this file.
 * Add custom actions to TalkTypeTemplateController.php instead.
 *
 * @generated by Luminai Code Generator
 */
#[Route('/talk-type-template')]
abstract class TalkTypeTemplateControllerGenerated extends AbstractController
{
    public function __construct(
        protected readonly TalkTypeTemplateRepository $repository
    ) {}

    /**
     * List all TalkTypeTemplates
     */
    #[Route('', name: 'talk_type_template_index', methods: ['GET'])]
        #[IsGranted('ROLE_SUPER_ADMIN')]
    public function index(Request $request): Response
    {
        $page = max(1, $request->query->getInt('page', 1));
        $search = $request->query->get('search', '');

        $talktypetemplates = $this->repository->findPaginated($page, 30);
        $total = $this->repository->count();

        return $this->render('talktypetemplate/index.html.twig', [
            'talktypetemplates' => $talktypetemplates,
            'total' => $total,
            'page' => $page,
            'pages' => ceil($total / 30),
            'search' => $search,
        ]);
    }

    /**
     * Show TalkTypeTemplate details
     */
    #[Route('/{id}', name: 'talk_type_template_show', methods: ['GET'])]
        #[IsGranted('ROLE_SUPER_ADMIN')]
    public function show(TalkTypeTemplate $talktypetemplate): Response
    {

        return $this->render('talktypetemplate/show.html.twig', [
            'talktypetemplate' => $talktypetemplate,
        ]);
    }

    /**
     * Create new TalkTypeTemplate
     */
    #[Route('/new', name: 'talk_type_template_new', methods: ['GET', 'POST'])]
        #[IsGranted('ROLE_SUPER_ADMIN')]
    public function new(Request $request): Response
    {
        $talktypetemplate = new TalkTypeTemplate();

        $form = $this->createForm(TalkTypeTemplateType::class, $talktypetemplate);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $this->repository->save($talktypetemplate, true);

            $this->addFlash('success', 'TalkTypeTemplate created successfully.');

            return $this->redirectToRoute('talk_type_template_index');
        }

        return $this->render('talktypetemplate/form.html.twig', [
            'talktypetemplate' => $talktypetemplate,
            'form' => $form,
            'is_edit' => false,
        ]);
    }

    /**
     * Edit TalkTypeTemplate
     */
    #[Route('/{id}/edit', name: 'talk_type_template_edit', methods: ['GET', 'POST'])]
        #[IsGranted('ROLE_SUPER_ADMIN')]
    public function edit(Request $request, TalkTypeTemplate $talktypetemplate): Response
    {

        $form = $this->createForm(TalkTypeTemplateType::class, $talktypetemplate);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $this->repository->save($talktypetemplate, true);

            $this->addFlash('success', 'TalkTypeTemplate updated successfully.');

            return $this->redirectToRoute('talk_type_template_index');
        }

        return $this->render('talktypetemplate/form.html.twig', [
            'talktypetemplate' => $talktypetemplate,
            'form' => $form,
            'is_edit' => true,
        ]);
    }

    /**
     * Delete TalkTypeTemplate
     */
    #[Route('/{id}', name: 'talk_type_template_delete', methods: ['POST'])]
        #[IsGranted('ROLE_SUPER_ADMIN')]
    public function delete(Request $request, TalkTypeTemplate $talktypetemplate): Response
    {

        if ($this->isCsrfTokenValid('delete_talk_type_template_' . $talktypetemplate->getId(), $request->request->get('_token'))) {
            $this->repository->remove($talktypetemplate, true);

            $this->addFlash('success', 'TalkTypeTemplate deleted successfully.');
        }

        return $this->redirectToRoute('talk_type_template_index');
    }
}
