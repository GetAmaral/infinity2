<?php

declare(strict_types=1);

namespace App\Controller\Generated;

use App\Controller\Base\BaseApiController;
use App\Entity\Product;
use App\Repository\ProductRepository;
use App\Security\Voter\ProductVoter;
use App\Form\ProductFormType;
use App\Service\ListPreferencesService;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Security\Csrf\CsrfToken;
use Symfony\Component\Security\Csrf\CsrfTokenManagerInterface;
use Symfony\Component\Security\Core\Exception\InvalidCsrfTokenException;
use Symfony\Contracts\Translation\TranslatorInterface;

/**
 * Generated Base Controller for Product
 *
 * ⚠️ WARNING: This file is ALWAYS regenerated by Genmax
 * DO NOT EDIT THIS FILE - Edit ProductController instead
 *
 * @generated
 * @codeCoverageIgnore
 */
abstract class ProductControllerGenerated extends BaseApiController
{
    public function __construct(
        protected readonly EntityManagerInterface $entityManager,
        protected readonly ProductRepository $repository,
        protected readonly ListPreferencesService $listPreferencesService,
        protected readonly TranslatorInterface $translator,
        protected readonly CsrfTokenManagerInterface $csrfTokenManager,
    ) {}

    // ====================================
    // ABSTRACT METHOD IMPLEMENTATIONS
    // ====================================

    /**
     * Get the repository for this entity
     */
    protected function getRepository(): ProductRepository
    {
        return $this->repository;
    }

    /**
     * Get the plural name for this entity
     */
    protected function getEntityPluralName(): string
    {
        return 'products';
    }

    /**
     * Convert entity to array for API responses
     */
    protected function entityToArray(object $entity): array
    {
        if (!$entity instanceof Product) {
            throw new \InvalidArgumentException('Expected Product instance');
        }

        return [
            'id' => $entity->getId()->toString(),
            'organization' => ($organizationRel = $entity->getOrganization()) ? [
                'id' => $organizationRel->getId()->toString(),
                'display' => (string) $organizationRel,
            ] : null,
            'sku' => $entity->getSku(),
            'name' => $entity->getName(),
            'description' => $entity->getDescription(),
            'gtin' => $entity->getGtin(),
            'upc' => $entity->getUpc(),
            'ean' => $entity->getEan(),
            'mpn' => $entity->getMpn(),
            'barcode' => $entity->getBarcode(),
            'available' => $entity->getAvailable(),
            'price' => $entity->getPrice(),
            'compareAtPrice' => $entity->getCompareAtPrice(),
            'status' => $entity->getStatus(),
            'attachments' => ($attachmentsRel = $entity->getAttachments()) ? [
                'id' => $attachmentsRel->getId()->toString(),
                'display' => (string) $attachmentsRel,
            ] : null,
            'reorderLevel' => $entity->getReorderLevel(),
            'reorderQuantity' => $entity->getReorderQuantity(),
            'leadTime' => $entity->getLeadTime(),
            'active' => $entity->getActive(),
            'minOrderQuantity' => $entity->getMinOrderQuantity(),
            'maxOrderQuantity' => $entity->getMaxOrderQuantity(),
            'availableQuantity' => $entity->getAvailableQuantity(),
            'batches' => ($batchesRel = $entity->getBatches()) ? [
                'id' => $batchesRel->getId()->toString(),
                'display' => (string) $batchesRel,
            ] : null,
            'billingFrequency' => ($billingFrequencyRel = $entity->getBillingFrequency()) ? [
                'id' => $billingFrequencyRel->getId()->toString(),
                'display' => (string) $billingFrequencyRel,
            ] : null,
            'brand' => ($brandRel = $entity->getBrand()) ? [
                'id' => $brandRel->getId()->toString(),
                'display' => (string) $brandRel,
            ] : null,
            'cancellationFee' => $entity->getCancellationFee(),
            'category' => ($categoryRel = $entity->getCategory()) ? [
                'id' => $categoryRel->getId()->toString(),
                'display' => (string) $categoryRel,
            ] : null,
            'commissionAmount' => $entity->getCommissionAmount(),
            'commissionRate' => $entity->getCommissionRate(),
            'costPrice' => $entity->getCostPrice(),
            'currency' => $entity->getCurrency(),
            'customFields' => $entity->getCustomFields(),
            'deals' => ($dealsRel = $entity->getDeals()) ? [
                'id' => $dealsRel->getId()->toString(),
                'display' => (string) $dealsRel,
            ] : null,
            'dimensions' => $entity->getDimensions(),
            'discountAmount' => $entity->getDiscountAmount(),
            'discountPercentage' => $entity->getDiscountPercentage(),
            'endOfLifeDate' => $entity->getEndOfLifeDate()?->format('M d, Y'),
            'exchangeRate' => $entity->getExchangeRate(),
            'features' => $entity->getFeatures(),
            'launchDate' => $entity->getLaunchDate()?->format('M d, Y'),
            'lifecycleStage' => $entity->getLifecycleStage(),
            'listPrice' => $entity->getListPrice(),
            'manufacturer' => ($manufacturerRel = $entity->getManufacturer()) ? [
                'id' => $manufacturerRel->getId()->toString(),
                'display' => (string) $manufacturerRel,
            ] : null,
            'marginPercentage' => $entity->getMarginPercentage(),
            'maximumDiscount' => $entity->getMaximumDiscount(),
            'minimumPrice' => $entity->getMinimumPrice(),
            'productCode' => $entity->getProductCode(),
            'productLine' => ($productLineRel = $entity->getProductLine()) ? [
                'id' => $productLineRel->getId()->toString(),
                'display' => (string) $productLineRel,
            ] : null,
            'productType' => $entity->getProductType(),
            'purchasable' => $entity->getPurchasable(),
            'recurringFee' => $entity->getRecurringFee(),
            'relatedFrom' => ($relatedFromRel = $entity->getRelatedFrom()) ? [
                'id' => $relatedFromRel->getId()->toString(),
                'display' => (string) $relatedFromRel,
            ] : null,
            'relatedTo' => ($relatedToRel = $entity->getRelatedTo()) ? [
                'id' => $relatedToRel->getId()->toString(),
                'display' => (string) $relatedToRel,
            ] : null,
            'requiresApproval' => $entity->getRequiresApproval(),
            'reservedQuantity' => $entity->getReservedQuantity(),
            'sellable' => $entity->getSellable(),
            'setupFee' => $entity->getSetupFee(),
            'shortDescription' => $entity->getShortDescription(),
            'specifications' => $entity->getSpecifications(),
            'stockQuantity' => $entity->getStockQuantity(),
            'subscription' => $entity->getSubscription(),
            'subscriptionPeriod' => $entity->getSubscriptionPeriod(),
            'substituteFrom' => ($substituteFromRel = $entity->getSubstituteFrom()) ? [
                'id' => $substituteFromRel->getId()->toString(),
                'display' => (string) $substituteFromRel,
            ] : null,
            'substituteTo' => ($substituteToRel = $entity->getSubstituteTo()) ? [
                'id' => $substituteToRel->getId()->toString(),
                'display' => (string) $substituteToRel,
            ] : null,
            'supplier' => ($supplierRel = $entity->getSupplier()) ? [
                'id' => $supplierRel->getId()->toString(),
                'display' => (string) $supplierRel,
            ] : null,
            'supportPeriod' => $entity->getSupportPeriod(),
            'tags' => ($tagsRel = $entity->getTags()) ? [
                'id' => $tagsRel->getId()->toString(),
                'display' => (string) $tagsRel,
            ] : null,
            'taxCategory' => ($taxCategoryRel = $entity->getTaxCategory()) ? [
                'id' => $taxCategoryRel->getId()->toString(),
                'display' => (string) $taxCategoryRel,
            ] : null,
            'unitOfMeasure' => $entity->getUnitOfMeasure(),
            'warrantyPeriod' => $entity->getWarrantyPeriod(),
            'weight' => $entity->getWeight(),
        ];
    }

    // ====================================
    // INDEX ACTION - List all Products
    // ====================================

    /**
     * List Products
     */
    protected function indexAction(): Response
    {
        $this->denyAccessUnlessGranted(ProductVoter::LIST);

        $preferences = $this->listPreferencesService->getEntityPreferences('products');
        $savedView = $preferences['view'] ?? 'grid';

        return $this->render('product/index.html.twig', [
            'entities' => [],  // Loaded via API
            'entity_name' => 'product',
            'entity_name_plural' => 'products',
            'page_icon' => 'bi-box-seam',
            'default_view' => $savedView,

            // List configuration from GeneratorProperty
            'enable_search' => true,
            'enable_filters' => false,
            'enable_sorting' => true,
            'enable_create_button' => true,

            // Property metadata for client-side rendering (as JSON strings)
            'list_fields' => '[{"name":"sku","label":"SKU","type":"string","sortable":false,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getSku"},{"name":"name","label":"Name","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getName"},{"name":"description","label":"Description","type":"text","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDescription"},{"name":"gtin","label":"GTIN","type":"string","sortable":false,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getGtin"},{"name":"upc","label":"UPC","type":"string","sortable":false,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getUpc"},{"name":"ean","label":"EAN","type":"string","sortable":false,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getEan"},{"name":"mpn","label":"MPN","type":"string","sortable":false,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getMpn"},{"name":"available","label":"Available","type":"boolean","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getAvailable"},{"name":"price","label":"Price","type":"decimal","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getPrice"},{"name":"status","label":"Status","type":"string","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getStatus"},{"name":"attachments","label":"Attachments","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getAttachments"},{"name":"active","label":"Active","type":"boolean","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getActive"},{"name":"availableQuantity","label":"AvailableQuantity","type":"integer","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getAvailableQuantity"},{"name":"batches","label":"Batches","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getBatches"},{"name":"billingFrequency","label":"BillingFrequency","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getBillingFrequency"},{"name":"brand","label":"Brand","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getBrand"},{"name":"cancellationFee","label":"CancellationFee","type":"decimal","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCancellationFee"},{"name":"category","label":"Category","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCategory"},{"name":"commissionAmount","label":"CommissionAmount","type":"decimal","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCommissionAmount"},{"name":"commissionRate","label":"CommissionRate","type":"decimal","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCommissionRate"},{"name":"costPrice","label":"CostPrice","type":"decimal","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCostPrice"},{"name":"currency","label":"Currency","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCurrency"},{"name":"customFields","label":"CustomFields","type":"json","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getCustomFields"},{"name":"deals","label":"Deals","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDeals"},{"name":"dimensions","label":"Dimensions","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDimensions"},{"name":"discountAmount","label":"DiscountAmount","type":"decimal","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDiscountAmount"},{"name":"discountPercentage","label":"DiscountPercentage","type":"decimal","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getDiscountPercentage"},{"name":"endOfLifeDate","label":"EndOfLifeDate","type":"date","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getEndOfLifeDate"},{"name":"exchangeRate","label":"ExchangeRate","type":"float","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getExchangeRate"},{"name":"features","label":"Features","type":"json","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getFeatures"},{"name":"launchDate","label":"LaunchDate","type":"date","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getLaunchDate"},{"name":"lifecycleStage","label":"LifecycleStage","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getLifecycleStage"},{"name":"listPrice","label":"ListPrice","type":"decimal","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getListPrice"},{"name":"manufacturer","label":"Manufacturer","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getManufacturer"},{"name":"marginPercentage","label":"MarginPercentage","type":"decimal","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getMarginPercentage"},{"name":"maximumDiscount","label":"MaximumDiscount","type":"decimal","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getMaximumDiscount"},{"name":"minimumPrice","label":"MinimumPrice","type":"decimal","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getMinimumPrice"},{"name":"productCode","label":"ProductCode","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getProductCode"},{"name":"productLine","label":"ProductLine","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getProductLine"},{"name":"productType","label":"ProductType","type":"integer","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getProductType"},{"name":"purchasable","label":"Purchasable","type":"boolean","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getPurchasable"},{"name":"recurringFee","label":"RecurringFee","type":"decimal","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getRecurringFee"},{"name":"relatedFrom","label":"RelatedFrom","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getRelatedFrom"},{"name":"relatedTo","label":"RelatedTo","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getRelatedTo"},{"name":"requiresApproval","label":"RequiresApproval","type":"boolean","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getRequiresApproval"},{"name":"reservedQuantity","label":"ReservedQuantity","type":"integer","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getReservedQuantity"},{"name":"sellable","label":"Sellable","type":"boolean","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getSellable"},{"name":"setupFee","label":"SetupFee","type":"decimal","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getSetupFee"},{"name":"shortDescription","label":"ShortDescription","type":"text","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getShortDescription"},{"name":"specifications","label":"Specifications","type":"json","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getSpecifications"},{"name":"stockQuantity","label":"StockQuantity","type":"integer","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getStockQuantity"},{"name":"subscription","label":"Subscription","type":"boolean","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getSubscription"},{"name":"subscriptionPeriod","label":"SubscriptionPeriod","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getSubscriptionPeriod"},{"name":"substituteFrom","label":"SubstituteFrom","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getSubstituteFrom"},{"name":"substituteTo","label":"SubstituteTo","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getSubstituteTo"},{"name":"supplier","label":"Supplier","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getSupplier"},{"name":"supportPeriod","label":"SupportPeriod","type":"integer","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getSupportPeriod"},{"name":"tags","label":"Tags","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getTags"},{"name":"taxCategory","label":"TaxCategory","type":"","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getTaxCategory"},{"name":"unitOfMeasure","label":"UnitOfMeasure","type":"string","sortable":true,"searchable":true,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getUnitOfMeasure"},{"name":"warrantyPeriod","label":"WarrantyPeriod","type":"integer","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getWarrantyPeriod"},{"name":"weight","label":"Weight","type":"float","sortable":true,"searchable":false,"filterable":false,"filterStrategy":null,"filterBoolean":false,"filterDate":false,"filterNumericRange":false,"filterExists":false,"getter":"getWeight"}]',
            'searchable_fields' => '[{"name":"name","label":"Name","type":"string"},{"name":"description","label":"Description","type":"text"},{"name":"gtin","label":"GTIN","type":"string"},{"name":"upc","label":"UPC","type":"string"},{"name":"ean","label":"EAN","type":"string"},{"name":"mpn","label":"MPN","type":"string"},{"name":"currency","label":"Currency","type":"string"},{"name":"dimensions","label":"Dimensions","type":"string"},{"name":"lifecycleStage","label":"LifecycleStage","type":"string"},{"name":"productCode","label":"ProductCode","type":"string"},{"name":"shortDescription","label":"ShortDescription","type":"text"},{"name":"subscriptionPeriod","label":"SubscriptionPeriod","type":"string"},{"name":"unitOfMeasure","label":"UnitOfMeasure","type":"string"}]',
            'filterable_fields' => '[]',
            'sortable_fields' => '[{"name":"name","label":"Name"},{"name":"description","label":"Description"},{"name":"available","label":"Available"},{"name":"price","label":"Price"},{"name":"status","label":"Status"},{"name":"attachments","label":"Attachments"},{"name":"active","label":"Active"},{"name":"availableQuantity","label":"AvailableQuantity"},{"name":"batches","label":"Batches"},{"name":"billingFrequency","label":"BillingFrequency"},{"name":"brand","label":"Brand"},{"name":"cancellationFee","label":"CancellationFee"},{"name":"category","label":"Category"},{"name":"commissionAmount","label":"CommissionAmount"},{"name":"commissionRate","label":"CommissionRate"},{"name":"costPrice","label":"CostPrice"},{"name":"currency","label":"Currency"},{"name":"customFields","label":"CustomFields"},{"name":"deals","label":"Deals"},{"name":"dimensions","label":"Dimensions"},{"name":"discountAmount","label":"DiscountAmount"},{"name":"discountPercentage","label":"DiscountPercentage"},{"name":"endOfLifeDate","label":"EndOfLifeDate"},{"name":"exchangeRate","label":"ExchangeRate"},{"name":"features","label":"Features"},{"name":"launchDate","label":"LaunchDate"},{"name":"lifecycleStage","label":"LifecycleStage"},{"name":"listPrice","label":"ListPrice"},{"name":"manufacturer","label":"Manufacturer"},{"name":"marginPercentage","label":"MarginPercentage"},{"name":"maximumDiscount","label":"MaximumDiscount"},{"name":"minimumPrice","label":"MinimumPrice"},{"name":"productCode","label":"ProductCode"},{"name":"productLine","label":"ProductLine"},{"name":"productType","label":"ProductType"},{"name":"purchasable","label":"Purchasable"},{"name":"recurringFee","label":"RecurringFee"},{"name":"relatedFrom","label":"RelatedFrom"},{"name":"relatedTo","label":"RelatedTo"},{"name":"requiresApproval","label":"RequiresApproval"},{"name":"reservedQuantity","label":"ReservedQuantity"},{"name":"sellable","label":"Sellable"},{"name":"setupFee","label":"SetupFee"},{"name":"shortDescription","label":"ShortDescription"},{"name":"specifications","label":"Specifications"},{"name":"stockQuantity","label":"StockQuantity"},{"name":"subscription","label":"Subscription"},{"name":"subscriptionPeriod","label":"SubscriptionPeriod"},{"name":"substituteFrom","label":"SubstituteFrom"},{"name":"substituteTo","label":"SubstituteTo"},{"name":"supplier","label":"Supplier"},{"name":"supportPeriod","label":"SupportPeriod"},{"name":"tags","label":"Tags"},{"name":"taxCategory","label":"TaxCategory"},{"name":"unitOfMeasure","label":"UnitOfMeasure"},{"name":"warrantyPeriod","label":"WarrantyPeriod"},{"name":"weight","label":"Weight"}]',
        ]);
    }

    // ====================================
    // API SEARCH - Fetch Products for list view
    // ====================================

    /**
     * API endpoint for searching Products
     */
    protected function apiSearchAction(Request $request): JsonResponse
    {
        $this->denyAccessUnlessGranted(ProductVoter::LIST);

        // This method uses the BaseApiController's handleSearchRequest
        // which integrates with API Platform's GetCollection operation
        return $this->handleSearchRequest($request);
    }

    // ====================================
    // NEW FORM ACTION - Display create form
    // ====================================

    /**
     * Display new product form
     */
    protected function newFormAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(ProductVoter::CREATE);

        $product = new Product();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($product);

        $form = $this->createForm(ProductFormType::class, $product);

        return $this->render('product/_form_modal.html.twig', [
            'form' => $form,
            'product' => $product,
            'is_edit' => false,
        ]);
    }

    // ====================================
    // CREATE ACTION - Process create form submission
    // ====================================

    /**
     * Process new product form submission
     */
    protected function createAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted(ProductVoter::CREATE);

        $product = new Product();

        // Initialize with custom logic if needed
        $this->initializeNewEntity($product);

        $form = $this->createForm(ProductFormType::class, $product);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before create hook
                $this->beforeCreate($product);

                $this->entityManager->persist($product);
                $this->entityManager->flush();

                // After create hook
                $this->afterCreate($product);

                $this->addFlash('success', $this->translator->trans(
                    'product.flash.created_successfully',
                    ['%name%' => (string) $product],
                    'product'
                ));

                return $this->redirectToRoute('product_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'product.flash.create_failed',
                    ['%error%' => $e->getMessage()],
                    'product'
                ));
            }
        }

        // Re-render with errors
        return $this->render('product/_form_modal.html.twig', [
            'form' => $form,
            'product' => $product,
            'is_edit' => false,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // EDIT FORM ACTION - Display edit form
    // ====================================

    /**
     * Display edit product form
     */
    protected function editFormAction(Product $product, Request $request): Response
    {
        $this->denyAccessUnlessGranted(ProductVoter::EDIT, $product);

        $form = $this->createForm(ProductFormType::class, $product);

        return $this->render('product/_form_modal.html.twig', [
            'form' => $form,
            'product' => $product,
            'is_edit' => true,
        ]);
    }

    // ====================================
    // UPDATE ACTION - Process edit form submission
    // ====================================

    /**
     * Process edit product form submission
     */
    protected function updateAction(Product $product, Request $request): Response
    {
        $this->denyAccessUnlessGranted(ProductVoter::EDIT, $product);

        $form = $this->createForm(ProductFormType::class, $product);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before update hook
                $this->beforeUpdate($product);

                $this->entityManager->flush();

                // After update hook
                $this->afterUpdate($product);

                $this->addFlash('success', $this->translator->trans(
                    'product.flash.updated_successfully',
                    ['%name%' => (string) $product],
                    'product'
                ));

                return $this->redirectToRoute('product_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    'product.flash.update_failed',
                    ['%error%' => $e->getMessage()],
                    'product'
                ));
            }
        }

        // Re-render with errors
        return $this->render('product/_form_modal.html.twig', [
            'form' => $form,
            'product' => $product,
            'is_edit' => true,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }

    // ====================================
    // DELETE ACTION - Delete product
    // ====================================

    /**
     * Delete product
     */
    protected function deleteAction(Product $product, Request $request): Response
    {
        $this->denyAccessUnlessGranted(ProductVoter::DELETE, $product);

        // Verify CSRF token
        $token = $request->request->get('_token');
        if (!$this->csrfTokenManager->isTokenValid(new CsrfToken('delete_product_' . $product->getId()->toString(), $token))) {
            throw new InvalidCsrfTokenException('Invalid CSRF token for delete operation.');
        }

        try {
            // Before delete hook
            $this->beforeDelete($product);

            $name = (string) $product;

            $this->entityManager->remove($product);
            $this->entityManager->flush();

            // After delete hook
            $this->afterDelete();

            $this->addFlash('success', $this->translator->trans(
                'product.flash.deleted_successfully',
                ['%name%' => $name],
                'product'
            ));

        } catch (\Exception $e) {
            $this->addFlash('error', $this->translator->trans(
                'product.flash.delete_failed',
                ['%error%' => $e->getMessage()],
                'product'
            ));
        }

        return $this->redirectToRoute('product_index', [], Response::HTTP_SEE_OTHER);
    }

    // ====================================
    // SHOW ACTION - Display product details
    // ====================================

    /**
     * Display product details
     */
    protected function showAction(Product $product): Response
    {
        $this->denyAccessUnlessGranted(ProductVoter::VIEW, $product);

        return $this->render('product/show.html.twig', [
            'product' => $product,
        ]);
    }

    // ====================================
    // LIFECYCLE HOOKS
    // ====================================
    // Override these in ProductController to add custom logic

    /**
     * Initialize new entity before creating form
     *
     * Note: Organization and Owner are set automatically by TenantEntityProcessor
     * Only use this for custom initialization logic
     */
    protected function initializeNewEntity(Product $product): void
    {
        // Organization and Owner are set automatically by TenantEntityProcessor
        // Add your custom initialization here
    }

    /**
     * Execute logic before creating entity
     */
    protected function beforeCreate(Product $product): void
    {
        // Override to add logic before create
    }

    /**
     * Execute logic after creating entity
     */
    protected function afterCreate(Product $product): void
    {
        // Override to add logic after create (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before updating entity
     */
    protected function beforeUpdate(Product $product): void
    {
        // Override to add logic before update
    }

    /**
     * Execute logic after updating entity
     */
    protected function afterUpdate(Product $product): void
    {
        // Override to add logic after update (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before deleting entity
     */
    protected function beforeDelete(Product $product): void
    {
        // Override to add logic before delete (e.g., check dependencies, archive)
    }

    /**
     * Execute logic after deleting entity
     */
    protected function afterDelete(): void
    {
        // Override to add logic after delete (e.g., cleanup, send notification)
    }
}
