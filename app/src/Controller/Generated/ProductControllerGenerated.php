<?php

declare(strict_types=1);

namespace App\Controller\Generated;

use App\Entity\Product;
use App\Form\ProductType;
use App\Repository\ProductRepository;
use App\Service\OrganizationContext;
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Attribute\Route;
use Symfony\Component\Security\Http\Attribute\IsGranted;

/**
 * Product Controller (Generated Base Class)
 *
 * This class is ALWAYS regenerated from CSV. DO NOT edit this file.
 * Add custom actions to ProductController.php instead.
 *
 * @generated by Luminai Code Generator
 */
#[Route('/product')]
abstract class ProductControllerGenerated extends AbstractController
{
    public function __construct(
        protected readonly ProductRepository $repository,
        protected readonly OrganizationContext $organizationContext
    ) {}

    /**
     * List all Products
     */
    #[Route('', name: 'product_index', methods: ['GET'])]
        #[IsGranted('ROLE_DATA_ADMIN')]
    public function index(Request $request): Response
    {
        $page = max(1, $request->query->getInt('page', 1));
        $search = $request->query->get('search', '');

        $products = $this->repository->findPaginated($page, 30);
        $total = $this->repository->count();

        return $this->render('product/index.html.twig', [
            'products' => $products,
            'total' => $total,
            'page' => $page,
            'pages' => ceil($total / 30),
            'search' => $search,
        ]);
    }

    /**
     * Show Product details
     */
    #[Route('/{id}', name: 'product_show', methods: ['GET'])]
        #[IsGranted('ROLE_DATA_ADMIN')]
    public function show(Product $product): Response
    {
        $this->denyAccessUnlessGranted('VIEW', $product);

        return $this->render('product/show.html.twig', [
            'product' => $product,
        ]);
    }

    /**
     * Create new Product
     */
    #[Route('/new', name: 'product_new', methods: ['GET', 'POST'])]
        #[IsGranted('ROLE_DATA_ADMIN')]
    public function new(Request $request): Response
    {
        $product = new Product();

        // Set organization from context
        $organization = $this->organizationContext->getOrganization();
        if ($organization) {
            $product->setOrganization($organization);
        }

        $form = $this->createForm(ProductType::class, $product);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $this->repository->save($product, true);

            $this->addFlash('success', 'Product created successfully.');

            return $this->redirectToRoute('product_index');
        }

        return $this->render('product/form.html.twig', [
            'product' => $product,
            'form' => $form,
            'is_edit' => false,
        ]);
    }

    /**
     * Edit Product
     */
    #[Route('/{id}/edit', name: 'product_edit', methods: ['GET', 'POST'])]
        #[IsGranted('ROLE_DATA_ADMIN')]
    public function edit(Request $request, Product $product): Response
    {
        $this->denyAccessUnlessGranted('EDIT', $product);

        $form = $this->createForm(ProductType::class, $product);
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $this->repository->save($product, true);

            $this->addFlash('success', 'Product updated successfully.');

            return $this->redirectToRoute('product_index');
        }

        return $this->render('product/form.html.twig', [
            'product' => $product,
            'form' => $form,
            'is_edit' => true,
        ]);
    }

    /**
     * Delete Product
     */
    #[Route('/{id}', name: 'product_delete', methods: ['POST'])]
        #[IsGranted('ROLE_DATA_ADMIN')]
    public function delete(Request $request, Product $product): Response
    {
        $this->denyAccessUnlessGranted('DELETE', $product);

        if ($this->isCsrfTokenValid('delete_product_' . $product->getId(), $request->request->get('_token'))) {
            $this->repository->remove($product, true);

            $this->addFlash('success', 'Product deleted successfully.');
        }

        return $this->redirectToRoute('product_index');
    }
}
