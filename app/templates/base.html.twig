{% import '_macros/organization_logo.html.twig' as org_logo %}
<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <title>{% block title %}{{ 'branding.luminai.crm'|trans }}{% endblock %}</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">

    {# Exclude admin audit pages from Turbo (require full reload for data integrity) #}
    {% set currentRoute = app.request.attributes.get('_route') %}
    {% if currentRoute starts with 'admin_audit' %}
        <meta name="turbo-visit-control" content="reload">
        <meta name="turbo-cache-control" content="no-cache">
    {% endif %}

    <link rel="icon" type="image/x-icon" href="/favicon.ico">
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
    <link rel="manifest" href="/site.webmanifest">

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800;900&display=swap" rel="stylesheet">
    {% block stylesheets %}{{ importmap('app') }}{% endblock %}
    <link rel="stylesheet" href="{{ asset('styles/components/_modals.css') }}">

    <!-- Preference Manager - Load FIRST before any other scripts -->
    <script src="/preference-manager.js" data-turbo-eval="false"></script>
</head>
<body {% if app.user %}data-controller="session-monitor fullscreen-textarea" data-session-monitor-lifetime-value="3600" data-session-monitor-status-url-value="{{ path('api_session_status') }}" data-session-monitor-keepalive-url-value="{{ path('api_session_keepalive') }}"{% else %}data-controller="fullscreen-textarea"{% endif %}>
    <nav class="navbar luminai-navbar">
        <div class="container">
            <a class="navbar-brand text-white d-flex align-items-center" href="{{ path('app_home') }}">
                <img src="/luminai_logo_sm_dark.png" alt="{{ 'misc.luminai.alt'|trans }}" height="32" class="logo-dark-theme me-3">
                <img src="/luminai_logo_sm_light.png" alt="{{ 'misc.luminai.alt'|trans }}" height="32" class="logo-light-theme me-3">
                <span class="fw-bold text-gradient">{{ 'nav.brand'|trans }}</span>
            </a>

            <div class="d-flex align-items-center ms-auto gap-2">
                {% if app.user %}
                <!-- Hamburger Menu Button -->
                <div class="dropdown">
                    <button class="nav-link text-white d-flex align-items-center navbar-menu-btn" type="button" id="navDropdown" data-bs-toggle="dropdown" aria-expanded="false" aria-label="{{ 'nav.toggle.navigation'|trans }}">
                        <i class="bi bi-list fs-4"></i>
                    </button>
                    <ul class="dropdown-menu dropdown-menu-end dropdown-menu-dark" aria-labelledby="navDropdown" style="background: var(--luminai-dark-surface); border: 1px solid rgba(255, 255, 255, 0.1); min-width: 200px;">
                        {{ render_main_menu()|raw }}
                    </ul>
                </div>
                {% endif %}

                {% if app.user %}
                    {% if can_switch_organization() %}
                        {% set orgs = available_organizations() %}
                        <!-- Organization Switcher (Admin/Super Admin Only) -->
                        <div class="dropdown">
                            <a class="nav-link dropdown-toggle d-flex align-items-center org-selector-link" href="#" id="orgDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false" style="cursor: pointer;" data-bs-toggle="tooltip" title="{{ 'organization.switcher.title'|trans({}, 'organization') }}">
                                {% if current_organization() %}
                                    <div class="me-2">
                                        {{ org_logo.logo(current_organization(), 'xs') }}
                                    </div>
                                {% else %}
                                    <i class="bi bi-globe me-2"></i>
                                {% endif %}
                                <span>{{ current_organization() ? current_organization().name : 'organization.all.organizations'|trans({}, 'organization') }}</span>
                            </a>
                            <ul class="dropdown-menu dropdown-menu-end dropdown-menu-dark" aria-labelledby="orgDropdown" style="background: var(--luminai-dark-surface); border: 1px solid rgba(255, 255, 255, 0.1); min-width: 250px;">
                                <li class="px-3 py-2 border-bottom" style="border-color: rgba(255, 255, 255, 0.1) !important;">
                                    <small class="org-switcher-title">{{ 'organization.switcher.title'|trans({}, 'organization')|upper }}</small>
                                    <div class="org-switcher-subtitle" style="font-size: 0.7rem; margin-top: 0.25rem;">{{ 'organization.switcher.subtitle'|trans({}, 'organization') }}</div>
                                </li>
                                {% if has_active_organization() %}
                                <li>
                                    <form method="post" action="{{ path('app_organization_switcher_clear') }}">
                                        <input type="hidden" name="_token" value="{{ csrf_token('organization_clear') }}">
                                        <button type="submit" class="dropdown-item">
                                            <i class="bi bi-globe me-2"></i>{{ 'organization.all.organizations.root'|trans({}, 'organization') }}
                                        </button>
                                    </form>
                                </li>
                                <li><hr class="dropdown-divider" style="border-color: rgba(255, 255, 255, 0.1);"></li>
                                {% endif %}
                                {% for org in orgs %}
                                <li>
                                    <form method="post" action="{{ path('app_organization_switcher_switch', {'id': org.id}) }}">
                                        <input type="hidden" name="_token" value="{{ csrf_token('organization_switch_' ~ org.id) }}">
                                        <button type="submit" class="dropdown-item d-flex align-items-center gap-2 {% if current_organization() and current_organization().id == org.id %}active{% endif %}">
                                            <div class="flex-shrink-0">
                                                {{ org_logo.logo(org, 'sm') }}
                                            </div>
                                            <div class="flex-grow-1">
                                                {{ org.name }}
                                                <small class="text-muted d-block" style="font-size: 0.75rem;">{{ org.slug }}.{{ app_base_domain }}</small>
                                            </div>
                                        </button>
                                    </form>
                                </li>
                                {% endfor %}
                            </ul>
                        </div>
                    {% elseif current_organization() %}
                        <!-- Organization Display (Non-Admin Users) -->
                        <div class="nav-link d-flex align-items-center px-3 org-display">
                            <div class="me-2">
                                {{ org_logo.logo(current_organization(), 'xs') }}
                            </div>
                            <span>{{ current_organization().name }}</span>
                        </div>
                    {% endif %}
                {% endif %}

                <!-- User Profile (Authenticated Users Only) -->
                {% if app.user %}
                <div class="dropdown">
                    <a class="nav-link dropdown-toggle text-white d-flex align-items-center" href="#" id="userDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false" style="cursor: pointer;">
                        <div class="rounded-circle d-flex align-items-center justify-content-center me-2" style="width: 36px; height: 36px; background: var(--luminai-ai-gradient);">
                            <i class="bi bi-person-fill text-white"></i>
                        </div>
                        <div class="d-none d-md-block">
                            <div class="text-white" style="font-size: 0.875rem; line-height: 1.2; font-weight: 500;">
                                {{ app.user.name }}
                            </div>
                            <div class="text-muted" style="font-size: 0.75rem; line-height: 1;">
                                {{ app.user.email }}
                            </div>
                        </div>
                    </a>
                    <ul class="dropdown-menu dropdown-menu-end dropdown-menu-dark" aria-labelledby="userDropdown" style="background: var(--luminai-dark-surface); border: 1px solid rgba(255, 255, 255, 0.1); min-width: 250px;">
                        <li class="px-3 py-2 border-bottom" style="border-color: rgba(255, 255, 255, 0.1) !important;">
                            <div class="d-flex align-items-center">
                                <div class="rounded-circle d-flex align-items-center justify-content-center me-3" style="width: 44px; height: 44px; background: var(--luminai-ai-gradient);">
                                    <i class="bi bi-person-fill text-white fs-5"></i>
                                </div>
                                <div>
                                    <div class="text-white fw-bold" style="font-size: 0.95rem;">{{ app.user.name }}</div>
                                    <div class="text-muted" style="font-size: 0.8rem;">{{ app.user.email }}</div>
                                    {% if current_organization() %}
                                    <div class="text-muted d-flex align-items-center gap-2" style="font-size: 0.7rem;">
                                        {{ org_logo.logo(current_organization(), 'xs') }}
                                        {{ current_organization().name }}
                                    </div>
                                    {% endif %}
                                </div>
                            </div>
                        </li>
                        {{ render_user_menu()|raw }}
                    </ul>
                </div>
                {% endif %}
            </div>
        </div>
    </nav>

    <main class="container">
        {% for message in app.flashes('success') %}
            <div class="alert alert-success border-0 rounded-3" style="background: rgba(34, 197, 94, 0.1); border: 1px solid rgba(34, 197, 94, 0.3) !important; color: #22c55e;">
                <i class="bi bi-check-circle me-2"></i>{{ message|trans }}
            </div>
        {% endfor %}

        {% for message in app.flashes('error') %}
            <div class="alert alert-danger border-0 rounded-3" style="background: rgba(239, 68, 68, 0.1); border: 1px solid rgba(239, 68, 68, 0.3) !important; color: #ef4444;">
                <i class="bi bi-exclamation-triangle me-2"></i>{{ message|trans }}
            </div>
        {% endfor %}

        {% block body %}{% endblock %}
    </main>


    <!-- Global Modal Container -->
    <div id="global-modal-container"></div>

    <!-- Avelum Branding Card - Fixed Bottom Right -->
    <div class="avelum-branding-card" data-bs-toggle="tooltip" data-bs-title="Copyright {{ 'now'|date('Y') }} | Avelum.ia.br">
        <span class="avelum-text">by</span>
        <img src="/avelum_logo_md_dark.png" alt="Avelum" class="avelum-logo logo-dark-theme">
        <img src="/avelum_logo_md_ligth.png" alt="Avelum" class="avelum-logo logo-light-theme">
    </div>

    {% block javascripts %}{% endblock %}

    <script data-turbo-eval="false">
        // Ensure Bootstrap is available globally before any initialization
        if (typeof bootstrap === 'undefined') {
            // Create a promise that resolves when Bootstrap is loaded
            window.bootstrapReady = new Promise((resolve) => {
                const checkBootstrap = setInterval(() => {
                    if (typeof bootstrap !== 'undefined') {
                        clearInterval(checkBootstrap);
                        resolve();
                    }
                }, 50);
            });
        } else {
            window.bootstrapReady = Promise.resolve();
        }

        // Global theme management
        if (typeof GlobalTheme === 'undefined') {
            window.GlobalTheme = {
            current: 'dark',

            init() {
                // Load saved theme preference
                const saved = localStorage.getItem('luminai-theme');
                const system = window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
                this.current = saved || system;

                this.apply(this.current);
                this.updateNavbar();

                // Listen for system theme changes
                window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
                    if (!localStorage.getItem('luminai-theme')) {
                        this.apply(e.matches ? 'dark' : 'light');
                        this.updateNavbar();
                    }
                });
            },

            apply(theme) {
                this.current = theme;
                document.documentElement.setAttribute('data-theme', theme);
                localStorage.setItem('luminai-theme', theme);
            },

            updateNavbar() {
                const icon = document.getElementById('navThemeIcon');
                const text = document.getElementById('navThemeText');

                if (this.current === 'light') {
                    if (icon) icon.className = 'bi bi-moon-stars me-2';
                    if (text) text.textContent = '{{ 'theme.switch.to.dark'|trans({}, 'settings') }}';
                } else {
                    if (icon) icon.className = 'bi bi-sun me-2';
                    if (text) text.textContent = '{{ 'theme.switch.to.light'|trans({}, 'settings') }}';
                }
            }
            };

            // Global functions
            window.toggleThemeQuick = function() {
                const newTheme = GlobalTheme.current === 'dark' ? 'light' : 'dark';
                GlobalTheme.apply(newTheme);
                GlobalTheme.updateNavbar();
            };

            // Helper function to safely initialize Bootstrap tooltips
            async function initGlobalTooltips() {
                // Wait for Bootstrap to be loaded
                await window.bootstrapReady;

                if (typeof bootstrap === 'undefined' || typeof bootstrap.Tooltip === 'undefined') {
                    return; // Bootstrap still not available
                }

                const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'));
                tooltipTriggerList.forEach(function (tooltipTriggerEl) {
                    // Dispose existing tooltip if any
                    const existingTooltip = bootstrap.Tooltip.getInstance(tooltipTriggerEl);
                    if (existingTooltip) {
                        existingTooltip.dispose();
                    }
                    // Create new tooltip
                    new bootstrap.Tooltip(tooltipTriggerEl, {
                        trigger: 'hover',
                        delay: { show: 300, hide: 100 }
                    });
                });
            }

            // Expose tooltip function globally for Stimulus controllers
            window.initGlobalTooltips = initGlobalTooltips;

            // Initialize Bootstrap tooltips when ready
            initGlobalTooltips();

            // Re-initialize tooltips after Turbo navigation (with debounce)
            if (!window.__turboTooltipsRegistered) {
                window.__turboTooltipsRegistered = true;
                let tooltipLoadTimeout, tooltipRenderTimeout;

                document.addEventListener('turbo:load', function() {
                    clearTimeout(tooltipLoadTimeout);
                    tooltipLoadTimeout = setTimeout(() => initGlobalTooltips(), 50);
                });

                // Re-initialize tooltips after Turbo renders new content
                document.addEventListener('turbo:render', function() {
                    clearTimeout(tooltipRenderTimeout);
                    tooltipRenderTimeout = setTimeout(() => initGlobalTooltips(), 50);
                });
            }

            // ============================================
            // TURBO CLEANUP (Before page is cached)
            // ============================================
            document.addEventListener('turbo:before-cache', function() {
                console.log('🧹 Turbo: Cleaning up page before cache');

                // Dispose all Bootstrap tooltips
                document.querySelectorAll('[data-bs-toggle="tooltip"]').forEach(el => {
                    const tooltip = bootstrap.Tooltip.getInstance(el);
                    if (tooltip) tooltip.dispose();
                });

                // Remove modal backdrops
                document.querySelectorAll('.modal-backdrop').forEach(el => el.remove());

                // Close all open dropdowns
                document.querySelectorAll('.dropdown-menu.show').forEach(menu => {
                    menu.classList.remove('show');
                });
            });

            {% if app.environment == 'dev' %}
            // ============================================
            // TURBO EVENT LOGGING (Development Only)
            // ============================================
            if (typeof Turbo !== 'undefined') {
                console.log('🎯 Turbo event logging enabled (dev mode)');

                // Navigation events
                document.addEventListener('turbo:click', (event) => {
                    console.log('🖱️ Turbo: Link clicked', event.detail.url);
                });

                document.addEventListener('turbo:before-visit', (event) => {
                    console.log('🚀 Turbo: Starting visit to', event.detail.url);
                });

                document.addEventListener('turbo:visit', (event) => {
                    console.log('📡 Turbo: Fetching', event.detail.url);
                });

                document.addEventListener('turbo:before-render', (event) => {
                    console.log('🎨 Turbo: About to render');
                });

                document.addEventListener('turbo:render', () => {
                    console.log('✨ Turbo: Page rendered');
                });

                // Form events
                document.addEventListener('turbo:submit-start', (event) => {
                    console.log('📤 Turbo: Form submission started');
                });

                document.addEventListener('turbo:submit-end', (event) => {
                    console.log('📥 Turbo: Form submission ended', event.detail.success ? '✅' : '❌');
                });

                // Error events
                document.addEventListener('turbo:fetch-request-error', (event) => {
                    console.error('❌ Turbo: Fetch error', event.detail);
                });
            }
            {% endif %}

            // Close dropdowns on click outside or ESC key
            document.addEventListener('click', function(event) {
                // Check if Bootstrap is loaded
                if (typeof bootstrap === 'undefined' || typeof bootstrap.Dropdown === 'undefined') {
                    return;
                }

                // Check if click is outside any dropdown (user profile dropdown)
                const dropdowns = document.querySelectorAll('.dropdown-menu.show');
                dropdowns.forEach(dropdown => {
                    const parentDropdown = dropdown.closest('.dropdown');
                    if (parentDropdown && !parentDropdown.contains(event.target)) {
                        // Find the toggle button
                        const toggle = parentDropdown.querySelector('[data-bs-toggle="dropdown"]');
                        if (toggle) {
                            const bsDropdown = bootstrap.Dropdown.getInstance(toggle);
                            if (bsDropdown) {
                                bsDropdown.hide();
                            }
                        }
                    }
                });

                // Close navbar collapse on click outside
                const navbarCollapse = document.getElementById('navbarNav');
                const navbarToggler = document.querySelector('.navbar-toggler');

                if (navbarCollapse && navbarCollapse.classList.contains('show')) {
                    // Check if click is outside both the collapse menu and the toggler button
                    if (!navbarCollapse.contains(event.target) &&
                        (!navbarToggler || !navbarToggler.contains(event.target))) {
                        // Simply remove the show class and add collapsing class
                        navbarCollapse.classList.remove('show');
                        navbarCollapse.classList.add('collapsing');

                        // Remove collapsing class after animation (350ms is Bootstrap default)
                        setTimeout(() => {
                            navbarCollapse.classList.remove('collapsing');
                        }, 350);
                    }
                }
            });

            // Close dropdowns and navbar on ESC key
            document.addEventListener('keydown', function(event) {
                if (event.key === 'Escape' || event.key === 'Esc') {
                    // Check if Bootstrap is loaded
                    if (typeof bootstrap !== 'undefined' && typeof bootstrap.Dropdown !== 'undefined') {
                        // Close all open dropdowns
                        const dropdowns = document.querySelectorAll('.dropdown-menu.show');
                        dropdowns.forEach(dropdown => {
                            const parentDropdown = dropdown.closest('.dropdown');
                            if (parentDropdown) {
                                const toggle = parentDropdown.querySelector('[data-bs-toggle="dropdown"]');
                                if (toggle) {
                                    const bsDropdown = bootstrap.Dropdown.getInstance(toggle);
                                    if (bsDropdown) {
                                        bsDropdown.hide();
                                    }
                                }
                            }
                        });
                    }

                    // Close navbar collapse
                    const navbarCollapse = document.getElementById('navbarNav');
                    if (navbarCollapse && navbarCollapse.classList.contains('show')) {
                        // Simply remove the show class and add collapsing class
                        navbarCollapse.classList.remove('show');
                        navbarCollapse.classList.add('collapsing');

                        // Remove collapsing class after animation
                        setTimeout(() => {
                            navbarCollapse.classList.remove('collapsing');
                        }, 350);
                    }
                }
            });

            // Initialize theme on page load
            document.addEventListener('DOMContentLoaded', async () => {
                // Initialize PreferenceManager (full page load)
                await window.PreferenceManager.init(false);
                GlobalTheme.init();
            });

            // Initialize on Turbo navigation (with debounce to prevent duplicate calls)
            if (!window.__turboPreferencesRegistered) {
                window.__turboPreferencesRegistered = true;
                let turboLoadTimeout;
                document.addEventListener('turbo:load', async () => {
                    // Debounce: only execute if no other turbo:load fired in the last 50ms
                    clearTimeout(turboLoadTimeout);
                    turboLoadTimeout = setTimeout(async () => {
                        console.log('🔄 Turbo navigation - loading preferences from localStorage');
                        await window.PreferenceManager.init(true);
                    }, 50);
                });

                // Clean up initialization flags before Turbo caches the page
                document.addEventListener('turbo:before-cache', () => {
                    // Clean up global view toggle flags
                    if (window.__viewToggleInitialized) {
                        window.__viewToggleInitialized = {};
                    }
                });
            }
        }

        // DEPRECATED: Keep UserPreferences wrapper for backward compatibility
        if (typeof UserPreferences === 'undefined') {
            window.UserPreferences = {
                async init() {
                    // Redirect to PreferenceManager
                    await window.PreferenceManager.init(false);
                },

                async loadFromDatabase() {
                    // Redirect to PreferenceManager
                    await window.PreferenceManager.init(false);
                },

                isAuthenticated() {
                    // Check if we're on a public page (login, register)
                    const publicPaths = ['/login', '/register'];
                    const currentPath = window.location.pathname;
                    return !publicPaths.some(path => currentPath.startsWith(path));
                },

                getStorageKey() {
                    // For compatibility
                    return 'luminai_preferences';
                },

                savePreference(key, value) {
                    // Redirect to PreferenceManager
                    return window.PreferenceManager.setUserPreference(key, value);
                },

                get(key, defaultValue = null) {
                    return window.PreferenceManager.getUserPreference(key, defaultValue);
                },

                set(key, value) {
                    return window.PreferenceManager.setUserPreference(key, value);
                },

                toggle(key) {
                    const currentValue = this.get(key, false);
                    this.set(key, !currentValue);
                    return !currentValue;
                }
            };

            // Global functions for easy access
            window.savePreference = (key, value) => window.PreferenceManager.setUserPreference(key, value);
            window.getPreference = (key, defaultValue) => window.PreferenceManager.getUserPreference(key, defaultValue);
            window.togglePreference = (key) => UserPreferences.toggle(key);

            // Setup event listeners for preferences
            document.addEventListener('change', (event) => {
                if (event.target.matches('[data-preference]')) {
                    const key = event.target.dataset.preference;
                    const value = event.target.type === 'checkbox' ? event.target.checked : event.target.value;
                    window.PreferenceManager.setUserPreference(key, value);
                }
            });

            // Auto-save theme changes
            document.addEventListener('DOMContentLoaded', () => {
                const originalApply = GlobalTheme.apply;
                GlobalTheme.apply = (theme) => {
                    originalApply.call(GlobalTheme, theme);
                    window.PreferenceManager.setUserPreference('theme', theme);
                };
            });
        }
    </script>

    <style>
        /* Organization Selector - Theme Responsive Colors */
        .org-selector-link,
        .org-display {
            color: #fff !important;
        }

        [data-theme="light"] .org-selector-link,
        [data-theme="light"] .org-display {
            color: #1a1a1a !important;
        }

        [data-theme="light"] .org-selector-link i,
        [data-theme="light"] .org-display i {
            color: #1a1a1a !important;
        }

        /* Navbar Button Consistency */
        .navbar-menu-btn {
            background: transparent;
            border: none;
            padding: 0.375rem 0.5rem;
            cursor: pointer;
            transition: all 0.2s ease;
            border-radius: 0.375rem;
        }

        .navbar-menu-btn:hover {
            background: rgba(255, 255, 255, 0.1);
        }

        .navbar-menu-btn:focus {
            outline: none;
            box-shadow: none;
        }

        /* Ensure consistent spacing between navbar buttons */
        .navbar .dropdown > a,
        .navbar .dropdown > button {
            min-height: 40px;
            display: flex;
            align-items: center;
            padding: 0.375rem 0.75rem;
            border-radius: 0.375rem;
            transition: background-color 0.2s ease;
        }

        .navbar .dropdown > a:hover,
        .navbar .dropdown > button:hover {
            background: rgba(255, 255, 255, 0.1);
        }

        /* Dropdown toggle arrow consistency */
        .dropdown-toggle::after {
            margin-left: 0.5rem;
        }

        /* Mobile: Full-width dropdowns on small screens */
        @media (max-width: 767px) {
            .navbar .dropdown-menu {
                position: fixed !important;
                left: 0 !important;
                right: 0 !important;
                top: auto !important;
                transform: none !important;
                width: 100% !important;
                min-width: 100% !important;
                max-width: 100% !important;
                margin: 0 !important;
                border-radius: 0 !important;
                border-left: none !important;
                border-right: none !important;
            }
        }

        /* Avelum Branding Card - Fixed Bottom Right */
        .avelum-branding-card {
            position: fixed;
            bottom: 20px;
            right: 20px;
            background: var(--luminai-card-bg);
            border: 1px solid var(--luminai-border);
            border-radius: 12px;
            padding: 12px 16px;
            display: flex;
            align-items: center;
            gap: 10px;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
            z-index: 1000;
            transition: all 0.3s ease;
        }

        .avelum-branding-card:hover {
            box-shadow: 0 6px 16px rgba(0, 0, 0, 0.25);
            transform: translateY(-2px);
        }

        .avelum-text {
            font-size: 14px;
            font-weight: 500;
            color: var(--luminai-text);
            opacity: 0.8;
        }

        .avelum-logo {
            height: 31px;
            width: auto;
            display: none;
        }

        /* Show light logo in light theme, dark logo in dark theme */
        [data-theme="light"] .avelum-logo.logo-light-theme {
            display: block;
        }

        [data-theme="dark"] .avelum-logo.logo-dark-theme {
            display: block;
        }

        /* Mobile: Smaller branding card */
        @media (max-width: 767px) {
            .avelum-branding-card {
                bottom: 15px;
                right: 15px;
                padding: 8px 12px;
                gap: 8px;
            }

            .avelum-text {
                font-size: 12px;
            }

            .avelum-logo {
                height: 26px;
            }
        }
    </style>
</body>
</html>
