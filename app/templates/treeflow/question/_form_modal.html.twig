{% extends '_base_modal.html.twig' %}

{# Configure modal appearance and behavior #}
{% set entity_type = 'question' %}
{% set icon = 'question-circle' %}
{% set form_action = (is_edit and question.id) ? path('question_edit', {treeflowId: treeflow.id, stepId: step.id, questionId: question.id}) : path('question_new', {treeflowId: treeflow.id, stepId: step.id}) %}
{% set title_create = 'question.modal.create.title' %}
{% set subtitle_create = 'question.modal.create.subtitle' %}
{% set subtitle_edit = 'question.modal.edit.subtitle' %}
{% set submit_key = is_edit ? 'button.save.changes' : 'question.button.create.question' %}
{% set submit_domain = is_edit ? 'messages' : 'treeflow' %}
{% set entity = question %}

{# Form fields #}
{% block modal_body %}
    <div class="form-group-modern">
        <label class="form-label-modern">{{ form_label(form.name) }}</label>
        {{ form_widget(form.name, {
            'attr': {
                'class': 'form-input-modern' ~ (form.name.vars.errors|length > 0 ? ' input-error' : ''),
                'placeholder': 'question.form.name.placeholder'|trans({}, 'treeflow'),
                'autofocus': 'autofocus'
            }
        }) }}
        {{ form_errors(form.name) }}
    </div>

    <div class="form-group-modern">
        <label class="form-label-modern">{{ form_label(form.prompt) }}</label>
        {{ form_widget(form.prompt, {
            'attr': {
                'class': 'form-input-modern' ~ (form.prompt.vars.errors|length > 0 ? ' input-error' : ''),
                'placeholder': 'question.form.prompt.placeholder'|trans({}, 'treeflow'),
                'rows': 4
            }
        }) }}
        {{ form_errors(form.prompt) }}
    </div>

    <div class="form-group-modern">
        <label class="form-label-modern">{{ form_label(form.objective) }}</label>
        {{ form_widget(form.objective, {
            'attr': {
                'class': 'form-input-modern' ~ (form.objective.vars.errors|length > 0 ? ' input-error' : ''),
                'placeholder': 'question.form.objective.placeholder'|trans({}, 'treeflow'),
                'rows': 3
            }
        }) }}
        {{ form_errors(form.objective) }}
    </div>

    <div class="form-group-modern">
        <label class="form-label-modern">{{ form_label(form.importance) }}</label>
        <div class="star-rating-container">
            <!-- Hidden radio inputs -->
            {% for choice in form.importance %}
                {{ form_widget(choice, {
                    'attr': {
                        'class': 'star-rating-input-hidden',
                        'data-star-value': choice.vars.label
                    }
                }) }}
            {% endfor %}

            <!-- Visible clickable stars -->
            <div class="clickable-stars">
                <i class="bi bi-star-fill clickable-star" data-star="1"></i>
                <i class="bi bi-star-fill clickable-star" data-star="2"></i>
                <i class="bi bi-star-fill clickable-star" data-star="3"></i>
            </div>
        </div>
        <small class="text-muted mt-1 d-block">{{ 'question.form.importance.help'|trans({}, 'treeflow') }}</small>
        {{ form_errors(form.importance) }}
    </div>

    {# Positive Few-Shot Examples #}
    <div class="form-group-modern">
        <label class="form-label-modern">{{ form_label(form.fewShotPositive) }}</label>
        <small class="text-muted d-block mb-2">{{ 'question.form.fewshot.positive.help'|trans({}, 'treeflow') }}</small>
        <div class="fewshot-collection-container" data-collection="positive" data-index="{{ form.fewShotPositive|length }}" data-prototype="{{ form_widget(form.fewShotPositive.vars.prototype)|e('html_attr') }}">
            <div class="fewshot-items">
                {% for item in form.fewShotPositive %}
                    <div class="fewshot-item mb-2">
                        {{ form_widget(item) }}
                        <button type="button" class="btn btn-sm btn-danger fewshot-remove mt-1">
                            <i class="bi bi-trash"></i> {{ 'button.remove'|trans({}, 'messages') }}
                        </button>
                    </div>
                {% endfor %}
            </div>
            <button type="button" class="btn btn-sm luminai-btn-success fewshot-add mt-2">
                <i class="bi bi-plus-circle"></i> {{ 'question.button.add.positive.example'|trans({}, 'treeflow') }}
            </button>
        </div>
        {{ form_errors(form.fewShotPositive) }}
    </div>

    {# Negative Few-Shot Examples #}
    <div class="form-group-modern">
        <label class="form-label-modern">{{ form_label(form.fewShotNegative) }}</label>
        <small class="text-muted d-block mb-2">{{ 'question.form.fewshot.negative.help'|trans({}, 'treeflow') }}</small>
        <div class="fewshot-collection-container" data-collection="negative" data-index="{{ form.fewShotNegative|length }}" data-prototype="{{ form_widget(form.fewShotNegative.vars.prototype)|e('html_attr') }}">
            <div class="fewshot-items">
                {% for item in form.fewShotNegative %}
                    <div class="fewshot-item mb-2">
                        {{ form_widget(item) }}
                        <button type="button" class="btn btn-sm btn-danger fewshot-remove mt-1">
                            <i class="bi bi-trash"></i> {{ 'button.remove'|trans({}, 'messages') }}
                        </button>
                    </div>
                {% endfor %}
            </div>
            <button type="button" class="btn btn-sm luminai-btn-success fewshot-add mt-2">
                <i class="bi bi-plus-circle"></i> {{ 'question.button.add.negative.example'|trans({}, 'treeflow') }}
            </button>
        </div>
        {{ form_errors(form.fewShotNegative) }}
    </div>

    {{ form_widget(form._token) }}

    <style>
        /* Hide radio buttons */
        .star-rating-input-hidden {
            position: absolute;
            opacity: 0;
            pointer-events: none;
        }

        /* Clickable stars */
        .clickable-stars {
            display: flex;
            gap: 0.5rem;
            font-size: 1.5rem;
            cursor: pointer;
        }

        .clickable-star {
            color: rgba(139, 92, 246, 0.2);
            transition: all 0.2s ease;
        }

        .clickable-star:hover {
            transform: scale(1.2);
        }

        .clickable-star.active {
            color: #f59e0b;
            text-shadow: 0 0 10px rgba(245, 158, 11, 0.4);
        }
    </style>

    <script>
        // Use setTimeout to ensure DOM is fully rendered in modal
        setTimeout(function() {
            // Star Rating System
            const stars = document.querySelectorAll('.clickable-star');
            const radioInputs = document.querySelectorAll('.star-rating-input-hidden');

            console.log('Found stars:', stars.length);
            console.log('Found radio inputs:', radioInputs.length);

            if (stars.length > 0) {
                // Set initial state based on checked radio
                radioInputs.forEach((radio) => {
                    if (radio.checked) {
                        const starValue = parseInt(radio.getAttribute('data-star-value'));
                        console.log('Initial star value:', starValue);
                        updateStars(starValue);
                    }
                });

                // Click handler for stars
                stars.forEach(star => {
                    star.addEventListener('click', function(e) {
                        e.preventDefault();
                        const starValue = parseInt(this.getAttribute('data-star'));
                        console.log('Clicked star:', starValue);

                        // Update visual stars
                        updateStars(starValue);

                        // Check corresponding radio button
                        radioInputs.forEach(radio => {
                            const radioValue = parseInt(radio.getAttribute('data-star-value'));
                            radio.checked = (radioValue === starValue);
                        });
                    });

                    // Add hover effect
                    star.addEventListener('mouseenter', function() {
                        const starValue = parseInt(this.getAttribute('data-star'));
                        stars.forEach((s, idx) => {
                            if (idx < starValue) {
                                s.style.color = '#f59e0b';
                            }
                        });
                    });

                    star.addEventListener('mouseleave', function() {
                        // Restore active state
                        radioInputs.forEach((radio) => {
                            if (radio.checked) {
                                const starValue = parseInt(radio.getAttribute('data-star-value'));
                                updateStars(starValue);
                            }
                        });
                    });
                });
            }

            function updateStars(value) {
                stars.forEach((star, idx) => {
                    const starNumber = idx + 1;
                    if (starNumber <= value) {
                        star.classList.add('active');
                    } else {
                        star.classList.remove('active');
                    }
                });
            }

            // Few-Shot Collection Management
            const addButtons = document.querySelectorAll('.fewshot-add');
            console.log('Found add buttons:', addButtons.length);

            addButtons.forEach(button => {
                button.addEventListener('click', function(e) {
                    e.preventDefault();
                    console.log('Add button clicked');
                    const container = this.closest('.fewshot-collection-container');
                    const itemsContainer = container.querySelector('.fewshot-items');
                    const prototype = container.getAttribute('data-prototype');
                    let index = parseInt(container.getAttribute('data-index')) || 0;

                    console.log('Creating new item with index:', index);

                    const newItem = document.createElement('div');
                    newItem.classList.add('fewshot-item', 'mb-2');
                    newItem.innerHTML = prototype.replace(/__name__/g, index) +
                        '<button type="button" class="btn btn-sm btn-danger fewshot-remove mt-1">' +
                        '<i class="bi bi-trash"></i> {{ 'button.remove'|trans({}, 'messages') }}</button>';

                    itemsContainer.appendChild(newItem);
                    container.setAttribute('data-index', index + 1);
                });
            });

            // Remove item from collection (event delegation)
            document.addEventListener('click', function(e) {
                if (e.target.classList.contains('fewshot-remove') || e.target.closest('.fewshot-remove')) {
                    e.preventDefault();
                    const button = e.target.classList.contains('fewshot-remove') ? e.target : e.target.closest('.fewshot-remove');
                    const item = button.closest('.fewshot-item');
                    item.remove();
                }
            });
        }, 100); // Small delay to ensure modal content is rendered
    </script>
{% endblock %}

{% block modal_footer %}
    <div class="modal-footer-actions" id="modal-default-actions-question">
        {{ button_modal_cancel() }}
        {{ button_modal_submit(is_edit, submit_key|default(null), submit_domain|default('messages')) }}
        {% if is_edit and question.id %}
            <button type="button" class="btn btn-sm btn-danger ms-2" onclick="showDeleteConfirmationQuestion()">
                <i class="bi bi-trash"></i> {{ 'button.delete'|trans }}
            </button>
        {% endif %}
    </div>

    <div class="modal-footer-actions" id="modal-delete-confirmation-question" style="display: none;">
        <div class="text-danger fw-bold">{{ 'confirm.delete.entity'|trans }}</div>
        <button type="button" class="btn btn-sm btn-secondary" onclick="cancelDeleteQuestion()">
            <i class="bi bi-x-circle"></i> {{ 'button.cancel'|trans }}
        </button>
        <form method="post" action="{{ path('question_delete', {treeflowId: treeflow.id, stepId: step.id, questionId: question.id}) }}" style="display: inline;">
            <input type="hidden" name="_token" value="{{ csrf_token('delete-question-' ~ question.id) }}">
            <button type="submit" class="btn btn-sm btn-danger">
                <i class="bi bi-trash"></i> {{ 'button.confirm.delete'|trans }}
            </button>
        </form>
    </div>

    <script>
        function showDeleteConfirmationQuestion() {
            document.getElementById('modal-default-actions-question').style.display = 'none';
            document.getElementById('modal-delete-confirmation-question').style.display = 'flex';
        }

        function cancelDeleteQuestion() {
            document.getElementById('modal-delete-confirmation-question').style.display = 'none';
            document.getElementById('modal-default-actions-question').style.display = 'flex';
        }
    </script>
{% endblock %}
