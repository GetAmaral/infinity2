<?php

declare(strict_types=1);

namespace {{ namespace }};

use App\Entity\{{ entity.entityName }};
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
{% set formTypes = [] %}
{% for property in entity.properties %}
{% if property.showInForm and not property.isRelationship() %}
{% if property.getFormType() not in formTypes %}
{% set formTypes = formTypes|merge([property.getFormType()]) %}
{% endif %}
{% endif %}
{% endfor %}
{% for formType in formTypes %}
use Symfony\Component\Form\Extension\Core\Type\{{ formType }};
{% endfor %}

/**
 * {{ entity.entityName }} Form Type (Generated Base Class)
 *
 * This class is ALWAYS regenerated from CSV. DO NOT edit this file.
 * Add custom form logic to {{ entity.entityName }}Type.php instead.
 *
 * @generated by Luminai Code Generator
 */
abstract class {{ className }} extends AbstractType
{
    public function buildForm(FormBuilderInterface $builder, array $options): void
    {
{% for property in entity.properties %}
{% if property.showInForm %}
{% if not property.isRelationship() %}
        $builder->add('{{ property.propertyName }}', {{ property.getFormType() }}::class, [
            'label' => '{{ property.propertyLabel }}',
            'required' => {{ property.formRequired ? 'true' : 'false' }},
{% if property.formHelp %}
            'help' => '{{ property.formHelp }}',
{% endif %}
{% if property.formOptions|length > 0 %}
{% for key, value in property.formOptions %}
            '{{ key }}' => {{ value|json_encode|raw }},
{% endfor %}
{% endif %}
        ]);
{% endif %}
{% endif %}
{% endfor %}
    }

    public function configureOptions(OptionsResolver $resolver): void
    {
        $resolver->setDefaults([
            'data_class' => {{ entity.entityName }}::class,
        ]);
    }
}
