<?php

declare(strict_types=1);

namespace {{ namespace }};

use App\Entity\EntityBase;
{% if usesOrganizationTrait %}
use App\Entity\Trait\OrganizationTrait;
{% endif %}
use Doctrine\ORM\Mapping as ORM;
{% if entity.properties|filter(p => p.isCollection())|length > 0 %}
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
{% endif %}
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;

/**
 * {{ entity.entityLabel }} Entity (Generated Base Class)
 *
 * {{ entity.description }}
 *
 * This class is ALWAYS regenerated from CSV. DO NOT edit this file.
 * Add custom logic to {{ entity.entityName }}.php instead.
 *
 * @generated by Luminai Code Generator
 * @see /config/EntityNew.csv and /config/PropertyNew.csv
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class {{ className }} extends {{ extendsClass }}
{
{% if usesOrganizationTrait %}
    use OrganizationTrait;

{% endif %}
{% for property in entity.properties %}
{% if not property.isRelationship() %}
    #[ORM\Column(
        type: '{{ property.propertyType }}'
{%- if property.length %}, length: {{ property.length }}{% endif %}
{%- if property.precision %}, precision: {{ property.precision }}{% endif %}
{%- if property.scale %}, scale: {{ property.scale }}{% endif %}
{%- if property.nullable %}, nullable: true{% endif %}
{%- if property.unique %}, unique: true{% endif %}
    )]
{% for rule in property.validationRules %}
    #[Assert\{{ rule }}]
{% endfor %}
{% if property.apiGroups|length > 0 %}
{% for group in property.apiGroups %}
    #[Groups(['{{ group }}'])]
{% endfor %}
{% endif %}
    protected {{ property.getPhpType() }}{% if property.nullable %}?{% endif %} ${{ property.propertyName }}{% if property.defaultValue %} = {{ property.defaultValue }}{% elseif property.nullable %} = null{% endif %};

{% else %}
{# Relationship properties #}
{% if property.isCollection() %}
    #[ORM\{{ property.relationshipType }}(
        targetEntity: {{ property.targetEntity }}::class
{%- if property.mappedBy %}, mappedBy: '{{ property.mappedBy }}'{% endif %}
{%- if property.inversedBy %}, inversedBy: '{{ property.inversedBy }}'{% endif %}
{%- if property.cascade|length > 0 %}, cascade: [{% for op in property.cascade %}'{{ op }}'{% if not loop.last %}, {% endif %}{% endfor %}]{% endif %}
{%- if property.orphanRemoval %}, orphanRemoval: true{% endif %}
{%- if property.fetch %}, fetch: '{{ property.fetch }}'{% endif %}
    )]
{% if property.orderBy|length > 0 %}
    #[ORM\OrderBy([{% for field, direction in property.orderBy %}'{{ field }}' => '{{ direction|upper }}'{% if not loop.last %}, {% endif %}{% endfor %}])]
{% endif %}
{% if property.apiGroups|length > 0 %}
{% for group in property.apiGroups %}
    #[Groups(['{{ group }}'])]
{% endfor %}
{% endif %}
    protected Collection ${{ property.propertyName }};

{% else %}
{# ManyToOne or OneToOne #}
    #[ORM\{{ property.relationshipType }}(targetEntity: {{ property.targetEntity }}::class{% if property.inversedBy %}, inversedBy: '{{ property.inversedBy }}'{% endif %})]
{% if not property.nullable %}
    #[ORM\JoinColumn(nullable: false)]
{% endif %}
{% if property.apiGroups|length > 0 %}
{% for group in property.apiGroups %}
    #[Groups(['{{ group }}'])]
{% endfor %}
{% endif %}
    protected {% if property.nullable %}?{% endif %}{{ property.targetEntity }} ${{ property.propertyName }}{% if property.nullable %} = null{% endif %};

{% endif %}
{% endif %}
{% endfor %}

    public function __construct()
    {
        parent::__construct();
{% for property in entity.properties %}
{% if property.isCollection() %}
        $this->{{ property.propertyName }} = new ArrayCollection();
{% endif %}
{% endfor %}
    }

{% for property in entity.properties %}
{% if not property.isRelationship() %}
    public function get{{ property.propertyName|capitalize }}(): {% if property.nullable %}?{% endif %}{{ property.getPhpType() }}
    {
        return $this->{{ property.propertyName }};
    }

    public function set{{ property.propertyName|capitalize }}({% if property.nullable %}?{% endif %}{{ property.getPhpType() }} ${{ property.propertyName }}): self
    {
        $this->{{ property.propertyName }} = ${{ property.propertyName }};
        return $this;
    }

{% else %}
{% if property.isCollection() %}
    /**
     * @return Collection<int, {{ property.targetEntity }}>
     */
    public function get{{ property.propertyName|capitalize }}(): Collection
    {
        return $this->{{ property.propertyName }};
    }

    public function add{{ property.propertyName|capitalize|slice(0, -1) }}({{ property.targetEntity }} ${{ property.propertyName|slice(0, -1) }}): self
    {
        if (!$this->{{ property.propertyName }}->contains(${{ property.propertyName|slice(0, -1) }})) {
            $this->{{ property.propertyName }}->add(${{ property.propertyName|slice(0, -1) }});
{% if property.mappedBy %}
            ${{ property.propertyName|slice(0, -1) }}->set{{ property.mappedBy|capitalize }}($this);
{% endif %}
        }
        return $this;
    }

    public function remove{{ property.propertyName|capitalize|slice(0, -1) }}({{ property.targetEntity }} ${{ property.propertyName|slice(0, -1) }}): self
    {
        if ($this->{{ property.propertyName }}->removeElement(${{ property.propertyName|slice(0, -1) }})) {
{% if property.mappedBy %}
            if (${{ property.propertyName|slice(0, -1) }}->get{{ property.mappedBy|capitalize }}() === $this) {
                ${{ property.propertyName|slice(0, -1) }}->set{{ property.mappedBy|capitalize }}(null);
            }
{% endif %}
        }
        return $this;
    }

{% else %}
    public function get{{ property.propertyName|capitalize }}(): {% if property.nullable %}?{% endif %}{{ property.targetEntity }}
    {
        return $this->{{ property.propertyName }};
    }

    public function set{{ property.propertyName|capitalize }}({% if property.nullable %}?{% endif %}{{ property.targetEntity }} ${{ property.propertyName }}): self
    {
        $this->{{ property.propertyName }} = ${{ property.propertyName }};
        return $this;
    }

{% endif %}
{% endif %}
{% endfor %}

    public function __toString(): string
    {
{% set nameProperty = entity.properties|filter(p => p.propertyName == 'name')|first %}
{% if nameProperty %}
        return $this->name ?? '';
{% else %}
        return (string) $this->getId()->toRfc4122();
{% endif %}
    }
}
