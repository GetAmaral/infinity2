<?php

declare(strict_types=1);

namespace {{ namespace }};

use App\Entity\{{ entity.entityName }};
use App\Entity\User;
use Symfony\Component\Security\Core\Authentication\Token\TokenInterface;
use Symfony\Component\Security\Core\Authorization\Voter\Voter;

/**
 * {{ entity.entityName }} Voter (Generated Base Class)
 *
 * This class is ALWAYS regenerated from CSV. DO NOT edit this file.
 * Add custom authorization logic to {{ entity.entityName }}Voter.php instead.
 *
 * @generated by Luminai Code Generator
 */
abstract class {{ className }} extends Voter
{
{% for attribute in entity.voterAttributes %}
    public const {{ attribute }} = '{{ attribute }}';
{% endfor %}

    protected function supports(string $attribute, mixed $subject): bool
    {
        // Only vote on {{ entity.entityName }} objects with supported attributes
        if (!in_array($attribute, [{% for attribute in entity.voterAttributes %}'{{ attribute }}'{% if not loop.last %}, {% endif %}{% endfor %}], true)) {
            return false;
        }

        if (!$subject instanceof {{ entity.entityName }}) {
            return false;
        }

        return true;
    }

    protected function voteOnAttribute(string $attribute, mixed $subject, TokenInterface $token): bool
    {
        $user = $token->getUser();

        // User must be logged in
        if (!$user instanceof User) {
            return false;
        }

        /** @var {{ entity.entityName }} ${{ entity.getLowercaseName() }} */
        ${{ entity.getLowercaseName() }} = $subject;

        return match ($attribute) {
{% for attribute in entity.voterAttributes %}
            self::{{ attribute }} => $this->can{{ attribute|capitalize }}(${{ entity.getLowercaseName() }}, $user),
{% endfor %}
            default => false,
        };
    }

{% for attribute in entity.voterAttributes %}
    /**
     * Check if user can {{ attribute|lower }} the {{ entity.entityLabel }}
     */
    protected function can{{ attribute|capitalize }}({{ entity.entityName }} ${{ entity.getLowercaseName() }}, User $user): bool
    {
{% if entity.hasOrganization %}
        // Check if user belongs to the same organization
        if (${{ entity.getLowercaseName() }}->getOrganization()->getId() !== $user->getOrganization()->getId()) {
            return false;
        }

{% endif %}
        // Admins and super admins can do anything
        if (in_array('ROLE_ADMIN', $user->getRoles(), true) || in_array('ROLE_SUPER_ADMIN', $user->getRoles(), true)) {
            return true;
        }

{% if attribute == 'VIEW' %}
        // All authenticated users can view
        return true;
{% elseif attribute == 'EDIT' %}
        // Users can edit their own organization's entities
        return true;
{% elseif attribute == 'DELETE' %}
        // Only admins can delete
        return false;
{% else %}
        // Default: allow for authenticated users
        return true;
{% endif %}
    }

{% endfor %}
}
