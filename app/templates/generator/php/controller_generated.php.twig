<?php

declare(strict_types=1);

namespace {{ namespace }};

use App\Entity\{{ entity.entityName }};
use App\Form\{{ entity.entityName }}Type;
use App\Repository\{{ entity.entityName }}Repository;
{% if entity.hasOrganization %}
use App\Service\OrganizationContext;
{% endif %}
use Symfony\Bundle\FrameworkBundle\Controller\AbstractController;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Attribute\Route;
use Symfony\Component\Security\Http\Attribute\IsGranted;

/**
 * {{ entity.entityLabel }} Controller (Generated Base Class)
 *
 * This class is ALWAYS regenerated from CSV. DO NOT edit this file.
 * Add custom actions to {{ entity.entityName }}Controller.php instead.
 *
 * @generated by Luminai Code Generator
 */
#[Route('/{{ entity.getSnakeCaseName()|replace({'_': '-'}) }}')]
abstract class {{ className }} extends AbstractController
{
    public function __construct(
        protected readonly {{ entity.entityName }}Repository $repository{% if entity.hasOrganization %},
        protected readonly OrganizationContext $organizationContext{% endif %}

    ) {}

    /**
     * List all {{ entity.pluralLabel }}
     */
    #[Route('', name: '{{ entity.getSnakeCaseName() }}_index', methods: ['GET'])]
    #[IsGranted('ROLE_USER')]
    public function index(Request $request): Response
    {
        $page = max(1, $request->query->getInt('page', 1));
        $search = $request->query->get('search', '');

{% if entity.searchableFields|length > 0 %}
        if ($search) {
            ${{ entity.getLowercaseName() }}s = $this->repository->search($search, {{ entity.itemsPerPage }});
            $total = count(${{ entity.getLowercaseName() }}s);
        } else {
            ${{ entity.getLowercaseName() }}s = $this->repository->findPaginated($page, {{ entity.itemsPerPage }});
            $total = $this->repository->count();
        }
{% else %}
        ${{ entity.getLowercaseName() }}s = $this->repository->findPaginated($page, {{ entity.itemsPerPage }});
        $total = $this->repository->count();
{% endif %}

        return $this->render('{{ entity.getLowercaseName() }}/index.html.twig', [
            '{{ entity.getLowercaseName() }}s' => ${{ entity.getLowercaseName() }}s,
            'total' => $total,
            'page' => $page,
            'pages' => ceil($total / {{ entity.itemsPerPage }}),
            'search' => $search,
        ]);
    }

    /**
     * Show {{ entity.entityLabel }} details
     */
    #[Route('/{id}', name: '{{ entity.getSnakeCaseName() }}_show', methods: ['GET'])]
    #[IsGranted('ROLE_USER')]
    public function show({{ entity.entityName }} ${{ entity.getLowercaseName() }}): Response
    {
{% if entity.voterEnabled %}
        $this->denyAccessUnlessGranted('VIEW', ${{ entity.getLowercaseName() }});
{% endif %}

        return $this->render('{{ entity.getLowercaseName() }}/show.html.twig', [
            '{{ entity.getLowercaseName() }}' => ${{ entity.getLowercaseName() }},
        ]);
    }

    /**
     * Create new {{ entity.entityLabel }}
     */
    #[Route('/new', name: '{{ entity.getSnakeCaseName() }}_new', methods: ['GET', 'POST'])]
    #[IsGranted('ROLE_USER')]
    public function new(Request $request): Response
    {
        ${{ entity.getLowercaseName() }} = new {{ entity.entityName }}();
{% if entity.hasOrganization %}

        // Set organization from context
        $organization = $this->organizationContext->getOrganization();
        if ($organization) {
            ${{ entity.getLowercaseName() }}->setOrganization($organization);
        }
{% endif %}

        $form = $this->createForm({{ entity.entityName }}Type::class, ${{ entity.getLowercaseName() }});
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $this->repository->save(${{ entity.getLowercaseName() }}, true);

            $this->addFlash('success', '{{ entity.entityLabel }} created successfully.');

            return $this->redirectToRoute('{{ entity.getSnakeCaseName() }}_index');
        }

        return $this->render('{{ entity.getLowercaseName() }}/form.html.twig', [
            '{{ entity.getLowercaseName() }}' => ${{ entity.getLowercaseName() }},
            'form' => $form,
            'is_edit' => false,
        ]);
    }

    /**
     * Edit {{ entity.entityLabel }}
     */
    #[Route('/{id}/edit', name: '{{ entity.getSnakeCaseName() }}_edit', methods: ['GET', 'POST'])]
    #[IsGranted('ROLE_USER')]
    public function edit(Request $request, {{ entity.entityName }} ${{ entity.getLowercaseName() }}): Response
    {
{% if entity.voterEnabled %}
        $this->denyAccessUnlessGranted('EDIT', ${{ entity.getLowercaseName() }});
{% endif %}

        $form = $this->createForm({{ entity.entityName }}Type::class, ${{ entity.getLowercaseName() }});
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            $this->repository->save(${{ entity.getLowercaseName() }}, true);

            $this->addFlash('success', '{{ entity.entityLabel }} updated successfully.');

            return $this->redirectToRoute('{{ entity.getSnakeCaseName() }}_index');
        }

        return $this->render('{{ entity.getLowercaseName() }}/form.html.twig', [
            '{{ entity.getLowercaseName() }}' => ${{ entity.getLowercaseName() }},
            'form' => $form,
            'is_edit' => true,
        ]);
    }

    /**
     * Delete {{ entity.entityLabel }}
     */
    #[Route('/{id}', name: '{{ entity.getSnakeCaseName() }}_delete', methods: ['POST'])]
    #[IsGranted('ROLE_USER')]
    public function delete(Request $request, {{ entity.entityName }} ${{ entity.getLowercaseName() }}): Response
    {
{% if entity.voterEnabled %}
        $this->denyAccessUnlessGranted('DELETE', ${{ entity.getLowercaseName() }});
{% endif %}

        if ($this->isCsrfTokenValid('delete_{{ entity.getSnakeCaseName() }}_' . ${{ entity.getLowercaseName() }}->getId(), $request->request->get('_token'))) {
            $this->repository->remove(${{ entity.getLowercaseName() }}, true);

            $this->addFlash('success', '{{ entity.entityLabel }} deleted successfully.');
        }

        return $this->redirectToRoute('{{ entity.getSnakeCaseName() }}_index');
    }
}
