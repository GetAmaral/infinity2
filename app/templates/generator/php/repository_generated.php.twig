<?php

declare(strict_types=1);

namespace {{ namespace }};

use App\Entity\{{ entity.entityName }};
use Doctrine\Bundle\DoctrineBundle\Repository\ServiceEntityRepository;
use Doctrine\Persistence\ManagerRegistry;
use Doctrine\ORM\QueryBuilder;

/**
 * {{ entity.entityName }} Repository (Generated Base Class)
 *
 * This class is ALWAYS regenerated from CSV. DO NOT edit this file.
 * Add custom queries to {{ entity.entityName }}Repository.php instead.
 *
 * @generated by Luminai Code Generator
 * @method {{ entity.entityName }}|null find($id, $lockMode = null, $lockVersion = null)
 * @method {{ entity.entityName }}|null findOneBy(array $criteria, array $orderBy = null)
 * @method {{ entity.entityName }}[]    findAll()
 * @method {{ entity.entityName }}[]    findBy(array $criteria, array $orderBy = null, $limit = null, $offset = null)
 */
abstract class {{ className }} extends ServiceEntityRepository
{
    public function __construct(ManagerRegistry $registry)
    {
        parent::__construct($registry, {{ entity.entityName }}::class);
    }

    /**
     * Save entity
     */
    public function save({{ entity.entityName }} $entity, bool $flush = false): void
    {
        $this->getEntityManager()->persist($entity);

        if ($flush) {
            $this->getEntityManager()->flush();
        }
    }

    /**
     * Remove entity
     */
    public function remove({{ entity.entityName }} $entity, bool $flush = false): void
    {
        $this->getEntityManager()->remove($entity);

        if ($flush) {
            $this->getEntityManager()->flush();
        }
    }

{% if entity.searchableFields|length > 0 %}
    /**
     * Get searchable fields for full-text search
     */
    protected function getSearchableFields(): array
    {
        return [
{% for field in entity.searchableFields %}
            '{{ field }}',
{% endfor %}
        ];
    }

    /**
     * Search {{ entity.pluralLabel }} by term
     *
     * @return {{ entity.entityName }}[]
     */
    public function search(string $term, int $limit = 20): array
    {
        $qb = $this->createQueryBuilder('e');

        if (!empty($term)) {
            $orX = $qb->expr()->orX();
            foreach ($this->getSearchableFields() as $field) {
                $orX->add($qb->expr()->like("e.{$field}", ':term'));
            }
            $qb->andWhere($orX)
               ->setParameter('term', '%' . $term . '%');
        }

        return $qb->setMaxResults($limit)
                  ->orderBy('e.createdAt', 'DESC')
                  ->getQuery()
                  ->getResult();
    }
{% endif %}

{% if entity.filterableFields|length > 0 %}
    /**
     * Create filtered query builder
     */
    public function createFilteredQueryBuilder(array $filters = []): QueryBuilder
    {
        $qb = $this->createQueryBuilder('e');

{% for field in entity.filterableFields %}
        if (isset($filters['{{ field }}'])) {
            $qb->andWhere('e.{{ field }} = :{{ field }}')
               ->setParameter('{{ field }}', $filters['{{ field }}']);
        }
{% endfor %}

        return $qb;
    }
{% endif %}

    /**
     * Count all {{ entity.pluralLabel }}
     */
    public function count(array $criteria = []): int
    {
        $qb = $this->createQueryBuilder('e')
            ->select('COUNT(e.id)');

        foreach ($criteria as $field => $value) {
            $qb->andWhere("e.{$field} = :{$field}")
               ->setParameter($field, $value);
        }

        return (int) $qb->getQuery()->getSingleScalarResult();
    }

    /**
     * Find paginated results
     *
     * @return {{ entity.entityName }}[]
     */
    public function findPaginated(int $page = 1, int $limit = {{ entity.itemsPerPage }}, array $orderBy = []): array
    {
        $qb = $this->createQueryBuilder('e');

        // Apply ordering
{% if entity.order|length > 0 %}
        if (empty($orderBy)) {
{% for field, direction in entity.order %}
            $qb->addOrderBy('e.{{ field }}', '{{ direction|upper }}');
{% endfor %}
        } else {
            foreach ($orderBy as $field => $direction) {
                $qb->addOrderBy("e.{$field}", $direction);
            }
        }
{% else %}
        foreach ($orderBy as $field => $direction) {
            $qb->addOrderBy("e.{$field}", $direction);
        }
{% endif %}

        return $qb->setFirstResult(($page - 1) * $limit)
                  ->setMaxResults($limit)
                  ->getQuery()
                  ->getResult();
    }
}
