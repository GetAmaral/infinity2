<?php

declare(strict_types=1);

namespace App\Tests\Entity;

use App\Entity\{{ entity.entityName }};
{% if entity.hasOrganization %}
use App\Entity\Organization;
{% endif %}
use PHPUnit\Framework\TestCase;

/**
 * {{ entity.entityName }} Entity Test
 *
 * Tests entity properties, getters, setters, and validation
 *
 * @generated by Luminai Code Generator
 */
class {{ entity.entityName }}Test extends TestCase
{
    private {{ entity.entityName }} ${{ entity.getLowercaseName() }};

    protected function setUp(): void
    {
        $this->{{ entity.getLowercaseName() }} = new {{ entity.entityName }}();
    }

{% for property in entity.properties %}
{% if not property.isRelationship() %}
    public function testGet{{ property.propertyName|capitalize }}(): void
    {
        $value = {{ property.getPhpType() == 'string' ? "'test value'" : (property.getPhpType() == 'int' ? '42' : (property.getPhpType() == 'bool' ? 'true' : (property.getPhpType() == 'float' ? '99.99' : 'null'))) }};
        $this->{{ entity.getLowercaseName() }}->set{{ property.propertyName|capitalize }}($value);

        $this->assertEquals($value, $this->{{ entity.getLowercaseName() }}->get{{ property.propertyName|capitalize }}());
    }

{% endif %}
{% endfor %}
    public function test__toString(): void
    {
{% set nameProperty = null %}
{% for property in entity.properties %}
{% if property.propertyName == 'name' %}
{% set nameProperty = property %}
{% endif %}
{% endfor %}
{% if nameProperty %}
        $this->{{ entity.getLowercaseName() }}->setName('Test Name');
        $this->assertEquals('Test Name', (string) $this->{{ entity.getLowercaseName() }});
{% else %}
        $result = (string) $this->{{ entity.getLowercaseName() }};
        $this->assertIsString($result);
{% endif %}
    }

    public function testCreatedAtIsSet(): void
    {
        $this->assertInstanceOf(\DateTimeImmutable::class, $this->{{ entity.getLowercaseName() }}->getCreatedAt());
    }

    public function testUpdatedAtIsSet(): void
    {
        $this->assertInstanceOf(\DateTimeImmutable::class, $this->{{ entity.getLowercaseName() }}->getUpdatedAt());
    }
{% if entity.hasOrganization %}

    public function testOrganization(): void
    {
        $organization = new Organization();
        $this->{{ entity.getLowercaseName() }}->setOrganization($organization);

        $this->assertSame($organization, $this->{{ entity.getLowercaseName() }}->getOrganization());
    }
{% endif %}
}
