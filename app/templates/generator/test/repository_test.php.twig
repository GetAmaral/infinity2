<?php

declare(strict_types=1);

namespace App\Tests\Repository;

use App\Entity\{{ entity.entityName }};
use App\Repository\{{ entity.entityName }}Repository;
{% if entity.hasOrganization %}
use App\Entity\Organization;
{% endif %}
use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase;
use Doctrine\ORM\EntityManagerInterface;

/**
 * {{ entity.entityName }} Repository Test
 *
 * Tests repository methods: search, filters, custom queries
 *
 * @generated by Luminai Code Generator
 */
class {{ entity.entityName }}RepositoryTest extends KernelTestCase
{
    private EntityManagerInterface $entityManager;
    private {{ entity.entityName }}Repository $repository;

    protected function setUp(): void
    {
        self::bootKernel();
        $this->entityManager = self::getContainer()->get('doctrine')->getManager();
        $this->repository = $this->entityManager->getRepository({{ entity.entityName }}::class);

        // Clean up database
        foreach ($this->repository->findAll() as $entity) {
            $this->entityManager->remove($entity);
        }
        $this->entityManager->flush();
    }

    protected function tearDown(): void
    {
        parent::tearDown();
        $this->entityManager->close();
    }

    public function testFindAll(): void
    {
        ${{ entity.getLowercaseName() }}1 = $this->createTest{{ entity.entityName }}('Test 1');
        ${{ entity.getLowercaseName() }}2 = $this->createTest{{ entity.entityName }}('Test 2');

        $results = $this->repository->findAll();

        $this->assertCount(2, $results);
    }
{% if entity.searchableFields|length > 0 %}

    public function testSearch(): void
    {
        ${{ entity.getLowercaseName() }} = $this->createTest{{ entity.entityName }}('Searchable Item');

        $results = $this->repository->search('Searchable');

        $this->assertCount(1, $results);
        $this->assertEquals(${{ entity.getLowercaseName() }}->getId(), $results[0]->getId());
    }

    public function testSearchWithNoResults(): void
    {
        $this->createTest{{ entity.entityName }}('Test Item');

        $results = $this->repository->search('NonExistent');

        $this->assertCount(0, $results);
    }
{% endif %}

    public function testCount(): void
    {
        $this->createTest{{ entity.entityName }}('Test 1');
        $this->createTest{{ entity.entityName }}('Test 2');
        $this->createTest{{ entity.entityName }}('Test 3');

        $count = $this->repository->count([]);

        $this->assertEquals(3, $count);
    }
{% if entity.filterableFields|length > 0 %}

    public function testCreateFilteredQueryBuilder(): void
    {
{% set firstFilterable = entity.filterableFields|first %}
        $filters = ['{{ firstFilterable }}' => 'test_value'];

        $qb = $this->repository->createFilteredQueryBuilder($filters);

        $this->assertStringContainsString('{{ firstFilterable }}', $qb->getDQL());
    }
{% endif %}

    private function createTest{{ entity.entityName }}(string $identifier = 'Test'): {{ entity.entityName }}
    {
        ${{ entity.getLowercaseName() }} = new {{ entity.entityName }}();
{% for property in entity.properties %}
{% if not property.isRelationship() and not property.nullable %}
{% if property.propertyType == 'string' %}
        ${{ entity.getLowercaseName() }}->set{{ property.propertyName|capitalize }}($identifier . ' {{ property.propertyName }}');
{% elseif property.propertyType == 'integer' %}
        ${{ entity.getLowercaseName() }}->set{{ property.propertyName|capitalize }}(42);
{% elseif property.propertyType == 'boolean' %}
        ${{ entity.getLowercaseName() }}->set{{ property.propertyName|capitalize }}(true);
{% endif %}
{% endif %}
{% endfor %}
{% if entity.hasOrganization %}
        ${{ entity.getLowercaseName() }}->setOrganization($this->getOrCreateTestOrganization());
{% endif %}

        $this->entityManager->persist(${{ entity.getLowercaseName() }});
        $this->entityManager->flush();

        return ${{ entity.getLowercaseName() }};
    }
{% if entity.hasOrganization %}

    private function getOrCreateTestOrganization(): Organization
    {
        $orgRepo = $this->entityManager->getRepository(Organization::class);
        $org = $orgRepo->findOneBy(['name' => 'Test Organization']);

        if (!$org) {
            $org = new Organization();
            $org->setName('Test Organization');
            $org->setSlug('test-organization');
            $org->setDescription('Test organization for testing');
            $this->entityManager->persist($org);
            $this->entityManager->flush();
        }

        return $org;
    }
{% endif %}
}
