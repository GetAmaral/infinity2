<?php

declare(strict_types=1);

namespace App\Tests\Controller;

use App\Entity\{{ entity.entityName }};
{% if entity.hasOrganization %}
use App\Entity\Organization;
use App\Entity\User;
{% endif %}
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;
use Symfony\Bundle\FrameworkBundle\KernelBrowser;
use Doctrine\ORM\EntityManagerInterface;

/**
 * {{ entity.entityName }} Controller Test
 *
 * Tests CRUD actions: index, show, create, update, delete
 *
 * @generated by Luminai Code Generator
 */
class {{ entity.entityName }}ControllerTest extends WebTestCase
{
    private KernelBrowser $client;
    private EntityManagerInterface $entityManager;

    protected function setUp(): void
    {
        $this->client = static::createClient();
        $this->entityManager = $this->client->getContainer()
            ->get('doctrine')
            ->getManager();

        // Clean up database
        $this->cleanDatabase();
{% if entity.hasOrganization %}

        // Authenticate with test user
        $this->authenticateUser();
{% endif %}
    }

    protected function tearDown(): void
    {
        parent::tearDown();
        $this->entityManager->close();
    }

    public function testIndex(): void
    {
        $this->client->request('GET', '/{{ entity.getSnakeCaseName() }}');

        $this->assertResponseIsSuccessful();
        $this->assertSelectorTextContains('h1', '{{ entity.pluralLabel }}');
    }

    public function testShow(): void
    {
        ${{ entity.getLowercaseName() }} = $this->createTest{{ entity.entityName }}();

        $this->client->request('GET', '/{{ entity.getSnakeCaseName() }}/' . ${{ entity.getLowercaseName() }}->getId());

        $this->assertResponseIsSuccessful();
    }

    public function testNew(): void
    {
        $this->client->request('GET', '/{{ entity.getSnakeCaseName() }}/new');

        $this->assertResponseIsSuccessful();
        $this->assertSelectorExists('form');
    }

    public function testCreate(): void
    {
        $crawler = $this->client->request('GET', '/{{ entity.getSnakeCaseName() }}/new');

        $form = $crawler->selectButton('Save')->form([
{% for property in entity.properties %}
{% if property.showInForm and not property.isRelationship() %}
{% if property.propertyType == 'string' %}
            '{{ entity.getLowercaseName() }}_type[{{ property.propertyName }}]' => 'Test {{ property.propertyLabel }}',
{% elseif property.propertyType == 'integer' %}
            '{{ entity.getLowercaseName() }}_type[{{ property.propertyName }}]' => '42',
{% elseif property.propertyType == 'boolean' %}
            '{{ entity.getLowercaseName() }}_type[{{ property.propertyName }}]' => '1',
{% endif %}
{% endif %}
{% endfor %}
        ]);

        $this->client->submit($form);

        $this->assertResponseRedirects();
        $this->client->followRedirect();
        $this->assertResponseIsSuccessful();
    }

    public function testEdit(): void
    {
        ${{ entity.getLowercaseName() }} = $this->createTest{{ entity.entityName }}();

        $this->client->request('GET', '/{{ entity.getSnakeCaseName() }}/' . ${{ entity.getLowercaseName() }}->getId() . '/edit');

        $this->assertResponseIsSuccessful();
        $this->assertSelectorExists('form');
    }

    public function testUpdate(): void
    {
        ${{ entity.getLowercaseName() }} = $this->createTest{{ entity.entityName }}();

        $crawler = $this->client->request('GET', '/{{ entity.getSnakeCaseName() }}/' . ${{ entity.getLowercaseName() }}->getId() . '/edit');

        $form = $crawler->selectButton('Save')->form([
{% for property in entity.properties|slice(0, 1) %}
{% if property.showInForm and not property.isRelationship() %}
            '{{ entity.getLowercaseName() }}_type[{{ property.propertyName }}]' => 'Updated Value',
{% endif %}
{% endfor %}
        ]);

        $this->client->submit($form);

        $this->assertResponseRedirects();
    }

    public function testDelete(): void
    {
        ${{ entity.getLowercaseName() }} = $this->createTest{{ entity.entityName }}();
        $id = ${{ entity.getLowercaseName() }}->getId();

        $this->client->request('POST', '/{{ entity.getSnakeCaseName() }}/' . $id, [
            '_method' => 'DELETE',
            '_token' => $this->client->getContainer()->get('security.csrf.token_manager')->getToken('delete' . $id)->getValue()
        ]);

        $this->assertResponseRedirects();

        $this->assertNull(
            $this->entityManager->getRepository({{ entity.entityName }}::class)->find($id)
        );
    }

    private function createTest{{ entity.entityName }}(): {{ entity.entityName }}
    {
        ${{ entity.getLowercaseName() }} = new {{ entity.entityName }}();
{% for property in entity.properties %}
{% if not property.isRelationship() and not property.nullable %}
{% if property.propertyType == 'string' %}
        ${{ entity.getLowercaseName() }}->set{{ property.propertyName|capitalize }}('Test {{ property.propertyLabel }}');
{% elseif property.propertyType == 'integer' %}
        ${{ entity.getLowercaseName() }}->set{{ property.propertyName|capitalize }}(42);
{% elseif property.propertyType == 'boolean' %}
        ${{ entity.getLowercaseName() }}->set{{ property.propertyName|capitalize }}(true);
{% endif %}
{% endif %}
{% endfor %}
{% if entity.hasOrganization %}
        ${{ entity.getLowercaseName() }}->setOrganization($this->getOrCreateTestOrganization());
{% endif %}

        $this->entityManager->persist(${{ entity.getLowercaseName() }});
        $this->entityManager->flush();

        return ${{ entity.getLowercaseName() }};
    }

    private function cleanDatabase(): void
    {
        $repository = $this->entityManager->getRepository({{ entity.entityName }}::class);
        foreach ($repository->findAll() as $entity) {
            $this->entityManager->remove($entity);
        }
        $this->entityManager->flush();
    }
{% if entity.hasOrganization %}

    private function getOrCreateTestOrganization(): Organization
    {
        $orgRepo = $this->entityManager->getRepository(Organization::class);
        $org = $orgRepo->findOneBy(['name' => 'Test Organization']);

        if (!$org) {
            $org = new Organization();
            $org->setName('Test Organization');
            $org->setSlug('test-organization');
            $org->setDescription('Test organization for testing');
            $this->entityManager->persist($org);
            $this->entityManager->flush();
        }

        return $org;
    }

    private function authenticateUser(): void
    {
        $userRepo = $this->entityManager->getRepository(User::class);
        $user = $userRepo->findOneBy(['email' => 'test@example.com']);

        if (!$user) {
            $user = new User();
            $user->setName('Test User');
            $user->setEmail('test@example.com');
            $user->setRoles(['ROLE_USER']);
            $user->setPassword('test');
            $user->setOrganization($this->getOrCreateTestOrganization());
            $this->entityManager->persist($user);
            $this->entityManager->flush();
        }

        $this->client->loginUser($user);
    }
{% endif %}
}
