<?php

declare(strict_types=1);

namespace App\Tests\Security\Voter;

use App\Entity\{{ entity.entityName }};
use App\Entity\User;
{% if entity.hasOrganization %}
use App\Entity\Organization;
{% endif %}
use App\Security\Voter\{{ entity.entityName }}Voter;
use PHPUnit\Framework\TestCase;
use Symfony\Component\Security\Core\Authentication\Token\UsernamePasswordToken;
use Symfony\Component\Security\Core\Authorization\Voter\VoterInterface;

/**
 * {{ entity.entityName }} Voter Test
 *
 * Tests authorization for VIEW, EDIT, DELETE permissions
 *
 * @generated by Luminai Code Generator
 */
class {{ entity.entityName }}VoterTest extends TestCase
{
    private {{ entity.entityName }}Voter $voter;

    protected function setUp(): void
    {
        $this->voter = new {{ entity.entityName }}Voter();
    }
{% for attribute in entity.voterAttributes %}

    public function test{{ attribute }}GrantedForOwner(): void
    {
{% if entity.hasOrganization %}
        $organization = new Organization();
        $organization->setName('Test Org');
        $organization->setSlug('test-org');
        $organization->setDescription('Test');

        $user = $this->createUser(['ROLE_USER'], $organization);
        ${{ entity.getLowercaseName() }} = $this->create{{ entity.entityName }}($organization);
{% else %}
        $user = $this->createUser(['ROLE_USER']);
        ${{ entity.getLowercaseName() }} = $this->create{{ entity.entityName }}();
{% endif %}

        $token = new UsernamePasswordToken($user, 'main', $user->getRoles());

        $result = $this->voter->vote($token, ${{ entity.getLowercaseName() }}, ['{{ attribute }}']);

        $this->assertEquals(VoterInterface::ACCESS_GRANTED, $result);
    }

    public function test{{ attribute }}GrantedForAdmin(): void
    {
{% if entity.hasOrganization %}
        $organization = new Organization();
        $organization->setName('Test Org');
        $organization->setSlug('test-org');
        $organization->setDescription('Test');

        $user = $this->createUser(['ROLE_ADMIN'], $organization);
        ${{ entity.getLowercaseName() }} = $this->create{{ entity.entityName }}($organization);
{% else %}
        $user = $this->createUser(['ROLE_ADMIN']);
        ${{ entity.getLowercaseName() }} = $this->create{{ entity.entityName }}();
{% endif %}

        $token = new UsernamePasswordToken($user, 'main', $user->getRoles());

        $result = $this->voter->vote($token, ${{ entity.getLowercaseName() }}, ['{{ attribute }}']);

        $this->assertEquals(VoterInterface::ACCESS_GRANTED, $result);
    }
{% if entity.hasOrganization %}

    public function test{{ attribute }}DeniedForDifferentOrganization(): void
    {
        $org1 = new Organization();
        $org1->setName('Org 1');
        $org1->setSlug('org-1');
        $org1->setDescription('Test');

        $org2 = new Organization();
        $org2->setName('Org 2');
        $org2->setSlug('org-2');
        $org2->setDescription('Test');

        $user = $this->createUser(['ROLE_USER'], $org1);
        ${{ entity.getLowercaseName() }} = $this->create{{ entity.entityName }}($org2);

        $token = new UsernamePasswordToken($user, 'main', $user->getRoles());

        $result = $this->voter->vote($token, ${{ entity.getLowercaseName() }}, ['{{ attribute }}']);

        $this->assertEquals(VoterInterface::ACCESS_DENIED, $result);
    }
{% endif %}
{% endfor %}

    private function createUser(array $roles{% if entity.hasOrganization %}, Organization $organization{% endif %}): User
    {
        $user = new User();
        $user->setName('Test User');
        $user->setEmail('test@example.com');
        $user->setRoles($roles);
        $user->setPassword('test');
{% if entity.hasOrganization %}
        $user->setOrganization($organization);
{% endif %}

        return $user;
    }

    private function create{{ entity.entityName }}({% if entity.hasOrganization %}Organization $organization{% endif %}): {{ entity.entityName }}
    {
        ${{ entity.getLowercaseName() }} = new {{ entity.entityName }}();
{% for property in entity.properties %}
{% if not property.isRelationship() and not property.nullable %}
{% if property.propertyType == 'string' %}
        ${{ entity.getLowercaseName() }}->set{{ property.propertyName|capitalize }}('Test {{ property.propertyLabel }}');
{% elseif property.propertyType == 'integer' %}
        ${{ entity.getLowercaseName() }}->set{{ property.propertyName|capitalize }}(42);
{% elseif property.propertyType == 'boolean' %}
        ${{ entity.getLowercaseName() }}->set{{ property.propertyName|capitalize }}(true);
{% endif %}
{% endif %}
{% endfor %}
{% if entity.hasOrganization %}
        ${{ entity.getLowercaseName() }}->setOrganization($organization);
{% endif %}

        return ${{ entity.getLowercaseName() }};
    }
}
