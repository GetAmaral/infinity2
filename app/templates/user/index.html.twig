{% extends '_base_entity_list.html.twig' %}

{#
 # Data-Bind Template System for Users
 # =====================================
 # Example API response for User:
 # {
 #   "id": "uuid-here",
 #   "name": "John Doe",
 #   "email": "john@example.com",
 #   "organizationId": "uuid-here",
 #   "organizationName": "Acme Corporation",
 #   "roles": "Admin, Manager",
 #   "isVerified": true,
 #   "isLocked": false,
 #   "lastLoginAt": "2025-01-15T14:30:00+00:00",
 #   "lastLoginFormatted": "Jan 15, 2025 14:30",
 #   "ownedCoursesCount": 5,
 #   "enrolledCoursesCount": 12,
 #   "createdAt": "2025-01-01T00:00:00+00:00",
 #   "createdAtFormatted": "Jan 01, 2025"
 # }
#}

{# Customize page icon #}
{% block page_icon %}<i class="bi bi-people text-neon fs-2 me-3"></i>{% endblock %}

{# Add import button next to create button #}
{% block header_actions %}
    <div class="d-flex gap-2">
        <a href="{{ path('user_import_upload') }}" class="btn btn-outline-primary">
            <i class="bi bi-upload me-2"></i>{{ 'user.import.button'|trans({}, 'user') }}
        </a>
        {{ button_create(path('user_new'), 'button.add', 'messages', null, ('button.add')|trans, 'USER_CREATE') }}
    </div>
{% endblock %}

{# Grid View Template #}
{% block grid_view_item_template %}
    <div class="col">
        <div class="luminai-card h-100 p-4" style="cursor: pointer;" onclick="window.location.href='/user/' + this.closest('[data-entity-id]').dataset.entityId">
            <div class="d-flex justify-content-between align-items-start mb-3">
                <div onclick="event.stopPropagation();" class="dropdown me-3">
                    {{ button_dropdown_toggle() }}
                    <ul class="dropdown-menu dropdown-menu-dark" style="background: var(--luminai-dark-surface); z-index: 1060;">
                        <li><a class="dropdown-item" onclick="window.location.href='/user/'+this.closest('[data-entity-id]').dataset.entityId"><i class="bi bi-eye me-2"></i>{{ 'common.action.view.details'|trans }}</a></li>
                        <li>{{ button_edit('{entityId}', '/user/{entityId}/edit', null, 'messages', label='button.edit') }}</li>
                        <li><hr class="dropdown-divider"></li>
                        <li>{{ button_delete('{entityId}', '/user/{entityId}/delete', 'confirm.delete.entity', label='button.delete') }}</li>
                    </ul>
                </div>
                <div class="d-flex align-items-center flex-grow-1">
                    <div class="rounded-3 d-flex align-items-center justify-content-center me-3"
                         style="width: 48px; height: 48px; background: linear-gradient(135deg, #22c55e, #16a34a);">
                        <i class="bi bi-person-circle text-white fs-5"></i>
                    </div>
                    <div class="flex-grow-1">
                        <div class="d-flex align-items-center gap-2 mb-1">
                            <h5 class="mb-0 text-white" data-bind="name" data-bind-text></h5>
                            <span class="badge bg-success" data-bind-if="isVerified" title="{{ 'user.verified'|trans({}, 'user') }}">
                                <i class="bi bi-patch-check-fill"></i>
                            </span>
                            <span class="badge bg-danger" data-bind-if="isLocked" title="{{ 'user.locked'|trans({}, 'user') }}">
                                <i class="bi bi-lock-fill"></i>
                            </span>
                        </div>
                        <p class="text-muted mb-2" style="font-size: 0.85rem;" data-bind="email" data-bind-text></p>
                        <div class="d-flex gap-1 flex-wrap">
                            <span class="badge bg-info" data-bind-if="organizationName">
                                <i class="bi bi-building me-1"></i><span data-bind="organizationName" data-bind-text></span>
                            </span>
                            <div class="user-roles-container d-inline-flex gap-1 flex-wrap">
                                <span class="user-roles-data d-none" data-bind="roles" data-bind-text></span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="mt-auto pt-2 border-top" style="border-color: rgba(255, 255, 255, 0.1) !important;">
                <div class="d-flex justify-content-between align-items-center">
                    <small class="text-muted" data-bind-if="lastLoginFormatted">
                        <i class="bi bi-clock me-1"></i><span data-bind="lastLoginFormatted" data-bind-text></span>
                    </small>
                    <small class="text-muted" data-bind-if="!lastLoginFormatted">
                        <i class="bi bi-calendar-plus me-1"></i><span data-bind="createdAtFormatted" data-bind-text></span>
                    </small>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{# List View Template #}
{% block list_view_item_template %}
    <div class="luminai-card mb-3 p-3">
        <div class="d-flex align-items-center">
            <div onclick="event.stopPropagation();" class="dropdown me-3">
                {{ button_dropdown_toggle() }}
                <ul class="dropdown-menu dropdown-menu-dark" style="background: var(--luminai-dark-surface); z-index: 1060;">
                    <li><a class="dropdown-item" onclick="window.location.href='/user/'+this.closest('[data-entity-id]').dataset.entityId"><i class="bi bi-eye me-2"></i>{{ 'common.action.view.details'|trans }}</a></li>
                    <li>{{ button_edit('{entityId}', '/user/{entityId}/edit', null, 'messages') }}</li>
                    <li><hr class="dropdown-divider"></li>
                    <li>{{ button_delete('{entityId}', '/user/{entityId}/delete', 'confirm.delete.entity') }}</li>
                </ul>
            </div>
            <div class="d-flex align-items-center flex-grow-1" style="cursor: pointer;" onclick="window.location.href='/user/' + this.closest('[data-entity-id]').dataset.entityId">
                <div class="rounded-3 d-flex align-items-center justify-content-center me-3"
                     style="width: 40px; height: 40px; background: linear-gradient(135deg, #22c55e, #16a34a);">
                    <i class="bi bi-person-circle text-white"></i>
                </div>
                <div class="flex-grow-1">
                    <div class="d-flex align-items-center gap-2 mb-1 flex-wrap">
                        <h6 class="mb-0 text-white" data-bind="name" data-bind-text></h6>
                        <span class="badge bg-success" data-bind-if="isVerified"><i class="bi bi-patch-check-fill"></i></span>
                        <span class="badge bg-danger" data-bind-if="isLocked"><i class="bi bi-lock-fill"></i></span>
                        <span class="badge bg-info" data-bind-if="organizationName">
                            <i class="bi bi-building me-1"></i><span data-bind="organizationName" data-bind-text></span>
                        </span>
                        <div class="user-roles-container d-inline-flex gap-1 flex-wrap">
                            <span class="user-roles-data d-none" data-bind="roles" data-bind-text></span>
                        </div>
                    </div>
                    <div class="text-muted" style="font-size: 0.85rem;">
                        <span data-bind="email" data-bind-text></span>
                        <span class="mx-2">•</span>
                        <i class="bi bi-book me-1"></i><span data-bind="ownedCoursesCount" data-bind-text></span>/<!--
                     --><span data-bind="enrolledCoursesCount" data-bind-text></span> {{ 'user.courses.label'|trans({}, 'user') }}
                        <span class="mx-2" data-bind-if="lastLoginFormatted">•</span>
                        <span data-bind-if="lastLoginFormatted">
                            <i class="bi bi-clock me-1"></i><span data-bind="lastLoginFormatted" data-bind-text></span>
                        </span>
                    </div>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{# Table Headers #}
{% block table_headers %}
    <th style="width: 60px;">{{ 'common.label.actions'|trans }}</th>
    <th data-sort-field="name">{{ 'user.name'|trans({}, 'user') }}</th>
    <th data-sort-field="email">{{ 'user.email'|trans({}, 'user') }}</th>
    <th class="d-none d-lg-table-cell">{{ 'user.roles'|trans({}, 'user') }}</th>
    <th class="d-none d-md-table-cell text-center" data-sort-field="isVerified" data-field-type="boolean">{{ 'user.verified'|trans({}, 'user') }}</th>
    <th class="d-none d-xl-table-cell text-center">{{ 'user.courses'|trans({}, 'user') }}</th>
    <th class="d-none d-xl-table-cell" data-sort-field="lastLoginAt" data-field-type="date">{{ 'user.last.login'|trans({}, 'user') }}</th>
{% endblock %}

{# Table Row Template #}
{% block table_view_row_template %}
    <tr style="cursor: pointer;" onclick="window.location.href='/user/' + this.closest('[data-entity-id]').dataset.entityId">
        <td onclick="event.stopPropagation();">
            <div class="dropdown">
                {{ button_dropdown_toggle() }}
                <ul class="dropdown-menu dropdown-menu-dark" style="background: var(--luminai-dark-surface); z-index: 1060;">
                    <li><a class="dropdown-item" onclick="window.location.href='/user/'+this.closest('[data-entity-id]').dataset.entityId"><i class="bi bi-eye me-2"></i>{{ 'common.action.view.details'|trans }}</a></li>
                    <li>{{ button_edit('{entityId}', '/user/{entityId}/edit', null, 'messages') }}</li>
                    <li><hr class="dropdown-divider"></li>
                    <li>{{ button_delete('{entityId}', '/user/{entityId}/delete', 'confirm.delete.entity') }}</li>
                </ul>
            </div>
        </td>
        <td>
            <div class="d-flex align-items-center gap-2">
                <div class="rounded-3 d-flex align-items-center justify-content-center"
                     style="width: 32px; height: 32px; background: linear-gradient(135deg, #22c55e, #16a34a);">
                    <i class="bi bi-person-circle text-white"></i>
                </div>
                <span class="text-white" data-bind="name" data-bind-text></span>
                <span class="badge bg-success" data-bind-if="isVerified"><i class="bi bi-patch-check-fill"></i></span>
                <span class="badge bg-danger" data-bind-if="isLocked"><i class="bi bi-lock-fill"></i></span>
            </div>
        </td>
        <td class="text-muted" data-bind="email" data-bind-text></td>
        <td class="d-none d-lg-table-cell">
            <div class="user-roles-container d-inline-flex gap-1 flex-wrap">
                <span class="user-roles-data d-none" data-bind="roles" data-bind-text></span>
            </div>
        </td>
        <td class="d-none d-md-table-cell text-center">
            <span class="badge bg-success" data-bind-if="isVerified">
                <i class="bi bi-patch-check-fill me-1"></i>{{ 'user.verified'|trans({}, 'user') }}
            </span>
            <span class="badge bg-warning" data-bind-if="!isVerified">
                <i class="bi bi-exclamation-circle me-1"></i>{{ 'user.unverified'|trans({}, 'user') }}
            </span>
        </td>
        <td class="d-none d-xl-table-cell text-center">
            <div class="d-flex gap-2 justify-content-center align-items-center">
                <span class="badge bg-primary">
                    <i class="bi bi-mortarboard me-1"></i><span data-bind="ownedCoursesCount" data-bind-text></span>
                </span>
                <span class="badge bg-success">
                    <i class="bi bi-book me-1"></i><span data-bind="enrolledCoursesCount" data-bind-text></span>
                </span>
            </div>
        </td>
        <td class="d-none d-xl-table-cell text-muted" style="font-size: 0.85rem;">
            <span data-bind-if="lastLoginFormatted">
                <i class="bi bi-clock me-1"></i><span data-bind="lastLoginFormatted" data-bind-text></span>
            </span>
            <span data-bind-if="!lastLoginFormatted" class="fst-italic">{{ 'user.never.logged.in'|trans({}, 'user') }}</span>
        </td>
    </tr>
{% endblock %}

{% block javascripts %}
{{ parent() }}
<script>
// Process roles display - show max 3 roles with tooltip for rest
function processRoleContainer(container) {
    // Skip if already processed
    if (container.dataset.processed === 'true') {
        return;
    }

    // Find the hidden data element
    const dataElement = container.querySelector('.user-roles-data');
    if (!dataElement) {
        return;
    }

    const rolesText = dataElement.textContent.trim();
    if (!rolesText) {
        return;
    }

    const rolesArray = rolesText.split(',').map(r => r.trim()).filter(r => r);
    if (rolesArray.length === 0) {
        return;
    }

    // Mark as processed
    container.dataset.processed = 'true';

    // Show first 3 roles
    const visibleRoles = rolesArray.slice(0, 3);
    visibleRoles.forEach(function(role) {
        const badge = document.createElement('span');
        badge.className = 'badge bg-secondary me-1';
        badge.textContent = role;
        badge.style.fontSize = '0.7rem';
        badge.style.padding = '0.25rem 0.5rem';
        container.appendChild(badge);
    });

    // Add "+N more" badge with tooltip if needed
    if (rolesArray.length > 3) {
        const remaining = rolesArray.length - 3;
        const moreBadge = document.createElement('span');
        moreBadge.className = 'badge bg-dark';
        moreBadge.textContent = '+' + remaining;
        moreBadge.style.fontSize = '0.7rem';
        moreBadge.style.padding = '0.25rem 0.5rem';
        moreBadge.style.cursor = 'help';
        moreBadge.setAttribute('data-bs-toggle', 'tooltip');
        moreBadge.setAttribute('data-bs-html', 'true');
        moreBadge.setAttribute('data-bs-placement', 'top');
        moreBadge.setAttribute('title', '<strong>All Roles:</strong><br>' + rolesArray.join('<br>'));

        container.appendChild(moreBadge);

        // Initialize Bootstrap tooltip
        if (window.bootstrap && window.bootstrap.Tooltip) {
            new bootstrap.Tooltip(moreBadge);
        }
    }
}

// Watch for role data elements to be populated by data-bind
function watchRoleContainers() {
    const containers = document.querySelectorAll('.user-roles-container');

    containers.forEach(function(container) {
        const dataElement = container.querySelector('.user-roles-data');
        if (!dataElement) {
            return;
        }

        const rolesText = dataElement.textContent.trim();

        // Process immediately if already has content
        if (rolesText) {
            processRoleContainer(container);
        } else {
            // Watch for content to be added to the data element
            const observer = new MutationObserver(function(mutations) {
                const newText = dataElement.textContent.trim();
                if (newText) {
                    processRoleContainer(container);
                    observer.disconnect();
                }
            });

            observer.observe(dataElement, {
                childList: true,
                characterData: true,
                subtree: true
            });
        }
    });
}

// Global observer for role containers
const roleObserver = new MutationObserver(function(mutations) {
    mutations.forEach(function(mutation) {
        mutation.addedNodes.forEach(function(node) {
            if (node.nodeType === 1) { // Element node
                // Check if the node itself is a role container
                if (node.classList && node.classList.contains('user-roles-container')) {
                    const dataElement = node.querySelector('.user-roles-data');
                    if (dataElement && dataElement.textContent.trim()) {
                        processRoleContainer(node);
                    } else if (dataElement) {
                        // Watch this specific data element
                        const dataObserver = new MutationObserver(function() {
                            if (dataElement.textContent.trim()) {
                                processRoleContainer(node);
                                dataObserver.disconnect();
                            }
                        });
                        dataObserver.observe(dataElement, {
                            childList: true,
                            characterData: true,
                            subtree: true
                        });
                    }
                }
                // Check descendants for role containers
                if (node.querySelectorAll) {
                    const containers = node.querySelectorAll('.user-roles-container');
                    containers.forEach(function(container) {
                        const dataElement = container.querySelector('.user-roles-data');
                        if (dataElement && dataElement.textContent.trim()) {
                            processRoleContainer(container);
                        } else if (dataElement) {
                            // Watch this specific data element
                            const dataObserver = new MutationObserver(function() {
                                if (dataElement.textContent.trim()) {
                                    processRoleContainer(container);
                                    dataObserver.disconnect();
                                }
                            });
                            dataObserver.observe(dataElement, {
                                childList: true,
                                characterData: true,
                                subtree: true
                            });
                        }
                    });
                }
            }
        });
    });
});

// Run on various events
document.addEventListener('DOMContentLoaded', function() {
    watchRoleContainers();

    // Observe the entire document body for new containers
    roleObserver.observe(document.body, {
        childList: true,
        subtree: true
    });
});

document.addEventListener('turbo:load', function() {
    watchRoleContainers();
});

document.addEventListener('list:updated', function() {
    // Reset processed flags and re-watch on list update
    document.querySelectorAll('.user-roles-container').forEach(function(container) {
        container.dataset.processed = 'false';
        // Remove existing badges but keep the data element
        Array.from(container.children).forEach(function(child) {
            if (!child.classList.contains('user-roles-data')) {
                child.remove();
            }
        });
    });
    watchRoleContainers();
});
</script>
{% endblock %}
