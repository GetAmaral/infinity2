<?php

declare(strict_types=1);

namespace {{ repository_generated_namespace }};

use {{ entity_namespace }}\{{ entity_name }};
use App\Repository\Base\BaseRepository;

/**
 * {{ entity_name }}Repository (Generated Base Class)
 *
 * {{ entity_description }}
 *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom query methods to {{ entity_name }}Repository.php instead.
 *
 * Provides:
 * - Full-text search with UNACCENT (inherited from BaseRepository)
 * - Multi-column filtering and sorting
 * - Pagination with metadata
 * - Date range and boolean filters
 * - Relationship field filtering
 *
 * @extends BaseRepository<{{ entity_name }}>
 * @generated by Genmax Code Generator
 */
abstract class {{ entity_name }}RepositoryGenerated extends BaseRepository
{
    /**
     * Get entity name for search configuration
     */
    protected function getEntityName(): string
    {
        return '{{ entity_name|lower }}';
    }

    /**
     * Get searchable fields for full-text search
     * These fields will be searched using UNACCENT and LIKE
     *
     * @return array<string>
     */
    protected function getSearchableFields(): array
    {
        return [
{%- for property in searchable_properties %}
            '{{ property.name }}',
{%- endfor %}
        ];
    }

    /**
     * Define sortable fields mapping
     * Maps API field names to entity properties
     *
     * @return array<string, string>
     */
    protected function getSortableFields(): array
    {
        return [
{%- for property in sortable_properties %}
            '{{ property.apiName }}' => '{{ property.entityPath }}',
{%- endfor %}
        ];
    }

    /**
     * Define filterable fields (excludes computed/aggregate fields)
     *
     * @return array<string, string>
     */
    protected function getFilterableFields(): array
    {
        return [
{%- for property in filterable_properties %}
            '{{ property.apiName }}' => '{{ property.entityPath }}',
{%- endfor %}
        ];
    }

    /**
     * Define relationship filter mappings
     * Allows filtering by related entity fields
     *
     * Example: 'ownerName' filters by owner.name
     *
     * @return array<string, array{relation: string, field: string}>
     */
    protected function getRelationshipFilterFields(): array
    {
        return [
{%- for property in relationship_filter_properties %}
            '{{ property.apiName }}' => ['relation' => '{{ property.relation }}', 'field' => '{{ property.field }}'],
{%- endfor %}
        ];
    }

    /**
     * Define boolean fields for equality filtering
     *
     * @return array<string>
     */
    protected function getBooleanFilterFields(): array
    {
        return [
{%- for property in boolean_properties %}
            '{{ property.name }}',
{%- endfor %}
        ];
    }

    /**
     * Define date/datetime fields for range filtering
     * Supports format: "from:to" (e.g., "2024-01-01:2024-12-31")
     *
     * @return array<string>
     */
    protected function getDateFilterFields(): array
    {
        return [
{%- for property in date_properties %}
            '{{ property.name }}',
{%- endfor %}
        ];
    }

    /**
     * Transform {{ entity_name }} entity to array for API response
     * Override this method to customize API output format
     *
     * @param object $entity
     * @return array<string, mixed>
     */
    protected function entityToArray(object $entity): array
    {
        assert($entity instanceof {{ entity_name }});

        return [
{% for property in output_properties %}
{% if property.isScalar %}
            '{{ property.apiName }}' => {{ property.getter|raw }},
{% elseif property.isDate %}
            '{{ property.apiName }}' => {{ property.getter|raw }}?->format('c'),
{% elseif property.isUuid %}
            '{{ property.apiName }}' => {{ property.getter|raw }}?->toString() ?? '',
{% elseif property.isRelation %}
            '{{ property.apiName }}' => {{ property.getter|raw }}?->getId()?->toString() ?? '',
            '{{ property.apiName }}Name' => {{ property.getter|raw }}?->getName() ?? '',
{% elseif property.isCollection %}
            '{{ property.apiName }}Count' => {{ property.getter|raw }}->count(),
{% endif %}
{% endfor %}
            'createdAt' => $entity->getCreatedAt()->format('c'),
            'updatedAt' => $entity->getUpdatedAt()->format('c'),
        ];
    }
}
