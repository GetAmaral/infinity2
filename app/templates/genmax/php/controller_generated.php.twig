<?php

declare(strict_types=1);

namespace {{ generatedNamespace }};

use {{ namespace }}\Base\{{ baseControllerClass }};
use App\Entity\{{ entityName }};
use App\Repository\{{ repositoryClass }};
use App\Security\Voter\{{ voterClass }};
{% if operations.new or operations.edit %}
use App\Form\{{ formTypeClass }};
{% endif %}
use App\Service\ListPreferencesService;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\Security\Csrf\CsrfToken;
use Symfony\Component\Security\Csrf\CsrfTokenManagerInterface;
use Symfony\Component\Security\Core\Exception\InvalidCsrfTokenException;
use Symfony\Contracts\Translation\TranslatorInterface;

/**
 * Generated Base Controller for {{ entityName }}
 *
 * ⚠️ WARNING: This file is ALWAYS regenerated by Genmax
 * DO NOT EDIT THIS FILE - Edit {{ entityName }}Controller instead
 *
 * @generated
 * @codeCoverageIgnore
 */
abstract class {{ entityName }}ControllerGenerated extends {{ baseControllerClass }}
{
    public function __construct(
        protected readonly EntityManagerInterface $entityManager,
        protected readonly {{ repositoryClass }} $repository,
        protected readonly ListPreferencesService $listPreferencesService,
        protected readonly TranslatorInterface $translator,
        protected readonly CsrfTokenManagerInterface $csrfTokenManager,
    ) {}

    // ====================================
    // ABSTRACT METHOD IMPLEMENTATIONS
    // ====================================

    /**
     * Get the repository for this entity
     */
    protected function getRepository(): {{ repositoryClass }}
    {
        return $this->repository;
    }

    /**
     * Get the plural name for this entity
     */
    protected function getEntityPluralName(): string
    {
        return '{{ entityPluralVariable }}';
    }

    /**
     * Convert entity to array for API responses
     *
     * ⚠️ IMPORTANT: Enum Properties Stored as Strings
     * -------------------------------------------------
     * Properties with enum-backed types (like InputType) are stored as STRINGS
     * in the database and getters return strings directly, NOT enum objects.
     *
     * ❌ WRONG:   $entity->getType()->value   (Error: "Attempt to read property 'value' on string")
     * ✅ CORRECT: $entity->getType()          (Already a string - 'fully_completed')
     *
     * If you need the enum object for business logic, use:
     *    InputType::from($entity->getType())
     */
    protected function entityToArray(object $entity): array
    {
        if (!$entity instanceof {{ entityName }}) {
            throw new \InvalidArgumentException('Expected {{ entityName }} instance');
        }

        return [
            'id' => $entity->getId()->toString(),
{% for property in serializableProperties %}
{% if property.isRelationship %}
            '{{ property.name }}' => (${{ property.name }}Rel = $entity->{{ property.getter }}()) ? [
                'id' => ${{ property.name }}Rel->getId()->toString(),
                'display' => (string) ${{ property.name }}Rel,
            ] : null,
{% elseif property.serialization %}
            '{{ property.name }}' => $entity->{{ property.getter }}(){{ property.serialization|raw }},
{% else %}
            '{{ property.name }}' => $entity->{{ property.getter }}(),
{% endif %}
{% endfor %}
        ];
    }

{% if operations.index %}
    // ====================================
    // INDEX ACTION - List all {{ entityPluralName }}
    // ====================================

    /**
     * List {{ entityPluralName }}
     */
    protected function indexAction(): Response
    {
        $this->denyAccessUnlessGranted({{ voterClass }}::LIST);

        $preferences = $this->listPreferencesService->getEntityPreferences('{{ entityPluralVariable }}');
        $savedView = $preferences['view'] ?? 'grid';

        return $this->render('{{ routePrefix }}/index.html.twig', [
            'entities' => [],  // Loaded via API
            'entity_name' => '{{ entityVariable }}',
            'entity_name_plural' => '{{ entityPluralVariable }}',
            'page_icon' => '{{ pageIcon }}',
            'default_view' => $savedView,

            // List configuration from GeneratorProperty
            'enable_search' => {{ hasSearchableProperties ? 'true' : 'false' }},
            'enable_filters' => {{ hasFilterableProperties ? 'true' : 'false' }},
            'enable_sorting' => {{ hasSortableProperties ? 'true' : 'false' }},
            'enable_create_button' => {{ operations.new ? 'true' : 'false' }},

            // Property metadata for client-side rendering (as JSON strings)
            'list_fields' => '{{ listProperties|json_encode|raw }}',
            'searchable_fields' => '{{ searchableFields|json_encode|raw }}',
            'filterable_fields' => '{{ filterableFields|json_encode|raw }}',
            'sortable_fields' => '{{ sortableFields|json_encode|raw }}',
        ]);
    }
{% endif %}

{% if operations.apiSearch %}
    // ====================================
    // API SEARCH - Fetch {{ entityPluralName }} for list view
    // ====================================

    /**
     * API endpoint for searching {{ entityPluralName }}
     */
    protected function apiSearchAction(Request $request): JsonResponse
    {
        $this->denyAccessUnlessGranted({{ voterClass }}::LIST);

        // This method uses the BaseApiController's handleSearchRequest
        // which integrates with API Platform's GetCollection operation
        return $this->handleSearchRequest($request);
    }
{% endif %}

{% if operations.new %}
    // ====================================
    // NEW FORM ACTION - Display create form
    // ====================================

    /**
     * Display new {{ entityVariable }} form
     */
    protected function newFormAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted({{ voterClass }}::CREATE);

        ${{ entityVariable }} = new {{ entityName }}();

        // Initialize with custom logic if needed
        $this->initializeNewEntity(${{ entityVariable }});

        $form = $this->createForm({{ formTypeClass }}::class, ${{ entityVariable }});

        return $this->render('{{ routePrefix }}/_form_modal.html.twig', [
            'form' => $form,
            '{{ entityVariable }}' => ${{ entityVariable }},
            'is_edit' => false,
        ]);
    }

    // ====================================
    // CREATE ACTION - Process create form submission
    // ====================================

    /**
     * Process new {{ entityVariable }} form submission
     */
    protected function createAction(Request $request): Response
    {
        $this->denyAccessUnlessGranted({{ voterClass }}::CREATE);

        ${{ entityVariable }} = new {{ entityName }}();

        // Initialize with custom logic if needed
        $this->initializeNewEntity(${{ entityVariable }});

        $form = $this->createForm({{ formTypeClass }}::class, ${{ entityVariable }});
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before create hook
                $this->beforeCreate(${{ entityVariable }});

                $this->entityManager->persist(${{ entityVariable }});
                $this->entityManager->flush();

                // After create hook
                $this->afterCreate(${{ entityVariable }});

                $this->addFlash('success', $this->translator->trans(
                    '{{ routePrefix }}.flash.created_successfully',
                    ['%name%' => (string) ${{ entityVariable }}],
                    '{{ translationDomain }}'
                ));

                return $this->redirectToRoute('{{ routePrefix }}_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    '{{ routePrefix }}.flash.create_failed',
                    ['%error%' => $e->getMessage()],
                    '{{ translationDomain }}'
                ));
            }
        }

        // Re-render with errors
        return $this->render('{{ routePrefix }}/_form_modal.html.twig', [
            'form' => $form,
            '{{ entityVariable }}' => ${{ entityVariable }},
            'is_edit' => false,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }
{% endif %}

{% if operations.edit %}
    // ====================================
    // EDIT FORM ACTION - Display edit form
    // ====================================

    /**
     * Display edit {{ entityVariable }} form
     */
    protected function editFormAction({{ entityName }} ${{ entityVariable }}, Request $request): Response
    {
        $this->denyAccessUnlessGranted({{ voterClass }}::EDIT, ${{ entityVariable }});

        $form = $this->createForm({{ formTypeClass }}::class, ${{ entityVariable }});

        return $this->render('{{ routePrefix }}/_form_modal.html.twig', [
            'form' => $form,
            '{{ entityVariable }}' => ${{ entityVariable }},
            'is_edit' => true,
        ]);
    }

    // ====================================
    // UPDATE ACTION - Process edit form submission
    // ====================================

    /**
     * Process edit {{ entityVariable }} form submission
     */
    protected function updateAction({{ entityName }} ${{ entityVariable }}, Request $request): Response
    {
        $this->denyAccessUnlessGranted({{ voterClass }}::EDIT, ${{ entityVariable }});

        $form = $this->createForm({{ formTypeClass }}::class, ${{ entityVariable }});
        $form->handleRequest($request);

        if ($form->isSubmitted() && $form->isValid()) {
            try {
                // Before update hook
                $this->beforeUpdate(${{ entityVariable }});

                $this->entityManager->flush();

                // After update hook
                $this->afterUpdate(${{ entityVariable }});

                $this->addFlash('success', $this->translator->trans(
                    '{{ routePrefix }}.flash.updated_successfully',
                    ['%name%' => (string) ${{ entityVariable }}],
                    '{{ translationDomain }}'
                ));

                return $this->redirectToRoute('{{ routePrefix }}_index', [], Response::HTTP_SEE_OTHER);

            } catch (\Exception $e) {
                $this->addFlash('error', $this->translator->trans(
                    '{{ routePrefix }}.flash.update_failed',
                    ['%error%' => $e->getMessage()],
                    '{{ translationDomain }}'
                ));
            }
        }

        // Re-render with errors
        return $this->render('{{ routePrefix }}/_form_modal.html.twig', [
            'form' => $form,
            '{{ entityVariable }}' => ${{ entityVariable }},
            'is_edit' => true,
        ], new Response('', $form->isSubmitted() ? Response::HTTP_UNPROCESSABLE_ENTITY : Response::HTTP_OK));
    }
{% endif %}

{% if operations.delete %}
    // ====================================
    // DELETE ACTION - Delete {{ entityVariable }}
    // ====================================

    /**
     * Delete {{ entityVariable }}
     */
    protected function deleteAction({{ entityName }} ${{ entityVariable }}, Request $request): Response
    {
        $this->denyAccessUnlessGranted({{ voterClass }}::DELETE, ${{ entityVariable }});

        // Verify CSRF token
        $token = $request->request->get('_token');
        if (!$this->csrfTokenManager->isTokenValid(new CsrfToken('delete_{{ entityVariable }}_' . ${{ entityVariable }}->getId()->toString(), $token))) {
            throw new InvalidCsrfTokenException('Invalid CSRF token for delete operation.');
        }

        try {
            // Before delete hook
            $this->beforeDelete(${{ entityVariable }});

            $name = (string) ${{ entityVariable }};

            $this->entityManager->remove(${{ entityVariable }});
            $this->entityManager->flush();

            // After delete hook
            $this->afterDelete();

            $this->addFlash('success', $this->translator->trans(
                '{{ routePrefix }}.flash.deleted_successfully',
                ['%name%' => $name],
                '{{ translationDomain }}'
            ));

        } catch (\Exception $e) {
            $this->addFlash('error', $this->translator->trans(
                '{{ routePrefix }}.flash.delete_failed',
                ['%error%' => $e->getMessage()],
                '{{ translationDomain }}'
            ));
        }

        return $this->redirectToRoute('{{ routePrefix }}_index', [], Response::HTTP_SEE_OTHER);
    }
{% endif %}

{% if operations.show %}
    // ====================================
    // SHOW ACTION - Display {{ entityVariable }} details
    // ====================================

    /**
     * Display {{ entityVariable }} details
     */
    protected function showAction({{ entityName }} ${{ entityVariable }}): Response
    {
        $this->denyAccessUnlessGranted({{ voterClass }}::VIEW, ${{ entityVariable }});

        return $this->render('{{ routePrefix }}/show.html.twig', [
            '{{ entityVariable }}' => ${{ entityVariable }},
        ]);
    }
{% endif %}

    // ====================================
    // LIFECYCLE HOOKS
    // ====================================
    // Override these in {{ entityName }}Controller to add custom logic

    /**
     * Initialize new entity before creating form
     *
     * Note: Organization and Owner are set automatically by TenantEntityProcessor
     * Only use this for custom initialization logic
     */
    protected function initializeNewEntity({{ entityName }} ${{ entityVariable }}): void
    {
        // Organization and Owner are set automatically by TenantEntityProcessor
        // Add your custom initialization here
    }

    /**
     * Execute logic before creating entity
     */
    protected function beforeCreate({{ entityName }} ${{ entityVariable }}): void
    {
        // Override to add logic before create
    }

    /**
     * Execute logic after creating entity
     */
    protected function afterCreate({{ entityName }} ${{ entityVariable }}): void
    {
        // Override to add logic after create (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before updating entity
     */
    protected function beforeUpdate({{ entityName }} ${{ entityVariable }}): void
    {
        // Override to add logic before update
    }

    /**
     * Execute logic after updating entity
     */
    protected function afterUpdate({{ entityName }} ${{ entityVariable }}): void
    {
        // Override to add logic after update (e.g., send notification, trigger event)
    }

    /**
     * Execute logic before deleting entity
     */
    protected function beforeDelete({{ entityName }} ${{ entityVariable }}): void
    {
        // Override to add logic before delete (e.g., check dependencies, archive)
    }

    /**
     * Execute logic after deleting entity
     */
    protected function afterDelete(): void
    {
        // Override to add logic after delete (e.g., cleanup, send notification)
    }
}
