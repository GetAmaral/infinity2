<?php

declare(strict_types=1);

namespace App\Entity\Generated;

use App\Entity\EntityBase;
{% if entity.isHasOrganization() %}
use App\Entity\Trait\OrganizationTrait;
{% endif %}
use Doctrine\ORM\Mapping as ORM;
{% set hasCollections = false %}
{% for property in entity.getProperties() %}
{% if property.getRelationshipType() in ['OneToMany', 'ManyToMany'] %}
{% set hasCollections = true %}
{% endif %}
{% endfor %}
{% if hasCollections %}
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
{% endif %}
use Symfony\Component\Validator\Constraints as Assert;
{% set targetEntities = [] %}
{% for property in entity.getProperties() %}
{% if property.getRelationshipType() and property.getTargetEntity() and property.getTargetEntity() not in targetEntities %}
{% set targetEntities = targetEntities|merge([property.getTargetEntity()]) %}
{% endif %}
{% endfor %}
{% for targetEntity in targetEntities %}
use App\Entity\{{ targetEntity }};
{% endfor %}

/**
 * {{ entity.getEntityLabel() }} Entity (Generated Base Class)
 *
 * {% if entity.getDescription() %}{{ entity.getDescription() }}{% endif %}
 *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to {{ entity.getEntityName() }}.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class {{ entity.getEntityName() }}Generated extends EntityBase
{
{% if entity.isHasOrganization() %}
    use OrganizationTrait;

{% endif %}
{% for property in entity.getProperties() %}
{% if entity.isHasOrganization() and property.getPropertyName() == 'organization' %}
{# Skip organization property - provided by OrganizationTrait #}
{% elseif not property.getRelationshipType() %}
{# Scalar properties #}
    #[ORM\Column(type: '{{ property.getPropertyType() }}'{% if property.getLength() %}, length: {{ property.getLength() }}{% endif %}{% if property.getPrecision() %}, precision: {{ property.getPrecision() }}{% endif %}{% if property.getScale() %}, scale: {{ property.getScale() }}{% endif %}{% if property.isNullable() %}, nullable: true{% endif %}{% if property.isUnique() %}, unique: true{% endif %})]
{% if property.getValidationRules() %}
{% for ruleName, ruleConfig in property.getValidationRules() %}
    #[Assert\{{ ruleName }}{% if ruleConfig is iterable and ruleConfig|length > 0 %}({% for key, value in ruleConfig %}{{ key }}: {% if value is string %}'{{ value }}'{% else %}{{ value }}{% endif %}{% if not loop.last %}, {% endif %}{% endfor %}){% endif %}]
{% endfor %}
{% endif %}
    protected {% if property.isNullable() %}?{% endif %}{% if property.getPropertyType() == 'boolean' %}bool{% elseif property.getPropertyType() == 'integer' %}int{% elseif property.getPropertyType() == 'float' or property.getPropertyType() == 'decimal' %}float{% elseif property.getPropertyType() == 'datetime' or property.getPropertyType() == 'datetime_immutable' %}\DateTimeImmutable{% elseif property.getPropertyType() == 'date' or property.getPropertyType() == 'date_immutable' %}\DateTimeImmutable{% elseif property.getPropertyType() == 'json' %}array{% else %}string{% endif %} ${{ property.getPropertyName() }}{% if property.getDefaultValue() is not null %} = {{ property.getDefaultValue() }}{% elseif property.isNullable() %} = null{% endif %};

{% else %}
{# Relationship properties #}
{% if property.getRelationshipType() in ['OneToMany', 'ManyToMany'] %}
    #[ORM\{{ property.getRelationshipType() }}(targetEntity: {{ property.getTargetEntity() }}::class{% if property.getMappedBy() %}, mappedBy: '{{ property.getMappedBy() }}'{% endif %}{% if property.getInversedBy() %}, inversedBy: '{{ property.getInversedBy() }}'{% endif %}{% if property.getCascade() %}, cascade: [{% for op in property.getCascade() %}'{{ op }}'{% if not loop.last %}, {% endif %}{% endfor %}]{% endif %}{% if property.isOrphanRemoval() %}, orphanRemoval: true{% endif %}{% if property.getFetch() %}, fetch: '{{ property.getFetch() }}'{% endif %})]
{% if property.getOrderBy() %}
    #[ORM\OrderBy([{% for field, direction in property.getOrderBy() %}'{{ field }}' => '{{ direction|upper }}'{% if not loop.last %}, {% endif %}{% endfor %}])]
{% endif %}
    protected Collection ${{ property.getPropertyName() }};

{% else %}
{# ManyToOne or OneToOne #}
    #[ORM\{{ property.getRelationshipType() }}(targetEntity: {{ property.getTargetEntity() }}::class{% if property.getInversedBy() %}, inversedBy: '{{ property.getInversedBy() }}'{% endif %})]
{% if not property.isNullable() %}
    #[ORM\JoinColumn(nullable: false)]
{% endif %}
    protected {% if property.isNullable() %}?{% endif %}{{ property.getTargetEntity() }} ${{ property.getPropertyName() }}{% if property.isNullable() %} = null{% endif %};

{% endif %}
{% endif %}
{% endfor %}

    public function __construct()
    {
        parent::__construct();
{% for property in entity.getProperties() %}
{% if property.getRelationshipType() in ['OneToMany', 'ManyToMany'] %}
        $this->{{ property.getPropertyName() }} = new ArrayCollection();
{% endif %}
{% endfor %}
    }

{% for property in entity.getProperties() %}
{% if entity.isHasOrganization() and property.getPropertyName() == 'organization' %}
{# Skip organization methods - provided by OrganizationTrait #}
{% elseif not property.getRelationshipType() %}
{# Scalar getters/setters #}
    public function get{{ property.getPropertyName()|capitalize }}(): {% if property.isNullable() %}?{% endif %}{% if property.getPropertyType() == 'boolean' %}bool{% elseif property.getPropertyType() == 'integer' %}int{% elseif property.getPropertyType() == 'float' or property.getPropertyType() == 'decimal' %}float{% elseif property.getPropertyType() == 'datetime' or property.getPropertyType() == 'datetime_immutable' %}\DateTimeImmutable{% elseif property.getPropertyType() == 'date' or property.getPropertyType() == 'date_immutable' %}\DateTimeImmutable{% elseif property.getPropertyType() == 'json' %}array{% else %}string{% endif %}
    {
        return $this->{{ property.getPropertyName() }};
    }

    public function set{{ property.getPropertyName()|capitalize }}({% if property.isNullable() %}?{% endif %}{% if property.getPropertyType() == 'boolean' %}bool{% elseif property.getPropertyType() == 'integer' %}int{% elseif property.getPropertyType() == 'float' or property.getPropertyType() == 'decimal' %}float{% elseif property.getPropertyType() == 'datetime' or property.getPropertyType() == 'datetime_immutable' %}\DateTimeImmutable{% elseif property.getPropertyType() == 'date' or property.getPropertyType() == 'date_immutable' %}\DateTimeImmutable{% elseif property.getPropertyType() == 'json' %}array{% else %}string{% endif %} ${{ property.getPropertyName() }}): self
    {
        $this->{{ property.getPropertyName() }} = ${{ property.getPropertyName() }};
        return $this;
    }

{% if property.getPropertyType() == 'boolean' %}
    public function is{{ property.getPropertyName()|capitalize }}(): bool
    {
        return $this->{{ property.getPropertyName() }} === true;
    }

{% endif %}
{% else %}
{# Relationship getters/setters #}
{% if property.getRelationshipType() in ['OneToMany', 'ManyToMany'] %}
    /**
     * @return Collection<int, {{ property.getTargetEntity() }}>
     */
    public function get{{ property.getPropertyName()|capitalize }}(): Collection
    {
        return $this->{{ property.getPropertyName() }};
    }

    public function add{{ property.getPropertyName()|capitalize|replace({'ies': 'y', 's': ''}) }}({{ property.getTargetEntity() }} ${{ property.getPropertyName()|replace({'ies': 'y', 's': ''}) }}): self
    {
        if (!$this->{{ property.getPropertyName() }}->contains(${{ property.getPropertyName()|replace({'ies': 'y', 's': ''}) }})) {
            $this->{{ property.getPropertyName() }}->add(${{ property.getPropertyName()|replace({'ies': 'y', 's': ''}) }});
{% if property.getMappedBy() %}
            ${{ property.getPropertyName()|replace({'ies': 'y', 's': ''}) }}->set{{ property.getMappedBy()|capitalize }}($this);
{% endif %}
        }
        return $this;
    }

    public function remove{{ property.getPropertyName()|capitalize|replace({'ies': 'y', 's': ''}) }}({{ property.getTargetEntity() }} ${{ property.getPropertyName()|replace({'ies': 'y', 's': ''}) }}): self
    {
        if ($this->{{ property.getPropertyName() }}->removeElement(${{ property.getPropertyName()|replace({'ies': 'y', 's': ''}) }})) {
{% if property.getMappedBy() %}
            if (${{ property.getPropertyName()|replace({'ies': 'y', 's': ''}) }}->get{{ property.getMappedBy()|capitalize }}() === $this) {
                ${{ property.getPropertyName()|replace({'ies': 'y', 's': ''}) }}->set{{ property.getMappedBy()|capitalize }}(null);
            }
{% endif %}
        }
        return $this;
    }

{% else %}
    public function get{{ property.getPropertyName()|capitalize }}(): {% if property.isNullable() %}?{% endif %}{{ property.getTargetEntity() }}
    {
        return $this->{{ property.getPropertyName() }};
    }

    public function set{{ property.getPropertyName()|capitalize }}({% if property.isNullable() %}?{% endif %}{{ property.getTargetEntity() }} ${{ property.getPropertyName() }}): self
    {
        $this->{{ property.getPropertyName() }} = ${{ property.getPropertyName() }};
        return $this;
    }

{% endif %}
{% endif %}
{% endfor %}

    public function __toString(): string
    {
{% set nameProperty = null %}
{% set labelProperty = null %}
{% set titleProperty = null %}
{% for property in entity.getProperties() %}
{% if property.getPropertyName() == 'name' %}
{% set nameProperty = property %}
{% elseif property.getPropertyName() == 'label' %}
{% set labelProperty = property %}
{% elseif property.getPropertyName() == 'title' %}
{% set titleProperty = property %}
{% endif %}
{% endfor %}
{% if nameProperty %}
        return $this->name ?? {% if labelProperty %}$this->label ?? {% endif %}{% if titleProperty %}$this->title ?? {% endif %}(string) $this->getId()->toRfc4122();
{% elseif labelProperty %}
        return $this->label ?? {% if titleProperty %}$this->title ?? {% endif %}(string) $this->getId()->toRfc4122();
{% elseif titleProperty %}
        return $this->title ?? (string) $this->getId()->toRfc4122();
{% else %}
        return (string) $this->getId()->toRfc4122();
{% endif %}
    }
}
