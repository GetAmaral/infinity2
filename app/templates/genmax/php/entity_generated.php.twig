<?php

declare(strict_types=1);

namespace {{ generated_namespace }};

use {{ namespace }}\EntityBase;
use Doctrine\ORM\Mapping as ORM;
{% set hasCollections = false %}
{% for property in entity.getProperties() %}
{% if property.getRelationshipType() in ['OneToMany', 'ManyToMany'] %}
{% set hasCollections = true %}
{% endif %}
{% endfor %}
{% if hasCollections %}
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
{% endif %}
use Symfony\Component\Validator\Constraints as Assert;
use Symfony\Component\Serializer\Annotation\Groups;
{% set targetEntities = [] %}
{% for property in entity.getProperties() %}
{% if property.getRelationshipType() and property.getTargetEntity() and property.getTargetEntity() not in targetEntities %}
{% set targetEntities = targetEntities|merge([property.getTargetEntity()]) %}
{% endif %}
{% endfor %}
{% for targetEntity in targetEntities %}
use {{ namespace }}\{{ targetEntity }};
{% endfor %}

/**
 * {{ entity.getEntityLabel() }} Entity (Generated Base Class)
 *
 * {% if entity.getDescription() %}{{ entity.getDescription() }}{% endif %}
 *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom logic to {{ entity.getEntityName() }}.php instead.
 *
 * @generated by Genmax Code Generator
 */
#[ORM\MappedSuperclass]
#[ORM\HasLifecycleCallbacks]
abstract class {{ entity.getEntityName() }}Generated extends EntityBase
{
{% set entityNameLower = entity.getEntityName()|lower %}
{% for property in entity.getProperties() %}
{% if not property.getRelationshipType() %}
{# Scalar properties #}
{% if property.getApiGroups() %}
    #[Groups([{% for group in property.getApiGroups() %}'{{ group }}'{% if not loop.last %}, {% endif %}{% endfor %}])]
{% else %}
    #[Groups(['{{ entityNameLower }}:read', '{{ entityNameLower }}:write'])]
{% endif %}
    #[ORM\Column({% if isReservedKeyword(property.getPropertyName()) %}name: '{{ getSafeColumnName(property.getPropertyName()) }}', {% endif %}type: '{{ property.getPropertyType() }}'{% if property.getLength() %}, length: {{ property.getLength() }}{% endif %}{% if property.getPrecision() %}, precision: {{ property.getPrecision() }}{% endif %}{% if property.getScale() %}, scale: {{ property.getScale() }}{% endif %}{% if property.isNullable() %}, nullable: true{% endif %}{% if property.isUnique() %}, unique: true{% endif %})]
{% if property.getValidationRules() and property.getValidationRules() is iterable %}
{% for rule in property.getValidationRules() %}
{% if rule.constraint is defined and rule.constraint is not empty %}
{% set ruleOptions = rule.options is defined ? rule.options : (rule|filter((v, k) => k != 'constraint')) %}
    #[Assert\{{ rule.constraint }}{% if ruleOptions is not empty %}({% for paramKey, paramValue in ruleOptions %}{{ paramKey }}: {% if paramValue is iterable %}[{% for item in paramValue %}'{{ item }}'{% if not loop.last %}, {% endif %}{% endfor %}]{% elseif paramValue is same as(true) %}true{% elseif paramValue is same as(false) %}false{% elseif paramValue is null %}null{% elseif paramValue matches '/^[0-9.]+$/' %}{{ paramValue }}{% else %}'{{ paramValue }}'{% endif %}{% if not loop.last %}, {% endif %}{% endfor %}){% endif %}]
{% endif %}
{% endfor %}
{% endif %}
    protected {% if property.isNullable() %}?{% endif %}{% if property.getPropertyType() == 'boolean' %}bool{% elseif property.getPropertyType() == 'integer' %}int{% elseif property.getPropertyType() == 'float' %}float{% elseif property.getPropertyType() == 'decimal' %}string{% elseif property.getPropertyType() == 'datetime' or property.getPropertyType() == 'datetime_immutable' %}\DateTimeImmutable{% elseif property.getPropertyType() == 'date' or property.getPropertyType() == 'date_immutable' %}\DateTimeImmutable{% elseif property.getPropertyType() == 'json' %}array{% else %}string{% endif %} ${{ property.getPropertyName() }}{% if property.getDefaultValue() is same as(true) %} = true{% elseif property.getDefaultValue() is same as(false) %} = false{% elseif property.getDefaultValue() is not null and property.getPropertyType() in ['string', 'text', 'decimal'] %} = '{{ property.getDefaultValue() }}'{% elseif property.getDefaultValue() is not null %} = {{ property.getDefaultValue() }}{% elseif property.isNullable() %} = null{% endif %};

{% else %}
{# Relationship properties #}
{% if property.getRelationshipType() in ['OneToMany', 'ManyToMany'] %}
{% if property.getApiGroups() %}
    #[Groups([{% for group in property.getApiGroups() %}'{{ group }}'{% if not loop.last %}, {% endif %}{% endfor %}])]
{% else %}
    #[Groups(['{{ entityNameLower }}:read'])]
{% endif %}
    #[ORM\{{ property.getRelationshipType() }}(targetEntity: {{ getClassName(property.getTargetEntity()) }}::class{% if property.getMappedBy() %}, mappedBy: '{{ property.getMappedBy() }}'{% elseif property.getInversedBy() %}, inversedBy: '{{ property.getInversedBy() }}'{% endif %}{% if property.getCascade() %}, cascade: [{% for op in property.getCascade() %}'{{ op }}'{% if not loop.last %}, {% endif %}{% endfor %}]{% endif %}{% if property.isOrphanRemoval() %}, orphanRemoval: true{% endif %}{% if property.getFetch() %}, fetch: '{{ property.getFetch() }}'{% endif %})]
{% if property.getRelationshipType() == 'ManyToMany' and property.getInversedBy() %}
    #[ORM\JoinTable(name: '{{ getSafeTableName(entity.getEntityName()) }}_{{ property.getPropertyName() }}')]
{% endif %}
{% if property.getOrderBy() %}
    #[ORM\OrderBy([{% for field, direction in property.getOrderBy() %}'{{ field }}' => '{{ direction|upper }}'{% if not loop.last %}, {% endif %}{% endfor %}])]
{% endif %}
    protected Collection ${{ property.getPropertyName() }};

{% else %}
{# ManyToOne or OneToOne #}
{% if property.getApiGroups() %}
    #[Groups([{% for group in property.getApiGroups() %}'{{ group }}'{% if not loop.last %}, {% endif %}{% endfor %}])]
{% else %}
    #[Groups(['{{ entityNameLower }}:read', '{{ entityNameLower }}:write'])]
{% endif %}
    #[ORM\{{ property.getRelationshipType() }}(targetEntity: {{ getClassName(property.getTargetEntity()) }}::class{% if property.getMappedBy() %}, mappedBy: '{{ property.getMappedBy() }}'{% elseif property.getInversedBy() %}, inversedBy: '{{ property.getInversedBy() }}'{% endif %})]
{% if not property.isNullable() %}
    #[ORM\JoinColumn(nullable: false)]
{% endif %}
    protected {% if property.isNullable() %}?{% endif %}{{ getClassName(property.getTargetEntity()) }} ${{ property.getPropertyName() }}{% if property.isNullable() %} = null{% endif %};

{% endif %}
{% endif %}
{% endfor %}

    public function __construct()
    {
        parent::__construct();
{% for property in entity.getProperties() %}
{% if property.getRelationshipType() in ['OneToMany', 'ManyToMany'] %}
        $this->{{ property.getPropertyName() }} = new ArrayCollection();
{% endif %}
{% endfor %}
    }

{% for property in entity.getProperties() %}
{% if not property.getRelationshipType() %}
{# Scalar getters/setters #}
    public function get{{ toPascalCase(property.getPropertyName()) }}(): {% if property.isNullable() %}?{% endif %}{% if property.getPropertyType() == 'boolean' %}bool{% elseif property.getPropertyType() == 'integer' %}int{% elseif property.getPropertyType() == 'float' %}float{% elseif property.getPropertyType() == 'decimal' %}string{% elseif property.getPropertyType() == 'datetime' or property.getPropertyType() == 'datetime_immutable' %}\DateTimeImmutable{% elseif property.getPropertyType() == 'date' or property.getPropertyType() == 'date_immutable' %}\DateTimeImmutable{% elseif property.getPropertyType() == 'json' %}array{% else %}string{% endif %}
    {
        return $this->{{ property.getPropertyName() }};
    }

    public function set{{ toPascalCase(property.getPropertyName()) }}({% if property.isNullable() %}?{% endif %}{% if property.getPropertyType() == 'boolean' %}bool{% elseif property.getPropertyType() == 'integer' %}int{% elseif property.getPropertyType() == 'float' %}float{% elseif property.getPropertyType() == 'decimal' %}string{% elseif property.getPropertyType() == 'datetime' or property.getPropertyType() == 'datetime_immutable' %}\DateTimeImmutable{% elseif property.getPropertyType() == 'date' or property.getPropertyType() == 'date_immutable' %}\DateTimeImmutable{% elseif property.getPropertyType() == 'json' %}array{% else %}string{% endif %} ${{ property.getPropertyName() }}): self
    {
        $this->{{ property.getPropertyName() }} = ${{ property.getPropertyName() }};
        return $this;
    }

{% if property.getPropertyType() == 'boolean' %}
    public function is{{ toPascalCase(property.getPropertyName()) }}(): bool
    {
        return $this->{{ property.getPropertyName() }} === true;
    }

{% endif %}
{% else %}
{# Relationship getters/setters #}
{% if property.getRelationshipType() in ['OneToMany', 'ManyToMany'] %}
{% set singularName = toSingular(property.getPropertyName()) %}
    /**
     * @return Collection<int, {{ getClassName(property.getTargetEntity()) }}>
     */
    public function get{{ toPascalCase(property.getPropertyName()) }}(): Collection
    {
        return $this->{{ property.getPropertyName() }};
    }

    public function add{{ toPascalCase(singularName) }}({{ getClassName(property.getTargetEntity()) }} ${{ singularName }}): self
    {
        if (!$this->{{ property.getPropertyName() }}->contains(${{ singularName }})) {
            $this->{{ property.getPropertyName() }}->add(${{ singularName }});
{% if property.getMappedBy() %}
            ${{ singularName }}->set{{ toPascalCase(property.getMappedBy()) }}($this);
{% endif %}
        }
        return $this;
    }

    public function remove{{ toPascalCase(singularName) }}({{ getClassName(property.getTargetEntity()) }} ${{ singularName }}): self
    {
        if ($this->{{ property.getPropertyName() }}->removeElement(${{ singularName }})) {
{% if property.getMappedBy() %}
            if (${{ singularName }}->get{{ toPascalCase(property.getMappedBy()) }}() === $this) {
                ${{ singularName }}->set{{ toPascalCase(property.getMappedBy()) }}(null);
            }
{% endif %}
        }
        return $this;
    }

{% else %}
    public function get{{ toPascalCase(property.getPropertyName()) }}(): {% if property.isNullable() %}?{% endif %}{{ getClassName(property.getTargetEntity()) }}
    {
        return $this->{{ property.getPropertyName() }};
    }

    public function set{{ toPascalCase(property.getPropertyName()) }}({% if property.isNullable() %}?{% endif %}{{ getClassName(property.getTargetEntity()) }} ${{ property.getPropertyName() }}): self
    {
        $this->{{ property.getPropertyName() }} = ${{ property.getPropertyName() }};
        return $this;
    }

{% endif %}
{% endif %}
{% endfor %}

    public function __toString(): string
    {
{% set nameProperty = null %}
{% set labelProperty = null %}
{% set titleProperty = null %}
{% for property in entity.getProperties() %}
{% if property.getPropertyName() == 'name' %}
{% set nameProperty = property %}
{% elseif property.getPropertyName() == 'label' %}
{% set labelProperty = property %}
{% elseif property.getPropertyName() == 'title' %}
{% set titleProperty = property %}
{% endif %}
{% endfor %}
{% if nameProperty %}
        return $this->name ?? {% if labelProperty %}$this->label ?? {% endif %}{% if titleProperty %}$this->title ?? {% endif %}($this->getId()?->toRfc4122() ?? '');
{% elseif labelProperty %}
        return $this->label ?? {% if titleProperty %}$this->title ?? {% endif %}($this->getId()?->toRfc4122() ?? '');
{% elseif titleProperty %}
        return $this->title ?? ($this->getId()?->toRfc4122() ?? '');
{% else %}
        return $this->getId()?->toRfc4122() ?? '';
{% endif %}
    }
}
