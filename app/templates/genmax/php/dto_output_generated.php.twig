<?php

declare(strict_types=1);

namespace {{ generated_namespace }};

use Symfony\Component\Uid\Uuid;
{% set excludedProperties = entity.getDtoExcludedProperties() ?? [] %}
{% set targetEntities = [] %}
{% for property in entity.getProperties() %}
{% if property.getRelationshipType() and property.getTargetEntity() and property.getTargetEntity() not in targetEntities and property.getPropertyName() not in excludedProperties %}
{% set targetEntities = targetEntities|merge([property.getTargetEntity()]) %}
{% endif %}
{% endfor %}
{% for targetEntity in targetEntities %}
use {{ dto_namespace }}\{{ targetEntity }}OutputDto;
{% endfor %}

/**
 * {{ entity.getEntityLabel() }} Output DTO (Generated Base Class)
 *
 * {% if entity.getDescription() %}{{ entity.getDescription() }}{% endif %}
 *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom computed properties to {{ entity.getEntityName() }}OutputDto.php instead.
 *
 * @generated by Genmax Code Generator
 */
abstract class {{ entity.getEntityName() }}OutputDtoGenerated
{
    public ?Uuid $id = null;

{% for property in entity.getProperties() %}
{% if property.getPropertyName() not in excludedProperties %}
{% if not property.getRelationshipType() %}
{# Scalar properties #}
    public {% if property.isNullable() %}?{% endif %}{% if property.getPropertyType() == 'boolean' %}bool{% elseif property.getPropertyType() == 'integer' %}int{% elseif property.getPropertyType() == 'float' %}float{% elseif property.getPropertyType() == 'decimal' %}string{% elseif property.getPropertyType() in ['datetime', 'datetime_immutable', 'date', 'date_immutable'] %}\DateTimeImmutable{% elseif property.getPropertyType() == 'json' %}array{% else %}string{% endif %} ${{ property.getPropertyName() }}{% if property.isNullable() %} = null{% endif %};

{% else %}
{# Relationship properties #}
{% if property.getRelationshipType() in ['OneToMany', 'ManyToMany'] %}
    /**
     * {{ property.getPropertyName() }} collection
     * @var {{ getClassName(property.getTargetEntity()) }}OutputDto[]
     */
    public array ${{ property.getPropertyName() }} = [];

{% else %}
{# ManyToOne or OneToOne #}
    /**
     * {{ property.getPropertyName() }} reference
     * Can be: IRI string or nested {{ property.getTargetEntity() }}Output object
     */
    public {% if property.isNullable() %}string|{{ getClassName(property.getTargetEntity()) }}OutputDto|null{% else %}string|{{ getClassName(property.getTargetEntity()) }}OutputDto{% endif %} ${{ property.getPropertyName() }}{% if property.isNullable() %} = null{% endif %};

{% endif %}
{% endif %}
{% endif %}
{% endfor %}
    public ?\DateTimeImmutable $createdAt = null;

    public ?\DateTimeImmutable $updatedAt = null;

    // Getters and Setters
    public function getId(): ?Uuid
    {
        return $this->id;
    }

    public function setId(?Uuid $id): self
    {
        $this->id = $id;
        return $this;
    }

{% for property in entity.getProperties() %}
{% if property.getPropertyName() not in excludedProperties %}

    public function get{{ property.getPropertyName()|capitalize }}(): {% if property.getRelationshipType() in ['OneToMany', 'ManyToMany'] %}array{% elseif property.getRelationshipType() in ['ManyToOne', 'OneToOne'] %}{% if property.isNullable() %}string|{{ getClassName(property.getTargetEntity()) }}OutputDto|null{% else %}string|{{ getClassName(property.getTargetEntity()) }}OutputDto{% endif %}{% else %}{% if property.isNullable() %}?{% endif %}{% if property.getPropertyType() == 'boolean' %}bool{% elseif property.getPropertyType() == 'integer' %}int{% elseif property.getPropertyType() == 'float' %}float{% elseif property.getPropertyType() == 'decimal' %}string{% elseif property.getPropertyType() in ['datetime', 'datetime_immutable', 'date', 'date_immutable'] %}\DateTimeImmutable{% elseif property.getPropertyType() == 'json' %}array{% else %}string{% endif %}{% endif %}
    {
        return $this->{{ property.getPropertyName() }};
    }

    public function set{{ property.getPropertyName()|capitalize }}({% if property.getRelationshipType() in ['OneToMany', 'ManyToMany'] %}array{% elseif property.getRelationshipType() in ['ManyToOne', 'OneToOne'] %}{% if property.isNullable() %}string|{{ getClassName(property.getTargetEntity()) }}OutputDto|null{% else %}string|{{ getClassName(property.getTargetEntity()) }}OutputDto{% endif %}{% else %}{% if property.isNullable() %}?{% endif %}{% if property.getPropertyType() == 'boolean' %}bool{% elseif property.getPropertyType() == 'integer' %}int{% elseif property.getPropertyType() == 'float' %}float{% elseif property.getPropertyType() == 'decimal' %}string{% elseif property.getPropertyType() in ['datetime', 'datetime_immutable', 'date', 'date_immutable'] %}\DateTimeImmutable{% elseif property.getPropertyType() == 'json' %}array{% else %}string{% endif %}{% endif %} ${{ property.getPropertyName() }}): self
    {
        $this->{{ property.getPropertyName() }} = ${{ property.getPropertyName() }};
        return $this;
    }
{% endif %}
{% endfor %}

    public function getCreatedAt(): ?\DateTimeImmutable
    {
        return $this->createdAt;
    }

    public function setCreatedAt(?\DateTimeImmutable $createdAt): self
    {
        $this->createdAt = $createdAt;
        return $this;
    }

    public function getUpdatedAt(): ?\DateTimeImmutable
    {
        return $this->updatedAt;
    }

    public function setUpdatedAt(?\DateTimeImmutable $updatedAt): self
    {
        $this->updatedAt = $updatedAt;
        return $this;
    }
}
