<?php

declare(strict_types=1);

namespace {{ generatedNamespace }};

use App\Entity\{{ entityName }};
{% if entityName != 'User' %}
use App\Entity\User;
{% endif %}
use Symfony\Component\Security\Core\Authentication\Token\TokenInterface;
use Symfony\Component\Security\Core\Authorization\Voter\Voter;
use Symfony\Component\Security\Core\Role\RoleHierarchyInterface;

/**
 * {{ entityName }} Voter (Generated Base Class)
 *
 * This class is ALWAYS regenerated. DO NOT edit this file.
 * Add custom authorization logic to {{ entityName }}Voter.php instead.
 *
 * @generated by Genmax Code Generator
 */
abstract class {{ baseClassName }} extends Voter
{
    public function __construct(
        protected readonly RoleHierarchyInterface $roleHierarchy
    ) {}

    // Permission constants
{% for permission in permissions %}
    public const {{ permission.constant }} = '{{ entityUpperSnake }}_{{ permission.constant }}';
{% endfor %}

    /**
     * Check if user has a specific role (respects role hierarchy)
     */
    protected function hasRole(User $user, string $role): bool
    {
        $userRoles = $this->roleHierarchy->getReachableRoleNames($user->getRoles());
        return in_array($role, $userRoles, true);
    }

    protected function supports(string $attribute, mixed $subject): bool
    {
        // Check if this is a supported permission
        if (!in_array($attribute, [
{% for permission in permissions %}
            self::{{ permission.constant }},
{% endfor %}
        ], true)) {
            return false;
        }

        // For class-based permissions (LIST, CREATE), subject can be null
        if (in_array($attribute, [
{% for permission in permissions %}
{% if not permission.requiresInstance %}
            self::{{ permission.constant }},
{% endif %}
{% endfor %}
        ], true)) {
            return true;
        }

        // For instance-based permissions, subject must be a {{ entityName }}
        return $subject instanceof {{ entityName }};
    }

    protected function voteOnAttribute(string $attribute, mixed $subject, TokenInterface $token): bool
    {
        ${{ currentUserVariable }} = $token->getUser();

        // User must be logged in
        if (!${{ currentUserVariable }} instanceof User) {
            return false;
        }

        /** @var {{ entityName }}|null ${{ targetEntityVariable }} */
        ${{ targetEntityVariable }} = $subject;

        return match ($attribute) {
{% for permission in permissions %}
{% if permission.requiresInstance %}
            self::{{ permission.constant }} => $this->{{ permission.methodName }}(${{ targetEntityVariable }}, ${{ currentUserVariable }}),
{% else %}
            self::{{ permission.constant }} => $this->{{ permission.methodName }}(${{ currentUserVariable }}),
{% endif %}
{% endfor %}
            default => false,
        };
    }

{% for permission in permissions %}
    /**
     * Check if user can {{ permission.name|lower }} {{ entityName }}{% if permission.requiresInstance %}(s){% endif %}
     */
{% if permission.requiresInstance %}
    protected function {{ permission.methodName }}(?{{ entityName }} ${{ targetEntityVariable }}, User ${{ currentUserVariable }}): bool
    {
        if (!${{ targetEntityVariable }}) {
            return false;
        }

        // ADMIN and SUPER_ADMIN can do anything
        if ($this->hasRole(${{ currentUserVariable }}, 'ROLE_ADMIN')
            || $this->hasRole(${{ currentUserVariable }}, 'ROLE_SUPER_ADMIN')) {
            return true;
        }

{% if hasOrganization %}
        // Must be in same organization
        $sameOrganization = ${{ currentUserVariable }}->getOrganization()
            && ${{ targetEntityVariable }}->getOrganization()
            && ${{ currentUserVariable }}->getOrganization()->getId()->equals(${{ targetEntityVariable }}->getOrganization()->getId());

        if (!$sameOrganization) {
            return false;
        }

{% endif %}
{% if permission.name == 'VIEW' %}
        // All authenticated users in same organization can view
        return true;
{% elseif permission.name == 'EDIT' %}
        // ORGANIZATION_ADMIN can edit within their organization
        if ($this->hasRole(${{ currentUserVariable }}, 'ROLE_ORGANIZATION_ADMIN')) {
            return true;
        }

{% if hasOwner %}
        // Owner can edit their own {{ entityName|lower }}
        if (${{ targetEntityVariable }}->getOwner() && ${{ currentUserVariable }}->getId()->equals(${{ targetEntityVariable }}->getOwner()->getId())) {
            return true;
        }

{% endif %}
        // Regular users can edit (customize as needed)
        return true;
{% elseif permission.name == 'DELETE' %}
        // Only ORGANIZATION_ADMIN can delete
        return $this->hasRole(${{ currentUserVariable }}, 'ROLE_ORGANIZATION_ADMIN');
{% else %}
        // Default: authenticated users in same organization
        return true;
{% endif %}
    }
{% else %}
    protected function {{ permission.methodName }}(User ${{ currentUserVariable }}): bool
    {
        // ADMIN and SUPER_ADMIN can do anything
        if ($this->hasRole(${{ currentUserVariable }}, 'ROLE_ADMIN')
            || $this->hasRole(${{ currentUserVariable }}, 'ROLE_SUPER_ADMIN')) {
            return true;
        }

{% if permission.name == 'LIST' %}
        // ORGANIZATION_ADMIN can list
        return $this->hasRole(${{ currentUserVariable }}, 'ROLE_ORGANIZATION_ADMIN');
{% elseif permission.name == 'CREATE' %}
        // ORGANIZATION_ADMIN can create
        return $this->hasRole(${{ currentUserVariable }}, 'ROLE_ORGANIZATION_ADMIN');
{% else %}
        // Default: allow for authenticated users
        return true;
{% endif %}
    }
{% endif %}

{% endfor %}
}
