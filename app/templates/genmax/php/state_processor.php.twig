<?php

declare(strict_types=1);

namespace {{ namespace }};

use ApiPlatform\Metadata\Operation;
use ApiPlatform\State\ProcessorInterface;
use {{ entity_namespace }}\{{ entity.getEntityName() }};
use {{ dto_namespace }}\{{ entity.getEntityName() }}InputDto;
use App\Service\Utils;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\DependencyInjection\Attribute\Autowire;
use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;
use Symfony\Component\Uid\Uuid;
{% set targetEntities = [] %}
{% for property in entity.getProperties() %}
{% if property.getRelationshipType() and property.getTargetEntity() and property.getTargetEntity() not in targetEntities and property.getTargetEntity() != entity.getEntityName() %}
{% set targetEntities = targetEntities|merge([property.getTargetEntity()]) %}
{% endif %}
{% endfor %}
{% for targetEntity in targetEntities %}
use {{ entity_namespace }}\{{ targetEntity }};
{% endfor %}

/**
 * {{ entity.getEntityLabel() }} State Processor
 *
 * Handles Input DTO -> Entity transformation for POST, PUT, PATCH operations
 * with support for nested object creation and updates.
 *
 * This file is ALWAYS regenerated. DO NOT edit.
 * For custom processing logic, use Event Subscribers.
 *
 * @generated by Genmax Code Generator
 */
class {{ entity.getEntityName() }}Processor implements ProcessorInterface
{
    public function __construct(
        private readonly EntityManagerInterface $entityManager,
        #[Autowire(service: 'App\MultiTenant\TenantEntityProcessor')]
        private readonly ProcessorInterface $persistProcessor
    ) {}

    /**
     * Normalize property name for matching (removes underscores, lowercase)
     * Uses centralized Utils methods instead of manual string manipulation
     */
    private function normalizePropertyName(string $property): string
    {
        // Convert to camelCase (handles snake_case, etc.) then lowercase
        return strtolower(Utils::toCamelCase($property));
    }

    /**
     * Extract property name from method name (e.g., 'addItem' -> 'item')
     */
    private function extractPropertyFromMethod(string $methodName, string $prefix): string
    {
        // Remove prefix (e.g., 'add', 'set') and convert to lowercase
        return strtolower(substr($methodName, strlen($prefix)));
    }

    /**
     * @param {{ entity.getEntityName() }}InputDto $data
     */
    public function process(mixed $data, Operation $operation, array $uriVariables = [], array $context = []): {{ entity.getEntityName() }}
    {
        if (!$data instanceof {{ entity.getEntityName() }}InputDto) {
            throw new BadRequestHttpException('Invalid input data type');
        }

        // Determine if this is a create or update operation
        $entity = null;
        $isUpdate = isset($uriVariables['id']);
        $isPatch = $operation->getMethod() === 'PATCH';

        if ($isUpdate) {
            $entity = $this->entityManager->getRepository({{ entity.getEntityName() }}::class)->find($uriVariables['id']);
            if (!$entity) {
                throw new BadRequestHttpException('{{ entity.getEntityName() }} not found');
            }
        }

        if (!$entity) {
            $entity = new {{ entity.getEntityName() }}();
        }

        // Get original request data to check which fields were actually sent (for PATCH)
        $requestData = $context['request']->toArray() ?? [];

        // Map scalar properties from DTO to Entity
{% set excludedProperties = entity.getDtoExcludedProperties() ?? [] %}
{% for property in entity.getProperties() %}
{% if property.getPropertyName() not in excludedProperties and not property.getRelationshipType() %}
        // {{ property.getPropertyName() }}
        if (!$isPatch || array_key_exists('{{ property.getPropertyName() }}', $requestData)) {
            $entity->{{ getSetterName(property.getPropertyName()) }}($data->{{ property.getPropertyName() }});
        }
{% endif %}
{% endfor %}

        // Map relationship properties
{% for property in entity.getProperties() %}
{% if property.getPropertyName() not in excludedProperties and property.getRelationshipType() %}
{% if property.getRelationshipType() in ['ManyToOne', 'OneToOne'] %}
        // {{ property.getPropertyName() }}: {{ property.getRelationshipType() }}
{% if property.getPropertyName() == 'organization' or property.getPropertyName() == 'owner' %}
        // {{ property.getPropertyName() }} is auto-assigned by TenantEntityProcessor if not provided
{% endif %}
        if (!$isPatch || array_key_exists('{{ property.getPropertyName() }}', $requestData)) {
            if ($data->{{ property.getPropertyName() }} !== null) {
                if (is_string($data->{{ property.getPropertyName() }})) {
                    // IRI format: "/api/{{ toApiResourceName(property.getTargetEntity()) }}/{id}"
                    ${{ property.getPropertyName() }}Id = $this->extractIdFromIri($data->{{ property.getPropertyName() }});
                    ${{ property.getPropertyName() }} = $this->entityManager->getRepository({{ getClassName(property.getTargetEntity()) }}::class)->find(${{ property.getPropertyName() }}Id);
                    if (!${{ property.getPropertyName() }}) {
                        throw new BadRequestHttpException('{{ property.getTargetEntity() }} not found: ' . ${{ property.getPropertyName() }}Id);
                    }
                    $entity->{{ getSetterName(property.getPropertyName()) }}(${{ property.getPropertyName() }});
                } else {
                    // Nested object creation (if supported)
                    throw new BadRequestHttpException('Nested {{ property.getPropertyName() }} creation not supported. Use IRI format.');
                }
{% if not property.isNullable() and property.getPropertyName() != 'organization' and property.getPropertyName() != 'owner' %}
            } else {
                throw new BadRequestHttpException('{{ property.getPropertyName() }} is required');
{% endif %}
            }
        }

{% elseif property.getRelationshipType() in ['OneToMany', 'ManyToMany'] %}
{% if property.isDtoNestedEnabled() %}
        // {{ property.getPropertyName() }}: {{ property.getRelationshipType() }} with nested DTO support
        if (!empty($data->{{ property.getPropertyName() }})) {
{% set strategy = property.getDtoNestedStrategy() ?? 'create_and_update' %}
            $this->process{{ toPascalCase(property.getPropertyName()) }}Collection(
                $entity,
                $data->{{ property.getPropertyName() }},
                '{{ strategy }}'{% if property.isDtoNestedOrphanRemoval() %},
                true{% endif %}

            );
        }

{% endif %}
{% endif %}
{% endif %}
{% endfor %}
        // Persist and flush
        return $this->persistProcessor->process($entity, $operation, $uriVariables, $context);
    }

    /**
     * Extract UUID from IRI format
     */
    private function extractIdFromIri(string $iri): Uuid
    {
        $parts = explode('/', $iri);
        $id = end($parts);

        if (!Uuid::isValid($id)) {
            throw new BadRequestHttpException('Invalid UUID in IRI: ' . $iri);
        }

        return Uuid::fromString($id);
    }

{% for property in entity.getProperties() %}
{% if property.getRelationshipType() in ['OneToMany', 'ManyToMany'] and property.isDtoNestedEnabled() %}
    /**
     * Process {{ property.getPropertyName() }} collection
     *
     * @param {{ entity.getEntityName() }} $entity
     * @param array $itemsData Array of {{ property.getTargetEntity() }}Input or arrays with @id
     * @param string $strategy 'create_only', 'update_only', or 'create_and_update'
     * @param bool $orphanRemoval Remove items not in input array
     */
    private function process{{ toPascalCase(property.getPropertyName()) }}Collection(
        {{ entity.getEntityName() }} $entity,
        array $itemsData,
        string $strategy = 'create_and_update',
        bool $orphanRemoval = false
    ): void {
        $existingItems = $entity->{{ getGetterName(property.getPropertyName()) }}()->toArray();
        $processedIds = [];

        foreach ($itemsData as $itemData) {
            // Check if this is an update (has @id) or create (no @id)
            $itemId = $itemData['@id'] ?? $itemData['id'] ?? null;

            if ($itemId) {
                // UPDATE existing item
                if ($strategy === 'create_only') {
                    throw new BadRequestHttpException('Cannot update {{ property.getPropertyName() }}: create_only strategy');
                }

                if (is_string($itemId)) {
                    $itemId = $this->extractIdFromIri($itemId);
                }

                $item = $this->entityManager->getRepository({{ getClassName(property.getTargetEntity()) }}::class)->find($itemId);
                if (!$item) {
                    throw new BadRequestHttpException('{{ property.getTargetEntity() }} not found: ' . $itemId);
                }

                // Update item properties from DTO array
                $this->mapArrayToEntity($itemData, $item);

                $processedIds[] = $item->getId()->toString();
            } else {
                // CREATE new item
                if ($strategy === 'update_only') {
                    throw new BadRequestHttpException('Cannot create {{ property.getPropertyName() }}: update_only strategy');
                }

                $item = new {{ getClassName(property.getTargetEntity()) }}();

                // Set properties from DTO array
                $this->mapArrayToEntity($itemData, $item);

                // Set parent relationship ({{ toSnakeCase(entity.getEntityName()) }})
                $item->{{ getSetterName(entity.getEntityName()) }}($entity);

                $entity->{{ getAdderName(property.getPropertyName()) }}($item);
                $this->entityManager->persist($item);
            }
        }

        // Handle orphan removal
        if ($orphanRemoval) {
            foreach ($existingItems as $existingItem) {
                if (!in_array($existingItem->getId()->toString(), $processedIds, true)) {
                    $entity->{{ getRemoverName(property.getPropertyName()) }}($existingItem);
                    $this->entityManager->remove($existingItem);
                }
            }
        }
    }

{% endif %}
{% endfor %}
    /**
     * Map array data to entity properties using setters
     * Handles nested collections recursively
     *
     * @param array $data Associative array of property => value
     * @param object $entity Target entity instance
     */
    private function mapArrayToEntity(array $data, object $entity): void
    {
        foreach ($data as $property => $value) {
            // Skip special keys like @id, @type, @context
            if (str_starts_with($property, '@')) {
                continue;
            }

            // Handle nested collections using reflection to find adder methods
            if (is_array($value) && !empty($value) && isset($value[0]) && is_array($value[0])) {
                // Find adder method using reflection - scan all methods starting with 'add'
                $reflectionClass = new \ReflectionClass($entity);
                foreach ($reflectionClass->getMethods(\ReflectionMethod::IS_PUBLIC) as $method) {
                    if (!str_starts_with($method->getName(), 'add')) {
                        continue;
                    }

                    // Check if this might be the right adder based on property name similarity
                    $normalizedProperty = $this->normalizePropertyName($property);
                    $extractedFromMethod = $this->extractPropertyFromMethod($method->getName(), 'add');

                    // Try to match: property name should be similar to method's entity name
                    // e.g., 'items' matches 'addItem', 'user_items' matches 'addUserItem'
                    if (!str_contains($normalizedProperty, $extractedFromMethod) &&
                        !str_contains($extractedFromMethod, $normalizedProperty)) {
                        continue;
                    }

                    $parameters = $method->getParameters();
                    if (count($parameters) > 0) {
                        $paramType = $parameters[0]->getType();
                        if ($paramType && $paramType instanceof \ReflectionNamedType) {
                            $className = $paramType->getName();
                            if (class_exists($className)) {
                                $addMethod = $method->getName();
                                $setParentMethods = array_filter(
                                    $reflectionClass->getMethods(\ReflectionMethod::IS_PUBLIC),
                                    fn($m) => str_starts_with($m->getName(), 'set')
                                );

                                foreach ($value as $itemData) {
                                    $item = new $className();
                                    $this->mapArrayToEntity($itemData, $item);

                                    // Try to set parent relationship using reflection
                                    $itemReflection = new \ReflectionClass($item);
                                    foreach ($itemReflection->getMethods(\ReflectionMethod::IS_PUBLIC) as $itemMethod) {
                                        if (str_starts_with($itemMethod->getName(), 'set')) {
                                            $params = $itemMethod->getParameters();
                                            if (count($params) > 0) {
                                                $paramType = $params[0]->getType();
                                                if ($paramType instanceof \ReflectionNamedType &&
                                                    $paramType->getName() === get_class($entity)) {
                                                    $item->{$itemMethod->getName()}($entity);
                                                    break;
                                                }
                                            }
                                        }
                                    }

                                    $entity->$addMethod($item);
                                    $this->entityManager->persist($item);
                                }
                                continue 2; // Skip to next property
                            }
                        }
                    }
                }
            }

            // Find setter method using reflection - no string manipulation guessing
            $reflectionClass = new \ReflectionClass($entity);
            $setter = null;
            foreach ($reflectionClass->getMethods(\ReflectionMethod::IS_PUBLIC) as $method) {
                if (!str_starts_with($method->getName(), 'set')) {
                    continue;
                }

                // Check if method name matches property (case-insensitive, normalized matching)
                $extractedFromMethod = $this->extractPropertyFromMethod($method->getName(), 'set');
                $normalizedProperty = $this->normalizePropertyName($property);

                if ($extractedFromMethod === $normalizedProperty) {
                    $setter = $method->getName();
                    break;
                }
            }

            if (method_exists($entity, $setter)) {
                // Handle different value types
                if ($value instanceof \DateTimeInterface || $value === null || is_scalar($value)) {
                    $entity->$setter($value);
                } elseif (is_array($value) && !empty($value)) {
                    // Handle JSON arrays (like metadata, tags) - not entity collections
                    $entity->$setter($value);
                } elseif (is_string($value) && str_starts_with($value, '/api/') && $setter) {
                    // Handle IRI references - use reflection to determine expected type
                    try {
                        $refId = $this->extractIdFromIri($value);

                        // Use reflection to get the expected parameter type for the setter
                        $reflectionMethod = new \ReflectionMethod($entity, $setter);
                        $parameters = $reflectionMethod->getParameters();

                        if (count($parameters) > 0) {
                            $paramType = $parameters[0]->getType();
                            if ($paramType && $paramType instanceof \ReflectionNamedType) {
                                $className = $paramType->getName();
                                if (class_exists($className)) {
                                    $refEntity = $this->entityManager->getRepository($className)->find($refId);
                                    if ($refEntity) {
                                        $entity->$setter($refEntity);
                                    }
                                }
                            }
                        }
                    } catch (\Exception $e) {
                        // Skip if IRI resolution fails
                        continue;
                    }
                }
            }
        }
    }
}
