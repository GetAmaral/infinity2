<?php

declare(strict_types=1);

namespace {{ namespace }};

use ApiPlatform\Metadata\Operation;
use ApiPlatform\State\ProcessorInterface;
use {{ entity_namespace }}\{{ entity.getEntityName() }};
use {{ dto_namespace }}\{{ entity.getEntityName() }}Input;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\HttpKernel\Exception\BadRequestHttpException;
use Symfony\Component\Uid\Uuid;
{% set targetEntities = [] %}
{% for property in entity.getProperties() %}
{% if property.getRelationshipType() and property.getTargetEntity() and property.getTargetEntity() not in targetEntities %}
{% set targetEntities = targetEntities|merge([property.getTargetEntity()]) %}
{% endif %}
{% endfor %}
{% for targetEntity in targetEntities %}
use {{ entity_namespace }}\{{ targetEntity }};
{% endfor %}

/**
 * {{ entity.getEntityLabel() }} State Processor
 *
 * Handles Input DTO -> Entity transformation for POST, PUT, PATCH operations
 * with support for nested object creation and updates.
 *
 * This file is ALWAYS regenerated. DO NOT edit.
 * For custom processing logic, use Event Subscribers.
 *
 * @generated by Genmax Code Generator
 */
class {{ entity.getEntityName() }}Processor implements ProcessorInterface
{
    public function __construct(
        private readonly EntityManagerInterface $entityManager,
        private readonly ProcessorInterface $persistProcessor
    ) {}

    /**
     * @param {{ entity.getEntityName() }}Input $data
     */
    public function process(mixed $data, Operation $operation, array $uriVariables = [], array $context = []): {{ entity.getEntityName() }}
    {
        if (!$data instanceof {{ entity.getEntityName() }}Input) {
            throw new BadRequestHttpException('Invalid input data type');
        }

        // Determine if this is a create or update operation
        $entity = null;
        if (isset($uriVariables['id'])) {
            $entity = $this->entityManager->getRepository({{ entity.getEntityName() }}::class)->find($uriVariables['id']);
            if (!$entity) {
                throw new BadRequestHttpException('{{ entity.getEntityName() }} not found');
            }
        }

        if (!$entity) {
            $entity = new {{ entity.getEntityName() }}();
        }

        // Map scalar properties from DTO to Entity
{% set excludedProperties = entity.getDtoExcludedProperties() ?? [] %}
{% for property in entity.getProperties() %}
{% if property.getPropertyName() not in excludedProperties and not property.getRelationshipType() %}
        $entity->set{{ property.getPropertyName()|capitalize }}($data->{{ property.getPropertyName() }});
{% endif %}
{% endfor %}

        // Map relationship properties
{% for property in entity.getProperties() %}
{% if property.getPropertyName() not in excludedProperties and property.getRelationshipType() %}
{% if property.getRelationshipType() in ['ManyToOne', 'OneToOne'] %}
        // {{ property.getPropertyName() }}: {{ property.getRelationshipType() }}
        if ($data->{{ property.getPropertyName() }} !== null) {
            if (is_string($data->{{ property.getPropertyName() }})) {
                // IRI format: "/api/{{ property.getTargetEntity()|lower }}s/{id}"
                ${{ property.getPropertyName() }}Id = $this->extractIdFromIri($data->{{ property.getPropertyName() }});
                ${{ property.getPropertyName() }} = $this->entityManager->getRepository({{ getClassName(property.getTargetEntity()) }}::class)->find(${{ property.getPropertyName() }}Id);
                if (!${{ property.getPropertyName() }}) {
                    throw new BadRequestHttpException('{{ property.getTargetEntity() }} not found: ' . ${{ property.getPropertyName() }}Id);
                }
                $entity->set{{ property.getPropertyName()|capitalize }}(${{ property.getPropertyName() }});
            } else {
                // Nested object creation (if supported)
                throw new BadRequestHttpException('Nested {{ property.getPropertyName() }} creation not supported. Use IRI format.');
            }
{% if not property.isNullable() %}
        } else {
            throw new BadRequestHttpException('{{ property.getPropertyName() }} is required');
{% endif %}
        }

{% elseif property.getRelationshipType() in ['OneToMany', 'ManyToMany'] %}
{% if property.isDtoNestedEnabled() %}
        // {{ property.getPropertyName() }}: {{ property.getRelationshipType() }} with nested DTO support
        if (!empty($data->{{ property.getPropertyName() }})) {
{% set strategy = property.getDtoNestedStrategy() ?? 'create_and_update' %}
            $this->process{{ property.getPropertyName()|capitalize }}Collection(
                $entity,
                $data->{{ property.getPropertyName() }},
                '{{ strategy }}'{% if property.isDtoNestedOrphanRemoval() %},
                true{% endif %}

            );
        }

{% endif %}
{% endif %}
{% endif %}
{% endfor %}
        // Persist and flush
        return $this->persistProcessor->process($entity, $operation, $uriVariables, $context);
    }

    /**
     * Extract UUID from IRI format
     */
    private function extractIdFromIri(string $iri): Uuid
    {
        $parts = explode('/', $iri);
        $id = end($parts);

        if (!Uuid::isValid($id)) {
            throw new BadRequestHttpException('Invalid UUID in IRI: ' . $iri);
        }

        return Uuid::fromString($id);
    }

{% for property in entity.getProperties() %}
{% if property.getRelationshipType() in ['OneToMany', 'ManyToMany'] and property.isDtoNestedEnabled() %}
    /**
     * Process {{ property.getPropertyName() }} collection
     *
     * @param {{ entity.getEntityName() }} $entity
     * @param array $itemsData Array of {{ property.getTargetEntity() }}Input or arrays with @id
     * @param string $strategy 'create_only', 'update_only', or 'create_and_update'
     * @param bool $orphanRemoval Remove items not in input array
     */
    private function process{{ property.getPropertyName()|capitalize }}Collection(
        {{ entity.getEntityName() }} $entity,
        array $itemsData,
        string $strategy = 'create_and_update',
        bool $orphanRemoval = false
    ): void {
        $existingItems = $entity->get{{ property.getPropertyName()|capitalize }}()->toArray();
        $processedIds = [];

        foreach ($itemsData as $itemData) {
            // Check if this is an update (has @id) or create (no @id)
            $itemId = $itemData['@id'] ?? $itemData['id'] ?? null;

            if ($itemId) {
                // UPDATE existing item
                if ($strategy === 'create_only') {
                    throw new BadRequestHttpException('Cannot update {{ property.getPropertyName() }}: create_only strategy');
                }

                if (is_string($itemId)) {
                    $itemId = $this->extractIdFromIri($itemId);
                }

                $item = $this->entityManager->getRepository({{ getClassName(property.getTargetEntity()) }}::class)->find($itemId);
                if (!$item) {
                    throw new BadRequestHttpException('{{ property.getTargetEntity() }} not found: ' . $itemId);
                }

                // Update item properties from DTO
                // TODO: Map properties from $itemData to $item

                $processedIds[] = $item->getId()->toString();
            } else {
                // CREATE new item
                if ($strategy === 'update_only') {
                    throw new BadRequestHttpException('Cannot create {{ property.getPropertyName() }}: update_only strategy');
                }

                $item = new {{ getClassName(property.getTargetEntity()) }}();

                // Set properties from DTO
                // TODO: Map properties from $itemData to $item

                $entity->add{{ property.getPropertyName()|slice(0, -1)|capitalize }}($item);
                $this->entityManager->persist($item);
            }
        }

        // Handle orphan removal
        if ($orphanRemoval) {
            foreach ($existingItems as $existingItem) {
                if (!in_array($existingItem->getId()->toString(), $processedIds, true)) {
                    $entity->remove{{ property.getPropertyName()|slice(0, -1)|capitalize }}($existingItem);
                    $this->entityManager->remove($existingItem);
                }
            }
        }
    }

{% endif %}
{% endfor %}
}
