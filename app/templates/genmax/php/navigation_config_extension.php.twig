{% verbatim %}<?php

/**
 * NavigationConfig - Customizable Navigation Configuration
 *
 * This file extends NavigationConfigGenerated and allows manual customization.
 *
 * Generated at: {% endverbatim %}{{ generation_timestamp|date('Y-m-d H:i:s') }}{% verbatim %}
 *
 * SAFE TO EDIT:
 * - Add custom menu items
 * - Override group order
 * - Add custom sections
 * - Modify existing items
 * - Add conditional logic
 * - Reorder sections
 *
 * IMPORTANT:
 * - Do NOT edit NavigationConfigGenerated.php (will be overwritten)
 * - This file is created ONCE and safe to customize
 * - getGeneratedMenuItems() provides database-driven items
 */

declare(strict_types=1);

namespace App\Service;

use App\Service\Generated\NavigationConfigGenerated;

final class NavigationConfig extends NavigationConfigGenerated
{
    /**
     * Get main navigation menu structure
     *
     * Combines:
     * 1. Manual/hardcoded items (home, student courses)
     * 2. Generated items from database (from getGeneratedMenuItems())
     * 3. Admin section
     *
     * @return array<string, array{
     *   label: string,
     *   route: string,
     *   icon: string,
     *   permission?: string,
     *   role?: string,
     *   divider_before?: bool,
     *   divider_after?: bool,
     *   section_title?: string
     * }>
     */
    public function getMainMenu(): array
    {
        // ============================================
        // MANUAL ITEMS (always at top)
        // ============================================
        $manualItems = [
            'home' => [
                'label' => 'nav.home',
                'route' => 'app_home',
                'icon' => 'bi-house',
                // No permission required - all authenticated users
            ],
            'student_courses' => [
                'label' => 'nav.my.courses',
                'route' => 'student_courses',
                'icon' => 'bi-mortarboard',
                'role' => 'ROLE_STUDENT',
            ],
        ];

        // ============================================
        // GENERATED ITEMS (from database)
        // ============================================
        $generatedItems = $this->getGeneratedMenuItems();

        // ============================================
        // ADMIN SECTION (always at bottom)
        // ============================================
        $adminItems = [
            'admin_section_divider' => [
                'divider_before' => true,
                'section_title' => 'nav.admin.section',
                'role' => 'ROLE_ADMIN',
            ],
            'admin_audit' => [
                'label' => 'nav.admin.audit.log',
                'route' => 'admin_audit_index',
                'icon' => 'bi-clipboard-data',
                'role' => 'ROLE_ADMIN',
            ],
            'admin_analytics' => [
                'label' => 'nav.admin.audit.analytics',
                'route' => 'admin_audit_analytics',
                'icon' => 'bi-graph-up',
                'role' => 'ROLE_ADMIN',
            ],
        ];

        // ============================================
        // MERGE & RETURN
        // ============================================
        return array_merge($manualItems, $generatedItems, $adminItems);
    }

    /**
     * Get user profile dropdown menu structure
     *
     * @return array<string, array>
     */
    public function getUserMenu(): array
    {
        // Manual user menu items
        $manualItems = [
            'settings' => [
                'label' => 'nav.settings',
                'route' => 'app_settings',
                'icon' => 'bi-gear',
            ],
            'terms' => [
                'label' => 'nav.terms',
                'route' => 'app_terms',
                'icon' => 'bi-file-text',
            ],
            'logout_divider' => [
                'divider_before' => true,
            ],
            'logout' => [
                'label' => 'auth.logout',
                'route' => 'app_logout',
                'icon' => 'bi-box-arrow-right',
                'css_class' => 'text-danger',
            ],
        ];

        // Generated user menu items (if any)
        $generatedItems = $this->getGeneratedUserMenuItems();

        return array_merge($manualItems, $generatedItems);
    }

    /**
     * Check if a menu item should be visible based on permissions
     *
     * @param array{
     *   permission?: string,
     *   role?: string,
     *   divider_before?: bool,
     *   divider_after?: bool,
     *   section_title?: string
     * } $item
     */
    public function isMenuItemVisible(array $item, callable $isGranted): bool
    {
        // Dividers and section titles are visible if their role requirement is met
        if (isset($item['divider_before']) || isset($item['divider_after']) || isset($item['section_title'])) {
            if (isset($item['role'])) {
                return $isGranted($item['role']);
            }
            return true; // Dividers without role are always visible
        }

        // Check role-based access (simple RBAC)
        if (isset($item['role'])) {
            if (!$isGranted($item['role'])) {
                return false;
            }
        }

        // Check voter permission (attribute-based access control)
        if (isset($item['permission'])) {
            if (!$isGranted($item['permission'])) {
                return false;
            }
        }

        // If no permission or role specified, item is visible to all authenticated users
        return true;
    }

    /**
     * Get translation domain for menu item
     *
     * @param array{translation_domain?: string} $item
     */
    public function getTranslationDomain(array $item): string
    {
        return $item['translation_domain'] ?? 'messages';
    }
}
{% endverbatim %}
