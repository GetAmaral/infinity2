version: '3.8'

services:
  database:
    image: postgres:18-alpine
    container_name: infinity_database
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - infinity_network

  app:
    build: ./app
    container_name: infinity_app
    depends_on:
      database:
        condition: service_healthy
    environment:
      DATABASE_URL: ${DATABASE_URL}
      APP_ENV: ${APP_ENV}
      APP_SECRET: ${APP_SECRET}
      FRANKENPHP_NUM_THREADS: ${FRANKENPHP_NUM_THREADS}
    volumes:
      - ./app:/app
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - infinity_network

  nginx:
    image: nginx:1.27-alpine
    container_name: infinity_nginx
    depends_on:
      app:
        condition: service_healthy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/conf/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    networks:
      - infinity_network

volumes:
  postgres_data:

networks:
  infinity_network:
    driver: bridge