{
  "PipelineStage": {
    "updates": [
      "ALTER TABLE pipeline_stage ALTER COLUMN name TYPE VARCHAR(100)",
      "ALTER TABLE pipeline_stage ADD COLUMN IF NOT EXISTS color VARCHAR(7) DEFAULT '#6C757D'",
      "ALTER TABLE pipeline_stage ADD COLUMN IF NOT EXISTS probability_percentage DECIMAL(5,2) DEFAULT 0.00 CHECK (probability_percentage >= 0 AND probability_percentage <= 100)",
      "ALTER TABLE pipeline_stage ADD COLUMN IF NOT EXISTS is_won BOOLEAN DEFAULT FALSE",
      "ALTER TABLE pipeline_stage ADD COLUMN IF NOT EXISTS is_lost BOOLEAN DEFAULT FALSE",
      "ALTER TABLE pipeline_stage ADD COLUMN IF NOT EXISTS is_active BOOLEAN DEFAULT TRUE",
      "ALTER TABLE pipeline_stage ADD COLUMN IF NOT EXISTS view_order INTEGER DEFAULT 0",
      "ALTER TABLE pipeline_stage ADD COLUMN IF NOT EXISTS automation_enabled BOOLEAN DEFAULT FALSE",
      "ALTER TABLE pipeline_stage ADD COLUMN IF NOT EXISTS automation_rules JSONB",
      "ALTER TABLE pipeline_stage ADD COLUMN IF NOT EXISTS average_time_days INTEGER",
      "ALTER TABLE pipeline_stage ADD COLUMN IF NOT EXISTS conversion_rate DECIMAL(5,2)",
      "ALTER TABLE pipeline_stage ADD COLUMN IF NOT EXISTS pipeline_id UUID",
      "ALTER TABLE pipeline_stage ADD CONSTRAINT fk_pipeline_stage_pipeline FOREIGN KEY (pipeline_id) REFERENCES pipeline(id) ON DELETE CASCADE",
      "CREATE INDEX IF NOT EXISTS idx_pipeline_stage_pipeline ON pipeline_stage(pipeline_id)",
      "CREATE INDEX IF NOT EXISTS idx_pipeline_stage_order ON pipeline_stage(view_order)",
      "CREATE INDEX IF NOT EXISTS idx_pipeline_stage_active ON pipeline_stage(is_active)",
      "CREATE INDEX IF NOT EXISTS idx_pipeline_stage_organization ON pipeline_stage(organization_id)",
      "COMMENT ON COLUMN pipeline_stage.color IS 'Hex color code for visual identification in UI (#RRGGBB format)'",
      "COMMENT ON COLUMN pipeline_stage.probability_percentage IS 'Win probability percentage for deals in this stage (0-100)'",
      "COMMENT ON COLUMN pipeline_stage.is_won IS 'Indicates if this is a winning/closed-won stage'",
      "COMMENT ON COLUMN pipeline_stage.is_lost IS 'Indicates if this is a lost/closed-lost stage'",
      "COMMENT ON COLUMN pipeline_stage.automation_rules IS 'JSON configuration for automated actions when deals enter this stage'",
      "COMMENT ON COLUMN pipeline_stage.average_time_days IS 'Average number of days deals spend in this stage (calculated field)'",
      "COMMENT ON COLUMN pipeline_stage.conversion_rate IS 'Percentage of deals that move to next stage (calculated field)'"
    ],
    "inserts": [],
    "summary": "Optimized PipelineStage with CRM best practices: added win/loss tracking, probability scoring, visual color coding, stage ordering, automation support, and performance metrics (average time, conversion rate). Includes proper indexes for pipeline lookup, ordering, and filtering by active status."
  },
  "Country": {
    "updates": [],
    "inserts": [
      "CREATE TABLE IF NOT EXISTS country (id UUID PRIMARY KEY DEFAULT gen_random_uuid(), created_by_id UUID, updated_by_id UUID, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, name VARCHAR(100) NOT NULL, iso_code_alpha2 VARCHAR(2) NOT NULL UNIQUE, iso_code_alpha3 VARCHAR(3) NOT NULL UNIQUE, iso_code_numeric VARCHAR(3) NOT NULL UNIQUE, phone_code VARCHAR(10), currency_code VARCHAR(3), timezone_offset VARCHAR(6), continent VARCHAR(20), is_active BOOLEAN DEFAULT TRUE, CONSTRAINT fk_country_created_by FOREIGN KEY (created_by_id) REFERENCES \"user\"(id) ON DELETE SET NULL, CONSTRAINT fk_country_updated_by FOREIGN KEY (updated_by_id) REFERENCES \"user\"(id) ON DELETE SET NULL)",
      "CREATE INDEX IF NOT EXISTS idx_country_iso_alpha2 ON country(iso_code_alpha2)",
      "CREATE INDEX IF NOT EXISTS idx_country_iso_alpha3 ON country(iso_code_alpha3)",
      "CREATE INDEX IF NOT EXISTS idx_country_iso_numeric ON country(iso_code_numeric)",
      "CREATE INDEX IF NOT EXISTS idx_country_name ON country(name)",
      "CREATE INDEX IF NOT EXISTS idx_country_active ON country(is_active)",
      "CREATE INDEX IF NOT EXISTS idx_country_continent ON country(continent)",
      "COMMENT ON TABLE country IS 'ISO 3166-1 country reference table with standard codes'",
      "COMMENT ON COLUMN country.iso_code_alpha2 IS 'ISO 3166-1 alpha-2 two-letter country code (e.g., US, BR, UK)'",
      "COMMENT ON COLUMN country.iso_code_alpha3 IS 'ISO 3166-1 alpha-3 three-letter country code (e.g., USA, BRA, GBR)'",
      "COMMENT ON COLUMN country.iso_code_numeric IS 'ISO 3166-1 numeric-3 three-digit country code (e.g., 840, 076, 826)'",
      "COMMENT ON COLUMN country.phone_code IS 'International dialing code (e.g., +1, +55, +44)'",
      "COMMENT ON COLUMN country.currency_code IS 'ISO 4217 currency code (e.g., USD, BRL, GBP)'",
      "COMMENT ON COLUMN country.timezone_offset IS 'Primary timezone offset from UTC (e.g., -05:00, +00:00)'",
      "COMMENT ON COLUMN country.continent IS 'Continent name (Africa, Antarctica, Asia, Europe, North America, Oceania, South America)'"
    ],
    "summary": "Created Country table following ISO 3166-1 standards with all three code formats (alpha-2, alpha-3, numeric). Includes phone codes, currency codes, timezone info, and continent classification. Optimized with unique constraints on ISO codes and indexes for common lookups. No organization_id as this is global reference data."
  },
  "City": {
    "updates": [],
    "inserts": [
      "CREATE TABLE IF NOT EXISTS city (id UUID PRIMARY KEY DEFAULT gen_random_uuid(), created_by_id UUID, updated_by_id UUID, created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP, name VARCHAR(100) NOT NULL, name_ascii VARCHAR(100), country_id UUID NOT NULL, state_province VARCHAR(100), state_code VARCHAR(10), latitude DECIMAL(10,8), longitude DECIMAL(11,8), timezone VARCHAR(50), population INTEGER, elevation_meters INTEGER, is_capital BOOLEAN DEFAULT FALSE, is_active BOOLEAN DEFAULT TRUE, ibge_code VARCHAR(20), un_locode VARCHAR(10), CONSTRAINT fk_city_country FOREIGN KEY (country_id) REFERENCES country(id) ON DELETE CASCADE, CONSTRAINT fk_city_created_by FOREIGN KEY (created_by_id) REFERENCES \"user\"(id) ON DELETE SET NULL, CONSTRAINT fk_city_updated_by FOREIGN KEY (updated_by_id) REFERENCES \"user\"(id) ON DELETE SET NULL)",
      "CREATE INDEX IF NOT EXISTS idx_city_country ON city(country_id)",
      "CREATE INDEX IF NOT EXISTS idx_city_name ON city(name)",
      "CREATE INDEX IF NOT EXISTS idx_city_name_ascii ON city(name_ascii)",
      "CREATE INDEX IF NOT EXISTS idx_city_state ON city(state_province)",
      "CREATE INDEX IF NOT EXISTS idx_city_coordinates ON city(latitude, longitude)",
      "CREATE INDEX IF NOT EXISTS idx_city_timezone ON city(timezone)",
      "CREATE INDEX IF NOT EXISTS idx_city_capital ON city(is_capital) WHERE is_capital = TRUE",
      "CREATE INDEX IF NOT EXISTS idx_city_active ON city(is_active)",
      "CREATE INDEX IF NOT EXISTS idx_city_ibge ON city(ibge_code)",
      "CREATE INDEX IF NOT EXISTS idx_city_locode ON city(un_locode)",
      "COMMENT ON TABLE city IS 'City/locality reference table with geographic and administrative data'",
      "COMMENT ON COLUMN city.name_ascii IS 'ASCII-only version of city name for sorting and searching'",
      "COMMENT ON COLUMN city.state_province IS 'State/province/region name within country'",
      "COMMENT ON COLUMN city.state_code IS 'State/province code (e.g., CA for California, SP for SÃ£o Paulo)'",
      "COMMENT ON COLUMN city.latitude IS 'Geographic latitude in decimal degrees (-90 to +90)'",
      "COMMENT ON COLUMN city.longitude IS 'Geographic longitude in decimal degrees (-180 to +180)'",
      "COMMENT ON COLUMN city.timezone IS 'IANA timezone identifier (e.g., America/Sao_Paulo, Europe/London)'",
      "COMMENT ON COLUMN city.is_capital IS 'TRUE if this is a national or state/province capital'",
      "COMMENT ON COLUMN city.ibge_code IS 'Brazilian IBGE municipality code (for Brazilian cities)'",
      "COMMENT ON COLUMN city.un_locode IS 'UN/LOCODE city identifier (ISO standard for city codes)'"
    ],
    "summary": "Created City table with comprehensive geographic data including coordinates, timezone, population, and elevation. Supports both IBGE codes (Brazilian standard) and UN/LOCODE (international). Includes ASCII name variant for better searching across different character sets. Optimized with indexes for geographic queries, country/state lookups, and timezone filtering. No organization_id as this is global reference data."
  },
  "Course": {
    "updates": [
      "ALTER TABLE course ALTER COLUMN name TYPE VARCHAR(200)",
      "ALTER TABLE course ADD COLUMN IF NOT EXISTS slug VARCHAR(255) UNIQUE",
      "ALTER TABLE course ADD COLUMN IF NOT EXISTS short_description VARCHAR(500)",
      "ALTER TABLE course ADD COLUMN IF NOT EXISTS difficulty_level VARCHAR(20) DEFAULT 'beginner' CHECK (difficulty_level IN ('beginner', 'intermediate', 'advanced', 'expert'))",
      "ALTER TABLE course ADD COLUMN IF NOT EXISTS language VARCHAR(10) DEFAULT 'en'",
      "ALTER TABLE course ADD COLUMN IF NOT EXISTS price_amount DECIMAL(10,2) DEFAULT 0.00",
      "ALTER TABLE course ADD COLUMN IF NOT EXISTS price_currency VARCHAR(3) DEFAULT 'USD'",
      "ALTER TABLE course ADD COLUMN IF NOT EXISTS is_published BOOLEAN DEFAULT FALSE",
      "ALTER TABLE course ADD COLUMN IF NOT EXISTS published_at TIMESTAMP",
      "ALTER TABLE course ADD COLUMN IF NOT EXISTS enrollment_start_date TIMESTAMP",
      "ALTER TABLE course ADD COLUMN IF NOT EXISTS enrollment_end_date TIMESTAMP",
      "ALTER TABLE course ADD COLUMN IF NOT EXISTS max_students INTEGER",
      "ALTER TABLE course ADD COLUMN IF NOT EXISTS current_students INTEGER DEFAULT 0",
      "ALTER TABLE course ADD COLUMN IF NOT EXISTS completion_certificate BOOLEAN DEFAULT FALSE",
      "ALTER TABLE course ADD COLUMN IF NOT EXISTS thumbnail_path VARCHAR(500)",
      "ALTER TABLE course ADD COLUMN IF NOT EXISTS video_intro_path VARCHAR(500)",
      "ALTER TABLE course ADD COLUMN IF NOT EXISTS prerequisites TEXT",
      "ALTER TABLE course ADD COLUMN IF NOT EXISTS learning_objectives JSONB",
      "ALTER TABLE course ADD COLUMN IF NOT EXISTS target_audience TEXT",
      "ALTER TABLE course ADD COLUMN IF NOT EXISTS average_rating DECIMAL(3,2) DEFAULT 0.00 CHECK (average_rating >= 0 AND average_rating <= 5)",
      "ALTER TABLE course ADD COLUMN IF NOT EXISTS total_reviews INTEGER DEFAULT 0",
      "ALTER TABLE course ADD COLUMN IF NOT EXISTS total_modules INTEGER DEFAULT 0",
      "ALTER TABLE course ADD COLUMN IF NOT EXISTS total_lectures INTEGER DEFAULT 0",
      "ALTER TABLE course RENAME COLUMN active TO is_active",
      "CREATE INDEX IF NOT EXISTS idx_course_slug ON course(slug)",
      "CREATE INDEX IF NOT EXISTS idx_course_published ON course(is_published, published_at)",
      "CREATE INDEX IF NOT EXISTS idx_course_difficulty ON course(difficulty_level)",
      "CREATE INDEX IF NOT EXISTS idx_course_language ON course(language)",
      "CREATE INDEX IF NOT EXISTS idx_course_rating ON course(average_rating DESC)",
      "CREATE INDEX IF NOT EXISTS idx_course_enrollment_dates ON course(enrollment_start_date, enrollment_end_date)",
      "COMMENT ON COLUMN course.slug IS 'URL-friendly unique identifier for course'",
      "COMMENT ON COLUMN course.difficulty_level IS 'Course difficulty: beginner, intermediate, advanced, expert'",
      "COMMENT ON COLUMN course.learning_objectives IS 'JSON array of learning objectives/outcomes'",
      "COMMENT ON COLUMN course.total_modules IS 'Cached count of course modules (updated via triggers)'",
      "COMMENT ON COLUMN course.total_lectures IS 'Cached count of total lectures across all modules (updated via triggers)'"
    ],
    "inserts": [],
    "summary": "Enhanced Course entity with LMS best practices: added difficulty levels, pricing, enrollment windows, student capacity tracking, multi-language support, ratings/reviews aggregation, and marketing content (thumbnails, intro videos). Includes SEO-friendly slugs and cached counts for performance. Indexes optimized for course discovery, filtering, and sorting."
  },
  "CourseModule": {
    "updates": [
      "ALTER TABLE course_module ALTER COLUMN name TYPE VARCHAR(200)",
      "ALTER TABLE course_module ADD COLUMN IF NOT EXISTS slug VARCHAR(255)",
      "ALTER TABLE course_module ADD COLUMN IF NOT EXISTS duration_minutes INTEGER DEFAULT 0",
      "ALTER TABLE course_module ADD COLUMN IF NOT EXISTS is_published BOOLEAN DEFAULT TRUE",
      "ALTER TABLE course_module ADD COLUMN IF NOT EXISTS published_at TIMESTAMP",
      "ALTER TABLE course_module ADD COLUMN IF NOT EXISTS prerequisite_module_id UUID",
      "ALTER TABLE course_module ADD COLUMN IF NOT EXISTS is_locked BOOLEAN DEFAULT FALSE",
      "ALTER TABLE course_module ADD COLUMN IF NOT EXISTS unlock_criteria JSONB",
      "ALTER TABLE course_module ADD COLUMN IF NOT EXISTS total_lectures INTEGER DEFAULT 0",
      "ALTER TABLE course_module ADD COLUMN IF NOT EXISTS completion_percentage_required DECIMAL(5,2) DEFAULT 100.00 CHECK (completion_percentage_required >= 0 AND completion_percentage_required <= 100)",
      "ALTER TABLE course_module RENAME COLUMN active TO is_active",
      "ALTER TABLE course_module ADD CONSTRAINT fk_course_module_prerequisite FOREIGN KEY (prerequisite_module_id) REFERENCES course_module(id) ON DELETE SET NULL",
      "CREATE UNIQUE INDEX IF NOT EXISTS idx_course_module_slug_course ON course_module(course_id, slug)",
      "CREATE INDEX IF NOT EXISTS idx_course_module_view_order ON course_module(course_id, view_order)",
      "CREATE INDEX IF NOT EXISTS idx_course_module_published ON course_module(is_published)",
      "CREATE INDEX IF NOT EXISTS idx_course_module_prerequisite ON course_module(prerequisite_module_id)",
      "COMMENT ON COLUMN course_module.slug IS 'URL-friendly identifier unique within the course'",
      "COMMENT ON COLUMN course_module.prerequisite_module_id IS 'Module that must be completed before this one'",
      "COMMENT ON COLUMN course_module.is_locked IS 'Whether module is locked until prerequisites are met'",
      "COMMENT ON COLUMN course_module.unlock_criteria IS 'JSON configuration for unlock conditions (e.g., quiz score, previous module completion)'",
      "COMMENT ON COLUMN course_module.total_lectures IS 'Cached count of lectures in this module (updated via triggers)'",
      "COMMENT ON COLUMN course_module.completion_percentage_required IS 'Percentage of module content required to mark as complete (default 100%)'"
    ],
    "inserts": [],
    "summary": "Enhanced CourseModule with sequential learning support: added prerequisite tracking, module locking, unlock criteria, and completion requirements. Includes duration tracking, publish control, and cached lecture counts. Optimized with composite unique index on course+slug and indexes for prerequisite lookups and ordering."
  },
  "CourseLecture": {
    "updates": [
      "ALTER TABLE course_lecture ALTER COLUMN name TYPE VARCHAR(200)",
      "ALTER TABLE course_lecture ADD COLUMN IF NOT EXISTS slug VARCHAR(255)",
      "ALTER TABLE course_lecture ADD COLUMN IF NOT EXISTS lecture_type VARCHAR(20) DEFAULT 'video' CHECK (lecture_type IN ('video', 'text', 'quiz', 'assignment', 'live', 'download'))",
      "ALTER TABLE course_lecture ADD COLUMN IF NOT EXISTS duration_minutes INTEGER DEFAULT 0",
      "ALTER TABLE course_lecture ADD COLUMN IF NOT EXISTS is_published BOOLEAN DEFAULT TRUE",
      "ALTER TABLE course_lecture ADD COLUMN IF NOT EXISTS published_at TIMESTAMP",
      "ALTER TABLE course_lecture ADD COLUMN IF NOT EXISTS is_preview BOOLEAN DEFAULT FALSE",
      "ALTER TABLE course_lecture ADD COLUMN IF NOT EXISTS is_downloadable BOOLEAN DEFAULT FALSE",
      "ALTER TABLE course_lecture ADD COLUMN IF NOT EXISTS content_text TEXT",
      "ALTER TABLE course_lecture ADD COLUMN IF NOT EXISTS external_url VARCHAR(500)",
      "ALTER TABLE course_lecture ADD COLUMN IF NOT EXISTS attachment_paths JSONB",
      "ALTER TABLE course_lecture ADD COLUMN IF NOT EXISTS quiz_data JSONB",
      "ALTER TABLE course_lecture ADD COLUMN IF NOT EXISTS assignment_data JSONB",
      "ALTER TABLE course_lecture ADD COLUMN IF NOT EXISTS video_quality VARCHAR(10) DEFAULT '1080p'",
      "ALTER TABLE course_lecture ADD COLUMN IF NOT EXISTS video_size_bytes BIGINT",
      "ALTER TABLE course_lecture ADD COLUMN IF NOT EXISTS video_duration_seconds INTEGER",
      "ALTER TABLE course_lecture ADD COLUMN IF NOT EXISTS subtitle_paths JSONB",
      "ALTER TABLE course_lecture ADD COLUMN IF NOT EXISTS transcript_path VARCHAR(500)",
      "ALTER TABLE course_lecture ADD COLUMN IF NOT EXISTS view_count INTEGER DEFAULT 0",
      "ALTER TABLE course_lecture ADD COLUMN IF NOT EXISTS average_watch_percentage DECIMAL(5,2) DEFAULT 0.00",
      "CREATE UNIQUE INDEX IF NOT EXISTS idx_course_lecture_slug_module ON course_lecture(course_module_id, slug)",
      "CREATE INDEX IF NOT EXISTS idx_course_lecture_type ON course_lecture(lecture_type)",
      "CREATE INDEX IF NOT EXISTS idx_course_lecture_preview ON course_lecture(is_preview) WHERE is_preview = TRUE",
      "CREATE INDEX IF NOT EXISTS idx_course_lecture_published ON course_lecture(is_published)",
      "CREATE INDEX IF NOT EXISTS idx_course_lecture_view_order ON course_lecture(course_module_id, view_order)",
      "CREATE INDEX IF NOT EXISTS idx_course_lecture_processing ON course_lecture(processing_status) WHERE processing_status != 'completed'",
      "COMMENT ON COLUMN course_lecture.slug IS 'URL-friendly identifier unique within the module'",
      "COMMENT ON COLUMN course_lecture.lecture_type IS 'Type of content: video, text, quiz, assignment, live, download'",
      "COMMENT ON COLUMN course_lecture.is_preview IS 'Whether lecture can be previewed without enrollment'",
      "COMMENT ON COLUMN course_lecture.content_text IS 'Text/HTML content for text-based lectures'",
      "COMMENT ON COLUMN course_lecture.external_url IS 'URL for external content (YouTube, Vimeo, etc.)'",
      "COMMENT ON COLUMN course_lecture.attachment_paths IS 'JSON array of downloadable file paths'",
      "COMMENT ON COLUMN course_lecture.quiz_data IS 'JSON structure for quiz questions and answers'",
      "COMMENT ON COLUMN course_lecture.assignment_data IS 'JSON structure for assignment requirements'",
      "COMMENT ON COLUMN course_lecture.subtitle_paths IS 'JSON object with language codes as keys and subtitle file paths as values'",
      "COMMENT ON COLUMN course_lecture.average_watch_percentage IS 'Average percentage watched by students (analytics)'"
    ],
    "inserts": [],
    "summary": "Enhanced CourseLecture to support multiple content types (video, text, quiz, assignment, live, download). Added preview functionality for marketing, subtitle/transcript support for accessibility, quiz/assignment JSON structures, and analytics tracking. Optimized with indexes for content type filtering, preview lectures, and processing status monitoring."
  },
  "StudentCourse": {
    "updates": [
      "ALTER TABLE student_course ALTER COLUMN progress_percentage TYPE DECIMAL(5,2)",
      "ALTER TABLE student_course ADD COLUMN IF NOT EXISTS enrollment_type VARCHAR(20) DEFAULT 'self' CHECK (enrollment_type IN ('self', 'admin', 'bulk', 'invite'))",
      "ALTER TABLE student_course ADD COLUMN IF NOT EXISTS enrollment_source VARCHAR(50)",
      "ALTER TABLE student_course ADD COLUMN IF NOT EXISTS payment_status VARCHAR(20) DEFAULT 'free' CHECK (payment_status IN ('free', 'pending', 'paid', 'refunded', 'failed'))",
      "ALTER TABLE student_course ADD COLUMN IF NOT EXISTS payment_amount DECIMAL(10,2)",
      "ALTER TABLE student_course ADD COLUMN IF NOT EXISTS payment_currency VARCHAR(3) DEFAULT 'USD'",
      "ALTER TABLE student_course ADD COLUMN IF NOT EXISTS payment_date TIMESTAMP",
      "ALTER TABLE student_course ADD COLUMN IF NOT EXISTS expiry_date TIMESTAMP",
      "ALTER TABLE student_course ADD COLUMN IF NOT EXISTS access_revoked BOOLEAN DEFAULT FALSE",
      "ALTER TABLE student_course ADD COLUMN IF NOT EXISTS access_revoked_at TIMESTAMP",
      "ALTER TABLE student_course ADD COLUMN IF NOT EXISTS access_revoked_reason TEXT",
      "ALTER TABLE student_course ADD COLUMN IF NOT EXISTS certificate_issued BOOLEAN DEFAULT FALSE",
      "ALTER TABLE student_course ADD COLUMN IF NOT EXISTS certificate_issued_at TIMESTAMP",
      "ALTER TABLE student_course ADD COLUMN IF NOT EXISTS certificate_number VARCHAR(50) UNIQUE",
      "ALTER TABLE student_course ADD COLUMN IF NOT EXISTS total_watch_time_seconds INTEGER DEFAULT 0",
      "ALTER TABLE student_course ADD COLUMN IF NOT EXISTS completed_lectures_count INTEGER DEFAULT 0",
      "ALTER TABLE student_course ADD COLUMN IF NOT EXISTS total_lectures_count INTEGER DEFAULT 0",
      "ALTER TABLE student_course ADD COLUMN IF NOT EXISTS current_module_id UUID",
      "ALTER TABLE student_course ADD COLUMN IF NOT EXISTS quiz_score_average DECIMAL(5,2)",
      "ALTER TABLE student_course ADD COLUMN IF NOT EXISTS assignment_score_average DECIMAL(5,2)",
      "ALTER TABLE student_course ADD COLUMN IF NOT EXISTS final_grade DECIMAL(5,2)",
      "ALTER TABLE student_course ADD COLUMN IF NOT EXISTS rating INTEGER CHECK (rating >= 1 AND rating <= 5)",
      "ALTER TABLE student_course ADD COLUMN IF NOT EXISTS review_text TEXT",
      "ALTER TABLE student_course ADD COLUMN IF NOT EXISTS review_submitted_at TIMESTAMP",
      "ALTER TABLE student_course RENAME COLUMN active TO is_active",
      "ALTER TABLE student_course ADD CONSTRAINT fk_student_course_current_module FOREIGN KEY (current_module_id) REFERENCES course_module(id) ON DELETE SET NULL",
      "CREATE INDEX IF NOT EXISTS idx_student_course_enrollment_type ON student_course(enrollment_type)",
      "CREATE INDEX IF NOT EXISTS idx_student_course_payment_status ON student_course(payment_status)",
      "CREATE INDEX IF NOT EXISTS idx_student_course_expiry ON student_course(expiry_date) WHERE expiry_date IS NOT NULL",
      "CREATE INDEX IF NOT EXISTS idx_student_course_certificate ON student_course(certificate_issued, certificate_issued_at)",
      "CREATE INDEX IF NOT EXISTS idx_student_course_completed ON student_course(completed_at) WHERE completed_at IS NOT NULL",
      "CREATE INDEX IF NOT EXISTS idx_student_course_rating ON student_course(rating) WHERE rating IS NOT NULL",
      "CREATE INDEX IF NOT EXISTS idx_student_course_student_active ON student_course(student_id, is_active)",
      "COMMENT ON COLUMN student_course.enrollment_type IS 'How student was enrolled: self, admin, bulk, invite'",
      "COMMENT ON COLUMN student_course.enrollment_source IS 'UTM source or enrollment campaign identifier'",
      "COMMENT ON COLUMN student_course.payment_status IS 'Payment status: free, pending, paid, refunded, failed'",
      "COMMENT ON COLUMN student_course.expiry_date IS 'When access to course expires (for time-limited courses)'",
      "COMMENT ON COLUMN student_course.access_revoked IS 'Whether access has been manually revoked'",
      "COMMENT ON COLUMN student_course.certificate_number IS 'Unique certificate identifier for completed courses'",
      "COMMENT ON COLUMN student_course.completed_lectures_count IS 'Count of lectures marked complete by student'",
      "COMMENT ON COLUMN student_course.total_lectures_count IS 'Total lectures in course at enrollment time'",
      "COMMENT ON COLUMN student_course.rating IS 'Student rating of course (1-5 stars)'",
      "COMMENT ON COLUMN student_course.review_text IS 'Student written review of course'"
    ],
    "inserts": [],
    "summary": "Enhanced StudentCourse with comprehensive enrollment tracking: payment processing, access control with expiry/revocation, certificate management, progress metrics (completed lectures, watch time, quiz/assignment scores), and course reviews/ratings. Added current module tracking for better UX. Optimized indexes for enrollment analytics, payment tracking, certificate lookups, and student dashboard queries."
  },
  "StudentLecture": {
    "updates": [
      "ALTER TABLE student_lecture ALTER COLUMN completion_percentage TYPE DECIMAL(5,2)",
      "ALTER TABLE student_lecture ADD COLUMN IF NOT EXISTS first_watched_at TIMESTAMP",
      "ALTER TABLE student_lecture ADD COLUMN IF NOT EXISTS watch_count INTEGER DEFAULT 0",
      "ALTER TABLE student_lecture ADD COLUMN IF NOT EXISTS total_watch_time_seconds INTEGER DEFAULT 0",
      "ALTER TABLE student_lecture ADD COLUMN IF NOT EXISTS video_bookmarks JSONB",
      "ALTER TABLE student_lecture ADD COLUMN IF NOT EXISTS notes TEXT",
      "ALTER TABLE student_lecture ADD COLUMN IF NOT EXISTS quiz_attempts INTEGER DEFAULT 0",
      "ALTER TABLE student_lecture ADD COLUMN IF NOT EXISTS quiz_best_score DECIMAL(5,2)",
      "ALTER TABLE student_lecture ADD COLUMN IF NOT EXISTS quiz_last_score DECIMAL(5,2)",
      "ALTER TABLE student_lecture ADD COLUMN IF NOT EXISTS quiz_passed BOOLEAN DEFAULT FALSE",
      "ALTER TABLE student_lecture ADD COLUMN IF NOT EXISTS assignment_submitted BOOLEAN DEFAULT FALSE",
      "ALTER TABLE student_lecture ADD COLUMN IF NOT EXISTS assignment_submitted_at TIMESTAMP",
      "ALTER TABLE student_lecture ADD COLUMN IF NOT EXISTS assignment_file_path VARCHAR(500)",
      "ALTER TABLE student_lecture ADD COLUMN IF NOT EXISTS assignment_score DECIMAL(5,2)",
      "ALTER TABLE student_lecture ADD COLUMN IF NOT EXISTS assignment_feedback TEXT",
      "ALTER TABLE student_lecture ADD COLUMN IF NOT EXISTS assignment_graded_at TIMESTAMP",
      "ALTER TABLE student_lecture ADD COLUMN IF NOT EXISTS assignment_graded_by_id UUID",
      "ALTER TABLE student_lecture ADD COLUMN IF NOT EXISTS is_flagged BOOLEAN DEFAULT FALSE",
      "ALTER TABLE student_lecture ADD COLUMN IF NOT EXISTS flagged_reason VARCHAR(100)",
      "ALTER TABLE student_lecture ADD CONSTRAINT fk_student_lecture_graded_by FOREIGN KEY (assignment_graded_by_id) REFERENCES \"user\"(id) ON DELETE SET NULL",
      "CREATE INDEX IF NOT EXISTS idx_student_lecture_first_watched ON student_lecture(first_watched_at)",
      "CREATE INDEX IF NOT EXISTS idx_student_lecture_completed ON student_lecture(completed, completed_at)",
      "CREATE INDEX IF NOT EXISTS idx_student_lecture_quiz_passed ON student_lecture(quiz_passed) WHERE quiz_passed = TRUE",
      "CREATE INDEX IF NOT EXISTS idx_student_lecture_assignment_submitted ON student_lecture(assignment_submitted, assignment_submitted_at)",
      "CREATE INDEX IF NOT EXISTS idx_student_lecture_flagged ON student_lecture(is_flagged) WHERE is_flagged = TRUE",
      "CREATE INDEX IF NOT EXISTS idx_student_lecture_student_course ON student_lecture(student_id, student_course_id)",
      "COMMENT ON COLUMN student_lecture.first_watched_at IS 'Timestamp when student first started watching this lecture'",
      "COMMENT ON COLUMN student_lecture.watch_count IS 'Number of times student has watched this lecture'",
      "COMMENT ON COLUMN student_lecture.total_watch_time_seconds IS 'Total time student has spent watching (may exceed lecture length due to rewatches)'",
      "COMMENT ON COLUMN student_lecture.video_bookmarks IS 'JSON array of bookmarked timestamps with optional notes'",
      "COMMENT ON COLUMN student_lecture.notes IS 'Student notes for this lecture'",
      "COMMENT ON COLUMN student_lecture.quiz_attempts IS 'Number of times student has attempted the quiz'",
      "COMMENT ON COLUMN student_lecture.quiz_best_score IS 'Best quiz score achieved across all attempts'",
      "COMMENT ON COLUMN student_lecture.quiz_passed IS 'Whether student has passed the quiz (based on passing threshold)'",
      "COMMENT ON COLUMN student_lecture.assignment_score IS 'Graded score for submitted assignment'",
      "COMMENT ON COLUMN student_lecture.assignment_feedback IS 'Instructor feedback on assignment submission'",
      "COMMENT ON COLUMN student_lecture.is_flagged IS 'Whether lecture is flagged for instructor review'",
      "COMMENT ON COLUMN student_lecture.flagged_reason IS 'Reason for flagging (e.g., content issue, difficulty)'"
    ],
    "inserts": [],
    "summary": "Enhanced StudentLecture with comprehensive learning analytics: video bookmarks, watch patterns, quiz attempts/scores with pass tracking, assignment submission/grading workflow, student notes, and content flagging for instructor attention. Added tracking for first watch time and total engagement time. Optimized indexes for progress monitoring, quiz/assignment management, and flagged content review."
  },
  "TreeFlow": {
    "updates": [
      "ALTER TABLE tree_flow ALTER COLUMN name TYPE VARCHAR(200)",
      "ALTER TABLE tree_flow ADD COLUMN IF NOT EXISTS description TEXT",
      "ALTER TABLE tree_flow ADD COLUMN IF NOT EXISTS category VARCHAR(50)",
      "ALTER TABLE tree_flow ADD COLUMN IF NOT EXISTS tags JSONB",
      "ALTER TABLE tree_flow ADD COLUMN IF NOT EXISTS is_template BOOLEAN DEFAULT FALSE",
      "ALTER TABLE tree_flow ADD COLUMN IF NOT EXISTS template_category VARCHAR(50)",
      "ALTER TABLE tree_flow ADD COLUMN IF NOT EXISTS is_public BOOLEAN DEFAULT FALSE",
      "ALTER TABLE tree_flow ADD COLUMN IF NOT EXISTS published_at TIMESTAMP",
      "ALTER TABLE tree_flow ADD COLUMN IF NOT EXISTS last_executed_at TIMESTAMP",
      "ALTER TABLE tree_flow ADD COLUMN IF NOT EXISTS execution_count INTEGER DEFAULT 0",
      "ALTER TABLE tree_flow ADD COLUMN IF NOT EXISTS average_completion_time_minutes INTEGER",
      "ALTER TABLE tree_flow ADD COLUMN IF NOT EXISTS success_rate DECIMAL(5,2)",
      "ALTER TABLE tree_flow ADD COLUMN IF NOT EXISTS total_steps INTEGER DEFAULT 0",
      "ALTER TABLE tree_flow ADD COLUMN IF NOT EXISTS complexity_score INTEGER",
      "ALTER TABLE tree_flow ADD COLUMN IF NOT EXISTS archived BOOLEAN DEFAULT FALSE",
      "ALTER TABLE tree_flow ADD COLUMN IF NOT EXISTS archived_at TIMESTAMP",
      "CREATE INDEX IF NOT EXISTS idx_tree_flow_slug ON tree_flow(slug)",
      "CREATE INDEX IF NOT EXISTS idx_tree_flow_category ON tree_flow(category)",
      "CREATE INDEX IF NOT EXISTS idx_tree_flow_template ON tree_flow(is_template) WHERE is_template = TRUE",
      "CREATE INDEX IF NOT EXISTS idx_tree_flow_public ON tree_flow(is_public) WHERE is_public = TRUE",
      "CREATE INDEX IF NOT EXISTS idx_tree_flow_archived ON tree_flow(archived, archived_at)",
      "CREATE INDEX IF NOT EXISTS idx_tree_flow_execution ON tree_flow(last_executed_at DESC, execution_count DESC)",
      "CREATE INDEX IF NOT EXISTS idx_tree_flow_tags ON tree_flow USING GIN(tags)",
      "COMMENT ON COLUMN tree_flow.description IS 'Detailed description of TreeFlow purpose and usage'",
      "COMMENT ON COLUMN tree_flow.category IS 'TreeFlow category for organization (e.g., sales, support, onboarding)'",
      "COMMENT ON COLUMN tree_flow.tags IS 'JSON array of tags for search and filtering'",
      "COMMENT ON COLUMN tree_flow.is_template IS 'Whether this is a template that can be cloned'",
      "COMMENT ON COLUMN tree_flow.template_category IS 'Template category if is_template is true'",
      "COMMENT ON COLUMN tree_flow.is_public IS 'Whether TreeFlow is publicly accessible/shareable'",
      "COMMENT ON COLUMN tree_flow.execution_count IS 'Number of times this TreeFlow has been executed'",
      "COMMENT ON COLUMN tree_flow.average_completion_time_minutes IS 'Average time to complete flow (calculated)'",
      "COMMENT ON COLUMN tree_flow.success_rate IS 'Percentage of successful completions (calculated)'",
      "COMMENT ON COLUMN tree_flow.total_steps IS 'Cached count of steps (updated via triggers)'",
      "COMMENT ON COLUMN tree_flow.complexity_score IS 'Calculated complexity based on steps, branches, conditions'"
    ],
    "inserts": [],
    "summary": "Enhanced TreeFlow with workflow management features: template system, public sharing, categorization with tags, execution analytics (count, completion time, success rate), complexity scoring, and archiving. Added GIN index for efficient tag searching. Optimized indexes for template browsing, public flows, execution statistics, and archived flow filtering."
  },
  "Step": {
    "updates": [
      "ALTER TABLE step ALTER COLUMN name TYPE VARCHAR(200)",
      "ALTER TABLE step ADD COLUMN IF NOT EXISTS description TEXT",
      "ALTER TABLE step ADD COLUMN IF NOT EXISTS step_type VARCHAR(20) DEFAULT 'standard' CHECK (step_type IN ('standard', 'decision', 'action', 'condition', 'loop', 'end'))",
      "ALTER TABLE step ADD COLUMN IF NOT EXISTS icon VARCHAR(50)",
      "ALTER TABLE step ADD COLUMN IF NOT EXISTS color VARCHAR(7) DEFAULT '#6C757D'",
      "ALTER TABLE step ADD COLUMN IF NOT EXISTS is_required BOOLEAN DEFAULT TRUE",
      "ALTER TABLE step ADD COLUMN IF NOT EXISTS timeout_seconds INTEGER",
      "ALTER TABLE step ADD COLUMN IF NOT EXISTS retry_count INTEGER DEFAULT 0",
      "ALTER TABLE step ADD COLUMN IF NOT EXISTS retry_delay_seconds INTEGER DEFAULT 30",
      "ALTER TABLE step ADD COLUMN IF NOT EXISTS on_error_action VARCHAR(20) DEFAULT 'stop' CHECK (on_error_action IN ('stop', 'continue', 'retry', 'skip'))",
      "ALTER TABLE step ADD COLUMN IF NOT EXISTS validation_rules JSONB",
      "ALTER TABLE step ADD COLUMN IF NOT EXISTS input_schema JSONB",
      "ALTER TABLE step ADD COLUMN IF NOT EXISTS output_schema JSONB",
      "ALTER TABLE step ADD COLUMN IF NOT EXISTS execution_count INTEGER DEFAULT 0",
      "ALTER TABLE step ADD COLUMN IF NOT EXISTS average_execution_time_seconds INTEGER",
      "ALTER TABLE step ADD COLUMN IF NOT EXISTS error_count INTEGER DEFAULT 0",
      "ALTER TABLE step ADD COLUMN IF NOT EXISTS last_executed_at TIMESTAMP",
      "ALTER TABLE step ADD COLUMN IF NOT EXISTS width INTEGER DEFAULT 200",
      "ALTER TABLE step ADD COLUMN IF NOT EXISTS height INTEGER DEFAULT 100",
      "CREATE INDEX IF NOT EXISTS idx_step_tree_flow_order ON step(tree_flow_id, view_order)",
      "CREATE INDEX IF NOT EXISTS idx_step_type ON step(step_type)",
      "CREATE INDEX IF NOT EXISTS idx_step_first ON step(first) WHERE first = TRUE",
      "CREATE INDEX IF NOT EXISTS idx_step_position ON step(tree_flow_id, position_x, position_y)",
      "CREATE INDEX IF NOT EXISTS idx_step_execution ON step(execution_count DESC, average_execution_time_seconds DESC)",
      "COMMENT ON COLUMN step.description IS 'Detailed description of step purpose and functionality'",
      "COMMENT ON COLUMN step.step_type IS 'Type of step: standard, decision, action, condition, loop, end'",
      "COMMENT ON COLUMN step.icon IS 'Icon identifier for visual representation'",
      "COMMENT ON COLUMN step.color IS 'Hex color code for visual identification (#RRGGBB format)'",
      "COMMENT ON COLUMN step.is_required IS 'Whether this step must be completed'",
      "COMMENT ON COLUMN step.timeout_seconds IS 'Maximum execution time before timeout'",
      "COMMENT ON COLUMN step.retry_count IS 'Number of retry attempts on failure'",
      "COMMENT ON COLUMN step.retry_delay_seconds IS 'Delay between retry attempts'",
      "COMMENT ON COLUMN step.on_error_action IS 'Action on error: stop, continue, retry, skip'",
      "COMMENT ON COLUMN step.validation_rules IS 'JSON schema for validating step inputs'",
      "COMMENT ON COLUMN step.input_schema IS 'JSON schema defining expected inputs'",
      "COMMENT ON COLUMN step.output_schema IS 'JSON schema defining produced outputs'",
      "COMMENT ON COLUMN step.execution_count IS 'Number of times step has been executed'",
      "COMMENT ON COLUMN step.average_execution_time_seconds IS 'Average execution time (calculated)'",
      "COMMENT ON COLUMN step.error_count IS 'Number of errors encountered in this step'",
      "COMMENT ON COLUMN step.width IS 'Canvas width in pixels for UI rendering'",
      "COMMENT ON COLUMN step.height IS 'Canvas height in pixels for UI rendering'"
    ],
    "inserts": [],
    "summary": "Enhanced Step with workflow engine capabilities: step types (decision, action, condition, loop, end), error handling with retry logic, timeout management, input/output schemas for validation, execution analytics, and visual customization (icon, color, dimensions). Optimized indexes for step ordering, type filtering, first step lookup, spatial queries, and execution monitoring."
  }
}
